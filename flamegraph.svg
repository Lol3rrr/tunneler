<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1862" onload="init(evt)" viewBox="0 0 1200 1862" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1862" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1845.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1845.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (67 samples, 0.02%)</title><rect x="0.0028%" y="1781" width="0.0232%" height="15" fill="rgb(227,0,7)"/><text x="0.2528%" y="1791.50"></text></g><g><title>entry_SYSCALL_64 (35 samples, 0.01%)</title><rect x="0.0527%" y="1749" width="0.0121%" height="15" fill="rgb(217,0,24)"/><text x="0.3027%" y="1759.50"></text></g><g><title>epoll_wait (41 samples, 0.01%)</title><rect x="0.0517%" y="1765" width="0.0142%" height="15" fill="rgb(221,193,54)"/><text x="0.3017%" y="1775.50"></text></g><g><title>[anon] (130 samples, 0.05%)</title><rect x="0.0264%" y="1781" width="0.0451%" height="15" fill="rgb(248,212,6)"/><text x="0.2764%" y="1791.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (41 samples, 0.01%)</title><rect x="0.1069%" y="1557" width="0.0142%" height="15" fill="rgb(208,68,35)"/><text x="0.3569%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 0.05%)</title><rect x="0.0919%" y="1589" width="0.0458%" height="15" fill="rgb(232,128,0)"/><text x="0.3419%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (125 samples, 0.04%)</title><rect x="0.0944%" y="1573" width="0.0434%" height="15" fill="rgb(207,160,47)"/><text x="0.3444%" y="1583.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (48 samples, 0.02%)</title><rect x="0.1211%" y="1557" width="0.0167%" height="15" fill="rgb(228,23,34)"/><text x="0.3711%" y="1567.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (29 samples, 0.01%)</title><rect x="0.1423%" y="1589" width="0.0101%" height="15" fill="rgb(218,30,26)"/><text x="0.3923%" y="1599.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac3 (384 samples, 0.13%)</title><rect x="0.0753%" y="1637" width="0.1332%" height="15" fill="rgb(220,122,19)"/><text x="0.3253%" y="1647.50"></text></g><g><title>num_bigint_dig::algorithms::mac::long (384 samples, 0.13%)</title><rect x="0.0753%" y="1621" width="0.1332%" height="15" fill="rgb(250,228,42)"/><text x="0.3253%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_digit (378 samples, 0.13%)</title><rect x="0.0774%" y="1605" width="0.1311%" height="15" fill="rgb(240,193,28)"/><text x="0.3274%" y="1615.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_with_carry (112 samples, 0.04%)</title><rect x="0.1697%" y="1589" width="0.0389%" height="15" fill="rgb(216,20,37)"/><text x="0.4197%" y="1599.50"></text></g><g><title>__libc_calloc (29 samples, 0.01%)</title><rect x="0.2172%" y="1493" width="0.0101%" height="15" fill="rgb(206,188,39)"/><text x="0.4672%" y="1503.50"></text></g><g><title>alloc::alloc::alloc_zeroed (37 samples, 0.01%)</title><rect x="0.2162%" y="1509" width="0.0128%" height="15" fill="rgb(217,207,13)"/><text x="0.4662%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (62 samples, 0.02%)</title><rect x="0.2155%" y="1541" width="0.0215%" height="15" fill="rgb(231,73,38)"/><text x="0.4655%" y="1551.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.02%)</title><rect x="0.2158%" y="1525" width="0.0212%" height="15" fill="rgb(225,20,46)"/><text x="0.4658%" y="1535.50"></text></g><g><title>core::alloc::layout::Layout::array (83 samples, 0.03%)</title><rect x="0.2384%" y="1541" width="0.0288%" height="15" fill="rgb(210,31,41)"/><text x="0.4884%" y="1551.50"></text></g><g><title>core::alloc::layout::Layout::repeat (36 samples, 0.01%)</title><rect x="0.2547%" y="1525" width="0.0125%" height="15" fill="rgb(221,200,47)"/><text x="0.5047%" y="1535.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::mul (567 samples, 0.20%)</title><rect x="0.0753%" y="1669" width="0.1967%" height="15" fill="rgb(226,26,5)"/><text x="0.3253%" y="1679.50"></text></g><g><title>num_bigint_dig::algorithms::mul::mul3 (567 samples, 0.20%)</title><rect x="0.0753%" y="1653" width="0.1967%" height="15" fill="rgb(249,33,26)"/><text x="0.3253%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::from_elem (183 samples, 0.06%)</title><rect x="0.2085%" y="1637" width="0.0635%" height="15" fill="rgb(235,183,28)"/><text x="0.4585%" y="1647.50"></text></g><g><title>alloc::vec::from_elem (168 samples, 0.06%)</title><rect x="0.2137%" y="1621" width="0.0583%" height="15" fill="rgb(221,5,38)"/><text x="0.4637%" y="1631.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (168 samples, 0.06%)</title><rect x="0.2137%" y="1605" width="0.0583%" height="15" fill="rgb(247,18,42)"/><text x="0.4637%" y="1615.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (168 samples, 0.06%)</title><rect x="0.2137%" y="1589" width="0.0583%" height="15" fill="rgb(241,131,45)"/><text x="0.4637%" y="1599.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (168 samples, 0.06%)</title><rect x="0.2137%" y="1573" width="0.0583%" height="15" fill="rgb(249,31,29)"/><text x="0.4637%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (168 samples, 0.06%)</title><rect x="0.2137%" y="1557" width="0.0583%" height="15" fill="rgb(225,111,53)"/><text x="0.4637%" y="1567.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.01%)</title><rect x="0.2783%" y="1493" width="0.0146%" height="15" fill="rgb(238,160,17)"/><text x="0.5283%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.02%)</title><rect x="0.2751%" y="1509" width="0.0226%" height="15" fill="rgb(214,148,48)"/><text x="0.5251%" y="1519.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (88 samples, 0.03%)</title><rect x="0.2720%" y="1525" width="0.0305%" height="15" fill="rgb(232,36,49)"/><text x="0.5220%" y="1535.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (89 samples, 0.03%)</title><rect x="0.2720%" y="1669" width="0.0309%" height="15" fill="rgb(209,103,24)"/><text x="0.5220%" y="1679.50"></text></g><g><title>num_bigint_dig::algorithms::shl::biguint_shl (89 samples, 0.03%)</title><rect x="0.2720%" y="1653" width="0.0309%" height="15" fill="rgb(229,88,8)"/><text x="0.5220%" y="1663.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (89 samples, 0.03%)</title><rect x="0.2720%" y="1637" width="0.0309%" height="15" fill="rgb(213,181,19)"/><text x="0.5220%" y="1647.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (89 samples, 0.03%)</title><rect x="0.2720%" y="1621" width="0.0309%" height="15" fill="rgb(254,191,54)"/><text x="0.5220%" y="1631.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::clone::Clone&gt;::clone (89 samples, 0.03%)</title><rect x="0.2720%" y="1605" width="0.0309%" height="15" fill="rgb(241,83,37)"/><text x="0.5220%" y="1615.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (89 samples, 0.03%)</title><rect x="0.2720%" y="1589" width="0.0309%" height="15" fill="rgb(233,36,39)"/><text x="0.5220%" y="1599.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (89 samples, 0.03%)</title><rect x="0.2720%" y="1573" width="0.0309%" height="15" fill="rgb(226,3,54)"/><text x="0.5220%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (89 samples, 0.03%)</title><rect x="0.2720%" y="1557" width="0.0309%" height="15" fill="rgb(245,192,40)"/><text x="0.5220%" y="1567.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (89 samples, 0.03%)</title><rect x="0.2720%" y="1541" width="0.0309%" height="15" fill="rgb(238,167,29)"/><text x="0.5220%" y="1551.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_lucas (710 samples, 0.25%)</title><rect x="0.0753%" y="1733" width="0.2463%" height="15" fill="rgb(232,182,51)"/><text x="0.3253%" y="1743.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Rem&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::rem (710 samples, 0.25%)</title><rect x="0.0753%" y="1717" width="0.2463%" height="15" fill="rgb(231,60,39)"/><text x="0.3253%" y="1727.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as num_integer::Integer&gt;::div_rem (710 samples, 0.25%)</title><rect x="0.0753%" y="1701" width="0.2463%" height="15" fill="rgb(208,69,12)"/><text x="0.3253%" y="1711.50"></text></g><g><title>num_bigint_dig::algorithms::div::div_rem (710 samples, 0.25%)</title><rect x="0.0753%" y="1685" width="0.2463%" height="15" fill="rgb(235,93,37)"/><text x="0.3253%" y="1695.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (35 samples, 0.01%)</title><rect x="0.3404%" y="1621" width="0.0121%" height="15" fill="rgb(213,116,39)"/><text x="0.5904%" y="1631.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::Rem&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::rem (247 samples, 0.09%)</title><rect x="0.3216%" y="1685" width="0.0857%" height="15" fill="rgb(222,207,29)"/><text x="0.5716%" y="1695.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Rem&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::rem (247 samples, 0.09%)</title><rect x="0.3216%" y="1669" width="0.0857%" height="15" fill="rgb(206,96,30)"/><text x="0.5716%" y="1679.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as num_integer::Integer&gt;::div_rem (247 samples, 0.09%)</title><rect x="0.3216%" y="1653" width="0.0857%" height="15" fill="rgb(218,138,4)"/><text x="0.5716%" y="1663.50"></text></g><g><title>num_bigint_dig::algorithms::div::div_rem (247 samples, 0.09%)</title><rect x="0.3216%" y="1637" width="0.0857%" height="15" fill="rgb(250,191,14)"/><text x="0.5716%" y="1647.50"></text></g><g><title>&lt;R as num_bigint_dig::bigrand::RandPrime&gt;::gen_prime (970 samples, 0.34%)</title><rect x="0.0753%" y="1765" width="0.3365%" height="15" fill="rgb(239,60,40)"/><text x="0.3253%" y="1775.50"></text></g><g><title>num_bigint_dig::prime::probably_prime (970 samples, 0.34%)</title><rect x="0.0753%" y="1749" width="0.3365%" height="15" fill="rgb(206,27,48)"/><text x="0.3253%" y="1759.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_miller_rabin (260 samples, 0.09%)</title><rect x="0.3216%" y="1733" width="0.0902%" height="15" fill="rgb(225,35,8)"/><text x="0.5716%" y="1743.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (260 samples, 0.09%)</title><rect x="0.3216%" y="1717" width="0.0902%" height="15" fill="rgb(250,213,24)"/><text x="0.5716%" y="1727.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (260 samples, 0.09%)</title><rect x="0.3216%" y="1701" width="0.0902%" height="15" fill="rgb(247,123,22)"/><text x="0.5716%" y="1711.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (44 samples, 0.02%)</title><rect x="0.4132%" y="1717" width="0.0153%" height="15" fill="rgb(231,138,38)"/><text x="0.6632%" y="1727.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (44 samples, 0.02%)</title><rect x="0.4132%" y="1701" width="0.0153%" height="15" fill="rgb(231,145,46)"/><text x="0.6632%" y="1711.50"></text></g><g><title>std::io::Write::write_fmt (44 samples, 0.02%)</title><rect x="0.4132%" y="1685" width="0.0153%" height="15" fill="rgb(251,118,11)"/><text x="0.6632%" y="1695.50"></text></g><g><title>core::fmt::write (44 samples, 0.02%)</title><rect x="0.4132%" y="1669" width="0.0153%" height="15" fill="rgb(217,147,25)"/><text x="0.6632%" y="1679.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (44 samples, 0.02%)</title><rect x="0.4132%" y="1653" width="0.0153%" height="15" fill="rgb(247,81,37)"/><text x="0.6632%" y="1663.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (44 samples, 0.02%)</title><rect x="0.4132%" y="1637" width="0.0153%" height="15" fill="rgb(209,12,38)"/><text x="0.6632%" y="1647.50"></text></g><g><title>core::fmt::write (44 samples, 0.02%)</title><rect x="0.4132%" y="1621" width="0.0153%" height="15" fill="rgb(227,1,9)"/><text x="0.6632%" y="1631.50"></text></g><g><title>core::fmt::run (44 samples, 0.02%)</title><rect x="0.4132%" y="1605" width="0.0153%" height="15" fill="rgb(248,47,43)"/><text x="0.6632%" y="1615.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (44 samples, 0.02%)</title><rect x="0.4132%" y="1589" width="0.0153%" height="15" fill="rgb(221,10,30)"/><text x="0.6632%" y="1599.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (44 samples, 0.02%)</title><rect x="0.4132%" y="1573" width="0.0153%" height="15" fill="rgb(210,229,1)"/><text x="0.6632%" y="1583.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (44 samples, 0.02%)</title><rect x="0.4132%" y="1557" width="0.0153%" height="15" fill="rgb(222,148,37)"/><text x="0.6632%" y="1567.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (44 samples, 0.02%)</title><rect x="0.4132%" y="1541" width="0.0153%" height="15" fill="rgb(234,67,33)"/><text x="0.6632%" y="1551.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (44 samples, 0.02%)</title><rect x="0.4132%" y="1525" width="0.0153%" height="15" fill="rgb(247,98,35)"/><text x="0.6632%" y="1535.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_color (44 samples, 0.02%)</title><rect x="0.4132%" y="1509" width="0.0153%" height="15" fill="rgb(247,138,52)"/><text x="0.6632%" y="1519.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (67 samples, 0.02%)</title><rect x="0.4118%" y="1765" width="0.0232%" height="15" fill="rgb(213,79,30)"/><text x="0.6618%" y="1775.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (67 samples, 0.02%)</title><rect x="0.4118%" y="1749" width="0.0232%" height="15" fill="rgb(246,177,23)"/><text x="0.6618%" y="1759.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (67 samples, 0.02%)</title><rect x="0.4118%" y="1733" width="0.0232%" height="15" fill="rgb(230,62,27)"/><text x="0.6618%" y="1743.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (33 samples, 0.01%)</title><rect x="0.4448%" y="1541" width="0.0114%" height="15" fill="rgb(216,154,8)"/><text x="0.6948%" y="1551.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (33 samples, 0.01%)</title><rect x="0.4448%" y="1525" width="0.0114%" height="15" fill="rgb(244,35,45)"/><text x="0.6948%" y="1535.50"></text></g><g><title>core::fmt::write (33 samples, 0.01%)</title><rect x="0.4448%" y="1509" width="0.0114%" height="15" fill="rgb(251,115,12)"/><text x="0.6948%" y="1519.50"></text></g><g><title>core::fmt::run (33 samples, 0.01%)</title><rect x="0.4448%" y="1493" width="0.0114%" height="15" fill="rgb(240,54,50)"/><text x="0.6948%" y="1503.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (33 samples, 0.01%)</title><rect x="0.4448%" y="1477" width="0.0114%" height="15" fill="rgb(233,84,52)"/><text x="0.6948%" y="1487.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (33 samples, 0.01%)</title><rect x="0.4448%" y="1461" width="0.0114%" height="15" fill="rgb(207,117,47)"/><text x="0.6948%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (39 samples, 0.01%)</title><rect x="0.4448%" y="1605" width="0.0135%" height="15" fill="rgb(249,43,39)"/><text x="0.6948%" y="1615.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (39 samples, 0.01%)</title><rect x="0.4448%" y="1589" width="0.0135%" height="15" fill="rgb(209,38,44)"/><text x="0.6948%" y="1599.50"></text></g><g><title>std::io::Write::write_fmt (39 samples, 0.01%)</title><rect x="0.4448%" y="1573" width="0.0135%" height="15" fill="rgb(236,212,23)"/><text x="0.6948%" y="1583.50"></text></g><g><title>core::fmt::write (39 samples, 0.01%)</title><rect x="0.4448%" y="1557" width="0.0135%" height="15" fill="rgb(242,79,21)"/><text x="0.6948%" y="1567.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (131 samples, 0.05%)</title><rect x="0.4354%" y="1749" width="0.0455%" height="15" fill="rgb(211,96,35)"/><text x="0.6854%" y="1759.50"></text></g><g><title>log::__private_api_log (131 samples, 0.05%)</title><rect x="0.4354%" y="1733" width="0.0455%" height="15" fill="rgb(253,215,40)"/><text x="0.6854%" y="1743.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (131 samples, 0.05%)</title><rect x="0.4354%" y="1717" width="0.0455%" height="15" fill="rgb(211,81,21)"/><text x="0.6854%" y="1727.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (131 samples, 0.05%)</title><rect x="0.4354%" y="1701" width="0.0455%" height="15" fill="rgb(208,190,38)"/><text x="0.6854%" y="1711.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (131 samples, 0.05%)</title><rect x="0.4354%" y="1685" width="0.0455%" height="15" fill="rgb(235,213,38)"/><text x="0.6854%" y="1695.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (131 samples, 0.05%)</title><rect x="0.4354%" y="1669" width="0.0455%" height="15" fill="rgb(237,122,38)"/><text x="0.6854%" y="1679.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (131 samples, 0.05%)</title><rect x="0.4354%" y="1653" width="0.0455%" height="15" fill="rgb(244,218,35)"/><text x="0.6854%" y="1663.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (131 samples, 0.05%)</title><rect x="0.4354%" y="1637" width="0.0455%" height="15" fill="rgb(240,68,47)"/><text x="0.6854%" y="1647.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (131 samples, 0.05%)</title><rect x="0.4354%" y="1621" width="0.0455%" height="15" fill="rgb(210,16,53)"/><text x="0.6854%" y="1631.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (59 samples, 0.02%)</title><rect x="0.4604%" y="1605" width="0.0205%" height="15" fill="rgb(235,124,12)"/><text x="0.7104%" y="1615.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (59 samples, 0.02%)</title><rect x="0.4604%" y="1589" width="0.0205%" height="15" fill="rgb(224,169,11)"/><text x="0.7104%" y="1599.50"></text></g><g><title>std::io::Write::write_fmt (59 samples, 0.02%)</title><rect x="0.4604%" y="1573" width="0.0205%" height="15" fill="rgb(250,166,2)"/><text x="0.7104%" y="1583.50"></text></g><g><title>core::fmt::write (59 samples, 0.02%)</title><rect x="0.4604%" y="1557" width="0.0205%" height="15" fill="rgb(242,216,29)"/><text x="0.7104%" y="1567.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (34 samples, 0.01%)</title><rect x="0.4691%" y="1541" width="0.0118%" height="15" fill="rgb(230,116,27)"/><text x="0.7191%" y="1551.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (34 samples, 0.01%)</title><rect x="0.4691%" y="1525" width="0.0118%" height="15" fill="rgb(228,99,48)"/><text x="0.7191%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (135 samples, 0.05%)</title><rect x="0.4354%" y="1765" width="0.0468%" height="15" fill="rgb(253,11,6)"/><text x="0.6854%" y="1775.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (32 samples, 0.01%)</title><rect x="0.4923%" y="1685" width="0.0111%" height="15" fill="rgb(247,143,39)"/><text x="0.7423%" y="1695.50"></text></g><g><title>std::io::Write::write_fmt (32 samples, 0.01%)</title><rect x="0.4923%" y="1669" width="0.0111%" height="15" fill="rgb(236,97,10)"/><text x="0.7423%" y="1679.50"></text></g><g><title>core::fmt::write (32 samples, 0.01%)</title><rect x="0.4923%" y="1653" width="0.0111%" height="15" fill="rgb(233,208,19)"/><text x="0.7423%" y="1663.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (32 samples, 0.01%)</title><rect x="0.4923%" y="1637" width="0.0111%" height="15" fill="rgb(216,164,2)"/><text x="0.7423%" y="1647.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (32 samples, 0.01%)</title><rect x="0.4923%" y="1621" width="0.0111%" height="15" fill="rgb(220,129,5)"/><text x="0.7423%" y="1631.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (32 samples, 0.01%)</title><rect x="0.4923%" y="1605" width="0.0111%" height="15" fill="rgb(242,17,10)"/><text x="0.7423%" y="1615.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (32 samples, 0.01%)</title><rect x="0.4923%" y="1589" width="0.0111%" height="15" fill="rgb(242,107,0)"/><text x="0.7423%" y="1599.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (32 samples, 0.01%)</title><rect x="0.4923%" y="1573" width="0.0111%" height="15" fill="rgb(251,28,31)"/><text x="0.7423%" y="1583.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_color (32 samples, 0.01%)</title><rect x="0.4923%" y="1557" width="0.0111%" height="15" fill="rgb(233,223,10)"/><text x="0.7423%" y="1567.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (32 samples, 0.01%)</title><rect x="0.4923%" y="1541" width="0.0111%" height="15" fill="rgb(215,21,27)"/><text x="0.7423%" y="1551.50"></text></g><g><title>std::io::Write::write_all (32 samples, 0.01%)</title><rect x="0.4923%" y="1525" width="0.0111%" height="15" fill="rgb(232,23,21)"/><text x="0.7423%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (125 samples, 0.04%)</title><rect x="0.4830%" y="1765" width="0.0434%" height="15" fill="rgb(244,5,23)"/><text x="0.7330%" y="1775.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (98 samples, 0.03%)</title><rect x="0.4923%" y="1749" width="0.0340%" height="15" fill="rgb(226,81,46)"/><text x="0.7423%" y="1759.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (98 samples, 0.03%)</title><rect x="0.4923%" y="1733" width="0.0340%" height="15" fill="rgb(247,70,30)"/><text x="0.7423%" y="1743.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (98 samples, 0.03%)</title><rect x="0.4923%" y="1717" width="0.0340%" height="15" fill="rgb(212,68,19)"/><text x="0.7423%" y="1727.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (98 samples, 0.03%)</title><rect x="0.4923%" y="1701" width="0.0340%" height="15" fill="rgb(240,187,13)"/><text x="0.7423%" y="1711.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (66 samples, 0.02%)</title><rect x="0.5034%" y="1685" width="0.0229%" height="15" fill="rgb(223,113,26)"/><text x="0.7534%" y="1695.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (66 samples, 0.02%)</title><rect x="0.5034%" y="1669" width="0.0229%" height="15" fill="rgb(206,192,2)"/><text x="0.7534%" y="1679.50"></text></g><g><title>std::io::Write::write_fmt (66 samples, 0.02%)</title><rect x="0.5034%" y="1653" width="0.0229%" height="15" fill="rgb(241,108,4)"/><text x="0.7534%" y="1663.50"></text></g><g><title>core::fmt::write (66 samples, 0.02%)</title><rect x="0.5034%" y="1637" width="0.0229%" height="15" fill="rgb(247,173,49)"/><text x="0.7534%" y="1647.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (66 samples, 0.02%)</title><rect x="0.5034%" y="1621" width="0.0229%" height="15" fill="rgb(224,114,35)"/><text x="0.7534%" y="1631.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (66 samples, 0.02%)</title><rect x="0.5034%" y="1605" width="0.0229%" height="15" fill="rgb(245,159,27)"/><text x="0.7534%" y="1615.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (66 samples, 0.02%)</title><rect x="0.5034%" y="1589" width="0.0229%" height="15" fill="rgb(245,172,44)"/><text x="0.7534%" y="1599.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (66 samples, 0.02%)</title><rect x="0.5034%" y="1573" width="0.0229%" height="15" fill="rgb(236,23,11)"/><text x="0.7534%" y="1583.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (66 samples, 0.02%)</title><rect x="0.5034%" y="1557" width="0.0229%" height="15" fill="rgb(205,117,38)"/><text x="0.7534%" y="1567.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_color (66 samples, 0.02%)</title><rect x="0.5034%" y="1541" width="0.0229%" height="15" fill="rgb(237,72,25)"/><text x="0.7534%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (45 samples, 0.02%)</title><rect x="0.5378%" y="1125" width="0.0156%" height="15" fill="rgb(244,70,9)"/><text x="0.7878%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (137 samples, 0.05%)</title><rect x="0.5378%" y="1141" width="0.0475%" height="15" fill="rgb(217,125,39)"/><text x="0.7878%" y="1151.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (92 samples, 0.03%)</title><rect x="0.5534%" y="1125" width="0.0319%" height="15" fill="rgb(235,36,10)"/><text x="0.8034%" y="1135.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (46 samples, 0.02%)</title><rect x="0.5694%" y="1109" width="0.0160%" height="15" fill="rgb(251,123,47)"/><text x="0.8194%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (152 samples, 0.05%)</title><rect x="0.5378%" y="1157" width="0.0527%" height="15" fill="rgb(221,13,13)"/><text x="0.7878%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (178 samples, 0.06%)</title><rect x="0.5378%" y="1173" width="0.0618%" height="15" fill="rgb(238,131,9)"/><text x="0.7878%" y="1183.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (249 samples, 0.09%)</title><rect x="0.5326%" y="1749" width="0.0864%" height="15" fill="rgb(211,50,8)"/><text x="0.7826%" y="1759.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (249 samples, 0.09%)</title><rect x="0.5326%" y="1733" width="0.0864%" height="15" fill="rgb(245,182,24)"/><text x="0.7826%" y="1743.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (249 samples, 0.09%)</title><rect x="0.5326%" y="1717" width="0.0864%" height="15" fill="rgb(242,14,37)"/><text x="0.7826%" y="1727.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (249 samples, 0.09%)</title><rect x="0.5326%" y="1701" width="0.0864%" height="15" fill="rgb(246,228,12)"/><text x="0.7826%" y="1711.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (249 samples, 0.09%)</title><rect x="0.5326%" y="1685" width="0.0864%" height="15" fill="rgb(213,55,15)"/><text x="0.7826%" y="1695.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (249 samples, 0.09%)</title><rect x="0.5326%" y="1669" width="0.0864%" height="15" fill="rgb(209,9,3)"/><text x="0.7826%" y="1679.50"></text></g><g><title>tokio::runtime::task::raw::poll (249 samples, 0.09%)</title><rect x="0.5326%" y="1653" width="0.0864%" height="15" fill="rgb(230,59,30)"/><text x="0.7826%" y="1663.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (249 samples, 0.09%)</title><rect x="0.5326%" y="1637" width="0.0864%" height="15" fill="rgb(209,121,21)"/><text x="0.7826%" y="1647.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (249 samples, 0.09%)</title><rect x="0.5326%" y="1621" width="0.0864%" height="15" fill="rgb(220,109,13)"/><text x="0.7826%" y="1631.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (249 samples, 0.09%)</title><rect x="0.5326%" y="1605" width="0.0864%" height="15" fill="rgb(232,18,1)"/><text x="0.7826%" y="1615.50"></text></g><g><title>std::panic::catch_unwind (249 samples, 0.09%)</title><rect x="0.5326%" y="1589" width="0.0864%" height="15" fill="rgb(215,41,42)"/><text x="0.7826%" y="1599.50"></text></g><g><title>std::panicking::try (249 samples, 0.09%)</title><rect x="0.5326%" y="1573" width="0.0864%" height="15" fill="rgb(224,123,36)"/><text x="0.7826%" y="1583.50"></text></g><g><title>__rust_try (249 samples, 0.09%)</title><rect x="0.5326%" y="1557" width="0.0864%" height="15" fill="rgb(240,125,3)"/><text x="0.7826%" y="1567.50"></text></g><g><title>std::panicking::try::do_call (249 samples, 0.09%)</title><rect x="0.5326%" y="1541" width="0.0864%" height="15" fill="rgb(205,98,50)"/><text x="0.7826%" y="1551.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (249 samples, 0.09%)</title><rect x="0.5326%" y="1525" width="0.0864%" height="15" fill="rgb(205,185,37)"/><text x="0.7826%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (249 samples, 0.09%)</title><rect x="0.5326%" y="1509" width="0.0864%" height="15" fill="rgb(238,207,15)"/><text x="0.7826%" y="1519.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (249 samples, 0.09%)</title><rect x="0.5326%" y="1493" width="0.0864%" height="15" fill="rgb(213,199,42)"/><text x="0.7826%" y="1503.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (249 samples, 0.09%)</title><rect x="0.5326%" y="1477" width="0.0864%" height="15" fill="rgb(235,201,11)"/><text x="0.7826%" y="1487.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (249 samples, 0.09%)</title><rect x="0.5326%" y="1461" width="0.0864%" height="15" fill="rgb(207,46,11)"/><text x="0.7826%" y="1471.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (249 samples, 0.09%)</title><rect x="0.5326%" y="1445" width="0.0864%" height="15" fill="rgb(241,35,35)"/><text x="0.7826%" y="1455.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (249 samples, 0.09%)</title><rect x="0.5326%" y="1429" width="0.0864%" height="15" fill="rgb(243,32,47)"/><text x="0.7826%" y="1439.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (249 samples, 0.09%)</title><rect x="0.5326%" y="1413" width="0.0864%" height="15" fill="rgb(247,202,23)"/><text x="0.7826%" y="1423.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (249 samples, 0.09%)</title><rect x="0.5326%" y="1397" width="0.0864%" height="15" fill="rgb(219,102,11)"/><text x="0.7826%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (249 samples, 0.09%)</title><rect x="0.5326%" y="1381" width="0.0864%" height="15" fill="rgb(243,110,44)"/><text x="0.7826%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (249 samples, 0.09%)</title><rect x="0.5326%" y="1365" width="0.0864%" height="15" fill="rgb(222,74,54)"/><text x="0.7826%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (234 samples, 0.08%)</title><rect x="0.5378%" y="1349" width="0.0812%" height="15" fill="rgb(216,99,12)"/><text x="0.7878%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (234 samples, 0.08%)</title><rect x="0.5378%" y="1333" width="0.0812%" height="15" fill="rgb(226,22,26)"/><text x="0.7878%" y="1343.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (234 samples, 0.08%)</title><rect x="0.5378%" y="1317" width="0.0812%" height="15" fill="rgb(217,163,10)"/><text x="0.7878%" y="1327.50"></text></g><g><title>tokio::runtime::park::Inner::park (234 samples, 0.08%)</title><rect x="0.5378%" y="1301" width="0.0812%" height="15" fill="rgb(213,25,53)"/><text x="0.7878%" y="1311.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (234 samples, 0.08%)</title><rect x="0.5378%" y="1285" width="0.0812%" height="15" fill="rgb(252,105,26)"/><text x="0.7878%" y="1295.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (234 samples, 0.08%)</title><rect x="0.5378%" y="1269" width="0.0812%" height="15" fill="rgb(220,39,43)"/><text x="0.7878%" y="1279.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (234 samples, 0.08%)</title><rect x="0.5378%" y="1253" width="0.0812%" height="15" fill="rgb(229,68,48)"/><text x="0.7878%" y="1263.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (234 samples, 0.08%)</title><rect x="0.5378%" y="1237" width="0.0812%" height="15" fill="rgb(252,8,32)"/><text x="0.7878%" y="1247.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (234 samples, 0.08%)</title><rect x="0.5378%" y="1221" width="0.0812%" height="15" fill="rgb(223,20,43)"/><text x="0.7878%" y="1231.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (234 samples, 0.08%)</title><rect x="0.5378%" y="1205" width="0.0812%" height="15" fill="rgb(229,81,49)"/><text x="0.7878%" y="1215.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (234 samples, 0.08%)</title><rect x="0.5378%" y="1189" width="0.0812%" height="15" fill="rgb(236,28,36)"/><text x="0.7878%" y="1199.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (56 samples, 0.02%)</title><rect x="0.5995%" y="1173" width="0.0194%" height="15" fill="rgb(249,185,26)"/><text x="0.8495%" y="1183.50"></text></g><g><title>core::mem::replace (56 samples, 0.02%)</title><rect x="0.5995%" y="1157" width="0.0194%" height="15" fill="rgb(249,174,33)"/><text x="0.8495%" y="1167.50"></text></g><g><title>core::mem::swap (56 samples, 0.02%)</title><rect x="0.5995%" y="1141" width="0.0194%" height="15" fill="rgb(233,201,37)"/><text x="0.8495%" y="1151.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (56 samples, 0.02%)</title><rect x="0.5995%" y="1125" width="0.0194%" height="15" fill="rgb(221,78,26)"/><text x="0.8495%" y="1135.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (54 samples, 0.02%)</title><rect x="0.6304%" y="1461" width="0.0187%" height="15" fill="rgb(250,127,30)"/><text x="0.8804%" y="1471.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (54 samples, 0.02%)</title><rect x="0.6304%" y="1445" width="0.0187%" height="15" fill="rgb(230,49,44)"/><text x="0.8804%" y="1455.50"></text></g><g><title>core::fmt::write (54 samples, 0.02%)</title><rect x="0.6304%" y="1429" width="0.0187%" height="15" fill="rgb(229,67,23)"/><text x="0.8804%" y="1439.50"></text></g><g><title>core::fmt::run (48 samples, 0.02%)</title><rect x="0.6325%" y="1413" width="0.0167%" height="15" fill="rgb(249,83,47)"/><text x="0.8825%" y="1423.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (48 samples, 0.02%)</title><rect x="0.6325%" y="1397" width="0.0167%" height="15" fill="rgb(215,43,3)"/><text x="0.8825%" y="1407.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (48 samples, 0.02%)</title><rect x="0.6325%" y="1381" width="0.0167%" height="15" fill="rgb(238,154,13)"/><text x="0.8825%" y="1391.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (61 samples, 0.02%)</title><rect x="0.6304%" y="1525" width="0.0212%" height="15" fill="rgb(219,56,2)"/><text x="0.8804%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (61 samples, 0.02%)</title><rect x="0.6304%" y="1509" width="0.0212%" height="15" fill="rgb(233,0,4)"/><text x="0.8804%" y="1519.50"></text></g><g><title>std::io::Write::write_fmt (61 samples, 0.02%)</title><rect x="0.6304%" y="1493" width="0.0212%" height="15" fill="rgb(235,30,7)"/><text x="0.8804%" y="1503.50"></text></g><g><title>core::fmt::write (61 samples, 0.02%)</title><rect x="0.6304%" y="1477" width="0.0212%" height="15" fill="rgb(250,79,13)"/><text x="0.8804%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (30 samples, 0.01%)</title><rect x="0.6516%" y="1525" width="0.0104%" height="15" fill="rgb(211,146,34)"/><text x="0.9016%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (30 samples, 0.01%)</title><rect x="0.6516%" y="1509" width="0.0104%" height="15" fill="rgb(228,22,38)"/><text x="0.9016%" y="1519.50"></text></g><g><title>std::io::Write::write_fmt (30 samples, 0.01%)</title><rect x="0.6516%" y="1493" width="0.0104%" height="15" fill="rgb(235,168,5)"/><text x="0.9016%" y="1503.50"></text></g><g><title>core::fmt::write (30 samples, 0.01%)</title><rect x="0.6516%" y="1477" width="0.0104%" height="15" fill="rgb(221,155,16)"/><text x="0.9016%" y="1487.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (137 samples, 0.05%)</title><rect x="0.6190%" y="1669" width="0.0475%" height="15" fill="rgb(215,215,53)"/><text x="0.8690%" y="1679.50"></text></g><g><title>log::__private_api_log (137 samples, 0.05%)</title><rect x="0.6190%" y="1653" width="0.0475%" height="15" fill="rgb(223,4,10)"/><text x="0.8690%" y="1663.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (137 samples, 0.05%)</title><rect x="0.6190%" y="1637" width="0.0475%" height="15" fill="rgb(234,103,6)"/><text x="0.8690%" y="1647.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (137 samples, 0.05%)</title><rect x="0.6190%" y="1621" width="0.0475%" height="15" fill="rgb(227,97,0)"/><text x="0.8690%" y="1631.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (137 samples, 0.05%)</title><rect x="0.6190%" y="1605" width="0.0475%" height="15" fill="rgb(234,150,53)"/><text x="0.8690%" y="1615.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (137 samples, 0.05%)</title><rect x="0.6190%" y="1589" width="0.0475%" height="15" fill="rgb(228,201,54)"/><text x="0.8690%" y="1599.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (137 samples, 0.05%)</title><rect x="0.6190%" y="1573" width="0.0475%" height="15" fill="rgb(222,22,37)"/><text x="0.8690%" y="1583.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (137 samples, 0.05%)</title><rect x="0.6190%" y="1557" width="0.0475%" height="15" fill="rgb(237,53,32)"/><text x="0.8690%" y="1567.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (137 samples, 0.05%)</title><rect x="0.6190%" y="1541" width="0.0475%" height="15" fill="rgb(233,25,53)"/><text x="0.8690%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (37 samples, 0.01%)</title><rect x="0.6686%" y="1269" width="0.0128%" height="15" fill="rgb(210,40,34)"/><text x="0.9186%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (185 samples, 0.06%)</title><rect x="0.6190%" y="1685" width="0.0642%" height="15" fill="rgb(241,220,44)"/><text x="0.8690%" y="1695.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (48 samples, 0.02%)</title><rect x="0.6665%" y="1669" width="0.0167%" height="15" fill="rgb(235,28,35)"/><text x="0.9165%" y="1679.50"></text></g><g><title>log::__private_api_log (48 samples, 0.02%)</title><rect x="0.6665%" y="1653" width="0.0167%" height="15" fill="rgb(210,56,17)"/><text x="0.9165%" y="1663.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (48 samples, 0.02%)</title><rect x="0.6665%" y="1637" width="0.0167%" height="15" fill="rgb(224,130,29)"/><text x="0.9165%" y="1647.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (48 samples, 0.02%)</title><rect x="0.6665%" y="1621" width="0.0167%" height="15" fill="rgb(235,212,8)"/><text x="0.9165%" y="1631.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (48 samples, 0.02%)</title><rect x="0.6665%" y="1605" width="0.0167%" height="15" fill="rgb(223,33,50)"/><text x="0.9165%" y="1615.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (48 samples, 0.02%)</title><rect x="0.6665%" y="1589" width="0.0167%" height="15" fill="rgb(219,149,13)"/><text x="0.9165%" y="1599.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (48 samples, 0.02%)</title><rect x="0.6665%" y="1573" width="0.0167%" height="15" fill="rgb(250,156,29)"/><text x="0.9165%" y="1583.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (48 samples, 0.02%)</title><rect x="0.6665%" y="1557" width="0.0167%" height="15" fill="rgb(216,193,19)"/><text x="0.9165%" y="1567.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (48 samples, 0.02%)</title><rect x="0.6665%" y="1541" width="0.0167%" height="15" fill="rgb(216,135,14)"/><text x="0.9165%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (42 samples, 0.01%)</title><rect x="0.6686%" y="1525" width="0.0146%" height="15" fill="rgb(241,47,5)"/><text x="0.9186%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (42 samples, 0.01%)</title><rect x="0.6686%" y="1509" width="0.0146%" height="15" fill="rgb(233,42,35)"/><text x="0.9186%" y="1519.50"></text></g><g><title>std::io::Write::write_fmt (42 samples, 0.01%)</title><rect x="0.6686%" y="1493" width="0.0146%" height="15" fill="rgb(231,13,6)"/><text x="0.9186%" y="1503.50"></text></g><g><title>core::fmt::write (42 samples, 0.01%)</title><rect x="0.6686%" y="1477" width="0.0146%" height="15" fill="rgb(207,181,40)"/><text x="0.9186%" y="1487.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (42 samples, 0.01%)</title><rect x="0.6686%" y="1461" width="0.0146%" height="15" fill="rgb(254,173,49)"/><text x="0.9186%" y="1471.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (42 samples, 0.01%)</title><rect x="0.6686%" y="1445" width="0.0146%" height="15" fill="rgb(221,1,38)"/><text x="0.9186%" y="1455.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (42 samples, 0.01%)</title><rect x="0.6686%" y="1429" width="0.0146%" height="15" fill="rgb(206,124,46)"/><text x="0.9186%" y="1439.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (42 samples, 0.01%)</title><rect x="0.6686%" y="1413" width="0.0146%" height="15" fill="rgb(249,21,11)"/><text x="0.9186%" y="1423.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (42 samples, 0.01%)</title><rect x="0.6686%" y="1397" width="0.0146%" height="15" fill="rgb(222,201,40)"/><text x="0.9186%" y="1407.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (42 samples, 0.01%)</title><rect x="0.6686%" y="1381" width="0.0146%" height="15" fill="rgb(235,61,29)"/><text x="0.9186%" y="1391.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (42 samples, 0.01%)</title><rect x="0.6686%" y="1365" width="0.0146%" height="15" fill="rgb(219,207,3)"/><text x="0.9186%" y="1375.50"></text></g><g><title>std::io::Write::write_all (42 samples, 0.01%)</title><rect x="0.6686%" y="1349" width="0.0146%" height="15" fill="rgb(222,56,46)"/><text x="0.9186%" y="1359.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (42 samples, 0.01%)</title><rect x="0.6686%" y="1333" width="0.0146%" height="15" fill="rgb(239,76,54)"/><text x="0.9186%" y="1343.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (42 samples, 0.01%)</title><rect x="0.6686%" y="1317" width="0.0146%" height="15" fill="rgb(231,124,27)"/><text x="0.9186%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (42 samples, 0.01%)</title><rect x="0.6686%" y="1301" width="0.0146%" height="15" fill="rgb(249,195,6)"/><text x="0.9186%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (42 samples, 0.01%)</title><rect x="0.6686%" y="1285" width="0.0146%" height="15" fill="rgb(237,174,47)"/><text x="0.9186%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.01%)</title><rect x="0.6859%" y="1189" width="0.0108%" height="15" fill="rgb(206,201,31)"/><text x="0.9359%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (31 samples, 0.01%)</title><rect x="0.6859%" y="1173" width="0.0108%" height="15" fill="rgb(231,57,52)"/><text x="0.9359%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1589" width="0.0413%" height="15" fill="rgb(248,177,22)"/><text x="0.9332%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (119 samples, 0.04%)</title><rect x="0.6832%" y="1573" width="0.0413%" height="15" fill="rgb(215,211,37)"/><text x="0.9332%" y="1583.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1557" width="0.0413%" height="15" fill="rgb(241,128,51)"/><text x="0.9332%" y="1567.50"></text></g><g><title>tokio::runtime::park::Inner::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1541" width="0.0413%" height="15" fill="rgb(227,165,31)"/><text x="0.9332%" y="1551.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (119 samples, 0.04%)</title><rect x="0.6832%" y="1525" width="0.0413%" height="15" fill="rgb(228,167,24)"/><text x="0.9332%" y="1535.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1509" width="0.0413%" height="15" fill="rgb(228,143,12)"/><text x="0.9332%" y="1519.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1493" width="0.0413%" height="15" fill="rgb(249,149,8)"/><text x="0.9332%" y="1503.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1477" width="0.0413%" height="15" fill="rgb(243,35,44)"/><text x="0.9332%" y="1487.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (119 samples, 0.04%)</title><rect x="0.6832%" y="1461" width="0.0413%" height="15" fill="rgb(246,89,9)"/><text x="0.9332%" y="1471.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1445" width="0.0413%" height="15" fill="rgb(233,213,13)"/><text x="0.9332%" y="1455.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (119 samples, 0.04%)</title><rect x="0.6832%" y="1429" width="0.0413%" height="15" fill="rgb(233,141,41)"/><text x="0.9332%" y="1439.50"></text></g><g><title>tokio::io::driver::Driver::turn (119 samples, 0.04%)</title><rect x="0.6832%" y="1413" width="0.0413%" height="15" fill="rgb(239,167,4)"/><text x="0.9332%" y="1423.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (119 samples, 0.04%)</title><rect x="0.6832%" y="1397" width="0.0413%" height="15" fill="rgb(209,217,16)"/><text x="0.9332%" y="1407.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (119 samples, 0.04%)</title><rect x="0.6832%" y="1381" width="0.0413%" height="15" fill="rgb(219,88,35)"/><text x="0.9332%" y="1391.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (119 samples, 0.04%)</title><rect x="0.6832%" y="1365" width="0.0413%" height="15" fill="rgb(220,193,23)"/><text x="0.9332%" y="1375.50"></text></g><g><title>core::task::wake::Waker::wake (111 samples, 0.04%)</title><rect x="0.6859%" y="1349" width="0.0385%" height="15" fill="rgb(230,90,52)"/><text x="0.9359%" y="1359.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (111 samples, 0.04%)</title><rect x="0.6859%" y="1333" width="0.0385%" height="15" fill="rgb(252,106,19)"/><text x="0.9359%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (111 samples, 0.04%)</title><rect x="0.6859%" y="1317" width="0.0385%" height="15" fill="rgb(206,74,20)"/><text x="0.9359%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (111 samples, 0.04%)</title><rect x="0.6859%" y="1301" width="0.0385%" height="15" fill="rgb(230,138,44)"/><text x="0.9359%" y="1311.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (111 samples, 0.04%)</title><rect x="0.6859%" y="1285" width="0.0385%" height="15" fill="rgb(235,182,43)"/><text x="0.9359%" y="1295.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (111 samples, 0.04%)</title><rect x="0.6859%" y="1269" width="0.0385%" height="15" fill="rgb(242,16,51)"/><text x="0.9359%" y="1279.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (111 samples, 0.04%)</title><rect x="0.6859%" y="1253" width="0.0385%" height="15" fill="rgb(248,9,4)"/><text x="0.9359%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (111 samples, 0.04%)</title><rect x="0.6859%" y="1237" width="0.0385%" height="15" fill="rgb(210,31,22)"/><text x="0.9359%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (111 samples, 0.04%)</title><rect x="0.6859%" y="1221" width="0.0385%" height="15" fill="rgb(239,54,39)"/><text x="0.9359%" y="1231.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (111 samples, 0.04%)</title><rect x="0.6859%" y="1205" width="0.0385%" height="15" fill="rgb(230,99,41)"/><text x="0.9359%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (80 samples, 0.03%)</title><rect x="0.6967%" y="1189" width="0.0278%" height="15" fill="rgb(253,106,12)"/><text x="0.9467%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (52 samples, 0.02%)</title><rect x="0.7064%" y="1173" width="0.0180%" height="15" fill="rgb(213,46,41)"/><text x="0.9564%" y="1183.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.01%)</title><rect x="0.7366%" y="1125" width="0.0121%" height="15" fill="rgb(215,133,35)"/><text x="0.9866%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place (58 samples, 0.02%)</title><rect x="0.7317%" y="1205" width="0.0201%" height="15" fill="rgb(213,28,5)"/><text x="0.9817%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place (58 samples, 0.02%)</title><rect x="0.7317%" y="1189" width="0.0201%" height="15" fill="rgb(215,77,49)"/><text x="0.9817%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="0.7366%" y="1173" width="0.0153%" height="15" fill="rgb(248,100,22)"/><text x="0.9866%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="0.7366%" y="1157" width="0.0153%" height="15" fill="rgb(208,67,9)"/><text x="0.9866%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="0.7366%" y="1141" width="0.0153%" height="15" fill="rgb(219,133,21)"/><text x="0.9866%" y="1151.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (71 samples, 0.02%)</title><rect x="0.7612%" y="1205" width="0.0246%" height="15" fill="rgb(246,46,29)"/><text x="1.0112%" y="1215.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (71 samples, 0.02%)</title><rect x="0.7612%" y="1189" width="0.0246%" height="15" fill="rgb(246,185,52)"/><text x="1.0112%" y="1199.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (71 samples, 0.02%)</title><rect x="0.7612%" y="1173" width="0.0246%" height="15" fill="rgb(252,136,11)"/><text x="1.0112%" y="1183.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (220 samples, 0.08%)</title><rect x="0.7244%" y="1221" width="0.0763%" height="15" fill="rgb(219,138,53)"/><text x="0.9744%" y="1231.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (35 samples, 0.01%)</title><rect x="0.7886%" y="1205" width="0.0121%" height="15" fill="rgb(211,51,23)"/><text x="1.0386%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (99 samples, 0.03%)</title><rect x="0.8008%" y="1221" width="0.0343%" height="15" fill="rgb(247,221,28)"/><text x="1.0508%" y="1231.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (99 samples, 0.03%)</title><rect x="0.8008%" y="1205" width="0.0343%" height="15" fill="rgb(251,222,45)"/><text x="1.0508%" y="1215.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (99 samples, 0.03%)</title><rect x="0.8008%" y="1189" width="0.0343%" height="15" fill="rgb(217,162,53)"/><text x="1.0508%" y="1199.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (99 samples, 0.03%)</title><rect x="0.8008%" y="1173" width="0.0343%" height="15" fill="rgb(229,93,14)"/><text x="1.0508%" y="1183.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (99 samples, 0.03%)</title><rect x="0.8008%" y="1157" width="0.0343%" height="15" fill="rgb(209,67,49)"/><text x="1.0508%" y="1167.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (99 samples, 0.03%)</title><rect x="0.8008%" y="1141" width="0.0343%" height="15" fill="rgb(213,87,29)"/><text x="1.0508%" y="1151.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (99 samples, 0.03%)</title><rect x="0.8008%" y="1125" width="0.0343%" height="15" fill="rgb(205,151,52)"/><text x="1.0508%" y="1135.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (99 samples, 0.03%)</title><rect x="0.8008%" y="1109" width="0.0343%" height="15" fill="rgb(253,215,39)"/><text x="1.0508%" y="1119.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (92 samples, 0.03%)</title><rect x="0.8032%" y="1093" width="0.0319%" height="15" fill="rgb(221,220,41)"/><text x="1.0532%" y="1103.50"></text></g><g><title>tokio::coop::poll_proceed (65 samples, 0.02%)</title><rect x="0.8126%" y="1077" width="0.0226%" height="15" fill="rgb(218,133,21)"/><text x="1.0626%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (65 samples, 0.02%)</title><rect x="0.8126%" y="1061" width="0.0226%" height="15" fill="rgb(221,193,43)"/><text x="1.0626%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (65 samples, 0.02%)</title><rect x="0.8126%" y="1045" width="0.0226%" height="15" fill="rgb(240,128,52)"/><text x="1.0626%" y="1055.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (53 samples, 0.02%)</title><rect x="0.8167%" y="1029" width="0.0184%" height="15" fill="rgb(253,114,12)"/><text x="1.0667%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (173 samples, 0.06%)</title><rect x="0.8351%" y="1205" width="0.0600%" height="15" fill="rgb(215,223,47)"/><text x="1.0851%" y="1215.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (173 samples, 0.06%)</title><rect x="0.8351%" y="1189" width="0.0600%" height="15" fill="rgb(248,225,23)"/><text x="1.0851%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (173 samples, 0.06%)</title><rect x="0.8351%" y="1173" width="0.0600%" height="15" fill="rgb(250,108,0)"/><text x="1.0851%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (173 samples, 0.06%)</title><rect x="0.8351%" y="1157" width="0.0600%" height="15" fill="rgb(228,208,7)"/><text x="1.0851%" y="1167.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (173 samples, 0.06%)</title><rect x="0.8351%" y="1141" width="0.0600%" height="15" fill="rgb(244,45,10)"/><text x="1.0851%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (173 samples, 0.06%)</title><rect x="0.8351%" y="1125" width="0.0600%" height="15" fill="rgb(207,125,25)"/><text x="1.0851%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (173 samples, 0.06%)</title><rect x="0.8351%" y="1109" width="0.0600%" height="15" fill="rgb(210,195,18)"/><text x="1.0851%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (173 samples, 0.06%)</title><rect x="0.8351%" y="1093" width="0.0600%" height="15" fill="rgb(249,80,12)"/><text x="1.0851%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (173 samples, 0.06%)</title><rect x="0.8351%" y="1077" width="0.0600%" height="15" fill="rgb(221,65,9)"/><text x="1.0851%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (173 samples, 0.06%)</title><rect x="0.8351%" y="1061" width="0.0600%" height="15" fill="rgb(235,49,36)"/><text x="1.0851%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (130 samples, 0.05%)</title><rect x="0.8500%" y="1045" width="0.0451%" height="15" fill="rgb(225,32,20)"/><text x="1.1000%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (131 samples, 0.05%)</title><rect x="0.8972%" y="1205" width="0.0455%" height="15" fill="rgb(215,141,46)"/><text x="1.1472%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place (131 samples, 0.05%)</title><rect x="0.8972%" y="1189" width="0.0455%" height="15" fill="rgb(250,160,47)"/><text x="1.1472%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place (131 samples, 0.05%)</title><rect x="0.8972%" y="1173" width="0.0455%" height="15" fill="rgb(216,222,40)"/><text x="1.1472%" y="1183.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.05%)</title><rect x="0.8972%" y="1157" width="0.0455%" height="15" fill="rgb(234,217,39)"/><text x="1.1472%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::close (131 samples, 0.05%)</title><rect x="0.8972%" y="1141" width="0.0455%" height="15" fill="rgb(207,178,40)"/><text x="1.1472%" y="1151.50"></text></g><g><title>tokio::sync::notify::Notify::notify_waiters (131 samples, 0.05%)</title><rect x="0.8972%" y="1125" width="0.0455%" height="15" fill="rgb(221,136,13)"/><text x="1.1472%" y="1135.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (131 samples, 0.05%)</title><rect x="0.8972%" y="1109" width="0.0455%" height="15" fill="rgb(249,199,10)"/><text x="1.1472%" y="1119.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (75 samples, 0.03%)</title><rect x="0.9167%" y="1093" width="0.0260%" height="15" fill="rgb(249,222,13)"/><text x="1.1667%" y="1103.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (351 samples, 0.12%)</title><rect x="0.8351%" y="1221" width="0.1218%" height="15" fill="rgb(244,185,38)"/><text x="1.0851%" y="1231.50"></text></g><g><title>log::__private_api_log (41 samples, 0.01%)</title><rect x="0.9427%" y="1205" width="0.0142%" height="15" fill="rgb(236,202,9)"/><text x="1.1927%" y="1215.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (41 samples, 0.01%)</title><rect x="0.9427%" y="1189" width="0.0142%" height="15" fill="rgb(250,229,37)"/><text x="1.1927%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (41 samples, 0.01%)</title><rect x="0.9427%" y="1173" width="0.0142%" height="15" fill="rgb(206,174,23)"/><text x="1.1927%" y="1183.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (41 samples, 0.01%)</title><rect x="0.9427%" y="1157" width="0.0142%" height="15" fill="rgb(211,33,43)"/><text x="1.1927%" y="1167.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (41 samples, 0.01%)</title><rect x="0.9427%" y="1141" width="0.0142%" height="15" fill="rgb(245,58,50)"/><text x="1.1927%" y="1151.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (41 samples, 0.01%)</title><rect x="0.9427%" y="1125" width="0.0142%" height="15" fill="rgb(244,68,36)"/><text x="1.1927%" y="1135.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (41 samples, 0.01%)</title><rect x="0.9427%" y="1109" width="0.0142%" height="15" fill="rgb(232,229,15)"/><text x="1.1927%" y="1119.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (41 samples, 0.01%)</title><rect x="0.9427%" y="1093" width="0.0142%" height="15" fill="rgb(254,30,23)"/><text x="1.1927%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.01%)</title><rect x="0.9569%" y="1205" width="0.0121%" height="15" fill="rgb(235,160,14)"/><text x="1.2069%" y="1215.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (35 samples, 0.01%)</title><rect x="0.9569%" y="1189" width="0.0121%" height="15" fill="rgb(212,155,44)"/><text x="1.2069%" y="1199.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (35 samples, 0.01%)</title><rect x="0.9569%" y="1173" width="0.0121%" height="15" fill="rgb(226,2,50)"/><text x="1.2069%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (35 samples, 0.01%)</title><rect x="0.9569%" y="1157" width="0.0121%" height="15" fill="rgb(234,177,6)"/><text x="1.2069%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (35 samples, 0.01%)</title><rect x="0.9569%" y="1141" width="0.0121%" height="15" fill="rgb(217,24,9)"/><text x="1.2069%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (35 samples, 0.01%)</title><rect x="0.9569%" y="1125" width="0.0121%" height="15" fill="rgb(220,13,46)"/><text x="1.2069%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.01%)</title><rect x="0.9569%" y="1109" width="0.0121%" height="15" fill="rgb(239,221,27)"/><text x="1.2069%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (35 samples, 0.01%)</title><rect x="0.9569%" y="1093" width="0.0121%" height="15" fill="rgb(222,198,25)"/><text x="1.2069%" y="1103.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,266 samples, 0.44%)</title><rect x="0.5326%" y="1765" width="0.4392%" height="15" fill="rgb(211,99,13)"/><text x="0.7826%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,017 samples, 0.35%)</title><rect x="0.6190%" y="1749" width="0.3529%" height="15" fill="rgb(232,111,31)"/><text x="0.8690%" y="1759.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,017 samples, 0.35%)</title><rect x="0.6190%" y="1733" width="0.3529%" height="15" fill="rgb(245,82,37)"/><text x="0.8690%" y="1743.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,017 samples, 0.35%)</title><rect x="0.6190%" y="1717" width="0.3529%" height="15" fill="rgb(227,149,46)"/><text x="0.8690%" y="1727.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,017 samples, 0.35%)</title><rect x="0.6190%" y="1701" width="0.3529%" height="15" fill="rgb(218,36,50)"/><text x="0.8690%" y="1711.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (832 samples, 0.29%)</title><rect x="0.6832%" y="1685" width="0.2887%" height="15" fill="rgb(226,80,48)"/><text x="0.9332%" y="1695.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (832 samples, 0.29%)</title><rect x="0.6832%" y="1669" width="0.2887%" height="15" fill="rgb(238,224,15)"/><text x="0.9332%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (832 samples, 0.29%)</title><rect x="0.6832%" y="1653" width="0.2887%" height="15" fill="rgb(241,136,10)"/><text x="0.9332%" y="1663.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (832 samples, 0.29%)</title><rect x="0.6832%" y="1637" width="0.2887%" height="15" fill="rgb(208,32,45)"/><text x="0.9332%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (832 samples, 0.29%)</title><rect x="0.6832%" y="1621" width="0.2887%" height="15" fill="rgb(207,135,9)"/><text x="0.9332%" y="1631.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (832 samples, 0.29%)</title><rect x="0.6832%" y="1605" width="0.2887%" height="15" fill="rgb(206,86,44)"/><text x="0.9332%" y="1615.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (713 samples, 0.25%)</title><rect x="0.7244%" y="1589" width="0.2474%" height="15" fill="rgb(245,177,15)"/><text x="0.9744%" y="1599.50"></text></g><g><title>tokio::coop::budget (713 samples, 0.25%)</title><rect x="0.7244%" y="1573" width="0.2474%" height="15" fill="rgb(206,64,50)"/><text x="0.9744%" y="1583.50"></text></g><g><title>tokio::coop::with_budget (713 samples, 0.25%)</title><rect x="0.7244%" y="1557" width="0.2474%" height="15" fill="rgb(234,36,40)"/><text x="0.9744%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (713 samples, 0.25%)</title><rect x="0.7244%" y="1541" width="0.2474%" height="15" fill="rgb(213,64,8)"/><text x="0.9744%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (713 samples, 0.25%)</title><rect x="0.7244%" y="1525" width="0.2474%" height="15" fill="rgb(210,75,36)"/><text x="0.9744%" y="1535.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (713 samples, 0.25%)</title><rect x="0.7244%" y="1509" width="0.2474%" height="15" fill="rgb(229,88,21)"/><text x="0.9744%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (713 samples, 0.25%)</title><rect x="0.7244%" y="1493" width="0.2474%" height="15" fill="rgb(252,204,47)"/><text x="0.9744%" y="1503.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (713 samples, 0.25%)</title><rect x="0.7244%" y="1477" width="0.2474%" height="15" fill="rgb(208,77,27)"/><text x="0.9744%" y="1487.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (713 samples, 0.25%)</title><rect x="0.7244%" y="1461" width="0.2474%" height="15" fill="rgb(221,76,26)"/><text x="0.9744%" y="1471.50"></text></g><g><title>tokio::runtime::task::raw::poll (713 samples, 0.25%)</title><rect x="0.7244%" y="1445" width="0.2474%" height="15" fill="rgb(225,139,18)"/><text x="0.9744%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (713 samples, 0.25%)</title><rect x="0.7244%" y="1429" width="0.2474%" height="15" fill="rgb(230,137,11)"/><text x="0.9744%" y="1439.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (713 samples, 0.25%)</title><rect x="0.7244%" y="1413" width="0.2474%" height="15" fill="rgb(212,28,1)"/><text x="0.9744%" y="1423.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (713 samples, 0.25%)</title><rect x="0.7244%" y="1397" width="0.2474%" height="15" fill="rgb(248,164,17)"/><text x="0.9744%" y="1407.50"></text></g><g><title>std::panic::catch_unwind (713 samples, 0.25%)</title><rect x="0.7244%" y="1381" width="0.2474%" height="15" fill="rgb(222,171,42)"/><text x="0.9744%" y="1391.50"></text></g><g><title>std::panicking::try (713 samples, 0.25%)</title><rect x="0.7244%" y="1365" width="0.2474%" height="15" fill="rgb(243,84,45)"/><text x="0.9744%" y="1375.50"></text></g><g><title>__rust_try (713 samples, 0.25%)</title><rect x="0.7244%" y="1349" width="0.2474%" height="15" fill="rgb(252,49,23)"/><text x="0.9744%" y="1359.50"></text></g><g><title>std::panicking::try::do_call (713 samples, 0.25%)</title><rect x="0.7244%" y="1333" width="0.2474%" height="15" fill="rgb(215,19,7)"/><text x="0.9744%" y="1343.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (713 samples, 0.25%)</title><rect x="0.7244%" y="1317" width="0.2474%" height="15" fill="rgb(238,81,41)"/><text x="0.9744%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (713 samples, 0.25%)</title><rect x="0.7244%" y="1301" width="0.2474%" height="15" fill="rgb(210,199,37)"/><text x="0.9744%" y="1311.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (713 samples, 0.25%)</title><rect x="0.7244%" y="1285" width="0.2474%" height="15" fill="rgb(244,192,49)"/><text x="0.9744%" y="1295.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (713 samples, 0.25%)</title><rect x="0.7244%" y="1269" width="0.2474%" height="15" fill="rgb(226,211,11)"/><text x="0.9744%" y="1279.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (713 samples, 0.25%)</title><rect x="0.7244%" y="1253" width="0.2474%" height="15" fill="rgb(236,162,54)"/><text x="0.9744%" y="1263.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (713 samples, 0.25%)</title><rect x="0.7244%" y="1237" width="0.2474%" height="15" fill="rgb(220,229,9)"/><text x="0.9744%" y="1247.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (43 samples, 0.01%)</title><rect x="0.9569%" y="1221" width="0.0149%" height="15" fill="rgb(250,87,22)"/><text x="1.2069%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.01%)</title><rect x="0.9725%" y="1285" width="0.0149%" height="15" fill="rgb(239,43,17)"/><text x="1.2225%" y="1295.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (43 samples, 0.01%)</title><rect x="0.9725%" y="1269" width="0.0149%" height="15" fill="rgb(231,177,25)"/><text x="1.2225%" y="1279.50"></text></g><g><title>alloc::alloc::alloc_zeroed (29 samples, 0.01%)</title><rect x="0.9989%" y="1173" width="0.0101%" height="15" fill="rgb(219,179,1)"/><text x="1.2489%" y="1183.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (37 samples, 0.01%)</title><rect x="1.0162%" y="1173" width="0.0128%" height="15" fill="rgb(238,219,53)"/><text x="1.2662%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (123 samples, 0.04%)</title><rect x="0.9874%" y="1205" width="0.0427%" height="15" fill="rgb(232,167,36)"/><text x="1.2374%" y="1215.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.04%)</title><rect x="0.9874%" y="1189" width="0.0427%" height="15" fill="rgb(244,19,51)"/><text x="1.2374%" y="1199.50"></text></g><g><title>alloc::vec::from_elem (129 samples, 0.04%)</title><rect x="0.9874%" y="1285" width="0.0448%" height="15" fill="rgb(224,6,22)"/><text x="1.2374%" y="1295.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (129 samples, 0.04%)</title><rect x="0.9874%" y="1269" width="0.0448%" height="15" fill="rgb(224,145,5)"/><text x="1.2374%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (129 samples, 0.04%)</title><rect x="0.9874%" y="1253" width="0.0448%" height="15" fill="rgb(234,130,49)"/><text x="1.2374%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (129 samples, 0.04%)</title><rect x="0.9874%" y="1237" width="0.0448%" height="15" fill="rgb(254,6,2)"/><text x="1.2374%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.04%)</title><rect x="0.9874%" y="1221" width="0.0448%" height="15" fill="rgb(208,96,46)"/><text x="1.2374%" y="1231.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (68 samples, 0.02%)</title><rect x="1.0360%" y="1269" width="0.0236%" height="15" fill="rgb(239,3,39)"/><text x="1.2860%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (41 samples, 0.01%)</title><rect x="1.0454%" y="1253" width="0.0142%" height="15" fill="rgb(233,210,1)"/><text x="1.2954%" y="1263.50"></text></g><g><title>log::__private_api_log (104 samples, 0.04%)</title><rect x="1.0360%" y="1285" width="0.0361%" height="15" fill="rgb(244,137,37)"/><text x="1.2860%" y="1295.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (62 samples, 0.02%)</title><rect x="1.0721%" y="1221" width="0.0215%" height="15" fill="rgb(240,136,2)"/><text x="1.3221%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (62 samples, 0.02%)</title><rect x="1.0721%" y="1205" width="0.0215%" height="15" fill="rgb(239,18,37)"/><text x="1.3221%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (62 samples, 0.02%)</title><rect x="1.0721%" y="1189" width="0.0215%" height="15" fill="rgb(218,185,22)"/><text x="1.3221%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (62 samples, 0.02%)</title><rect x="1.0721%" y="1173" width="0.0215%" height="15" fill="rgb(225,218,4)"/><text x="1.3221%" y="1183.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (92 samples, 0.03%)</title><rect x="1.0721%" y="1237" width="0.0319%" height="15" fill="rgb(230,182,32)"/><text x="1.3221%" y="1247.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (30 samples, 0.01%)</title><rect x="1.0936%" y="1221" width="0.0104%" height="15" fill="rgb(242,56,43)"/><text x="1.3436%" y="1231.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (30 samples, 0.01%)</title><rect x="1.0936%" y="1205" width="0.0104%" height="15" fill="rgb(233,99,24)"/><text x="1.3436%" y="1215.50"></text></g><g><title>core::hash::Hasher::write_u32 (30 samples, 0.01%)</title><rect x="1.0936%" y="1189" width="0.0104%" height="15" fill="rgb(234,209,42)"/><text x="1.3436%" y="1199.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.01%)</title><rect x="1.0936%" y="1173" width="0.0104%" height="15" fill="rgb(227,7,12)"/><text x="1.3436%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (30 samples, 0.01%)</title><rect x="1.0936%" y="1157" width="0.0104%" height="15" fill="rgb(245,203,43)"/><text x="1.3436%" y="1167.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (30 samples, 0.01%)</title><rect x="1.0936%" y="1141" width="0.0104%" height="15" fill="rgb(238,205,33)"/><text x="1.3436%" y="1151.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.01%)</title><rect x="1.1040%" y="1205" width="0.0142%" height="15" fill="rgb(231,56,7)"/><text x="1.3540%" y="1215.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (229 samples, 0.08%)</title><rect x="1.0721%" y="1285" width="0.0795%" height="15" fill="rgb(244,186,29)"/><text x="1.3221%" y="1295.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (229 samples, 0.08%)</title><rect x="1.0721%" y="1269" width="0.0795%" height="15" fill="rgb(234,111,31)"/><text x="1.3221%" y="1279.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (229 samples, 0.08%)</title><rect x="1.0721%" y="1253" width="0.0795%" height="15" fill="rgb(241,149,10)"/><text x="1.3221%" y="1263.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (137 samples, 0.05%)</title><rect x="1.1040%" y="1237" width="0.0475%" height="15" fill="rgb(249,206,44)"/><text x="1.3540%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (137 samples, 0.05%)</title><rect x="1.1040%" y="1221" width="0.0475%" height="15" fill="rgb(251,153,30)"/><text x="1.3540%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (96 samples, 0.03%)</title><rect x="1.1182%" y="1205" width="0.0333%" height="15" fill="rgb(239,152,38)"/><text x="1.3682%" y="1215.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (64 samples, 0.02%)</title><rect x="1.1515%" y="1285" width="0.0222%" height="15" fill="rgb(249,139,47)"/><text x="1.4015%" y="1295.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (64 samples, 0.02%)</title><rect x="1.1515%" y="1269" width="0.0222%" height="15" fill="rgb(244,64,35)"/><text x="1.4015%" y="1279.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (64 samples, 0.02%)</title><rect x="1.1515%" y="1253" width="0.0222%" height="15" fill="rgb(216,46,15)"/><text x="1.4015%" y="1263.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (49 samples, 0.02%)</title><rect x="1.1568%" y="1237" width="0.0170%" height="15" fill="rgb(250,74,19)"/><text x="1.4068%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (49 samples, 0.02%)</title><rect x="1.1568%" y="1221" width="0.0170%" height="15" fill="rgb(249,42,33)"/><text x="1.4068%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::remove (40 samples, 0.01%)</title><rect x="1.1599%" y="1205" width="0.0139%" height="15" fill="rgb(242,149,17)"/><text x="1.4099%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::erase_no_drop (40 samples, 0.01%)</title><rect x="1.1599%" y="1189" width="0.0139%" height="15" fill="rgb(244,29,21)"/><text x="1.4099%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (34 samples, 0.01%)</title><rect x="1.1738%" y="1221" width="0.0118%" height="15" fill="rgb(220,130,37)"/><text x="1.4238%" y="1231.50"></text></g><g><title>core::task::wake::Waker::wake (66 samples, 0.02%)</title><rect x="1.1855%" y="1205" width="0.0229%" height="15" fill="rgb(211,67,2)"/><text x="1.4355%" y="1215.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (66 samples, 0.02%)</title><rect x="1.1855%" y="1189" width="0.0229%" height="15" fill="rgb(235,68,52)"/><text x="1.4355%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (147 samples, 0.05%)</title><rect x="1.1738%" y="1253" width="0.0510%" height="15" fill="rgb(246,142,3)"/><text x="1.4238%" y="1263.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (147 samples, 0.05%)</title><rect x="1.1738%" y="1237" width="0.0510%" height="15" fill="rgb(241,25,7)"/><text x="1.4238%" y="1247.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (113 samples, 0.04%)</title><rect x="1.1855%" y="1221" width="0.0392%" height="15" fill="rgb(242,119,39)"/><text x="1.4355%" y="1231.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (47 samples, 0.02%)</title><rect x="1.2084%" y="1205" width="0.0163%" height="15" fill="rgb(241,98,45)"/><text x="1.4584%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (754 samples, 0.26%)</title><rect x="0.9725%" y="1301" width="0.2616%" height="15" fill="rgb(254,28,30)"/><text x="1.2225%" y="1311.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (174 samples, 0.06%)</title><rect x="1.1738%" y="1285" width="0.0604%" height="15" fill="rgb(241,142,54)"/><text x="1.4238%" y="1295.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (174 samples, 0.06%)</title><rect x="1.1738%" y="1269" width="0.0604%" height="15" fill="rgb(222,85,15)"/><text x="1.4238%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.02%)</title><rect x="1.2341%" y="1285" width="0.0184%" height="15" fill="rgb(210,85,47)"/><text x="1.4841%" y="1295.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (53 samples, 0.02%)</title><rect x="1.2341%" y="1269" width="0.0184%" height="15" fill="rgb(224,206,25)"/><text x="1.4841%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.02%)</title><rect x="1.2341%" y="1253" width="0.0184%" height="15" fill="rgb(243,201,19)"/><text x="1.4841%" y="1263.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (53 samples, 0.02%)</title><rect x="1.2341%" y="1237" width="0.0184%" height="15" fill="rgb(236,59,4)"/><text x="1.4841%" y="1247.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (53 samples, 0.02%)</title><rect x="1.2341%" y="1221" width="0.0184%" height="15" fill="rgb(254,179,45)"/><text x="1.4841%" y="1231.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (53 samples, 0.02%)</title><rect x="1.2341%" y="1205" width="0.0184%" height="15" fill="rgb(226,14,10)"/><text x="1.4841%" y="1215.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (53 samples, 0.02%)</title><rect x="1.2341%" y="1189" width="0.0184%" height="15" fill="rgb(244,27,41)"/><text x="1.4841%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (53 samples, 0.02%)</title><rect x="1.2341%" y="1173" width="0.0184%" height="15" fill="rgb(235,35,32)"/><text x="1.4841%" y="1183.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (53 samples, 0.02%)</title><rect x="1.2341%" y="1157" width="0.0184%" height="15" fill="rgb(218,68,31)"/><text x="1.4841%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (53 samples, 0.02%)</title><rect x="1.2341%" y="1141" width="0.0184%" height="15" fill="rgb(207,120,37)"/><text x="1.4841%" y="1151.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (51 samples, 0.02%)</title><rect x="1.2348%" y="1125" width="0.0177%" height="15" fill="rgb(227,98,0)"/><text x="1.4848%" y="1135.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (51 samples, 0.02%)</title><rect x="1.2348%" y="1109" width="0.0177%" height="15" fill="rgb(207,7,3)"/><text x="1.4848%" y="1119.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (32 samples, 0.01%)</title><rect x="1.2414%" y="1093" width="0.0111%" height="15" fill="rgb(206,98,19)"/><text x="1.4914%" y="1103.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (32 samples, 0.01%)</title><rect x="1.2414%" y="1077" width="0.0111%" height="15" fill="rgb(217,5,26)"/><text x="1.4914%" y="1087.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (32 samples, 0.01%)</title><rect x="1.2414%" y="1061" width="0.0111%" height="15" fill="rgb(235,190,38)"/><text x="1.4914%" y="1071.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="1.2414%" y="1045" width="0.0111%" height="15" fill="rgb(247,86,24)"/><text x="1.4914%" y="1055.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (30 samples, 0.01%)</title><rect x="1.2619%" y="1157" width="0.0104%" height="15" fill="rgb(205,101,16)"/><text x="1.5119%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (30 samples, 0.01%)</title><rect x="1.2723%" y="1157" width="0.0104%" height="15" fill="rgb(246,168,33)"/><text x="1.5223%" y="1167.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (940 samples, 0.33%)</title><rect x="0.9725%" y="1765" width="0.3261%" height="15" fill="rgb(231,114,1)"/><text x="1.2225%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (940 samples, 0.33%)</title><rect x="0.9725%" y="1749" width="0.3261%" height="15" fill="rgb(207,184,53)"/><text x="1.2225%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (940 samples, 0.33%)</title><rect x="0.9725%" y="1733" width="0.3261%" height="15" fill="rgb(224,95,51)"/><text x="1.2225%" y="1743.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (940 samples, 0.33%)</title><rect x="0.9725%" y="1717" width="0.3261%" height="15" fill="rgb(212,188,45)"/><text x="1.2225%" y="1727.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (940 samples, 0.33%)</title><rect x="0.9725%" y="1701" width="0.3261%" height="15" fill="rgb(223,154,38)"/><text x="1.2225%" y="1711.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (940 samples, 0.33%)</title><rect x="0.9725%" y="1685" width="0.3261%" height="15" fill="rgb(251,22,52)"/><text x="1.2225%" y="1695.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (940 samples, 0.33%)</title><rect x="0.9725%" y="1669" width="0.3261%" height="15" fill="rgb(229,209,22)"/><text x="1.2225%" y="1679.50"></text></g><g><title>tokio::coop::budget (940 samples, 0.33%)</title><rect x="0.9725%" y="1653" width="0.3261%" height="15" fill="rgb(234,138,34)"/><text x="1.2225%" y="1663.50"></text></g><g><title>tokio::coop::with_budget (940 samples, 0.33%)</title><rect x="0.9725%" y="1637" width="0.3261%" height="15" fill="rgb(212,95,11)"/><text x="1.2225%" y="1647.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (940 samples, 0.33%)</title><rect x="0.9725%" y="1621" width="0.3261%" height="15" fill="rgb(240,179,47)"/><text x="1.2225%" y="1631.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (940 samples, 0.33%)</title><rect x="0.9725%" y="1605" width="0.3261%" height="15" fill="rgb(240,163,11)"/><text x="1.2225%" y="1615.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (940 samples, 0.33%)</title><rect x="0.9725%" y="1589" width="0.3261%" height="15" fill="rgb(236,37,12)"/><text x="1.2225%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (940 samples, 0.33%)</title><rect x="0.9725%" y="1573" width="0.3261%" height="15" fill="rgb(232,164,16)"/><text x="1.2225%" y="1583.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (940 samples, 0.33%)</title><rect x="0.9725%" y="1557" width="0.3261%" height="15" fill="rgb(244,205,15)"/><text x="1.2225%" y="1567.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (940 samples, 0.33%)</title><rect x="0.9725%" y="1541" width="0.3261%" height="15" fill="rgb(223,117,47)"/><text x="1.2225%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::poll (940 samples, 0.33%)</title><rect x="0.9725%" y="1525" width="0.3261%" height="15" fill="rgb(244,107,35)"/><text x="1.2225%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (940 samples, 0.33%)</title><rect x="0.9725%" y="1509" width="0.3261%" height="15" fill="rgb(205,140,8)"/><text x="1.2225%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (940 samples, 0.33%)</title><rect x="0.9725%" y="1493" width="0.3261%" height="15" fill="rgb(228,84,46)"/><text x="1.2225%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (940 samples, 0.33%)</title><rect x="0.9725%" y="1477" width="0.3261%" height="15" fill="rgb(254,188,9)"/><text x="1.2225%" y="1487.50"></text></g><g><title>std::panic::catch_unwind (940 samples, 0.33%)</title><rect x="0.9725%" y="1461" width="0.3261%" height="15" fill="rgb(206,112,54)"/><text x="1.2225%" y="1471.50"></text></g><g><title>std::panicking::try (940 samples, 0.33%)</title><rect x="0.9725%" y="1445" width="0.3261%" height="15" fill="rgb(216,84,49)"/><text x="1.2225%" y="1455.50"></text></g><g><title>__rust_try (940 samples, 0.33%)</title><rect x="0.9725%" y="1429" width="0.3261%" height="15" fill="rgb(214,194,35)"/><text x="1.2225%" y="1439.50"></text></g><g><title>std::panicking::try::do_call (940 samples, 0.33%)</title><rect x="0.9725%" y="1413" width="0.3261%" height="15" fill="rgb(249,28,3)"/><text x="1.2225%" y="1423.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (940 samples, 0.33%)</title><rect x="0.9725%" y="1397" width="0.3261%" height="15" fill="rgb(222,56,52)"/><text x="1.2225%" y="1407.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (940 samples, 0.33%)</title><rect x="0.9725%" y="1381" width="0.3261%" height="15" fill="rgb(245,217,50)"/><text x="1.2225%" y="1391.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (940 samples, 0.33%)</title><rect x="0.9725%" y="1365" width="0.3261%" height="15" fill="rgb(213,201,24)"/><text x="1.2225%" y="1375.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (940 samples, 0.33%)</title><rect x="0.9725%" y="1349" width="0.3261%" height="15" fill="rgb(248,116,28)"/><text x="1.2225%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (940 samples, 0.33%)</title><rect x="0.9725%" y="1333" width="0.3261%" height="15" fill="rgb(219,72,43)"/><text x="1.2225%" y="1343.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (940 samples, 0.33%)</title><rect x="0.9725%" y="1317" width="0.3261%" height="15" fill="rgb(209,138,14)"/><text x="1.2225%" y="1327.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (186 samples, 0.06%)</title><rect x="1.2341%" y="1301" width="0.0645%" height="15" fill="rgb(222,18,33)"/><text x="1.4841%" y="1311.50"></text></g><g><title>log::__private_api_log (133 samples, 0.05%)</title><rect x="1.2525%" y="1285" width="0.0461%" height="15" fill="rgb(213,199,7)"/><text x="1.5025%" y="1295.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (133 samples, 0.05%)</title><rect x="1.2525%" y="1269" width="0.0461%" height="15" fill="rgb(250,110,10)"/><text x="1.5025%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (133 samples, 0.05%)</title><rect x="1.2525%" y="1253" width="0.0461%" height="15" fill="rgb(248,123,6)"/><text x="1.5025%" y="1263.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (133 samples, 0.05%)</title><rect x="1.2525%" y="1237" width="0.0461%" height="15" fill="rgb(206,91,31)"/><text x="1.5025%" y="1247.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (133 samples, 0.05%)</title><rect x="1.2525%" y="1221" width="0.0461%" height="15" fill="rgb(211,154,13)"/><text x="1.5025%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (133 samples, 0.05%)</title><rect x="1.2525%" y="1205" width="0.0461%" height="15" fill="rgb(225,148,7)"/><text x="1.5025%" y="1215.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (133 samples, 0.05%)</title><rect x="1.2525%" y="1189" width="0.0461%" height="15" fill="rgb(220,160,43)"/><text x="1.5025%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (133 samples, 0.05%)</title><rect x="1.2525%" y="1173" width="0.0461%" height="15" fill="rgb(213,52,39)"/><text x="1.5025%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (46 samples, 0.02%)</title><rect x="1.2827%" y="1157" width="0.0160%" height="15" fill="rgb(243,137,7)"/><text x="1.5327%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (46 samples, 0.02%)</title><rect x="1.2827%" y="1141" width="0.0160%" height="15" fill="rgb(230,79,13)"/><text x="1.5327%" y="1151.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (37 samples, 0.01%)</title><rect x="1.2858%" y="1125" width="0.0128%" height="15" fill="rgb(247,105,23)"/><text x="1.5358%" y="1135.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (33 samples, 0.01%)</title><rect x="1.3170%" y="1173" width="0.0114%" height="15" fill="rgb(223,179,41)"/><text x="1.5670%" y="1183.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (33 samples, 0.01%)</title><rect x="1.3170%" y="1157" width="0.0114%" height="15" fill="rgb(218,9,34)"/><text x="1.5670%" y="1167.50"></text></g><g><title>tokio::time::clock::Clock::now (57 samples, 0.02%)</title><rect x="1.3316%" y="1141" width="0.0198%" height="15" fill="rgb(222,106,8)"/><text x="1.5816%" y="1151.50"></text></g><g><title>tokio::time::clock::now (57 samples, 0.02%)</title><rect x="1.3316%" y="1125" width="0.0198%" height="15" fill="rgb(211,220,0)"/><text x="1.5816%" y="1135.50"></text></g><g><title>std::time::Instant::now (57 samples, 0.02%)</title><rect x="1.3316%" y="1109" width="0.0198%" height="15" fill="rgb(229,52,16)"/><text x="1.5816%" y="1119.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (57 samples, 0.02%)</title><rect x="1.3316%" y="1093" width="0.0198%" height="15" fill="rgb(212,155,18)"/><text x="1.5816%" y="1103.50"></text></g><g><title>std::sys::unix::time::inner::now (57 samples, 0.02%)</title><rect x="1.3316%" y="1077" width="0.0198%" height="15" fill="rgb(242,21,14)"/><text x="1.5816%" y="1087.50"></text></g><g><title>__GI___clock_gettime (57 samples, 0.02%)</title><rect x="1.3316%" y="1061" width="0.0198%" height="15" fill="rgb(222,19,48)"/><text x="1.5816%" y="1071.50"></text></g><g><title>__vdso_clock_gettime (57 samples, 0.02%)</title><rect x="1.3316%" y="1045" width="0.0198%" height="15" fill="rgb(232,45,27)"/><text x="1.5816%" y="1055.50"></text></g><g><title>[[vdso]] (57 samples, 0.02%)</title><rect x="1.3316%" y="1029" width="0.0198%" height="15" fill="rgb(249,103,42)"/><text x="1.5816%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (43 samples, 0.01%)</title><rect x="1.3594%" y="1125" width="0.0149%" height="15" fill="rgb(246,81,33)"/><text x="1.6094%" y="1135.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (33 samples, 0.01%)</title><rect x="1.3743%" y="1125" width="0.0114%" height="15" fill="rgb(252,33,42)"/><text x="1.6243%" y="1135.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (160 samples, 0.06%)</title><rect x="1.3316%" y="1173" width="0.0555%" height="15" fill="rgb(209,212,41)"/><text x="1.5816%" y="1183.50"></text></g><g><title>tokio::time::driver::ClockTime::now (160 samples, 0.06%)</title><rect x="1.3316%" y="1157" width="0.0555%" height="15" fill="rgb(207,154,6)"/><text x="1.5816%" y="1167.50"></text></g><g><title>tokio::time::driver::ClockTime::instant_to_tick (103 samples, 0.04%)</title><rect x="1.3514%" y="1141" width="0.0357%" height="15" fill="rgb(223,64,47)"/><text x="1.6014%" y="1151.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (223 samples, 0.08%)</title><rect x="1.3170%" y="1717" width="0.0774%" height="15" fill="rgb(211,161,38)"/><text x="1.5670%" y="1727.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (223 samples, 0.08%)</title><rect x="1.3170%" y="1701" width="0.0774%" height="15" fill="rgb(219,138,40)"/><text x="1.5670%" y="1711.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (223 samples, 0.08%)</title><rect x="1.3170%" y="1685" width="0.0774%" height="15" fill="rgb(241,228,46)"/><text x="1.5670%" y="1695.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (223 samples, 0.08%)</title><rect x="1.3170%" y="1669" width="0.0774%" height="15" fill="rgb(223,209,38)"/><text x="1.5670%" y="1679.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (223 samples, 0.08%)</title><rect x="1.3170%" y="1653" width="0.0774%" height="15" fill="rgb(236,164,45)"/><text x="1.5670%" y="1663.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (223 samples, 0.08%)</title><rect x="1.3170%" y="1637" width="0.0774%" height="15" fill="rgb(231,15,5)"/><text x="1.5670%" y="1647.50"></text></g><g><title>tokio::runtime::task::raw::poll (223 samples, 0.08%)</title><rect x="1.3170%" y="1621" width="0.0774%" height="15" fill="rgb(252,35,15)"/><text x="1.5670%" y="1631.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (223 samples, 0.08%)</title><rect x="1.3170%" y="1605" width="0.0774%" height="15" fill="rgb(248,181,18)"/><text x="1.5670%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (223 samples, 0.08%)</title><rect x="1.3170%" y="1589" width="0.0774%" height="15" fill="rgb(233,39,42)"/><text x="1.5670%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (223 samples, 0.08%)</title><rect x="1.3170%" y="1573" width="0.0774%" height="15" fill="rgb(238,110,33)"/><text x="1.5670%" y="1583.50"></text></g><g><title>std::panic::catch_unwind (223 samples, 0.08%)</title><rect x="1.3170%" y="1557" width="0.0774%" height="15" fill="rgb(233,195,10)"/><text x="1.5670%" y="1567.50"></text></g><g><title>std::panicking::try (223 samples, 0.08%)</title><rect x="1.3170%" y="1541" width="0.0774%" height="15" fill="rgb(254,105,3)"/><text x="1.5670%" y="1551.50"></text></g><g><title>__rust_try (223 samples, 0.08%)</title><rect x="1.3170%" y="1525" width="0.0774%" height="15" fill="rgb(221,225,9)"/><text x="1.5670%" y="1535.50"></text></g><g><title>std::panicking::try::do_call (223 samples, 0.08%)</title><rect x="1.3170%" y="1509" width="0.0774%" height="15" fill="rgb(224,227,45)"/><text x="1.5670%" y="1519.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (223 samples, 0.08%)</title><rect x="1.3170%" y="1493" width="0.0774%" height="15" fill="rgb(229,198,43)"/><text x="1.5670%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (223 samples, 0.08%)</title><rect x="1.3170%" y="1477" width="0.0774%" height="15" fill="rgb(206,209,35)"/><text x="1.5670%" y="1487.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (223 samples, 0.08%)</title><rect x="1.3170%" y="1461" width="0.0774%" height="15" fill="rgb(245,195,53)"/><text x="1.5670%" y="1471.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (223 samples, 0.08%)</title><rect x="1.3170%" y="1445" width="0.0774%" height="15" fill="rgb(240,92,26)"/><text x="1.5670%" y="1455.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (223 samples, 0.08%)</title><rect x="1.3170%" y="1429" width="0.0774%" height="15" fill="rgb(207,40,23)"/><text x="1.5670%" y="1439.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (223 samples, 0.08%)</title><rect x="1.3170%" y="1413" width="0.0774%" height="15" fill="rgb(223,111,35)"/><text x="1.5670%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (223 samples, 0.08%)</title><rect x="1.3170%" y="1397" width="0.0774%" height="15" fill="rgb(229,147,28)"/><text x="1.5670%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (223 samples, 0.08%)</title><rect x="1.3170%" y="1381" width="0.0774%" height="15" fill="rgb(211,29,28)"/><text x="1.5670%" y="1391.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (223 samples, 0.08%)</title><rect x="1.3170%" y="1365" width="0.0774%" height="15" fill="rgb(228,72,33)"/><text x="1.5670%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (223 samples, 0.08%)</title><rect x="1.3170%" y="1349" width="0.0774%" height="15" fill="rgb(205,214,31)"/><text x="1.5670%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (223 samples, 0.08%)</title><rect x="1.3170%" y="1333" width="0.0774%" height="15" fill="rgb(224,111,15)"/><text x="1.5670%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (223 samples, 0.08%)</title><rect x="1.3170%" y="1317" width="0.0774%" height="15" fill="rgb(253,21,26)"/><text x="1.5670%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (223 samples, 0.08%)</title><rect x="1.3170%" y="1301" width="0.0774%" height="15" fill="rgb(245,139,43)"/><text x="1.5670%" y="1311.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (223 samples, 0.08%)</title><rect x="1.3170%" y="1285" width="0.0774%" height="15" fill="rgb(252,170,7)"/><text x="1.5670%" y="1295.50"></text></g><g><title>tokio::runtime::park::Inner::park (223 samples, 0.08%)</title><rect x="1.3170%" y="1269" width="0.0774%" height="15" fill="rgb(231,118,14)"/><text x="1.5670%" y="1279.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (223 samples, 0.08%)</title><rect x="1.3170%" y="1253" width="0.0774%" height="15" fill="rgb(238,83,0)"/><text x="1.5670%" y="1263.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (223 samples, 0.08%)</title><rect x="1.3170%" y="1237" width="0.0774%" height="15" fill="rgb(221,39,39)"/><text x="1.5670%" y="1247.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (223 samples, 0.08%)</title><rect x="1.3170%" y="1221" width="0.0774%" height="15" fill="rgb(222,119,46)"/><text x="1.5670%" y="1231.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (223 samples, 0.08%)</title><rect x="1.3170%" y="1205" width="0.0774%" height="15" fill="rgb(222,165,49)"/><text x="1.5670%" y="1215.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (223 samples, 0.08%)</title><rect x="1.3170%" y="1189" width="0.0774%" height="15" fill="rgb(219,113,52)"/><text x="1.5670%" y="1199.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (42 samples, 0.01%)</title><rect x="1.4097%" y="1429" width="0.0146%" height="15" fill="rgb(214,7,15)"/><text x="1.6597%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (42 samples, 0.01%)</title><rect x="1.4097%" y="1413" width="0.0146%" height="15" fill="rgb(235,32,4)"/><text x="1.6597%" y="1423.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (97 samples, 0.03%)</title><rect x="1.3944%" y="1541" width="0.0337%" height="15" fill="rgb(238,90,54)"/><text x="1.6444%" y="1551.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (97 samples, 0.03%)</title><rect x="1.3944%" y="1525" width="0.0337%" height="15" fill="rgb(213,208,19)"/><text x="1.6444%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (97 samples, 0.03%)</title><rect x="1.3944%" y="1509" width="0.0337%" height="15" fill="rgb(233,156,4)"/><text x="1.6444%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (53 samples, 0.02%)</title><rect x="1.4097%" y="1493" width="0.0184%" height="15" fill="rgb(207,194,5)"/><text x="1.6597%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (53 samples, 0.02%)</title><rect x="1.4097%" y="1477" width="0.0184%" height="15" fill="rgb(206,111,30)"/><text x="1.6597%" y="1487.50"></text></g><g><title>std::io::Write::write_fmt (53 samples, 0.02%)</title><rect x="1.4097%" y="1461" width="0.0184%" height="15" fill="rgb(243,70,54)"/><text x="1.6597%" y="1471.50"></text></g><g><title>core::fmt::write (53 samples, 0.02%)</title><rect x="1.4097%" y="1445" width="0.0184%" height="15" fill="rgb(242,28,8)"/><text x="1.6597%" y="1455.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (100 samples, 0.03%)</title><rect x="1.3944%" y="1637" width="0.0347%" height="15" fill="rgb(219,106,18)"/><text x="1.6444%" y="1647.50"></text></g><g><title>log::__private_api_log (100 samples, 0.03%)</title><rect x="1.3944%" y="1621" width="0.0347%" height="15" fill="rgb(244,222,10)"/><text x="1.6444%" y="1631.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (100 samples, 0.03%)</title><rect x="1.3944%" y="1605" width="0.0347%" height="15" fill="rgb(236,179,52)"/><text x="1.6444%" y="1615.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (100 samples, 0.03%)</title><rect x="1.3944%" y="1589" width="0.0347%" height="15" fill="rgb(213,23,39)"/><text x="1.6444%" y="1599.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (100 samples, 0.03%)</title><rect x="1.3944%" y="1573" width="0.0347%" height="15" fill="rgb(238,48,10)"/><text x="1.6444%" y="1583.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (100 samples, 0.03%)</title><rect x="1.3944%" y="1557" width="0.0347%" height="15" fill="rgb(251,196,23)"/><text x="1.6444%" y="1567.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (150 samples, 0.05%)</title><rect x="1.3944%" y="1653" width="0.0520%" height="15" fill="rgb(250,152,24)"/><text x="1.6444%" y="1663.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (50 samples, 0.02%)</title><rect x="1.4291%" y="1637" width="0.0173%" height="15" fill="rgb(209,150,17)"/><text x="1.6791%" y="1647.50"></text></g><g><title>log::__private_api_log (50 samples, 0.02%)</title><rect x="1.4291%" y="1621" width="0.0173%" height="15" fill="rgb(234,202,34)"/><text x="1.6791%" y="1631.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (50 samples, 0.02%)</title><rect x="1.4291%" y="1605" width="0.0173%" height="15" fill="rgb(253,148,53)"/><text x="1.6791%" y="1615.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (50 samples, 0.02%)</title><rect x="1.4291%" y="1589" width="0.0173%" height="15" fill="rgb(218,129,16)"/><text x="1.6791%" y="1599.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (50 samples, 0.02%)</title><rect x="1.4291%" y="1573" width="0.0173%" height="15" fill="rgb(216,85,19)"/><text x="1.6791%" y="1583.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (50 samples, 0.02%)</title><rect x="1.4291%" y="1557" width="0.0173%" height="15" fill="rgb(235,228,7)"/><text x="1.6791%" y="1567.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (50 samples, 0.02%)</title><rect x="1.4291%" y="1541" width="0.0173%" height="15" fill="rgb(245,175,0)"/><text x="1.6791%" y="1551.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (50 samples, 0.02%)</title><rect x="1.4291%" y="1525" width="0.0173%" height="15" fill="rgb(208,168,36)"/><text x="1.6791%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (50 samples, 0.02%)</title><rect x="1.4291%" y="1509" width="0.0173%" height="15" fill="rgb(246,171,24)"/><text x="1.6791%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (32 samples, 0.01%)</title><rect x="1.4354%" y="1493" width="0.0111%" height="15" fill="rgb(215,142,24)"/><text x="1.6854%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (32 samples, 0.01%)</title><rect x="1.4354%" y="1477" width="0.0111%" height="15" fill="rgb(250,187,7)"/><text x="1.6854%" y="1487.50"></text></g><g><title>std::io::Write::write_fmt (32 samples, 0.01%)</title><rect x="1.4354%" y="1461" width="0.0111%" height="15" fill="rgb(228,66,33)"/><text x="1.6854%" y="1471.50"></text></g><g><title>core::fmt::write (32 samples, 0.01%)</title><rect x="1.4354%" y="1445" width="0.0111%" height="15" fill="rgb(234,215,21)"/><text x="1.6854%" y="1455.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (32 samples, 0.01%)</title><rect x="1.4354%" y="1429" width="0.0111%" height="15" fill="rgb(222,191,20)"/><text x="1.6854%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (32 samples, 0.01%)</title><rect x="1.4354%" y="1413" width="0.0111%" height="15" fill="rgb(245,79,54)"/><text x="1.6854%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (32 samples, 0.01%)</title><rect x="1.4354%" y="1397" width="0.0111%" height="15" fill="rgb(240,10,37)"/><text x="1.6854%" y="1407.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (32 samples, 0.01%)</title><rect x="1.4354%" y="1381" width="0.0111%" height="15" fill="rgb(214,192,32)"/><text x="1.6854%" y="1391.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (32 samples, 0.01%)</title><rect x="1.4354%" y="1365" width="0.0111%" height="15" fill="rgb(209,36,54)"/><text x="1.6854%" y="1375.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (32 samples, 0.01%)</title><rect x="1.4354%" y="1349" width="0.0111%" height="15" fill="rgb(220,10,11)"/><text x="1.6854%" y="1359.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (32 samples, 0.01%)</title><rect x="1.4354%" y="1333" width="0.0111%" height="15" fill="rgb(221,106,17)"/><text x="1.6854%" y="1343.50"></text></g><g><title>std::io::Write::write_all (32 samples, 0.01%)</title><rect x="1.4354%" y="1317" width="0.0111%" height="15" fill="rgb(251,142,44)"/><text x="1.6854%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1557" width="0.0163%" height="15" fill="rgb(238,13,15)"/><text x="1.6965%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (47 samples, 0.02%)</title><rect x="1.4465%" y="1541" width="0.0163%" height="15" fill="rgb(208,107,27)"/><text x="1.6965%" y="1551.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1525" width="0.0163%" height="15" fill="rgb(205,136,37)"/><text x="1.6965%" y="1535.50"></text></g><g><title>tokio::runtime::park::Inner::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1509" width="0.0163%" height="15" fill="rgb(250,205,27)"/><text x="1.6965%" y="1519.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (47 samples, 0.02%)</title><rect x="1.4465%" y="1493" width="0.0163%" height="15" fill="rgb(210,80,43)"/><text x="1.6965%" y="1503.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1477" width="0.0163%" height="15" fill="rgb(247,160,36)"/><text x="1.6965%" y="1487.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1461" width="0.0163%" height="15" fill="rgb(234,13,49)"/><text x="1.6965%" y="1471.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1445" width="0.0163%" height="15" fill="rgb(234,122,0)"/><text x="1.6965%" y="1455.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (47 samples, 0.02%)</title><rect x="1.4465%" y="1429" width="0.0163%" height="15" fill="rgb(207,146,38)"/><text x="1.6965%" y="1439.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1413" width="0.0163%" height="15" fill="rgb(207,177,25)"/><text x="1.6965%" y="1423.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (47 samples, 0.02%)</title><rect x="1.4465%" y="1397" width="0.0163%" height="15" fill="rgb(211,178,42)"/><text x="1.6965%" y="1407.50"></text></g><g><title>tokio::io::driver::Driver::turn (47 samples, 0.02%)</title><rect x="1.4465%" y="1381" width="0.0163%" height="15" fill="rgb(230,69,54)"/><text x="1.6965%" y="1391.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (47 samples, 0.02%)</title><rect x="1.4465%" y="1365" width="0.0163%" height="15" fill="rgb(214,135,41)"/><text x="1.6965%" y="1375.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (47 samples, 0.02%)</title><rect x="1.4465%" y="1349" width="0.0163%" height="15" fill="rgb(237,67,25)"/><text x="1.6965%" y="1359.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (47 samples, 0.02%)</title><rect x="1.4465%" y="1333" width="0.0163%" height="15" fill="rgb(222,189,50)"/><text x="1.6965%" y="1343.50"></text></g><g><title>core::task::wake::Waker::wake (47 samples, 0.02%)</title><rect x="1.4465%" y="1317" width="0.0163%" height="15" fill="rgb(245,148,34)"/><text x="1.6965%" y="1327.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (47 samples, 0.02%)</title><rect x="1.4465%" y="1301" width="0.0163%" height="15" fill="rgb(222,29,6)"/><text x="1.6965%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (47 samples, 0.02%)</title><rect x="1.4465%" y="1285" width="0.0163%" height="15" fill="rgb(221,189,43)"/><text x="1.6965%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (47 samples, 0.02%)</title><rect x="1.4465%" y="1269" width="0.0163%" height="15" fill="rgb(207,36,27)"/><text x="1.6965%" y="1279.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (47 samples, 0.02%)</title><rect x="1.4465%" y="1253" width="0.0163%" height="15" fill="rgb(217,90,24)"/><text x="1.6965%" y="1263.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (47 samples, 0.02%)</title><rect x="1.4465%" y="1237" width="0.0163%" height="15" fill="rgb(224,66,35)"/><text x="1.6965%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (47 samples, 0.02%)</title><rect x="1.4465%" y="1221" width="0.0163%" height="15" fill="rgb(221,13,50)"/><text x="1.6965%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (47 samples, 0.02%)</title><rect x="1.4465%" y="1205" width="0.0163%" height="15" fill="rgb(236,68,49)"/><text x="1.6965%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (47 samples, 0.02%)</title><rect x="1.4465%" y="1189" width="0.0163%" height="15" fill="rgb(229,146,28)"/><text x="1.6965%" y="1199.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (47 samples, 0.02%)</title><rect x="1.4465%" y="1173" width="0.0163%" height="15" fill="rgb(225,31,38)"/><text x="1.6965%" y="1183.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (60 samples, 0.02%)</title><rect x="1.4628%" y="1029" width="0.0208%" height="15" fill="rgb(250,208,3)"/><text x="1.7128%" y="1039.50"></text></g><g><title>tokio::coop::Budget::is_unconstrained (41 samples, 0.01%)</title><rect x="1.4694%" y="1013" width="0.0142%" height="15" fill="rgb(246,54,23)"/><text x="1.7194%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (33 samples, 0.01%)</title><rect x="1.4721%" y="997" width="0.0114%" height="15" fill="rgb(243,76,11)"/><text x="1.7221%" y="1007.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (111 samples, 0.04%)</title><rect x="1.4628%" y="1061" width="0.0385%" height="15" fill="rgb(245,21,50)"/><text x="1.7128%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (111 samples, 0.04%)</title><rect x="1.4628%" y="1045" width="0.0385%" height="15" fill="rgb(228,9,43)"/><text x="1.7128%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (51 samples, 0.02%)</title><rect x="1.4836%" y="1029" width="0.0177%" height="15" fill="rgb(208,100,47)"/><text x="1.7336%" y="1039.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.02%)</title><rect x="1.4836%" y="1013" width="0.0177%" height="15" fill="rgb(232,26,8)"/><text x="1.7336%" y="1023.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (30 samples, 0.01%)</title><rect x="1.4909%" y="997" width="0.0104%" height="15" fill="rgb(216,166,38)"/><text x="1.7409%" y="1007.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (117 samples, 0.04%)</title><rect x="1.4628%" y="1189" width="0.0406%" height="15" fill="rgb(251,202,51)"/><text x="1.7128%" y="1199.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (117 samples, 0.04%)</title><rect x="1.4628%" y="1173" width="0.0406%" height="15" fill="rgb(254,216,34)"/><text x="1.7128%" y="1183.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (117 samples, 0.04%)</title><rect x="1.4628%" y="1157" width="0.0406%" height="15" fill="rgb(251,32,27)"/><text x="1.7128%" y="1167.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (117 samples, 0.04%)</title><rect x="1.4628%" y="1141" width="0.0406%" height="15" fill="rgb(208,127,28)"/><text x="1.7128%" y="1151.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (117 samples, 0.04%)</title><rect x="1.4628%" y="1125" width="0.0406%" height="15" fill="rgb(224,137,22)"/><text x="1.7128%" y="1135.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (117 samples, 0.04%)</title><rect x="1.4628%" y="1109" width="0.0406%" height="15" fill="rgb(254,70,32)"/><text x="1.7128%" y="1119.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (117 samples, 0.04%)</title><rect x="1.4628%" y="1093" width="0.0406%" height="15" fill="rgb(229,75,37)"/><text x="1.7128%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (117 samples, 0.04%)</title><rect x="1.4628%" y="1077" width="0.0406%" height="15" fill="rgb(252,64,23)"/><text x="1.7128%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44 samples, 0.02%)</title><rect x="1.5034%" y="1173" width="0.0153%" height="15" fill="rgb(232,162,48)"/><text x="1.7534%" y="1183.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (44 samples, 0.02%)</title><rect x="1.5034%" y="1157" width="0.0153%" height="15" fill="rgb(246,160,12)"/><text x="1.7534%" y="1167.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44 samples, 0.02%)</title><rect x="1.5034%" y="1141" width="0.0153%" height="15" fill="rgb(247,166,0)"/><text x="1.7534%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (44 samples, 0.02%)</title><rect x="1.5034%" y="1125" width="0.0153%" height="15" fill="rgb(249,219,21)"/><text x="1.7534%" y="1135.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (44 samples, 0.02%)</title><rect x="1.5034%" y="1109" width="0.0153%" height="15" fill="rgb(205,209,3)"/><text x="1.7534%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (44 samples, 0.02%)</title><rect x="1.5034%" y="1093" width="0.0153%" height="15" fill="rgb(243,44,1)"/><text x="1.7534%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (44 samples, 0.02%)</title><rect x="1.5034%" y="1077" width="0.0153%" height="15" fill="rgb(206,159,16)"/><text x="1.7534%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (44 samples, 0.02%)</title><rect x="1.5034%" y="1061" width="0.0153%" height="15" fill="rgb(244,77,30)"/><text x="1.7534%" y="1071.50"></text></g><g><title>tokio::coop::poll_proceed (41 samples, 0.01%)</title><rect x="1.5044%" y="1045" width="0.0142%" height="15" fill="rgb(218,69,12)"/><text x="1.7544%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (41 samples, 0.01%)</title><rect x="1.5044%" y="1029" width="0.0142%" height="15" fill="rgb(212,87,7)"/><text x="1.7544%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (41 samples, 0.01%)</title><rect x="1.5044%" y="1013" width="0.0142%" height="15" fill="rgb(245,114,25)"/><text x="1.7544%" y="1023.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (41 samples, 0.01%)</title><rect x="1.5044%" y="997" width="0.0142%" height="15" fill="rgb(210,61,42)"/><text x="1.7544%" y="1007.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (41 samples, 0.01%)</title><rect x="1.5044%" y="981" width="0.0142%" height="15" fill="rgb(211,52,33)"/><text x="1.7544%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (41 samples, 0.01%)</title><rect x="1.5044%" y="965" width="0.0142%" height="15" fill="rgb(234,58,33)"/><text x="1.7544%" y="975.50"></text></g><g><title>core::mem::replace (41 samples, 0.01%)</title><rect x="1.5044%" y="949" width="0.0142%" height="15" fill="rgb(220,115,36)"/><text x="1.7544%" y="959.50"></text></g><g><title>core::mem::swap (41 samples, 0.01%)</title><rect x="1.5044%" y="933" width="0.0142%" height="15" fill="rgb(243,153,54)"/><text x="1.7544%" y="943.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (41 samples, 0.01%)</title><rect x="1.5044%" y="917" width="0.0142%" height="15" fill="rgb(251,47,18)"/><text x="1.7544%" y="927.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (32 samples, 0.01%)</title><rect x="1.5186%" y="1173" width="0.0111%" height="15" fill="rgb(242,102,42)"/><text x="1.7686%" y="1183.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (32 samples, 0.01%)</title><rect x="1.5186%" y="1157" width="0.0111%" height="15" fill="rgb(234,31,38)"/><text x="1.7686%" y="1167.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (32 samples, 0.01%)</title><rect x="1.5186%" y="1141" width="0.0111%" height="15" fill="rgb(221,117,51)"/><text x="1.7686%" y="1151.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (32 samples, 0.01%)</title><rect x="1.5186%" y="1125" width="0.0111%" height="15" fill="rgb(212,20,18)"/><text x="1.7686%" y="1135.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (32 samples, 0.01%)</title><rect x="1.5186%" y="1109" width="0.0111%" height="15" fill="rgb(245,133,36)"/><text x="1.7686%" y="1119.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (32 samples, 0.01%)</title><rect x="1.5186%" y="1093" width="0.0111%" height="15" fill="rgb(212,6,19)"/><text x="1.7686%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (32 samples, 0.01%)</title><rect x="1.5186%" y="1077" width="0.0111%" height="15" fill="rgb(218,1,36)"/><text x="1.7686%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (32 samples, 0.01%)</title><rect x="1.5186%" y="1061" width="0.0111%" height="15" fill="rgb(246,84,54)"/><text x="1.7686%" y="1071.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (99 samples, 0.03%)</title><rect x="1.5034%" y="1189" width="0.0343%" height="15" fill="rgb(242,110,6)"/><text x="1.7534%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (76 samples, 0.03%)</title><rect x="1.5377%" y="1029" width="0.0264%" height="15" fill="rgb(214,47,5)"/><text x="1.7877%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (81 samples, 0.03%)</title><rect x="1.5377%" y="1045" width="0.0281%" height="15" fill="rgb(218,159,25)"/><text x="1.7877%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (88 samples, 0.03%)</title><rect x="1.5377%" y="1173" width="0.0305%" height="15" fill="rgb(215,211,28)"/><text x="1.7877%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (88 samples, 0.03%)</title><rect x="1.5377%" y="1157" width="0.0305%" height="15" fill="rgb(238,59,32)"/><text x="1.7877%" y="1167.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (88 samples, 0.03%)</title><rect x="1.5377%" y="1141" width="0.0305%" height="15" fill="rgb(226,82,3)"/><text x="1.7877%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (88 samples, 0.03%)</title><rect x="1.5377%" y="1125" width="0.0305%" height="15" fill="rgb(240,164,32)"/><text x="1.7877%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (88 samples, 0.03%)</title><rect x="1.5377%" y="1109" width="0.0305%" height="15" fill="rgb(232,46,7)"/><text x="1.7877%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (88 samples, 0.03%)</title><rect x="1.5377%" y="1093" width="0.0305%" height="15" fill="rgb(229,129,53)"/><text x="1.7877%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (88 samples, 0.03%)</title><rect x="1.5377%" y="1077" width="0.0305%" height="15" fill="rgb(234,188,29)"/><text x="1.7877%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (88 samples, 0.03%)</title><rect x="1.5377%" y="1061" width="0.0305%" height="15" fill="rgb(246,141,4)"/><text x="1.7877%" y="1071.50"></text></g><g><title>__rust_try (742 samples, 0.26%)</title><rect x="1.3170%" y="1765" width="0.2574%" height="15" fill="rgb(229,23,39)"/><text x="1.5670%" y="1775.50"></text></g><g><title>std::panicking::try::do_call (742 samples, 0.26%)</title><rect x="1.3170%" y="1749" width="0.2574%" height="15" fill="rgb(206,12,3)"/><text x="1.5670%" y="1759.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (742 samples, 0.26%)</title><rect x="1.3170%" y="1733" width="0.2574%" height="15" fill="rgb(252,226,20)"/><text x="1.5670%" y="1743.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (519 samples, 0.18%)</title><rect x="1.3944%" y="1717" width="0.1801%" height="15" fill="rgb(216,123,35)"/><text x="1.6444%" y="1727.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (519 samples, 0.18%)</title><rect x="1.3944%" y="1701" width="0.1801%" height="15" fill="rgb(212,68,40)"/><text x="1.6444%" y="1711.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (519 samples, 0.18%)</title><rect x="1.3944%" y="1685" width="0.1801%" height="15" fill="rgb(254,125,32)"/><text x="1.6444%" y="1695.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (519 samples, 0.18%)</title><rect x="1.3944%" y="1669" width="0.1801%" height="15" fill="rgb(253,97,22)"/><text x="1.6444%" y="1679.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (369 samples, 0.13%)</title><rect x="1.4465%" y="1653" width="0.1280%" height="15" fill="rgb(241,101,14)"/><text x="1.6965%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (369 samples, 0.13%)</title><rect x="1.4465%" y="1637" width="0.1280%" height="15" fill="rgb(238,103,29)"/><text x="1.6965%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (369 samples, 0.13%)</title><rect x="1.4465%" y="1621" width="0.1280%" height="15" fill="rgb(233,195,47)"/><text x="1.6965%" y="1631.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (369 samples, 0.13%)</title><rect x="1.4465%" y="1605" width="0.1280%" height="15" fill="rgb(246,218,30)"/><text x="1.6965%" y="1615.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (369 samples, 0.13%)</title><rect x="1.4465%" y="1589" width="0.1280%" height="15" fill="rgb(219,145,47)"/><text x="1.6965%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (369 samples, 0.13%)</title><rect x="1.4465%" y="1573" width="0.1280%" height="15" fill="rgb(243,12,26)"/><text x="1.6965%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (322 samples, 0.11%)</title><rect x="1.4628%" y="1557" width="0.1117%" height="15" fill="rgb(214,87,16)"/><text x="1.7128%" y="1567.50"></text></g><g><title>tokio::coop::budget (322 samples, 0.11%)</title><rect x="1.4628%" y="1541" width="0.1117%" height="15" fill="rgb(208,99,42)"/><text x="1.7128%" y="1551.50"></text></g><g><title>tokio::coop::with_budget (322 samples, 0.11%)</title><rect x="1.4628%" y="1525" width="0.1117%" height="15" fill="rgb(253,99,2)"/><text x="1.7128%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (322 samples, 0.11%)</title><rect x="1.4628%" y="1509" width="0.1117%" height="15" fill="rgb(220,168,23)"/><text x="1.7128%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (322 samples, 0.11%)</title><rect x="1.4628%" y="1493" width="0.1117%" height="15" fill="rgb(242,38,24)"/><text x="1.7128%" y="1503.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (322 samples, 0.11%)</title><rect x="1.4628%" y="1477" width="0.1117%" height="15" fill="rgb(225,182,9)"/><text x="1.7128%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (322 samples, 0.11%)</title><rect x="1.4628%" y="1461" width="0.1117%" height="15" fill="rgb(243,178,37)"/><text x="1.7128%" y="1471.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (322 samples, 0.11%)</title><rect x="1.4628%" y="1445" width="0.1117%" height="15" fill="rgb(232,139,19)"/><text x="1.7128%" y="1455.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (322 samples, 0.11%)</title><rect x="1.4628%" y="1429" width="0.1117%" height="15" fill="rgb(225,201,24)"/><text x="1.7128%" y="1439.50"></text></g><g><title>tokio::runtime::task::raw::poll (322 samples, 0.11%)</title><rect x="1.4628%" y="1413" width="0.1117%" height="15" fill="rgb(221,47,46)"/><text x="1.7128%" y="1423.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (322 samples, 0.11%)</title><rect x="1.4628%" y="1397" width="0.1117%" height="15" fill="rgb(249,23,13)"/><text x="1.7128%" y="1407.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (322 samples, 0.11%)</title><rect x="1.4628%" y="1381" width="0.1117%" height="15" fill="rgb(219,9,5)"/><text x="1.7128%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (322 samples, 0.11%)</title><rect x="1.4628%" y="1365" width="0.1117%" height="15" fill="rgb(254,171,16)"/><text x="1.7128%" y="1375.50"></text></g><g><title>std::panic::catch_unwind (322 samples, 0.11%)</title><rect x="1.4628%" y="1349" width="0.1117%" height="15" fill="rgb(230,171,20)"/><text x="1.7128%" y="1359.50"></text></g><g><title>std::panicking::try (322 samples, 0.11%)</title><rect x="1.4628%" y="1333" width="0.1117%" height="15" fill="rgb(210,71,41)"/><text x="1.7128%" y="1343.50"></text></g><g><title>__rust_try (322 samples, 0.11%)</title><rect x="1.4628%" y="1317" width="0.1117%" height="15" fill="rgb(206,173,20)"/><text x="1.7128%" y="1327.50"></text></g><g><title>std::panicking::try::do_call (322 samples, 0.11%)</title><rect x="1.4628%" y="1301" width="0.1117%" height="15" fill="rgb(233,88,34)"/><text x="1.7128%" y="1311.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (322 samples, 0.11%)</title><rect x="1.4628%" y="1285" width="0.1117%" height="15" fill="rgb(223,209,46)"/><text x="1.7128%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (322 samples, 0.11%)</title><rect x="1.4628%" y="1269" width="0.1117%" height="15" fill="rgb(250,43,18)"/><text x="1.7128%" y="1279.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (322 samples, 0.11%)</title><rect x="1.4628%" y="1253" width="0.1117%" height="15" fill="rgb(208,13,10)"/><text x="1.7128%" y="1263.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (322 samples, 0.11%)</title><rect x="1.4628%" y="1237" width="0.1117%" height="15" fill="rgb(212,200,36)"/><text x="1.7128%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (322 samples, 0.11%)</title><rect x="1.4628%" y="1221" width="0.1117%" height="15" fill="rgb(225,90,30)"/><text x="1.7128%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (322 samples, 0.11%)</title><rect x="1.4628%" y="1205" width="0.1117%" height="15" fill="rgb(236,182,39)"/><text x="1.7128%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (106 samples, 0.04%)</title><rect x="1.5377%" y="1189" width="0.0368%" height="15" fill="rgb(212,144,35)"/><text x="1.7877%" y="1199.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1765" width="0.0132%" height="15" fill="rgb(228,63,44)"/><text x="1.8245%" y="1775.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1749" width="0.0132%" height="15" fill="rgb(228,109,6)"/><text x="1.8245%" y="1759.50"></text></g><g><title>std::panic::catch_unwind (38 samples, 0.01%)</title><rect x="1.5745%" y="1733" width="0.0132%" height="15" fill="rgb(238,117,24)"/><text x="1.8245%" y="1743.50"></text></g><g><title>std::panicking::try (38 samples, 0.01%)</title><rect x="1.5745%" y="1717" width="0.0132%" height="15" fill="rgb(242,26,26)"/><text x="1.8245%" y="1727.50"></text></g><g><title>__rust_try (38 samples, 0.01%)</title><rect x="1.5745%" y="1701" width="0.0132%" height="15" fill="rgb(221,92,48)"/><text x="1.8245%" y="1711.50"></text></g><g><title>std::panicking::try::do_call (38 samples, 0.01%)</title><rect x="1.5745%" y="1685" width="0.0132%" height="15" fill="rgb(209,209,32)"/><text x="1.8245%" y="1695.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38 samples, 0.01%)</title><rect x="1.5745%" y="1669" width="0.0132%" height="15" fill="rgb(221,70,22)"/><text x="1.8245%" y="1679.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1653" width="0.0132%" height="15" fill="rgb(248,145,5)"/><text x="1.8245%" y="1663.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38 samples, 0.01%)</title><rect x="1.5745%" y="1637" width="0.0132%" height="15" fill="rgb(226,116,26)"/><text x="1.8245%" y="1647.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1621" width="0.0132%" height="15" fill="rgb(244,5,17)"/><text x="1.8245%" y="1631.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (38 samples, 0.01%)</title><rect x="1.5745%" y="1605" width="0.0132%" height="15" fill="rgb(252,159,33)"/><text x="1.8245%" y="1615.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (38 samples, 0.01%)</title><rect x="1.5745%" y="1589" width="0.0132%" height="15" fill="rgb(206,71,0)"/><text x="1.8245%" y="1599.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1573" width="0.0132%" height="15" fill="rgb(233,118,54)"/><text x="1.8245%" y="1583.50"></text></g><g><title>tokio::runtime::task::raw::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1557" width="0.0132%" height="15" fill="rgb(234,83,48)"/><text x="1.8245%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1541" width="0.0132%" height="15" fill="rgb(228,3,54)"/><text x="1.8245%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (38 samples, 0.01%)</title><rect x="1.5745%" y="1525" width="0.0132%" height="15" fill="rgb(226,155,13)"/><text x="1.8245%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (38 samples, 0.01%)</title><rect x="1.5745%" y="1509" width="0.0132%" height="15" fill="rgb(241,28,37)"/><text x="1.8245%" y="1519.50"></text></g><g><title>std::panic::catch_unwind (38 samples, 0.01%)</title><rect x="1.5745%" y="1493" width="0.0132%" height="15" fill="rgb(233,93,10)"/><text x="1.8245%" y="1503.50"></text></g><g><title>std::panicking::try (38 samples, 0.01%)</title><rect x="1.5745%" y="1477" width="0.0132%" height="15" fill="rgb(225,113,19)"/><text x="1.8245%" y="1487.50"></text></g><g><title>__rust_try (38 samples, 0.01%)</title><rect x="1.5745%" y="1461" width="0.0132%" height="15" fill="rgb(241,2,18)"/><text x="1.8245%" y="1471.50"></text></g><g><title>std::panicking::try::do_call (38 samples, 0.01%)</title><rect x="1.5745%" y="1445" width="0.0132%" height="15" fill="rgb(228,207,21)"/><text x="1.8245%" y="1455.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38 samples, 0.01%)</title><rect x="1.5745%" y="1429" width="0.0132%" height="15" fill="rgb(213,211,35)"/><text x="1.8245%" y="1439.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1413" width="0.0132%" height="15" fill="rgb(209,83,10)"/><text x="1.8245%" y="1423.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1397" width="0.0132%" height="15" fill="rgb(209,164,1)"/><text x="1.8245%" y="1407.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (38 samples, 0.01%)</title><rect x="1.5745%" y="1381" width="0.0132%" height="15" fill="rgb(213,184,43)"/><text x="1.8245%" y="1391.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1365" width="0.0132%" height="15" fill="rgb(231,61,34)"/><text x="1.8245%" y="1375.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1349" width="0.0132%" height="15" fill="rgb(235,75,3)"/><text x="1.8245%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1333" width="0.0132%" height="15" fill="rgb(220,106,47)"/><text x="1.8245%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (38 samples, 0.01%)</title><rect x="1.5745%" y="1317" width="0.0132%" height="15" fill="rgb(210,196,33)"/><text x="1.8245%" y="1327.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (38 samples, 0.01%)</title><rect x="1.5745%" y="1301" width="0.0132%" height="15" fill="rgb(229,154,42)"/><text x="1.8245%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1285" width="0.0132%" height="15" fill="rgb(228,114,26)"/><text x="1.8245%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (38 samples, 0.01%)</title><rect x="1.5745%" y="1269" width="0.0132%" height="15" fill="rgb(208,144,1)"/><text x="1.8245%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (38 samples, 0.01%)</title><rect x="1.5745%" y="1253" width="0.0132%" height="15" fill="rgb(239,112,37)"/><text x="1.8245%" y="1263.50"></text></g><g><title>tokio::coop::budget (38 samples, 0.01%)</title><rect x="1.5745%" y="1237" width="0.0132%" height="15" fill="rgb(210,96,50)"/><text x="1.8245%" y="1247.50"></text></g><g><title>tokio::coop::with_budget (38 samples, 0.01%)</title><rect x="1.5745%" y="1221" width="0.0132%" height="15" fill="rgb(222,178,2)"/><text x="1.8245%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (38 samples, 0.01%)</title><rect x="1.5745%" y="1205" width="0.0132%" height="15" fill="rgb(226,74,18)"/><text x="1.8245%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (38 samples, 0.01%)</title><rect x="1.5745%" y="1189" width="0.0132%" height="15" fill="rgb(225,67,54)"/><text x="1.8245%" y="1199.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1173" width="0.0132%" height="15" fill="rgb(251,92,32)"/><text x="1.8245%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (38 samples, 0.01%)</title><rect x="1.5745%" y="1157" width="0.0132%" height="15" fill="rgb(228,149,22)"/><text x="1.8245%" y="1167.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (38 samples, 0.01%)</title><rect x="1.5745%" y="1141" width="0.0132%" height="15" fill="rgb(243,54,13)"/><text x="1.8245%" y="1151.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1125" width="0.0132%" height="15" fill="rgb(243,180,28)"/><text x="1.8245%" y="1135.50"></text></g><g><title>tokio::runtime::task::raw::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1109" width="0.0132%" height="15" fill="rgb(208,167,24)"/><text x="1.8245%" y="1119.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (38 samples, 0.01%)</title><rect x="1.5745%" y="1093" width="0.0132%" height="15" fill="rgb(245,73,45)"/><text x="1.8245%" y="1103.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (33 samples, 0.01%)</title><rect x="1.5762%" y="1077" width="0.0114%" height="15" fill="rgb(237,203,48)"/><text x="1.8262%" y="1087.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (33 samples, 0.01%)</title><rect x="1.5762%" y="1061" width="0.0114%" height="15" fill="rgb(211,197,16)"/><text x="1.8262%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (33 samples, 0.01%)</title><rect x="1.5762%" y="1045" width="0.0114%" height="15" fill="rgb(243,99,51)"/><text x="1.8262%" y="1055.50"></text></g><g><title>std::panicking::try (33 samples, 0.01%)</title><rect x="1.5762%" y="1029" width="0.0114%" height="15" fill="rgb(215,123,29)"/><text x="1.8262%" y="1039.50"></text></g><g><title>__rust_try (33 samples, 0.01%)</title><rect x="1.5762%" y="1013" width="0.0114%" height="15" fill="rgb(239,186,37)"/><text x="1.8262%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (33 samples, 0.01%)</title><rect x="1.5762%" y="997" width="0.0114%" height="15" fill="rgb(252,136,39)"/><text x="1.8262%" y="1007.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (33 samples, 0.01%)</title><rect x="1.5762%" y="981" width="0.0114%" height="15" fill="rgb(223,213,32)"/><text x="1.8262%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (33 samples, 0.01%)</title><rect x="1.5762%" y="965" width="0.0114%" height="15" fill="rgb(233,115,5)"/><text x="1.8262%" y="975.50"></text></g><g><title>core::mem::forget (33 samples, 0.01%)</title><rect x="1.5762%" y="949" width="0.0114%" height="15" fill="rgb(207,226,44)"/><text x="1.8262%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (36 samples, 0.01%)</title><rect x="1.5877%" y="1509" width="0.0125%" height="15" fill="rgb(208,126,0)"/><text x="1.8377%" y="1519.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (45 samples, 0.02%)</title><rect x="1.5877%" y="1557" width="0.0156%" height="15" fill="rgb(244,66,21)"/><text x="1.8377%" y="1567.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (45 samples, 0.02%)</title><rect x="1.5877%" y="1541" width="0.0156%" height="15" fill="rgb(222,97,12)"/><text x="1.8377%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (45 samples, 0.02%)</title><rect x="1.5877%" y="1525" width="0.0156%" height="15" fill="rgb(219,213,19)"/><text x="1.8377%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (48 samples, 0.02%)</title><rect x="1.5877%" y="1733" width="0.0167%" height="15" fill="rgb(252,169,30)"/><text x="1.8377%" y="1743.50"></text></g><g><title>std::io::Write::write_fmt (48 samples, 0.02%)</title><rect x="1.5877%" y="1717" width="0.0167%" height="15" fill="rgb(206,32,51)"/><text x="1.8377%" y="1727.50"></text></g><g><title>core::fmt::write (48 samples, 0.02%)</title><rect x="1.5877%" y="1701" width="0.0167%" height="15" fill="rgb(250,172,42)"/><text x="1.8377%" y="1711.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (48 samples, 0.02%)</title><rect x="1.5877%" y="1685" width="0.0167%" height="15" fill="rgb(209,34,43)"/><text x="1.8377%" y="1695.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (48 samples, 0.02%)</title><rect x="1.5877%" y="1669" width="0.0167%" height="15" fill="rgb(223,11,35)"/><text x="1.8377%" y="1679.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (48 samples, 0.02%)</title><rect x="1.5877%" y="1653" width="0.0167%" height="15" fill="rgb(251,219,26)"/><text x="1.8377%" y="1663.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (48 samples, 0.02%)</title><rect x="1.5877%" y="1637" width="0.0167%" height="15" fill="rgb(231,119,3)"/><text x="1.8377%" y="1647.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (48 samples, 0.02%)</title><rect x="1.5877%" y="1621" width="0.0167%" height="15" fill="rgb(216,97,11)"/><text x="1.8377%" y="1631.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_color (48 samples, 0.02%)</title><rect x="1.5877%" y="1605" width="0.0167%" height="15" fill="rgb(223,59,9)"/><text x="1.8377%" y="1615.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (48 samples, 0.02%)</title><rect x="1.5877%" y="1589" width="0.0167%" height="15" fill="rgb(233,93,31)"/><text x="1.8377%" y="1599.50"></text></g><g><title>std::io::Write::write_all (48 samples, 0.02%)</title><rect x="1.5877%" y="1573" width="0.0167%" height="15" fill="rgb(239,81,33)"/><text x="1.8377%" y="1583.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (74 samples, 0.03%)</title><rect x="1.5877%" y="1765" width="0.0257%" height="15" fill="rgb(213,120,34)"/><text x="1.8377%" y="1775.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (74 samples, 0.03%)</title><rect x="1.5877%" y="1749" width="0.0257%" height="15" fill="rgb(243,49,53)"/><text x="1.8377%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (29 samples, 0.01%)</title><rect x="1.6317%" y="1429" width="0.0101%" height="15" fill="rgb(247,216,33)"/><text x="1.8817%" y="1439.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (49 samples, 0.02%)</title><rect x="1.6303%" y="1445" width="0.0170%" height="15" fill="rgb(226,26,14)"/><text x="1.8803%" y="1455.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (73 samples, 0.03%)</title><rect x="1.6286%" y="1461" width="0.0253%" height="15" fill="rgb(215,49,53)"/><text x="1.8786%" y="1471.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (82 samples, 0.03%)</title><rect x="1.6262%" y="1493" width="0.0285%" height="15" fill="rgb(245,162,40)"/><text x="1.8762%" y="1503.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (79 samples, 0.03%)</title><rect x="1.6272%" y="1477" width="0.0274%" height="15" fill="rgb(229,68,17)"/><text x="1.8772%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (122 samples, 0.04%)</title><rect x="1.6217%" y="1749" width="0.0423%" height="15" fill="rgb(213,182,10)"/><text x="1.8717%" y="1759.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (122 samples, 0.04%)</title><rect x="1.6217%" y="1733" width="0.0423%" height="15" fill="rgb(245,125,30)"/><text x="1.8717%" y="1743.50"></text></g><g><title>std::io::Write::write_fmt (122 samples, 0.04%)</title><rect x="1.6217%" y="1717" width="0.0423%" height="15" fill="rgb(232,202,2)"/><text x="1.8717%" y="1727.50"></text></g><g><title>core::fmt::write (122 samples, 0.04%)</title><rect x="1.6217%" y="1701" width="0.0423%" height="15" fill="rgb(237,140,51)"/><text x="1.8717%" y="1711.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (122 samples, 0.04%)</title><rect x="1.6217%" y="1685" width="0.0423%" height="15" fill="rgb(236,157,25)"/><text x="1.8717%" y="1695.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (122 samples, 0.04%)</title><rect x="1.6217%" y="1669" width="0.0423%" height="15" fill="rgb(219,209,0)"/><text x="1.8717%" y="1679.50"></text></g><g><title>core::fmt::write (122 samples, 0.04%)</title><rect x="1.6217%" y="1653" width="0.0423%" height="15" fill="rgb(240,116,54)"/><text x="1.8717%" y="1663.50"></text></g><g><title>core::fmt::run (122 samples, 0.04%)</title><rect x="1.6217%" y="1637" width="0.0423%" height="15" fill="rgb(216,10,36)"/><text x="1.8717%" y="1647.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (122 samples, 0.04%)</title><rect x="1.6217%" y="1621" width="0.0423%" height="15" fill="rgb(222,72,44)"/><text x="1.8717%" y="1631.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (122 samples, 0.04%)</title><rect x="1.6217%" y="1605" width="0.0423%" height="15" fill="rgb(232,159,9)"/><text x="1.8717%" y="1615.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (122 samples, 0.04%)</title><rect x="1.6217%" y="1589" width="0.0423%" height="15" fill="rgb(210,39,32)"/><text x="1.8717%" y="1599.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (122 samples, 0.04%)</title><rect x="1.6217%" y="1573" width="0.0423%" height="15" fill="rgb(216,194,45)"/><text x="1.8717%" y="1583.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (122 samples, 0.04%)</title><rect x="1.6217%" y="1557" width="0.0423%" height="15" fill="rgb(218,18,35)"/><text x="1.8717%" y="1567.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_color (122 samples, 0.04%)</title><rect x="1.6217%" y="1541" width="0.0423%" height="15" fill="rgb(207,83,51)"/><text x="1.8717%" y="1551.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (122 samples, 0.04%)</title><rect x="1.6217%" y="1525" width="0.0423%" height="15" fill="rgb(225,63,43)"/><text x="1.8717%" y="1535.50"></text></g><g><title>std::io::Write::write_all (122 samples, 0.04%)</title><rect x="1.6217%" y="1509" width="0.0423%" height="15" fill="rgb(207,57,36)"/><text x="1.8717%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (51 samples, 0.02%)</title><rect x="1.6643%" y="1493" width="0.0177%" height="15" fill="rgb(216,99,33)"/><text x="1.9143%" y="1503.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (69 samples, 0.02%)</title><rect x="1.6640%" y="1509" width="0.0239%" height="15" fill="rgb(225,42,16)"/><text x="1.9140%" y="1519.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (94 samples, 0.03%)</title><rect x="1.6640%" y="1525" width="0.0326%" height="15" fill="rgb(220,201,45)"/><text x="1.9140%" y="1535.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (97 samples, 0.03%)</title><rect x="1.6640%" y="1557" width="0.0337%" height="15" fill="rgb(225,33,4)"/><text x="1.9140%" y="1567.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (97 samples, 0.03%)</title><rect x="1.6640%" y="1541" width="0.0337%" height="15" fill="rgb(224,33,50)"/><text x="1.9140%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (267 samples, 0.09%)</title><rect x="1.6133%" y="1765" width="0.0926%" height="15" fill="rgb(246,198,51)"/><text x="1.8633%" y="1775.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (121 samples, 0.04%)</title><rect x="1.6640%" y="1749" width="0.0420%" height="15" fill="rgb(205,22,4)"/><text x="1.9140%" y="1759.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (121 samples, 0.04%)</title><rect x="1.6640%" y="1733" width="0.0420%" height="15" fill="rgb(206,3,8)"/><text x="1.9140%" y="1743.50"></text></g><g><title>std::io::Write::write_fmt (121 samples, 0.04%)</title><rect x="1.6640%" y="1717" width="0.0420%" height="15" fill="rgb(251,23,15)"/><text x="1.9140%" y="1727.50"></text></g><g><title>core::fmt::write (121 samples, 0.04%)</title><rect x="1.6640%" y="1701" width="0.0420%" height="15" fill="rgb(252,88,28)"/><text x="1.9140%" y="1711.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (121 samples, 0.04%)</title><rect x="1.6640%" y="1685" width="0.0420%" height="15" fill="rgb(212,127,14)"/><text x="1.9140%" y="1695.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (121 samples, 0.04%)</title><rect x="1.6640%" y="1669" width="0.0420%" height="15" fill="rgb(247,145,37)"/><text x="1.9140%" y="1679.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (121 samples, 0.04%)</title><rect x="1.6640%" y="1653" width="0.0420%" height="15" fill="rgb(209,117,53)"/><text x="1.9140%" y="1663.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (121 samples, 0.04%)</title><rect x="1.6640%" y="1637" width="0.0420%" height="15" fill="rgb(212,90,42)"/><text x="1.9140%" y="1647.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (121 samples, 0.04%)</title><rect x="1.6640%" y="1621" width="0.0420%" height="15" fill="rgb(218,164,37)"/><text x="1.9140%" y="1631.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_color (121 samples, 0.04%)</title><rect x="1.6640%" y="1605" width="0.0420%" height="15" fill="rgb(246,65,34)"/><text x="1.9140%" y="1615.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (121 samples, 0.04%)</title><rect x="1.6640%" y="1589" width="0.0420%" height="15" fill="rgb(231,100,33)"/><text x="1.9140%" y="1599.50"></text></g><g><title>std::io::Write::write_all (121 samples, 0.04%)</title><rect x="1.6640%" y="1573" width="0.0420%" height="15" fill="rgb(228,126,14)"/><text x="1.9140%" y="1583.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac3 (90 samples, 0.03%)</title><rect x="1.7188%" y="1605" width="0.0312%" height="15" fill="rgb(215,173,21)"/><text x="1.9688%" y="1615.50"></text></g><g><title>num_bigint_dig::algorithms::mac::long (90 samples, 0.03%)</title><rect x="1.7188%" y="1589" width="0.0312%" height="15" fill="rgb(210,6,40)"/><text x="1.9688%" y="1599.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_digit (69 samples, 0.02%)</title><rect x="1.7261%" y="1573" width="0.0239%" height="15" fill="rgb(212,48,18)"/><text x="1.9761%" y="1583.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::mul (130 samples, 0.05%)</title><rect x="1.7188%" y="1637" width="0.0451%" height="15" fill="rgb(230,214,11)"/><text x="1.9688%" y="1647.50"></text></g><g><title>num_bigint_dig::algorithms::mul::mul3 (130 samples, 0.05%)</title><rect x="1.7188%" y="1621" width="0.0451%" height="15" fill="rgb(254,105,39)"/><text x="1.9688%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::from_elem (40 samples, 0.01%)</title><rect x="1.7500%" y="1605" width="0.0139%" height="15" fill="rgb(245,158,5)"/><text x="2.0000%" y="1615.50"></text></g><g><title>alloc::vec::from_elem (35 samples, 0.01%)</title><rect x="1.7518%" y="1589" width="0.0121%" height="15" fill="rgb(249,208,11)"/><text x="2.0018%" y="1599.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (35 samples, 0.01%)</title><rect x="1.7518%" y="1573" width="0.0121%" height="15" fill="rgb(210,39,28)"/><text x="2.0018%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (34 samples, 0.01%)</title><rect x="1.7521%" y="1557" width="0.0118%" height="15" fill="rgb(211,56,53)"/><text x="2.0021%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (34 samples, 0.01%)</title><rect x="1.7521%" y="1541" width="0.0118%" height="15" fill="rgb(226,201,30)"/><text x="2.0021%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.01%)</title><rect x="1.7521%" y="1525" width="0.0118%" height="15" fill="rgb(239,101,34)"/><text x="2.0021%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.01%)</title><rect x="1.7958%" y="1621" width="0.0125%" height="15" fill="rgb(226,209,5)"/><text x="2.0458%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (36 samples, 0.01%)</title><rect x="1.7958%" y="1605" width="0.0125%" height="15" fill="rgb(250,105,47)"/><text x="2.0458%" y="1615.50"></text></g><g><title>num_bigint_dig::algorithms::sub::sub2 (59 samples, 0.02%)</title><rect x="1.7958%" y="1637" width="0.0205%" height="15" fill="rgb(230,72,3)"/><text x="2.0458%" y="1647.50"></text></g><g><title>num_bigint_dig::prime::probably_prime (304 samples, 0.11%)</title><rect x="1.7126%" y="1765" width="0.1055%" height="15" fill="rgb(232,218,39)"/><text x="1.9626%" y="1775.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_miller_rabin (286 samples, 0.10%)</title><rect x="1.7188%" y="1749" width="0.0992%" height="15" fill="rgb(248,166,6)"/><text x="1.9688%" y="1759.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (286 samples, 0.10%)</title><rect x="1.7188%" y="1733" width="0.0992%" height="15" fill="rgb(247,89,20)"/><text x="1.9688%" y="1743.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (286 samples, 0.10%)</title><rect x="1.7188%" y="1717" width="0.0992%" height="15" fill="rgb(248,130,54)"/><text x="1.9688%" y="1727.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::Rem&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::rem (286 samples, 0.10%)</title><rect x="1.7188%" y="1701" width="0.0992%" height="15" fill="rgb(234,196,4)"/><text x="1.9688%" y="1711.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Rem&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::rem (286 samples, 0.10%)</title><rect x="1.7188%" y="1685" width="0.0992%" height="15" fill="rgb(250,143,31)"/><text x="1.9688%" y="1695.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as num_integer::Integer&gt;::div_rem (286 samples, 0.10%)</title><rect x="1.7188%" y="1669" width="0.0992%" height="15" fill="rgb(211,110,34)"/><text x="1.9688%" y="1679.50"></text></g><g><title>num_bigint_dig::algorithms::div::div_rem (286 samples, 0.10%)</title><rect x="1.7188%" y="1653" width="0.0992%" height="15" fill="rgb(215,124,48)"/><text x="1.9688%" y="1663.50"></text></g><g><title>rand_chacha::guts::round (64 samples, 0.02%)</title><rect x="1.8364%" y="1717" width="0.0222%" height="15" fill="rgb(216,46,13)"/><text x="2.0864%" y="1727.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (102 samples, 0.04%)</title><rect x="1.8253%" y="1765" width="0.0354%" height="15" fill="rgb(205,184,25)"/><text x="2.0753%" y="1775.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (102 samples, 0.04%)</title><rect x="1.8253%" y="1749" width="0.0354%" height="15" fill="rgb(228,1,10)"/><text x="2.0753%" y="1759.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (102 samples, 0.04%)</title><rect x="1.8253%" y="1733" width="0.0354%" height="15" fill="rgb(213,116,27)"/><text x="2.0753%" y="1743.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (29 samples, 0.01%)</title><rect x="1.8704%" y="1605" width="0.0101%" height="15" fill="rgb(241,95,50)"/><text x="2.1204%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (29 samples, 0.01%)</title><rect x="1.8704%" y="1589" width="0.0101%" height="15" fill="rgb(238,48,32)"/><text x="2.1204%" y="1599.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (37 samples, 0.01%)</title><rect x="1.8704%" y="1621" width="0.0128%" height="15" fill="rgb(235,113,49)"/><text x="2.1204%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac3 (67 samples, 0.02%)</title><rect x="1.8614%" y="1669" width="0.0232%" height="15" fill="rgb(205,127,43)"/><text x="2.1114%" y="1679.50"></text></g><g><title>num_bigint_dig::algorithms::mac::long (67 samples, 0.02%)</title><rect x="1.8614%" y="1653" width="0.0232%" height="15" fill="rgb(250,162,2)"/><text x="2.1114%" y="1663.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_digit (67 samples, 0.02%)</title><rect x="1.8614%" y="1637" width="0.0232%" height="15" fill="rgb(220,13,41)"/><text x="2.1114%" y="1647.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::mul (75 samples, 0.03%)</title><rect x="1.8614%" y="1701" width="0.0260%" height="15" fill="rgb(249,221,25)"/><text x="2.1114%" y="1711.50"></text></g><g><title>num_bigint_dig::algorithms::mul::mul3 (75 samples, 0.03%)</title><rect x="1.8614%" y="1685" width="0.0260%" height="15" fill="rgb(215,208,19)"/><text x="2.1114%" y="1695.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.01%)</title><rect x="1.9006%" y="1621" width="0.0114%" height="15" fill="rgb(236,175,2)"/><text x="2.1506%" y="1631.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.01%)</title><rect x="1.8989%" y="1637" width="0.0135%" height="15" fill="rgb(241,52,2)"/><text x="2.1489%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.02%)</title><rect x="1.9305%" y="1589" width="0.0170%" height="15" fill="rgb(248,140,14)"/><text x="2.1805%" y="1599.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac3 (89 samples, 0.03%)</title><rect x="1.9228%" y="1621" width="0.0309%" height="15" fill="rgb(253,22,42)"/><text x="2.1728%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::mac::long (74 samples, 0.03%)</title><rect x="1.9280%" y="1605" width="0.0257%" height="15" fill="rgb(234,61,47)"/><text x="2.1780%" y="1615.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::normalized (75 samples, 0.03%)</title><rect x="1.9537%" y="1621" width="0.0260%" height="15" fill="rgb(208,226,15)"/><text x="2.2037%" y="1631.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::normalize (74 samples, 0.03%)</title><rect x="1.9541%" y="1605" width="0.0257%" height="15" fill="rgb(217,221,4)"/><text x="2.2041%" y="1615.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::pop (32 samples, 0.01%)</title><rect x="1.9686%" y="1589" width="0.0111%" height="15" fill="rgb(212,174,34)"/><text x="2.2186%" y="1599.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::mul (276 samples, 0.10%)</title><rect x="1.8982%" y="1653" width="0.0958%" height="15" fill="rgb(253,83,4)"/><text x="2.1482%" y="1663.50"></text></g><g><title>num_bigint_dig::algorithms::mul::mul3 (235 samples, 0.08%)</title><rect x="1.9124%" y="1637" width="0.0815%" height="15" fill="rgb(250,195,49)"/><text x="2.1624%" y="1647.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::from_elem (41 samples, 0.01%)</title><rect x="1.9797%" y="1621" width="0.0142%" height="15" fill="rgb(241,192,25)"/><text x="2.2297%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.02%)</title><rect x="2.0127%" y="1605" width="0.0191%" height="15" fill="rgb(208,124,10)"/><text x="2.2627%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (46 samples, 0.02%)</title><rect x="2.0158%" y="1589" width="0.0160%" height="15" fill="rgb(222,33,0)"/><text x="2.2658%" y="1599.50"></text></g><g><title>num_bigint_dig::algorithms::sub::sub2 (128 samples, 0.04%)</title><rect x="2.0058%" y="1621" width="0.0444%" height="15" fill="rgb(234,209,28)"/><text x="2.2558%" y="1631.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::Sub&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::sub (151 samples, 0.05%)</title><rect x="2.0019%" y="1653" width="0.0524%" height="15" fill="rgb(224,11,23)"/><text x="2.2519%" y="1663.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::SubAssign&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::sub_assign (149 samples, 0.05%)</title><rect x="2.0026%" y="1637" width="0.0517%" height="15" fill="rgb(232,99,1)"/><text x="2.2526%" y="1647.50"></text></g><g><title>num_bigint_dig::algorithms::sub::sub2 (45 samples, 0.02%)</title><rect x="2.0599%" y="1605" width="0.0156%" height="15" fill="rgb(237,95,45)"/><text x="2.3099%" y="1615.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::Sub&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::sub (66 samples, 0.02%)</title><rect x="2.0550%" y="1637" width="0.0229%" height="15" fill="rgb(208,109,11)"/><text x="2.3050%" y="1647.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::SubAssign&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::sub_assign (65 samples, 0.02%)</title><rect x="2.0554%" y="1621" width="0.0226%" height="15" fill="rgb(216,190,48)"/><text x="2.3054%" y="1631.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as core::ops::arith::Sub&gt;::sub (78 samples, 0.03%)</title><rect x="2.0543%" y="1653" width="0.0271%" height="15" fill="rgb(251,171,36)"/><text x="2.3043%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="2.1053%" y="1605" width="0.0104%" height="15" fill="rgb(230,62,22)"/><text x="2.3553%" y="1615.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (36 samples, 0.01%)</title><rect x="2.1168%" y="1557" width="0.0125%" height="15" fill="rgb(225,114,35)"/><text x="2.3668%" y="1567.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (45 samples, 0.02%)</title><rect x="2.1164%" y="1589" width="0.0156%" height="15" fill="rgb(215,118,42)"/><text x="2.3664%" y="1599.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (45 samples, 0.02%)</title><rect x="2.1164%" y="1573" width="0.0156%" height="15" fill="rgb(243,119,21)"/><text x="2.3664%" y="1583.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as num_traits::identities::One&gt;::one (129 samples, 0.04%)</title><rect x="2.0883%" y="1653" width="0.0448%" height="15" fill="rgb(252,177,53)"/><text x="2.3383%" y="1663.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::new (99 samples, 0.03%)</title><rect x="2.0987%" y="1637" width="0.0343%" height="15" fill="rgb(237,209,29)"/><text x="2.3487%" y="1647.50"></text></g><g><title>num_bigint_dig::biguint::ensure_big_digit (89 samples, 0.03%)</title><rect x="2.1022%" y="1621" width="0.0309%" height="15" fill="rgb(212,65,23)"/><text x="2.3522%" y="1631.50"></text></g><g><title>num_bigint_dig::biguint::ensure_big_digit_slice (50 samples, 0.02%)</title><rect x="2.1157%" y="1605" width="0.0173%" height="15" fill="rgb(230,222,46)"/><text x="2.3657%" y="1615.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.01%)</title><rect x="2.1418%" y="1621" width="0.0128%" height="15" fill="rgb(215,135,32)"/><text x="2.3918%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.02%)</title><rect x="2.1386%" y="1637" width="0.0222%" height="15" fill="rgb(246,101,22)"/><text x="2.3886%" y="1647.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (116 samples, 0.04%)</title><rect x="2.1338%" y="1653" width="0.0402%" height="15" fill="rgb(206,107,13)"/><text x="2.3838%" y="1663.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (71 samples, 0.02%)</title><rect x="2.1785%" y="1637" width="0.0246%" height="15" fill="rgb(250,100,44)"/><text x="2.4285%" y="1647.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (36 samples, 0.01%)</title><rect x="2.1907%" y="1621" width="0.0125%" height="15" fill="rgb(231,147,38)"/><text x="2.4407%" y="1631.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (111 samples, 0.04%)</title><rect x="2.1744%" y="1653" width="0.0385%" height="15" fill="rgb(229,8,40)"/><text x="2.4244%" y="1663.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (54 samples, 0.02%)</title><rect x="2.2129%" y="1653" width="0.0187%" height="15" fill="rgb(221,135,30)"/><text x="2.4629%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place (58 samples, 0.02%)</title><rect x="2.2396%" y="1605" width="0.0201%" height="15" fill="rgb(249,193,18)"/><text x="2.4896%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.01%)</title><rect x="2.2448%" y="1589" width="0.0149%" height="15" fill="rgb(209,133,39)"/><text x="2.4948%" y="1599.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.01%)</title><rect x="2.2455%" y="1573" width="0.0142%" height="15" fill="rgb(232,100,14)"/><text x="2.4955%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place (71 samples, 0.02%)</title><rect x="2.2354%" y="1653" width="0.0246%" height="15" fill="rgb(224,185,1)"/><text x="2.4854%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place (70 samples, 0.02%)</title><rect x="2.2358%" y="1637" width="0.0243%" height="15" fill="rgb(223,139,8)"/><text x="2.4858%" y="1647.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.02%)</title><rect x="2.2361%" y="1621" width="0.0239%" height="15" fill="rgb(232,213,38)"/><text x="2.4861%" y="1631.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (36 samples, 0.01%)</title><rect x="2.2753%" y="1621" width="0.0125%" height="15" fill="rgb(207,94,22)"/><text x="2.5253%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::add::add2 (94 samples, 0.03%)</title><rect x="2.2639%" y="1653" width="0.0326%" height="15" fill="rgb(219,183,54)"/><text x="2.5139%" y="1663.50"></text></g><g><title>num_bigint_dig::algorithms::add::__add2 (93 samples, 0.03%)</title><rect x="2.2642%" y="1637" width="0.0323%" height="15" fill="rgb(216,185,54)"/><text x="2.5142%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.02%)</title><rect x="2.3138%" y="1605" width="0.0180%" height="15" fill="rgb(254,217,39)"/><text x="2.5638%" y="1615.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (46 samples, 0.02%)</title><rect x="2.3159%" y="1589" width="0.0160%" height="15" fill="rgb(240,178,23)"/><text x="2.5659%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.03%)</title><rect x="2.3055%" y="1637" width="0.0305%" height="15" fill="rgb(218,11,47)"/><text x="2.5555%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (86 samples, 0.03%)</title><rect x="2.3062%" y="1621" width="0.0298%" height="15" fill="rgb(218,51,51)"/><text x="2.5562%" y="1631.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (38 samples, 0.01%)</title><rect x="2.3454%" y="1637" width="0.0132%" height="15" fill="rgb(238,126,27)"/><text x="2.5954%" y="1647.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (34 samples, 0.01%)</title><rect x="2.3468%" y="1621" width="0.0118%" height="15" fill="rgb(249,202,22)"/><text x="2.5968%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::cmp::cmp_slice (184 samples, 0.06%)</title><rect x="2.2965%" y="1653" width="0.0638%" height="15" fill="rgb(254,195,49)"/><text x="2.5465%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.01%)</title><rect x="2.3638%" y="1637" width="0.0128%" height="15" fill="rgb(208,123,14)"/><text x="2.6138%" y="1647.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (31 samples, 0.01%)</title><rect x="2.3659%" y="1621" width="0.0108%" height="15" fill="rgb(224,200,8)"/><text x="2.6159%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::div::div_rem_digit (134 samples, 0.05%)</title><rect x="2.3603%" y="1653" width="0.0465%" height="15" fill="rgb(217,61,36)"/><text x="2.6103%" y="1663.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::normalized (48 samples, 0.02%)</title><rect x="2.3902%" y="1637" width="0.0167%" height="15" fill="rgb(206,35,45)"/><text x="2.6402%" y="1647.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::normalize (47 samples, 0.02%)</title><rect x="2.3905%" y="1621" width="0.0163%" height="15" fill="rgb(217,65,33)"/><text x="2.6405%" y="1631.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (35 samples, 0.01%)</title><rect x="2.4502%" y="1589" width="0.0121%" height="15" fill="rgb(222,158,48)"/><text x="2.7002%" y="1599.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (52 samples, 0.02%)</title><rect x="2.4457%" y="1605" width="0.0180%" height="15" fill="rgb(254,2,54)"/><text x="2.6957%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.05%)</title><rect x="2.4228%" y="1637" width="0.0520%" height="15" fill="rgb(250,143,38)"/><text x="2.6728%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (137 samples, 0.05%)</title><rect x="2.4273%" y="1621" width="0.0475%" height="15" fill="rgb(248,25,0)"/><text x="2.6773%" y="1631.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (32 samples, 0.01%)</title><rect x="2.4637%" y="1605" width="0.0111%" height="15" fill="rgb(206,152,27)"/><text x="2.7137%" y="1615.50"></text></g><g><title>num_bigint_dig::algorithms::sub::sub2 (344 samples, 0.12%)</title><rect x="2.4068%" y="1653" width="0.1194%" height="15" fill="rgb(240,77,30)"/><text x="2.6568%" y="1663.50"></text></g><g><title>num_bigint_dig::algorithms::sub::sbb (45 samples, 0.02%)</title><rect x="2.5106%" y="1637" width="0.0156%" height="15" fill="rgb(231,5,3)"/><text x="2.7606%" y="1647.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::normalize (36 samples, 0.01%)</title><rect x="2.5262%" y="1653" width="0.0125%" height="15" fill="rgb(207,226,32)"/><text x="2.7762%" y="1663.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_lucas (2,010 samples, 0.70%)</title><rect x="1.8611%" y="1717" width="0.6974%" height="15" fill="rgb(222,207,47)"/><text x="2.1111%" y="1727.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Rem&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::rem (1,934 samples, 0.67%)</title><rect x="1.8874%" y="1701" width="0.6710%" height="15" fill="rgb(229,115,45)"/><text x="2.1374%" y="1711.50"></text></g><g><title>&lt;num_bigint_dig::biguint::BigUint as num_integer::Integer&gt;::div_rem (1,934 samples, 0.67%)</title><rect x="1.8874%" y="1685" width="0.6710%" height="15" fill="rgb(224,191,6)"/><text x="2.1374%" y="1695.50"></text></g><g><title>num_bigint_dig::algorithms::div::div_rem (1,934 samples, 0.67%)</title><rect x="1.8874%" y="1669" width="0.6710%" height="15" fill="rgb(230,227,24)"/><text x="2.1374%" y="1679.50"></text></g><g><title>core::mem::swap (41 samples, 0.01%)</title><rect x="2.5862%" y="1669" width="0.0142%" height="15" fill="rgb(228,80,19)"/><text x="2.8362%" y="1679.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (41 samples, 0.01%)</title><rect x="2.5862%" y="1653" width="0.0142%" height="15" fill="rgb(247,229,0)"/><text x="2.8362%" y="1663.50"></text></g><g><title>core::ptr::swap_nonoverlapping (41 samples, 0.01%)</title><rect x="2.5862%" y="1637" width="0.0142%" height="15" fill="rgb(237,194,15)"/><text x="2.8362%" y="1647.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (41 samples, 0.01%)</title><rect x="2.5862%" y="1621" width="0.0142%" height="15" fill="rgb(219,203,20)"/><text x="2.8362%" y="1631.50"></text></g><g><title>core::slice::raw::from_raw_parts (663 samples, 0.23%)</title><rect x="3.2454%" y="1637" width="0.2300%" height="15" fill="rgb(234,128,8)"/><text x="3.4954%" y="1647.50"></text></g><g><title>core::ptr::slice_from_raw_parts (346 samples, 0.12%)</title><rect x="3.3554%" y="1621" width="0.1200%" height="15" fill="rgb(248,202,8)"/><text x="3.6054%" y="1631.50"></text></g><g><title>&lt;[T: 4] as smallvec::Array&gt;::size (53 samples, 0.02%)</title><rect x="3.6396%" y="1589" width="0.0184%" height="15" fill="rgb(206,104,37)"/><text x="3.8896%" y="1599.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (293 samples, 0.10%)</title><rect x="3.5667%" y="1621" width="0.1017%" height="15" fill="rgb(223,8,27)"/><text x="3.8167%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::inline_capacity (125 samples, 0.04%)</title><rect x="3.6250%" y="1605" width="0.0434%" height="15" fill="rgb(216,217,28)"/><text x="3.8750%" y="1615.50"></text></g><g><title>core::mem::size_of (30 samples, 0.01%)</title><rect x="3.6580%" y="1589" width="0.0104%" height="15" fill="rgb(249,199,1)"/><text x="3.9080%" y="1599.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (1,703 samples, 0.59%)</title><rect x="3.1209%" y="1653" width="0.5909%" height="15" fill="rgb(240,85,17)"/><text x="3.3709%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (681 samples, 0.24%)</title><rect x="3.4755%" y="1637" width="0.2363%" height="15" fill="rgb(206,108,45)"/><text x="3.7255%" y="1647.50"></text></g><g><title>smallvec::SmallVecData&lt;A&gt;::heap (125 samples, 0.04%)</title><rect x="3.6684%" y="1621" width="0.0434%" height="15" fill="rgb(245,210,41)"/><text x="3.9184%" y="1631.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (32 samples, 0.01%)</title><rect x="3.7201%" y="1637" width="0.0111%" height="15" fill="rgb(206,13,37)"/><text x="3.9701%" y="1647.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (128 samples, 0.04%)</title><rect x="3.7117%" y="1653" width="0.0444%" height="15" fill="rgb(250,61,18)"/><text x="3.9617%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (72 samples, 0.02%)</title><rect x="3.7312%" y="1637" width="0.0250%" height="15" fill="rgb(235,172,48)"/><text x="3.9812%" y="1647.50"></text></g><g><title>core::slice::raw::from_raw_parts (863 samples, 0.30%)</title><rect x="4.1350%" y="1621" width="0.2994%" height="15" fill="rgb(249,201,17)"/><text x="4.3850%" y="1631.50"></text></g><g><title>core::ptr::slice_from_raw_parts (517 samples, 0.18%)</title><rect x="4.2551%" y="1605" width="0.1794%" height="15" fill="rgb(219,208,6)"/><text x="4.5051%" y="1615.50"></text></g><g><title>&lt;[T: 4] as smallvec::Array&gt;::size (74 samples, 0.03%)</title><rect x="4.9153%" y="1573" width="0.0257%" height="15" fill="rgb(248,31,23)"/><text x="5.1653%" y="1583.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (655 samples, 0.23%)</title><rect x="4.7408%" y="1605" width="0.2273%" height="15" fill="rgb(245,15,42)"/><text x="4.9908%" y="1615.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::inline_capacity (346 samples, 0.12%)</title><rect x="4.8480%" y="1589" width="0.1200%" height="15" fill="rgb(222,217,39)"/><text x="5.0980%" y="1599.50"></text></g><g><title>core::mem::size_of (78 samples, 0.03%)</title><rect x="4.9410%" y="1573" width="0.0271%" height="15" fill="rgb(210,219,27)"/><text x="5.1910%" y="1583.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::Deref&gt;::deref (3,190 samples, 1.11%)</title><rect x="3.9345%" y="1637" width="1.1068%" height="15" fill="rgb(252,166,36)"/><text x="4.1845%" y="1647.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (1,749 samples, 0.61%)</title><rect x="4.4344%" y="1621" width="0.6068%" height="15" fill="rgb(245,132,34)"/><text x="4.6844%" y="1631.50"></text></g><g><title>smallvec::SmallVecData&lt;A&gt;::heap (211 samples, 0.07%)</title><rect x="4.9681%" y="1605" width="0.0732%" height="15" fill="rgb(236,54,3)"/><text x="5.2181%" y="1615.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (182 samples, 0.06%)</title><rect x="5.2335%" y="1621" width="0.0631%" height="15" fill="rgb(241,173,43)"/><text x="5.4835%" y="1631.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4,441 samples, 1.54%)</title><rect x="3.7561%" y="1653" width="1.5408%" height="15" fill="rgb(215,190,9)"/><text x="4.0061%" y="1663.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (737 samples, 0.26%)</title><rect x="5.0413%" y="1637" width="0.2557%" height="15" fill="rgb(242,101,16)"/><text x="5.2913%" y="1647.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1,303 samples, 0.45%)</title><rect x="5.8261%" y="1621" width="0.4521%" height="15" fill="rgb(223,190,21)"/><text x="6.0761%" y="1631.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (835 samples, 0.29%)</title><rect x="5.9885%" y="1605" width="0.2897%" height="15" fill="rgb(215,228,25)"/><text x="6.2385%" y="1615.50"></text></g><g><title>&lt;[T: 4] as smallvec::Array&gt;::size (98 samples, 0.03%)</title><rect x="6.7434%" y="1573" width="0.0340%" height="15" fill="rgb(225,36,22)"/><text x="6.9934%" y="1583.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (651 samples, 0.23%)</title><rect x="6.5689%" y="1605" width="0.2259%" height="15" fill="rgb(251,106,46)"/><text x="6.8189%" y="1615.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::inline_capacity (314 samples, 0.11%)</title><rect x="6.6858%" y="1589" width="0.1089%" height="15" fill="rgb(208,90,1)"/><text x="6.9358%" y="1599.50"></text></g><g><title>core::mem::size_of (50 samples, 0.02%)</title><rect x="6.7774%" y="1573" width="0.0173%" height="15" fill="rgb(243,10,4)"/><text x="7.0274%" y="1583.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1,658 samples, 0.58%)</title><rect x="6.2782%" y="1621" width="0.5753%" height="15" fill="rgb(212,137,27)"/><text x="6.5282%" y="1631.50"></text></g><g><title>smallvec::SmallVecData&lt;A&gt;::heap_mut (169 samples, 0.06%)</title><rect x="6.7948%" y="1605" width="0.0586%" height="15" fill="rgb(231,220,49)"/><text x="7.0448%" y="1615.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3,700 samples, 1.28%)</title><rect x="5.5711%" y="1637" width="1.2837%" height="15" fill="rgb(237,96,20)"/><text x="5.8211%" y="1647.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (318 samples, 0.11%)</title><rect x="7.5699%" y="1589" width="0.1103%" height="15" fill="rgb(239,229,30)"/><text x="7.8199%" y="1599.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (136 samples, 0.05%)</title><rect x="7.6330%" y="1573" width="0.0472%" height="15" fill="rgb(219,65,33)"/><text x="7.8830%" y="1583.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::as_mut_ptr (63 samples, 0.02%)</title><rect x="7.6802%" y="1589" width="0.0219%" height="15" fill="rgb(243,134,7)"/><text x="7.9302%" y="1599.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1,491 samples, 0.52%)</title><rect x="7.3555%" y="1605" width="0.5173%" height="15" fill="rgb(216,177,54)"/><text x="7.6055%" y="1615.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (492 samples, 0.17%)</title><rect x="7.7021%" y="1589" width="0.1707%" height="15" fill="rgb(211,160,20)"/><text x="7.9521%" y="1599.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2,395 samples, 0.83%)</title><rect x="7.1154%" y="1621" width="0.8310%" height="15" fill="rgb(239,85,39)"/><text x="7.3654%" y="1631.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (210 samples, 0.07%)</title><rect x="7.8735%" y="1605" width="0.0729%" height="15" fill="rgb(232,125,22)"/><text x="8.1235%" y="1615.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (75 samples, 0.03%)</title><rect x="7.9463%" y="1621" width="0.0260%" height="15" fill="rgb(244,57,34)"/><text x="8.1963%" y="1631.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (7,712 samples, 2.68%)</title><rect x="5.2970%" y="1653" width="2.6757%" height="15" fill="rgb(214,203,32)"/><text x="5.5470%" y="1663.50">&lt;s..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,221 samples, 1.12%)</title><rect x="6.8552%" y="1637" width="1.1175%" height="15" fill="rgb(207,58,43)"/><text x="7.1052%" y="1647.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (387 samples, 0.13%)</title><rect x="8.2007%" y="1637" width="0.1343%" height="15" fill="rgb(215,193,15)"/><text x="8.4507%" y="1647.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (258 samples, 0.09%)</title><rect x="8.2454%" y="1621" width="0.0895%" height="15" fill="rgb(232,15,44)"/><text x="8.4954%" y="1631.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (69 samples, 0.02%)</title><rect x="8.3353%" y="1637" width="0.0239%" height="15" fill="rgb(212,3,48)"/><text x="8.5853%" y="1647.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (58 samples, 0.02%)</title><rect x="8.3592%" y="1637" width="0.0201%" height="15" fill="rgb(218,128,7)"/><text x="8.6092%" y="1647.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (220 samples, 0.08%)</title><rect x="8.5483%" y="1589" width="0.0763%" height="15" fill="rgb(226,216,39)"/><text x="8.7983%" y="1599.50"></text></g><g><title>__memmove_avx_unaligned_erms (90 samples, 0.03%)</title><rect x="8.5934%" y="1573" width="0.0312%" height="15" fill="rgb(243,47,51)"/><text x="8.8434%" y="1583.50"></text></g><g><title>core::ptr::read (552 samples, 0.19%)</title><rect x="8.6250%" y="1589" width="0.1915%" height="15" fill="rgb(241,183,40)"/><text x="8.8750%" y="1599.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (212 samples, 0.07%)</title><rect x="8.7429%" y="1573" width="0.0736%" height="15" fill="rgb(231,217,32)"/><text x="8.9929%" y="1583.50"></text></g><g><title>__memmove_avx_unaligned_erms (83 samples, 0.03%)</title><rect x="8.7877%" y="1557" width="0.0288%" height="15" fill="rgb(229,61,38)"/><text x="9.0377%" y="1567.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,509 samples, 0.87%)</title><rect x="7.9730%" y="1653" width="0.8705%" height="15" fill="rgb(225,210,5)"/><text x="8.2230%" y="1663.50"></text></g><g><title>core::mem::replace (1,338 samples, 0.46%)</title><rect x="8.3793%" y="1637" width="0.4642%" height="15" fill="rgb(231,79,45)"/><text x="8.6293%" y="1647.50"></text></g><g><title>core::mem::swap (1,228 samples, 0.43%)</title><rect x="8.4175%" y="1621" width="0.4261%" height="15" fill="rgb(224,100,7)"/><text x="8.6675%" y="1631.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1,120 samples, 0.39%)</title><rect x="8.4550%" y="1605" width="0.3886%" height="15" fill="rgb(241,198,18)"/><text x="8.7050%" y="1615.50"></text></g><g><title>core::ptr::write (78 samples, 0.03%)</title><rect x="8.8165%" y="1589" width="0.0271%" height="15" fill="rgb(252,97,53)"/><text x="9.0665%" y="1599.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (402 samples, 0.14%)</title><rect x="8.8436%" y="1653" width="0.1395%" height="15" fill="rgb(220,88,7)"/><text x="9.0936%" y="1663.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (262 samples, 0.09%)</title><rect x="8.9830%" y="1653" width="0.0909%" height="15" fill="rgb(213,176,14)"/><text x="9.2330%" y="1663.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (100 samples, 0.03%)</title><rect x="9.0739%" y="1653" width="0.0347%" height="15" fill="rgb(246,73,7)"/><text x="9.3239%" y="1663.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_unchecked (76 samples, 0.03%)</title><rect x="9.0823%" y="1637" width="0.0264%" height="15" fill="rgb(245,64,36)"/><text x="9.3323%" y="1647.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (50 samples, 0.02%)</title><rect x="9.0913%" y="1621" width="0.0173%" height="15" fill="rgb(245,80,10)"/><text x="9.3413%" y="1631.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (101 samples, 0.04%)</title><rect x="9.1385%" y="1605" width="0.0350%" height="15" fill="rgb(232,107,50)"/><text x="9.3885%" y="1615.50"></text></g><g><title>__memcpy_avx_unaligned (58 samples, 0.02%)</title><rect x="9.1534%" y="1589" width="0.0201%" height="15" fill="rgb(253,3,0)"/><text x="9.4034%" y="1599.50"></text></g><g><title>core::ptr::swap_nonoverlapping (263 samples, 0.09%)</title><rect x="9.1138%" y="1637" width="0.0912%" height="15" fill="rgb(212,99,53)"/><text x="9.3638%" y="1647.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (259 samples, 0.09%)</title><rect x="9.1152%" y="1621" width="0.0899%" height="15" fill="rgb(249,111,54)"/><text x="9.3652%" y="1631.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (91 samples, 0.03%)</title><rect x="9.1735%" y="1605" width="0.0316%" height="15" fill="rgb(249,55,30)"/><text x="9.4235%" y="1615.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (53 samples, 0.02%)</title><rect x="9.1867%" y="1589" width="0.0184%" height="15" fill="rgb(237,47,42)"/><text x="9.4367%" y="1599.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap_with_slice (289 samples, 0.10%)</title><rect x="9.1086%" y="1653" width="0.1003%" height="15" fill="rgb(211,20,18)"/><text x="9.3586%" y="1663.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,060 samples, 0.37%)</title><rect x="14.5440%" y="1637" width="0.3678%" height="15" fill="rgb(231,203,46)"/><text x="14.7940%" y="1647.50"></text></g><g><title>__memcpy_avx_unaligned (938 samples, 0.33%)</title><rect x="14.5864%" y="1621" width="0.3254%" height="15" fill="rgb(237,142,3)"/><text x="14.8364%" y="1631.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2,828 samples, 0.98%)</title><rect x="23.6093%" y="1573" width="0.9812%" height="15" fill="rgb(241,107,1)"/><text x="23.8593%" y="1583.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6,793 samples, 2.36%)</title><rect x="22.2340%" y="1589" width="2.3569%" height="15" fill="rgb(229,83,13)"/><text x="22.4840%" y="1599.50">c..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (992 samples, 0.34%)</title><rect x="24.5909%" y="1589" width="0.3442%" height="15" fill="rgb(241,91,40)"/><text x="24.8409%" y="1599.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (11,508 samples, 3.99%)</title><rect x="20.9426%" y="1605" width="3.9928%" height="15" fill="rgb(225,3,45)"/><text x="21.1926%" y="1615.50">&lt;cor..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::adapters::zip::TrustedRandomAccess&gt;::may_have_side_effect (154 samples, 0.05%)</title><rect x="24.9354%" y="1605" width="0.0534%" height="15" fill="rgb(244,223,14)"/><text x="25.1854%" y="1615.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3,265 samples, 1.13%)</title><rect x="28.1905%" y="1573" width="1.1328%" height="15" fill="rgb(224,124,37)"/><text x="28.4405%" y="1583.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,706 samples, 2.67%)</title><rect x="26.6500%" y="1589" width="2.6736%" height="15" fill="rgb(251,171,30)"/><text x="26.9000%" y="1599.50">co..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1,236 samples, 0.43%)</title><rect x="29.3237%" y="1589" width="0.4288%" height="15" fill="rgb(236,46,54)"/><text x="29.5737%" y="1599.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (13,731 samples, 4.76%)</title><rect x="24.9888%" y="1605" width="4.7641%" height="15" fill="rgb(245,213,5)"/><text x="25.2388%" y="1615.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (38,378 samples, 13.32%)</title><rect x="16.4429%" y="1621" width="13.3155%" height="15" fill="rgb(230,144,27)"/><text x="16.6929%" y="1631.50">&lt;core::iter::adapter..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (42,797 samples, 14.85%)</title><rect x="14.9118%" y="1637" width="14.8487%" height="15" fill="rgb(220,86,6)"/><text x="15.1618%" y="1647.50">&lt;core::iter::adapters::..</text></g><g><title>[tunneler] (39 samples, 0.01%)</title><rect x="29.7605%" y="1637" width="0.0135%" height="15" fill="rgb(240,20,13)"/><text x="30.0105%" y="1647.50"></text></g><g><title>__memcpy_avx_unaligned (289 samples, 0.10%)</title><rect x="29.7740%" y="1637" width="0.1003%" height="15" fill="rgb(217,89,34)"/><text x="30.0240%" y="1647.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (68 samples, 0.02%)</title><rect x="29.9638%" y="1621" width="0.0236%" height="15" fill="rgb(229,13,5)"/><text x="30.2138%" y="1631.50"></text></g><g><title>core::cmp::min (1,564 samples, 0.54%)</title><rect x="30.1626%" y="1589" width="0.5426%" height="15" fill="rgb(244,67,35)"/><text x="30.4126%" y="1599.50"></text></g><g><title>core::cmp::Ord::min (1,528 samples, 0.53%)</title><rect x="30.1751%" y="1573" width="0.5301%" height="15" fill="rgb(221,40,2)"/><text x="30.4251%" y="1583.50"></text></g><g><title>core::cmp::min_by (1,348 samples, 0.47%)</title><rect x="30.2376%" y="1557" width="0.4677%" height="15" fill="rgb(237,157,21)"/><text x="30.4876%" y="1567.50"></text></g><g><title>core::ops::function::FnOnce::call_once (529 samples, 0.18%)</title><rect x="30.5217%" y="1541" width="0.1835%" height="15" fill="rgb(222,94,11)"/><text x="30.7717%" y="1551.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (347 samples, 0.12%)</title><rect x="30.5849%" y="1525" width="0.1204%" height="15" fill="rgb(249,113,6)"/><text x="30.8349%" y="1535.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (160 samples, 0.06%)</title><rect x="31.2163%" y="1557" width="0.0555%" height="15" fill="rgb(238,137,36)"/><text x="31.4663%" y="1567.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1,454 samples, 0.50%)</title><rect x="30.7757%" y="1573" width="0.5045%" height="15" fill="rgb(210,102,26)"/><text x="31.0257%" y="1583.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (371 samples, 0.13%)</title><rect x="31.9404%" y="1557" width="0.1287%" height="15" fill="rgb(218,30,30)"/><text x="32.1904%" y="1567.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2,275 samples, 0.79%)</title><rect x="31.2802%" y="1573" width="0.7893%" height="15" fill="rgb(214,67,26)"/><text x="31.5302%" y="1583.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (6,002 samples, 2.08%)</title><rect x="29.9874%" y="1621" width="2.0824%" height="15" fill="rgb(251,9,53)"/><text x="30.2374%" y="1631.50">c..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (5,948 samples, 2.06%)</title><rect x="30.0061%" y="1605" width="2.0637%" height="15" fill="rgb(228,204,25)"/><text x="30.2561%" y="1615.50">&lt;..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccess::size (3,933 samples, 1.36%)</title><rect x="30.7053%" y="1589" width="1.3646%" height="15" fill="rgb(207,153,8)"/><text x="30.9553%" y="1599.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (6,311 samples, 2.19%)</title><rect x="29.8805%" y="1637" width="2.1896%" height="15" fill="rgb(242,9,16)"/><text x="30.1305%" y="1647.50">c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (430 samples, 0.15%)</title><rect x="32.3613%" y="1605" width="0.1492%" height="15" fill="rgb(217,211,10)"/><text x="32.6113%" y="1615.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (151 samples, 0.05%)</title><rect x="32.4581%" y="1589" width="0.0524%" height="15" fill="rgb(219,228,52)"/><text x="32.7081%" y="1599.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (685 samples, 0.24%)</title><rect x="32.5105%" y="1605" width="0.2377%" height="15" fill="rgb(231,92,29)"/><text x="32.7605%" y="1615.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (281 samples, 0.10%)</title><rect x="32.6506%" y="1589" width="0.0975%" height="15" fill="rgb(232,8,23)"/><text x="32.9006%" y="1599.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (77 samples, 0.03%)</title><rect x="32.7481%" y="1605" width="0.0267%" height="15" fill="rgb(216,211,34)"/><text x="32.9981%" y="1615.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (58 samples, 0.02%)</title><rect x="32.7748%" y="1605" width="0.0201%" height="15" fill="rgb(236,151,0)"/><text x="33.0248%" y="1615.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2,147 samples, 0.74%)</title><rect x="32.0702%" y="1637" width="0.7449%" height="15" fill="rgb(209,168,3)"/><text x="32.3202%" y="1647.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1,824 samples, 0.63%)</title><rect x="32.1822%" y="1621" width="0.6328%" height="15" fill="rgb(208,129,28)"/><text x="32.4322%" y="1631.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (58 samples, 0.02%)</title><rect x="32.7950%" y="1605" width="0.0201%" height="15" fill="rgb(229,78,22)"/><text x="33.0450%" y="1615.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (675 samples, 0.23%)</title><rect x="33.1058%" y="1605" width="0.2342%" height="15" fill="rgb(228,187,13)"/><text x="33.3558%" y="1615.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (410 samples, 0.14%)</title><rect x="33.1978%" y="1589" width="0.1423%" height="15" fill="rgb(240,119,24)"/><text x="33.4478%" y="1599.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (765 samples, 0.27%)</title><rect x="33.3400%" y="1605" width="0.2654%" height="15" fill="rgb(209,194,42)"/><text x="33.5900%" y="1615.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (352 samples, 0.12%)</title><rect x="33.4833%" y="1589" width="0.1221%" height="15" fill="rgb(247,200,46)"/><text x="33.7333%" y="1599.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (72 samples, 0.02%)</title><rect x="33.6055%" y="1605" width="0.0250%" height="15" fill="rgb(218,76,16)"/><text x="33.8555%" y="1615.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_mut_ptr (65 samples, 0.02%)</title><rect x="33.6304%" y="1605" width="0.0226%" height="15" fill="rgb(225,21,48)"/><text x="33.8804%" y="1615.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (2,490 samples, 0.86%)</title><rect x="32.8151%" y="1637" width="0.8639%" height="15" fill="rgb(239,223,50)"/><text x="33.0651%" y="1647.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (2,204 samples, 0.76%)</title><rect x="32.9143%" y="1621" width="0.7647%" height="15" fill="rgb(244,45,21)"/><text x="33.1643%" y="1631.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (75 samples, 0.03%)</title><rect x="33.6530%" y="1605" width="0.0260%" height="15" fill="rgb(232,33,43)"/><text x="33.9030%" y="1615.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,927 samples, 2.06%)</title><rect x="38.3060%" y="1621" width="2.0564%" height="15" fill="rgb(209,8,3)"/><text x="38.5560%" y="1631.50">c..</text></g><g><title>num_bigint_dig::biguint::monty::add_ww (19,266 samples, 6.68%)</title><rect x="33.6790%" y="1637" width="6.6845%" height="15" fill="rgb(214,25,53)"/><text x="33.9290%" y="1647.50">num_bigin..</text></g><g><title>num_bigint_dig::biguint::monty::mul_add_www (17,549 samples, 6.09%)</title><rect x="40.3635%" y="1637" width="6.0887%" height="15" fill="rgb(254,186,54)"/><text x="40.6135%" y="1647.50">num_bigi..</text></g><g><title>num_bigint_dig::biguint::monty::add_mul_vvw (107,340 samples, 37.24%)</title><rect x="9.2113%" y="1653" width="37.2423%" height="15" fill="rgb(208,174,49)"/><text x="9.4613%" y="1663.50">num_bigint_dig::biguint::monty::add_mul_vvw</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (137 samples, 0.05%)</title><rect x="46.6902%" y="1557" width="0.0475%" height="15" fill="rgb(233,191,51)"/><text x="46.9402%" y="1567.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (86 samples, 0.03%)</title><rect x="46.7079%" y="1541" width="0.0298%" height="15" fill="rgb(222,134,10)"/><text x="46.9579%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (409 samples, 0.14%)</title><rect x="46.6115%" y="1589" width="0.1419%" height="15" fill="rgb(230,226,20)"/><text x="46.8615%" y="1599.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (262 samples, 0.09%)</title><rect x="46.6625%" y="1573" width="0.0909%" height="15" fill="rgb(251,111,25)"/><text x="46.9125%" y="1583.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (45 samples, 0.02%)</title><rect x="46.7377%" y="1557" width="0.0156%" height="15" fill="rgb(224,40,46)"/><text x="46.9877%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (450 samples, 0.16%)</title><rect x="46.5976%" y="1605" width="0.1561%" height="15" fill="rgb(236,108,47)"/><text x="46.8476%" y="1615.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (74 samples, 0.03%)</title><rect x="46.7537%" y="1605" width="0.0257%" height="15" fill="rgb(234,93,0)"/><text x="47.0037%" y="1615.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (45 samples, 0.02%)</title><rect x="46.7638%" y="1589" width="0.0156%" height="15" fill="rgb(224,213,32)"/><text x="47.0138%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (675 samples, 0.23%)</title><rect x="46.5476%" y="1637" width="0.2342%" height="15" fill="rgb(251,11,48)"/><text x="46.7976%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (644 samples, 0.22%)</title><rect x="46.5584%" y="1621" width="0.2234%" height="15" fill="rgb(236,173,5)"/><text x="46.8084%" y="1631.50"></text></g><g><title>core::iter::traits::iterator::Iterator::take (31 samples, 0.01%)</title><rect x="46.7915%" y="1637" width="0.0108%" height="15" fill="rgb(230,95,12)"/><text x="47.0415%" y="1647.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (60 samples, 0.02%)</title><rect x="46.8023%" y="1637" width="0.0208%" height="15" fill="rgb(232,209,1)"/><text x="47.0523%" y="1647.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (54 samples, 0.02%)</title><rect x="46.8044%" y="1621" width="0.0187%" height="15" fill="rgb(232,6,1)"/><text x="47.0544%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (53 samples, 0.02%)</title><rect x="46.8047%" y="1605" width="0.0184%" height="15" fill="rgb(210,224,50)"/><text x="47.0547%" y="1615.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccess::size (43 samples, 0.01%)</title><rect x="46.8082%" y="1589" width="0.0149%" height="15" fill="rgb(228,127,35)"/><text x="47.0582%" y="1599.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (40 samples, 0.01%)</title><rect x="46.8092%" y="1573" width="0.0139%" height="15" fill="rgb(245,102,45)"/><text x="47.0592%" y="1583.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (121 samples, 0.04%)</title><rect x="46.8231%" y="1637" width="0.0420%" height="15" fill="rgb(214,1,49)"/><text x="47.0731%" y="1647.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (42 samples, 0.01%)</title><rect x="46.8651%" y="1637" width="0.0146%" height="15" fill="rgb(226,163,40)"/><text x="47.1151%" y="1647.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (31 samples, 0.01%)</title><rect x="46.8689%" y="1621" width="0.0108%" height="15" fill="rgb(239,212,28)"/><text x="47.1189%" y="1631.50"></text></g><g><title>num_bigint_dig::biguint::monty::sub_vv (1,236 samples, 0.43%)</title><rect x="46.4536%" y="1653" width="0.4288%" height="15" fill="rgb(220,20,13)"/><text x="46.7036%" y="1663.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (262 samples, 0.09%)</title><rect x="46.9060%" y="1621" width="0.0909%" height="15" fill="rgb(210,164,35)"/><text x="47.1560%" y="1631.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (91 samples, 0.03%)</title><rect x="46.9653%" y="1605" width="0.0316%" height="15" fill="rgb(248,109,41)"/><text x="47.2153%" y="1615.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::clear (409 samples, 0.14%)</title><rect x="46.8824%" y="1653" width="0.1419%" height="15" fill="rgb(238,23,50)"/><text x="47.1324%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::truncate (389 samples, 0.13%)</title><rect x="46.8894%" y="1637" width="0.1350%" height="15" fill="rgb(211,48,49)"/><text x="47.1394%" y="1647.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (79 samples, 0.03%)</title><rect x="46.9969%" y="1621" width="0.0274%" height="15" fill="rgb(223,36,21)"/><text x="47.2469%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (64 samples, 0.02%)</title><rect x="47.0750%" y="1621" width="0.0222%" height="15" fill="rgb(207,123,46)"/><text x="47.3250%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::inline_capacity (38 samples, 0.01%)</title><rect x="47.0840%" y="1605" width="0.0132%" height="15" fill="rgb(240,218,32)"/><text x="47.3340%" y="1615.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (220 samples, 0.08%)</title><rect x="47.0243%" y="1653" width="0.0763%" height="15" fill="rgb(252,5,43)"/><text x="47.2743%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (187 samples, 0.06%)</title><rect x="47.0358%" y="1637" width="0.0649%" height="15" fill="rgb(252,84,19)"/><text x="47.2858%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (630 samples, 0.22%)</title><rect x="47.4605%" y="1621" width="0.2186%" height="15" fill="rgb(243,152,39)"/><text x="47.7105%" y="1631.50"></text></g><g><title>&lt;core::iter::sources::Repeat&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (287 samples, 0.10%)</title><rect x="47.5795%" y="1605" width="0.0996%" height="15" fill="rgb(234,160,15)"/><text x="47.8295%" y="1615.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (32 samples, 0.01%)</title><rect x="47.6679%" y="1589" width="0.0111%" height="15" fill="rgb(237,34,20)"/><text x="47.9179%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (124 samples, 0.04%)</title><rect x="47.6790%" y="1621" width="0.0430%" height="15" fill="rgb(229,97,13)"/><text x="47.9290%" y="1631.50"></text></g><g><title>core::cmp::min (88 samples, 0.03%)</title><rect x="47.6915%" y="1605" width="0.0305%" height="15" fill="rgb(234,71,50)"/><text x="47.9415%" y="1615.50"></text></g><g><title>core::cmp::Ord::min (78 samples, 0.03%)</title><rect x="47.6950%" y="1589" width="0.0271%" height="15" fill="rgb(253,155,4)"/><text x="47.9450%" y="1599.50"></text></g><g><title>core::cmp::min_by (72 samples, 0.02%)</title><rect x="47.6971%" y="1573" width="0.0250%" height="15" fill="rgb(222,185,37)"/><text x="47.9471%" y="1583.50"></text></g><g><title>core::ops::function::FnOnce::call_once (33 samples, 0.01%)</title><rect x="47.7106%" y="1557" width="0.0114%" height="15" fill="rgb(251,177,13)"/><text x="47.9606%" y="1567.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (308 samples, 0.11%)</title><rect x="47.7273%" y="1621" width="0.1069%" height="15" fill="rgb(250,179,40)"/><text x="47.9773%" y="1631.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (137 samples, 0.05%)</title><rect x="47.7866%" y="1605" width="0.0475%" height="15" fill="rgb(242,44,2)"/><text x="48.0366%" y="1615.50"></text></g><g><title>core::ptr::write (131 samples, 0.05%)</title><rect x="47.8341%" y="1621" width="0.0455%" height="15" fill="rgb(216,177,13)"/><text x="48.0841%" y="1631.50"></text></g><g><title>smallvec::SetLenOnDrop::get (100 samples, 0.03%)</title><rect x="47.8799%" y="1621" width="0.0347%" height="15" fill="rgb(216,106,43)"/><text x="48.1299%" y="1631.50"></text></g><g><title>smallvec::SetLenOnDrop::increment_len (92 samples, 0.03%)</title><rect x="47.9146%" y="1621" width="0.0319%" height="15" fill="rgb(216,183,2)"/><text x="48.1646%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (93 samples, 0.03%)</title><rect x="47.9615%" y="1589" width="0.0323%" height="15" fill="rgb(249,75,3)"/><text x="48.2115%" y="1599.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::try_reserve (134 samples, 0.05%)</title><rect x="47.9538%" y="1605" width="0.0465%" height="15" fill="rgb(219,67,39)"/><text x="48.2038%" y="1615.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::reserve (148 samples, 0.05%)</title><rect x="47.9500%" y="1621" width="0.0513%" height="15" fill="rgb(253,228,2)"/><text x="48.2000%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (32 samples, 0.01%)</title><rect x="48.0014%" y="1621" width="0.0111%" height="15" fill="rgb(235,138,27)"/><text x="48.2514%" y="1631.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (2,584 samples, 0.90%)</title><rect x="47.1163%" y="1637" width="0.8965%" height="15" fill="rgb(236,97,51)"/><text x="47.3663%" y="1647.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::resize (2,732 samples, 0.95%)</title><rect x="47.1007%" y="1653" width="0.9479%" height="15" fill="rgb(240,80,30)"/><text x="47.3507%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::len (79 samples, 0.03%)</title><rect x="48.0211%" y="1637" width="0.0274%" height="15" fill="rgb(230,178,19)"/><text x="48.2711%" y="1647.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple (63 samples, 0.02%)</title><rect x="48.0267%" y="1621" width="0.0219%" height="15" fill="rgb(210,190,27)"/><text x="48.2767%" y="1631.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (234 samples, 0.08%)</title><rect x="48.0756%" y="1637" width="0.0812%" height="15" fill="rgb(222,107,31)"/><text x="48.3256%" y="1647.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (101 samples, 0.04%)</title><rect x="48.1218%" y="1621" width="0.0350%" height="15" fill="rgb(216,127,34)"/><text x="48.3718%" y="1631.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (42 samples, 0.01%)</title><rect x="48.1721%" y="1621" width="0.0146%" height="15" fill="rgb(234,116,52)"/><text x="48.4221%" y="1631.50"></text></g><g><title>num_bigint_dig::biguint::monty::montgomery (131,376 samples, 45.58%)</title><rect x="2.6056%" y="1669" width="45.5817%" height="15" fill="rgb(222,124,15)"/><text x="2.8556%" y="1679.50">num_bigint_dig::biguint::monty::montgomery</text></g><g><title>smallvec::SmallVec&lt;A&gt;::truncate (400 samples, 0.14%)</title><rect x="48.0485%" y="1653" width="0.1388%" height="15" fill="rgb(231,179,28)"/><text x="48.2985%" y="1663.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (88 samples, 0.03%)</title><rect x="48.1568%" y="1637" width="0.0305%" height="15" fill="rgb(226,93,45)"/><text x="48.4068%" y="1647.50"></text></g><g><title>&lt;R as num_bigint_dig::bigrand::RandPrime&gt;::gen_prime (133,528 samples, 46.33%)</title><rect x="1.8607%" y="1749" width="46.3283%" height="15" fill="rgb(215,8,51)"/><text x="2.1107%" y="1759.50">&lt;R as num_bigint_dig::bigrand::RandPrime&gt;::gen_prime</text></g><g><title>num_bigint_dig::prime::probably_prime (133,528 samples, 46.33%)</title><rect x="1.8607%" y="1733" width="46.3283%" height="15" fill="rgb(223,106,5)"/><text x="2.1107%" y="1743.50">num_bigint_dig::prime::probably_prime</text></g><g><title>num_bigint_dig::prime::probably_prime_miller_rabin (131,517 samples, 45.63%)</title><rect x="2.5585%" y="1717" width="45.6306%" height="15" fill="rgb(250,191,5)"/><text x="2.8085%" y="1727.50">num_bigint_dig::prime::probably_prime_miller_rabin</text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (131,517 samples, 45.63%)</title><rect x="2.5585%" y="1701" width="45.6306%" height="15" fill="rgb(242,132,44)"/><text x="2.8085%" y="1711.50">num_bigint_dig::biguint::BigUint::modpow</text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (131,517 samples, 45.63%)</title><rect x="2.5585%" y="1685" width="45.6306%" height="15" fill="rgb(251,152,29)"/><text x="2.8085%" y="1695.50">num_bigint_dig::biguint::monty::monty_modpow</text></g><g><title>rsa::algorithms::generate_multi_prime_key (133,530 samples, 46.33%)</title><rect x="1.8607%" y="1765" width="46.3290%" height="15" fill="rgb(218,179,5)"/><text x="2.1107%" y="1775.50">rsa::algorithms::generate_multi_prime_key</text></g><g><title>num_bigint_dig::biguint::monty::add_ww (58 samples, 0.02%)</title><rect x="48.2265%" y="1605" width="0.0201%" height="15" fill="rgb(227,67,19)"/><text x="48.4765%" y="1615.50"></text></g><g><title>num_bigint_dig::biguint::monty::add_mul_vvw (193 samples, 0.07%)</title><rect x="48.1974%" y="1621" width="0.0670%" height="15" fill="rgb(233,119,31)"/><text x="48.4474%" y="1631.50"></text></g><g><title>num_bigint_dig::biguint::monty::mul_add_www (51 samples, 0.02%)</title><rect x="48.2467%" y="1605" width="0.0177%" height="15" fill="rgb(241,120,22)"/><text x="48.4967%" y="1615.50"></text></g><g><title>rsa::key::RSAPrivateKey::decrypt (220 samples, 0.08%)</title><rect x="48.1901%" y="1765" width="0.0763%" height="15" fill="rgb(224,102,30)"/><text x="48.4401%" y="1775.50"></text></g><g><title>rsa::pkcs1v15::decrypt (220 samples, 0.08%)</title><rect x="48.1901%" y="1749" width="0.0763%" height="15" fill="rgb(210,164,37)"/><text x="48.4401%" y="1759.50"></text></g><g><title>rsa::pkcs1v15::decrypt_inner (220 samples, 0.08%)</title><rect x="48.1901%" y="1733" width="0.0763%" height="15" fill="rgb(226,191,16)"/><text x="48.4401%" y="1743.50"></text></g><g><title>&lt;rsa::key::RSAPrivateKey as rsa::raw::DecryptionPrimitive&gt;::raw_decryption_primitive (220 samples, 0.08%)</title><rect x="48.1901%" y="1717" width="0.0763%" height="15" fill="rgb(214,40,45)"/><text x="48.4401%" y="1727.50"></text></g><g><title>rsa::internals::decrypt_and_check (220 samples, 0.08%)</title><rect x="48.1901%" y="1701" width="0.0763%" height="15" fill="rgb(244,29,26)"/><text x="48.4401%" y="1711.50"></text></g><g><title>rsa::internals::decrypt (220 samples, 0.08%)</title><rect x="48.1901%" y="1685" width="0.0763%" height="15" fill="rgb(216,16,5)"/><text x="48.4401%" y="1695.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (220 samples, 0.08%)</title><rect x="48.1901%" y="1669" width="0.0763%" height="15" fill="rgb(249,76,35)"/><text x="48.4401%" y="1679.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (220 samples, 0.08%)</title><rect x="48.1901%" y="1653" width="0.0763%" height="15" fill="rgb(207,11,44)"/><text x="48.4401%" y="1663.50"></text></g><g><title>num_bigint_dig::biguint::monty::montgomery (220 samples, 0.08%)</title><rect x="48.1901%" y="1637" width="0.0763%" height="15" fill="rgb(228,190,49)"/><text x="48.4401%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.02%)</title><rect x="48.2664%" y="1605" width="0.0153%" height="15" fill="rgb(214,173,12)"/><text x="48.5164%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (44 samples, 0.02%)</title><rect x="48.2664%" y="1589" width="0.0153%" height="15" fill="rgb(218,26,35)"/><text x="48.5164%" y="1599.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_lucas (53 samples, 0.02%)</title><rect x="48.2664%" y="1701" width="0.0184%" height="15" fill="rgb(220,200,19)"/><text x="48.5164%" y="1711.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::mul (53 samples, 0.02%)</title><rect x="48.2664%" y="1685" width="0.0184%" height="15" fill="rgb(239,95,49)"/><text x="48.5164%" y="1695.50"></text></g><g><title>num_bigint_dig::algorithms::mul::mul3 (53 samples, 0.02%)</title><rect x="48.2664%" y="1669" width="0.0184%" height="15" fill="rgb(235,85,53)"/><text x="48.5164%" y="1679.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac3 (53 samples, 0.02%)</title><rect x="48.2664%" y="1653" width="0.0184%" height="15" fill="rgb(233,133,31)"/><text x="48.5164%" y="1663.50"></text></g><g><title>num_bigint_dig::algorithms::mac::long (53 samples, 0.02%)</title><rect x="48.2664%" y="1637" width="0.0184%" height="15" fill="rgb(218,25,20)"/><text x="48.5164%" y="1647.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_digit (53 samples, 0.02%)</title><rect x="48.2664%" y="1621" width="0.0184%" height="15" fill="rgb(252,210,38)"/><text x="48.5164%" y="1631.50"></text></g><g><title>rsa::key::RSAPrivateKey::new (64 samples, 0.02%)</title><rect x="48.2664%" y="1765" width="0.0222%" height="15" fill="rgb(242,134,21)"/><text x="48.5164%" y="1775.50"></text></g><g><title>rsa::algorithms::generate_multi_prime_key (64 samples, 0.02%)</title><rect x="48.2664%" y="1749" width="0.0222%" height="15" fill="rgb(213,28,48)"/><text x="48.5164%" y="1759.50"></text></g><g><title>&lt;R as num_bigint_dig::bigrand::RandPrime&gt;::gen_prime (64 samples, 0.02%)</title><rect x="48.2664%" y="1733" width="0.0222%" height="15" fill="rgb(250,196,2)"/><text x="48.5164%" y="1743.50"></text></g><g><title>num_bigint_dig::prime::probably_prime (64 samples, 0.02%)</title><rect x="48.2664%" y="1717" width="0.0222%" height="15" fill="rgb(227,5,17)"/><text x="48.5164%" y="1727.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (39 samples, 0.01%)</title><rect x="48.3053%" y="1589" width="0.0135%" height="15" fill="rgb(221,226,24)"/><text x="48.5553%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.04%)</title><rect x="48.2921%" y="1621" width="0.0382%" height="15" fill="rgb(211,5,48)"/><text x="48.5421%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (110 samples, 0.04%)</title><rect x="48.2921%" y="1605" width="0.0382%" height="15" fill="rgb(219,150,6)"/><text x="48.5421%" y="1615.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (33 samples, 0.01%)</title><rect x="48.3188%" y="1589" width="0.0114%" height="15" fill="rgb(251,46,16)"/><text x="48.5688%" y="1599.50"></text></g><g><title>num_bigint_dig::biguint::monty::add_mul_vvw (151 samples, 0.05%)</title><rect x="48.2921%" y="1637" width="0.0524%" height="15" fill="rgb(220,204,40)"/><text x="48.5421%" y="1647.50"></text></g><g><title>rsa::pkcs1v15::decrypt (159 samples, 0.06%)</title><rect x="48.2914%" y="1765" width="0.0552%" height="15" fill="rgb(211,85,2)"/><text x="48.5414%" y="1775.50"></text></g><g><title>rsa::pkcs1v15::decrypt_inner (159 samples, 0.06%)</title><rect x="48.2914%" y="1749" width="0.0552%" height="15" fill="rgb(229,17,7)"/><text x="48.5414%" y="1759.50"></text></g><g><title>&lt;rsa::key::RSAPrivateKey as rsa::raw::DecryptionPrimitive&gt;::raw_decryption_primitive (159 samples, 0.06%)</title><rect x="48.2914%" y="1733" width="0.0552%" height="15" fill="rgb(239,72,28)"/><text x="48.5414%" y="1743.50"></text></g><g><title>rsa::internals::decrypt_and_check (159 samples, 0.06%)</title><rect x="48.2914%" y="1717" width="0.0552%" height="15" fill="rgb(230,47,54)"/><text x="48.5414%" y="1727.50"></text></g><g><title>rsa::internals::decrypt (159 samples, 0.06%)</title><rect x="48.2914%" y="1701" width="0.0552%" height="15" fill="rgb(214,50,8)"/><text x="48.5414%" y="1711.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (159 samples, 0.06%)</title><rect x="48.2914%" y="1685" width="0.0552%" height="15" fill="rgb(216,198,43)"/><text x="48.5414%" y="1695.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (159 samples, 0.06%)</title><rect x="48.2914%" y="1669" width="0.0552%" height="15" fill="rgb(234,20,35)"/><text x="48.5414%" y="1679.50"></text></g><g><title>num_bigint_dig::biguint::monty::montgomery (159 samples, 0.06%)</title><rect x="48.2914%" y="1653" width="0.0552%" height="15" fill="rgb(254,45,19)"/><text x="48.5414%" y="1663.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (109 samples, 0.04%)</title><rect x="48.3476%" y="901" width="0.0378%" height="15" fill="rgb(219,14,44)"/><text x="48.5976%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (109 samples, 0.04%)</title><rect x="48.3476%" y="885" width="0.0378%" height="15" fill="rgb(217,220,26)"/><text x="48.5976%" y="895.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (58 samples, 0.02%)</title><rect x="48.3653%" y="869" width="0.0201%" height="15" fill="rgb(213,158,28)"/><text x="48.6153%" y="879.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (58 samples, 0.02%)</title><rect x="48.3653%" y="853" width="0.0201%" height="15" fill="rgb(252,51,52)"/><text x="48.6153%" y="863.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (35 samples, 0.01%)</title><rect x="48.3733%" y="837" width="0.0121%" height="15" fill="rgb(246,89,16)"/><text x="48.6233%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (45 samples, 0.02%)</title><rect x="48.4122%" y="869" width="0.0156%" height="15" fill="rgb(216,158,49)"/><text x="48.6622%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (30 samples, 0.01%)</title><rect x="48.4174%" y="853" width="0.0104%" height="15" fill="rgb(236,107,19)"/><text x="48.6674%" y="863.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (233 samples, 0.08%)</title><rect x="48.3476%" y="917" width="0.0808%" height="15" fill="rgb(228,185,30)"/><text x="48.5976%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release::{{closure}} (124 samples, 0.04%)</title><rect x="48.3854%" y="901" width="0.0430%" height="15" fill="rgb(246,134,8)"/><text x="48.6354%" y="911.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::eq (73 samples, 0.03%)</title><rect x="48.4031%" y="885" width="0.0253%" height="15" fill="rgb(214,143,50)"/><text x="48.6531%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (243 samples, 0.08%)</title><rect x="48.3476%" y="1013" width="0.0843%" height="15" fill="rgb(228,75,8)"/><text x="48.5976%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (243 samples, 0.08%)</title><rect x="48.3476%" y="997" width="0.0843%" height="15" fill="rgb(207,175,4)"/><text x="48.5976%" y="1007.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release (243 samples, 0.08%)</title><rect x="48.3476%" y="981" width="0.0843%" height="15" fill="rgb(205,108,24)"/><text x="48.5976%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (243 samples, 0.08%)</title><rect x="48.3476%" y="965" width="0.0843%" height="15" fill="rgb(244,120,49)"/><text x="48.5976%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release::{{closure}} (243 samples, 0.08%)</title><rect x="48.3476%" y="949" width="0.0843%" height="15" fill="rgb(223,47,38)"/><text x="48.5976%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release (243 samples, 0.08%)</title><rect x="48.3476%" y="933" width="0.0843%" height="15" fill="rgb(229,179,11)"/><text x="48.5976%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_running (36 samples, 0.01%)</title><rect x="48.4319%" y="997" width="0.0125%" height="15" fill="rgb(231,122,1)"/><text x="48.6819%" y="1007.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::bind_scheduler (36 samples, 0.01%)</title><rect x="48.4319%" y="981" width="0.0125%" height="15" fill="rgb(245,119,9)"/><text x="48.6819%" y="991.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind (36 samples, 0.01%)</title><rect x="48.4319%" y="965" width="0.0125%" height="15" fill="rgb(241,163,25)"/><text x="48.6819%" y="975.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (36 samples, 0.01%)</title><rect x="48.4319%" y="949" width="0.0125%" height="15" fill="rgb(217,214,3)"/><text x="48.6819%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind::{{closure}} (36 samples, 0.01%)</title><rect x="48.4319%" y="933" width="0.0125%" height="15" fill="rgb(240,86,28)"/><text x="48.6819%" y="943.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (75 samples, 0.03%)</title><rect x="48.4635%" y="917" width="0.0260%" height="15" fill="rgb(215,47,9)"/><text x="48.7135%" y="927.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (83 samples, 0.03%)</title><rect x="48.4979%" y="917" width="0.0288%" height="15" fill="rgb(252,25,45)"/><text x="48.7479%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned (40 samples, 0.01%)</title><rect x="48.5128%" y="901" width="0.0139%" height="15" fill="rgb(251,164,9)"/><text x="48.7628%" y="911.50"></text></g><g><title>start_thread (641 samples, 0.22%)</title><rect x="48.3473%" y="1765" width="0.2224%" height="15" fill="rgb(233,194,0)"/><text x="48.5973%" y="1775.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (641 samples, 0.22%)</title><rect x="48.3473%" y="1749" width="0.2224%" height="15" fill="rgb(249,111,24)"/><text x="48.5973%" y="1759.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (641 samples, 0.22%)</title><rect x="48.3473%" y="1733" width="0.2224%" height="15" fill="rgb(250,223,3)"/><text x="48.5973%" y="1743.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (641 samples, 0.22%)</title><rect x="48.3473%" y="1717" width="0.2224%" height="15" fill="rgb(236,178,37)"/><text x="48.5973%" y="1727.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1701" width="0.2224%" height="15" fill="rgb(241,158,50)"/><text x="48.5973%" y="1711.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1685" width="0.2224%" height="15" fill="rgb(213,121,41)"/><text x="48.5973%" y="1695.50"></text></g><g><title>std::panic::catch_unwind (641 samples, 0.22%)</title><rect x="48.3473%" y="1669" width="0.2224%" height="15" fill="rgb(240,92,3)"/><text x="48.5973%" y="1679.50"></text></g><g><title>std::panicking::try (641 samples, 0.22%)</title><rect x="48.3473%" y="1653" width="0.2224%" height="15" fill="rgb(205,123,3)"/><text x="48.5973%" y="1663.50"></text></g><g><title>__rust_try (641 samples, 0.22%)</title><rect x="48.3473%" y="1637" width="0.2224%" height="15" fill="rgb(205,97,47)"/><text x="48.5973%" y="1647.50"></text></g><g><title>std::panicking::try::do_call (641 samples, 0.22%)</title><rect x="48.3473%" y="1621" width="0.2224%" height="15" fill="rgb(247,152,14)"/><text x="48.5973%" y="1631.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (641 samples, 0.22%)</title><rect x="48.3473%" y="1605" width="0.2224%" height="15" fill="rgb(248,195,53)"/><text x="48.5973%" y="1615.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1589" width="0.2224%" height="15" fill="rgb(226,201,16)"/><text x="48.5973%" y="1599.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (641 samples, 0.22%)</title><rect x="48.3473%" y="1573" width="0.2224%" height="15" fill="rgb(205,98,0)"/><text x="48.5973%" y="1583.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1557" width="0.2224%" height="15" fill="rgb(214,191,48)"/><text x="48.5973%" y="1567.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (641 samples, 0.22%)</title><rect x="48.3473%" y="1541" width="0.2224%" height="15" fill="rgb(237,112,39)"/><text x="48.5973%" y="1551.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (641 samples, 0.22%)</title><rect x="48.3473%" y="1525" width="0.2224%" height="15" fill="rgb(247,203,27)"/><text x="48.5973%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1509" width="0.2224%" height="15" fill="rgb(235,124,28)"/><text x="48.5973%" y="1519.50"></text></g><g><title>tokio::runtime::task::raw::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1493" width="0.2224%" height="15" fill="rgb(208,207,46)"/><text x="48.5973%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1477" width="0.2224%" height="15" fill="rgb(234,176,4)"/><text x="48.5973%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (641 samples, 0.22%)</title><rect x="48.3473%" y="1461" width="0.2224%" height="15" fill="rgb(230,133,28)"/><text x="48.5973%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (641 samples, 0.22%)</title><rect x="48.3473%" y="1445" width="0.2224%" height="15" fill="rgb(211,137,40)"/><text x="48.5973%" y="1455.50"></text></g><g><title>std::panic::catch_unwind (641 samples, 0.22%)</title><rect x="48.3473%" y="1429" width="0.2224%" height="15" fill="rgb(254,35,13)"/><text x="48.5973%" y="1439.50"></text></g><g><title>std::panicking::try (641 samples, 0.22%)</title><rect x="48.3473%" y="1413" width="0.2224%" height="15" fill="rgb(225,49,51)"/><text x="48.5973%" y="1423.50"></text></g><g><title>__rust_try (641 samples, 0.22%)</title><rect x="48.3473%" y="1397" width="0.2224%" height="15" fill="rgb(251,10,15)"/><text x="48.5973%" y="1407.50"></text></g><g><title>std::panicking::try::do_call (641 samples, 0.22%)</title><rect x="48.3473%" y="1381" width="0.2224%" height="15" fill="rgb(228,207,15)"/><text x="48.5973%" y="1391.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (641 samples, 0.22%)</title><rect x="48.3473%" y="1365" width="0.2224%" height="15" fill="rgb(241,99,19)"/><text x="48.5973%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1349" width="0.2224%" height="15" fill="rgb(207,104,49)"/><text x="48.5973%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1333" width="0.2224%" height="15" fill="rgb(234,99,18)"/><text x="48.5973%" y="1343.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (641 samples, 0.22%)</title><rect x="48.3473%" y="1317" width="0.2224%" height="15" fill="rgb(213,191,49)"/><text x="48.5973%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1301" width="0.2224%" height="15" fill="rgb(210,226,19)"/><text x="48.5973%" y="1311.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1285" width="0.2224%" height="15" fill="rgb(229,97,18)"/><text x="48.5973%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1269" width="0.2224%" height="15" fill="rgb(211,167,15)"/><text x="48.5973%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (641 samples, 0.22%)</title><rect x="48.3473%" y="1253" width="0.2224%" height="15" fill="rgb(210,169,34)"/><text x="48.5973%" y="1263.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (641 samples, 0.22%)</title><rect x="48.3473%" y="1237" width="0.2224%" height="15" fill="rgb(241,121,31)"/><text x="48.5973%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1221" width="0.2224%" height="15" fill="rgb(232,40,11)"/><text x="48.5973%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (641 samples, 0.22%)</title><rect x="48.3473%" y="1205" width="0.2224%" height="15" fill="rgb(205,86,26)"/><text x="48.5973%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (641 samples, 0.22%)</title><rect x="48.3473%" y="1189" width="0.2224%" height="15" fill="rgb(231,126,28)"/><text x="48.5973%" y="1199.50"></text></g><g><title>tokio::coop::budget (641 samples, 0.22%)</title><rect x="48.3473%" y="1173" width="0.2224%" height="15" fill="rgb(219,221,18)"/><text x="48.5973%" y="1183.50"></text></g><g><title>tokio::coop::with_budget (641 samples, 0.22%)</title><rect x="48.3473%" y="1157" width="0.2224%" height="15" fill="rgb(211,40,0)"/><text x="48.5973%" y="1167.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (641 samples, 0.22%)</title><rect x="48.3473%" y="1141" width="0.2224%" height="15" fill="rgb(239,85,43)"/><text x="48.5973%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (641 samples, 0.22%)</title><rect x="48.3473%" y="1125" width="0.2224%" height="15" fill="rgb(231,55,21)"/><text x="48.5973%" y="1135.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1109" width="0.2224%" height="15" fill="rgb(225,184,43)"/><text x="48.5973%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (641 samples, 0.22%)</title><rect x="48.3473%" y="1093" width="0.2224%" height="15" fill="rgb(251,158,41)"/><text x="48.5973%" y="1103.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (641 samples, 0.22%)</title><rect x="48.3473%" y="1077" width="0.2224%" height="15" fill="rgb(234,159,37)"/><text x="48.5973%" y="1087.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1061" width="0.2224%" height="15" fill="rgb(216,204,22)"/><text x="48.5973%" y="1071.50"></text></g><g><title>tokio::runtime::task::raw::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1045" width="0.2224%" height="15" fill="rgb(214,17,3)"/><text x="48.5973%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (641 samples, 0.22%)</title><rect x="48.3473%" y="1029" width="0.2224%" height="15" fill="rgb(212,111,17)"/><text x="48.5973%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (397 samples, 0.14%)</title><rect x="48.4319%" y="1013" width="0.1377%" height="15" fill="rgb(221,157,24)"/><text x="48.6819%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (361 samples, 0.13%)</title><rect x="48.4444%" y="997" width="0.1253%" height="15" fill="rgb(252,16,13)"/><text x="48.6944%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (361 samples, 0.13%)</title><rect x="48.4444%" y="981" width="0.1253%" height="15" fill="rgb(221,62,2)"/><text x="48.6944%" y="991.50"></text></g><g><title>std::panicking::try (361 samples, 0.13%)</title><rect x="48.4444%" y="965" width="0.1253%" height="15" fill="rgb(247,87,22)"/><text x="48.6944%" y="975.50"></text></g><g><title>__rust_try (361 samples, 0.13%)</title><rect x="48.4444%" y="949" width="0.1253%" height="15" fill="rgb(215,73,9)"/><text x="48.6944%" y="959.50"></text></g><g><title>std::panicking::try::do_call (361 samples, 0.13%)</title><rect x="48.4444%" y="933" width="0.1253%" height="15" fill="rgb(207,175,33)"/><text x="48.6944%" y="943.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::take (124 samples, 0.04%)</title><rect x="48.5267%" y="917" width="0.0430%" height="15" fill="rgb(243,129,54)"/><text x="48.7767%" y="927.50"></text></g><g><title>core::ptr::read (70 samples, 0.02%)</title><rect x="48.5454%" y="901" width="0.0243%" height="15" fill="rgb(227,119,45)"/><text x="48.7954%" y="911.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;&amp;mut T&gt;&gt;::from (37 samples, 0.01%)</title><rect x="48.6290%" y="917" width="0.0128%" height="15" fill="rgb(205,109,36)"/><text x="48.8790%" y="927.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (216 samples, 0.07%)</title><rect x="48.5849%" y="965" width="0.0749%" height="15" fill="rgb(205,6,39)"/><text x="48.8349%" y="975.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (216 samples, 0.07%)</title><rect x="48.5849%" y="949" width="0.0749%" height="15" fill="rgb(221,32,16)"/><text x="48.8349%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (216 samples, 0.07%)</title><rect x="48.5849%" y="933" width="0.0749%" height="15" fill="rgb(228,144,50)"/><text x="48.8349%" y="943.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (45 samples, 0.02%)</title><rect x="48.6443%" y="917" width="0.0156%" height="15" fill="rgb(229,201,53)"/><text x="48.8943%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (326 samples, 0.11%)</title><rect x="48.5697%" y="1685" width="0.1131%" height="15" fill="rgb(249,153,27)"/><text x="48.8197%" y="1695.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (326 samples, 0.11%)</title><rect x="48.5697%" y="1669" width="0.1131%" height="15" fill="rgb(227,106,25)"/><text x="48.8197%" y="1679.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (326 samples, 0.11%)</title><rect x="48.5697%" y="1653" width="0.1131%" height="15" fill="rgb(230,65,29)"/><text x="48.8197%" y="1663.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (326 samples, 0.11%)</title><rect x="48.5697%" y="1637" width="0.1131%" height="15" fill="rgb(221,57,46)"/><text x="48.8197%" y="1647.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (326 samples, 0.11%)</title><rect x="48.5697%" y="1621" width="0.1131%" height="15" fill="rgb(229,161,17)"/><text x="48.8197%" y="1631.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (326 samples, 0.11%)</title><rect x="48.5697%" y="1605" width="0.1131%" height="15" fill="rgb(222,213,11)"/><text x="48.8197%" y="1615.50"></text></g><g><title>tokio::runtime::task::raw::poll (326 samples, 0.11%)</title><rect x="48.5697%" y="1589" width="0.1131%" height="15" fill="rgb(235,35,13)"/><text x="48.8197%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (326 samples, 0.11%)</title><rect x="48.5697%" y="1573" width="0.1131%" height="15" fill="rgb(233,158,34)"/><text x="48.8197%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (326 samples, 0.11%)</title><rect x="48.5697%" y="1557" width="0.1131%" height="15" fill="rgb(215,151,48)"/><text x="48.8197%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (326 samples, 0.11%)</title><rect x="48.5697%" y="1541" width="0.1131%" height="15" fill="rgb(229,84,14)"/><text x="48.8197%" y="1551.50"></text></g><g><title>std::panic::catch_unwind (326 samples, 0.11%)</title><rect x="48.5697%" y="1525" width="0.1131%" height="15" fill="rgb(229,68,14)"/><text x="48.8197%" y="1535.50"></text></g><g><title>std::panicking::try (326 samples, 0.11%)</title><rect x="48.5697%" y="1509" width="0.1131%" height="15" fill="rgb(243,106,26)"/><text x="48.8197%" y="1519.50"></text></g><g><title>__rust_try (326 samples, 0.11%)</title><rect x="48.5697%" y="1493" width="0.1131%" height="15" fill="rgb(206,45,38)"/><text x="48.8197%" y="1503.50"></text></g><g><title>std::panicking::try::do_call (326 samples, 0.11%)</title><rect x="48.5697%" y="1477" width="0.1131%" height="15" fill="rgb(226,6,15)"/><text x="48.8197%" y="1487.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (326 samples, 0.11%)</title><rect x="48.5697%" y="1461" width="0.1131%" height="15" fill="rgb(232,22,54)"/><text x="48.8197%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (326 samples, 0.11%)</title><rect x="48.5697%" y="1445" width="0.1131%" height="15" fill="rgb(229,222,32)"/><text x="48.8197%" y="1455.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (326 samples, 0.11%)</title><rect x="48.5697%" y="1429" width="0.1131%" height="15" fill="rgb(228,62,29)"/><text x="48.8197%" y="1439.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (326 samples, 0.11%)</title><rect x="48.5697%" y="1413" width="0.1131%" height="15" fill="rgb(251,103,34)"/><text x="48.8197%" y="1423.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (326 samples, 0.11%)</title><rect x="48.5697%" y="1397" width="0.1131%" height="15" fill="rgb(233,12,30)"/><text x="48.8197%" y="1407.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (326 samples, 0.11%)</title><rect x="48.5697%" y="1381" width="0.1131%" height="15" fill="rgb(238,52,0)"/><text x="48.8197%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (326 samples, 0.11%)</title><rect x="48.5697%" y="1365" width="0.1131%" height="15" fill="rgb(223,98,5)"/><text x="48.8197%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (326 samples, 0.11%)</title><rect x="48.5697%" y="1349" width="0.1131%" height="15" fill="rgb(228,75,37)"/><text x="48.8197%" y="1359.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (326 samples, 0.11%)</title><rect x="48.5697%" y="1333" width="0.1131%" height="15" fill="rgb(205,115,49)"/><text x="48.8197%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (326 samples, 0.11%)</title><rect x="48.5697%" y="1317" width="0.1131%" height="15" fill="rgb(250,154,43)"/><text x="48.8197%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (326 samples, 0.11%)</title><rect x="48.5697%" y="1301" width="0.1131%" height="15" fill="rgb(226,43,29)"/><text x="48.8197%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (309 samples, 0.11%)</title><rect x="48.5756%" y="1285" width="0.1072%" height="15" fill="rgb(249,228,39)"/><text x="48.8256%" y="1295.50"></text></g><g><title>tokio::coop::budget (309 samples, 0.11%)</title><rect x="48.5756%" y="1269" width="0.1072%" height="15" fill="rgb(216,79,43)"/><text x="48.8256%" y="1279.50"></text></g><g><title>tokio::coop::with_budget (309 samples, 0.11%)</title><rect x="48.5756%" y="1253" width="0.1072%" height="15" fill="rgb(228,95,12)"/><text x="48.8256%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (309 samples, 0.11%)</title><rect x="48.5756%" y="1237" width="0.1072%" height="15" fill="rgb(249,221,15)"/><text x="48.8256%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (309 samples, 0.11%)</title><rect x="48.5756%" y="1221" width="0.1072%" height="15" fill="rgb(233,34,13)"/><text x="48.8256%" y="1231.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (309 samples, 0.11%)</title><rect x="48.5756%" y="1205" width="0.1072%" height="15" fill="rgb(214,103,39)"/><text x="48.8256%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (309 samples, 0.11%)</title><rect x="48.5756%" y="1189" width="0.1072%" height="15" fill="rgb(251,126,39)"/><text x="48.8256%" y="1199.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (309 samples, 0.11%)</title><rect x="48.5756%" y="1173" width="0.1072%" height="15" fill="rgb(214,216,36)"/><text x="48.8256%" y="1183.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (309 samples, 0.11%)</title><rect x="48.5756%" y="1157" width="0.1072%" height="15" fill="rgb(220,221,8)"/><text x="48.8256%" y="1167.50"></text></g><g><title>tokio::runtime::task::raw::poll (309 samples, 0.11%)</title><rect x="48.5756%" y="1141" width="0.1072%" height="15" fill="rgb(240,216,3)"/><text x="48.8256%" y="1151.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (309 samples, 0.11%)</title><rect x="48.5756%" y="1125" width="0.1072%" height="15" fill="rgb(232,218,17)"/><text x="48.8256%" y="1135.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (282 samples, 0.10%)</title><rect x="48.5849%" y="1109" width="0.0978%" height="15" fill="rgb(229,163,45)"/><text x="48.8349%" y="1119.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (282 samples, 0.10%)</title><rect x="48.5849%" y="1093" width="0.0978%" height="15" fill="rgb(231,110,42)"/><text x="48.8349%" y="1103.50"></text></g><g><title>std::panic::catch_unwind (282 samples, 0.10%)</title><rect x="48.5849%" y="1077" width="0.0978%" height="15" fill="rgb(208,170,48)"/><text x="48.8349%" y="1087.50"></text></g><g><title>std::panicking::try (282 samples, 0.10%)</title><rect x="48.5849%" y="1061" width="0.0978%" height="15" fill="rgb(239,116,25)"/><text x="48.8349%" y="1071.50"></text></g><g><title>__rust_try (282 samples, 0.10%)</title><rect x="48.5849%" y="1045" width="0.0978%" height="15" fill="rgb(219,200,50)"/><text x="48.8349%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (282 samples, 0.10%)</title><rect x="48.5849%" y="1029" width="0.0978%" height="15" fill="rgb(245,200,0)"/><text x="48.8349%" y="1039.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (282 samples, 0.10%)</title><rect x="48.5849%" y="1013" width="0.0978%" height="15" fill="rgb(245,119,33)"/><text x="48.8349%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (282 samples, 0.10%)</title><rect x="48.5849%" y="997" width="0.0978%" height="15" fill="rgb(231,125,12)"/><text x="48.8349%" y="1007.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (282 samples, 0.10%)</title><rect x="48.5849%" y="981" width="0.0978%" height="15" fill="rgb(216,96,41)"/><text x="48.8349%" y="991.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::drop_future_or_output (66 samples, 0.02%)</title><rect x="48.6599%" y="965" width="0.0229%" height="15" fill="rgb(248,43,45)"/><text x="48.9099%" y="975.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (66 samples, 0.02%)</title><rect x="48.6599%" y="949" width="0.0229%" height="15" fill="rgb(217,222,7)"/><text x="48.9099%" y="959.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::drop_future_or_output::{{closure}} (66 samples, 0.02%)</title><rect x="48.6599%" y="933" width="0.0229%" height="15" fill="rgb(233,28,6)"/><text x="48.9099%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (45 samples, 0.02%)</title><rect x="48.6672%" y="917" width="0.0156%" height="15" fill="rgb(231,218,15)"/><text x="48.9172%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.01%)</title><rect x="48.6717%" y="901" width="0.0111%" height="15" fill="rgb(226,171,48)"/><text x="48.9217%" y="911.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (30 samples, 0.01%)</title><rect x="48.6994%" y="1429" width="0.0104%" height="15" fill="rgb(235,201,9)"/><text x="48.9494%" y="1439.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (98 samples, 0.03%)</title><rect x="48.6828%" y="1509" width="0.0340%" height="15" fill="rgb(217,80,15)"/><text x="48.9328%" y="1519.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (98 samples, 0.03%)</title><rect x="48.6828%" y="1493" width="0.0340%" height="15" fill="rgb(219,152,8)"/><text x="48.9328%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (98 samples, 0.03%)</title><rect x="48.6828%" y="1477" width="0.0340%" height="15" fill="rgb(243,107,38)"/><text x="48.9328%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (50 samples, 0.02%)</title><rect x="48.6994%" y="1461" width="0.0173%" height="15" fill="rgb(231,17,5)"/><text x="48.9494%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (50 samples, 0.02%)</title><rect x="48.6994%" y="1445" width="0.0173%" height="15" fill="rgb(209,25,54)"/><text x="48.9494%" y="1455.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (106 samples, 0.04%)</title><rect x="48.6828%" y="1605" width="0.0368%" height="15" fill="rgb(219,0,2)"/><text x="48.9328%" y="1615.50"></text></g><g><title>log::__private_api_log (106 samples, 0.04%)</title><rect x="48.6828%" y="1589" width="0.0368%" height="15" fill="rgb(246,9,5)"/><text x="48.9328%" y="1599.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (106 samples, 0.04%)</title><rect x="48.6828%" y="1573" width="0.0368%" height="15" fill="rgb(226,159,4)"/><text x="48.9328%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (106 samples, 0.04%)</title><rect x="48.6828%" y="1557" width="0.0368%" height="15" fill="rgb(219,175,34)"/><text x="48.9328%" y="1567.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (106 samples, 0.04%)</title><rect x="48.6828%" y="1541" width="0.0368%" height="15" fill="rgb(236,10,46)"/><text x="48.9328%" y="1551.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (106 samples, 0.04%)</title><rect x="48.6828%" y="1525" width="0.0368%" height="15" fill="rgb(240,211,16)"/><text x="48.9328%" y="1535.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 0.03%)</title><rect x="48.7255%" y="1253" width="0.0337%" height="15" fill="rgb(205,3,43)"/><text x="48.9755%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (97 samples, 0.03%)</title><rect x="48.7255%" y="1237" width="0.0337%" height="15" fill="rgb(245,7,22)"/><text x="48.9755%" y="1247.50"></text></g><g><title>&lt;tunneler::streams::error::RecvError as core::fmt::Display&gt;::fmt (108 samples, 0.04%)</title><rect x="48.7255%" y="1349" width="0.0375%" height="15" fill="rgb(239,132,32)"/><text x="48.9755%" y="1359.50"></text></g><g><title>core::fmt::Formatter::write_fmt (108 samples, 0.04%)</title><rect x="48.7255%" y="1333" width="0.0375%" height="15" fill="rgb(228,202,34)"/><text x="48.9755%" y="1343.50"></text></g><g><title>core::fmt::write (108 samples, 0.04%)</title><rect x="48.7255%" y="1317" width="0.0375%" height="15" fill="rgb(254,200,22)"/><text x="48.9755%" y="1327.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (108 samples, 0.04%)</title><rect x="48.7255%" y="1301" width="0.0375%" height="15" fill="rgb(219,10,39)"/><text x="48.9755%" y="1311.50"></text></g><g><title>std::io::Write::write_all (108 samples, 0.04%)</title><rect x="48.7255%" y="1285" width="0.0375%" height="15" fill="rgb(226,210,39)"/><text x="48.9755%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (108 samples, 0.04%)</title><rect x="48.7255%" y="1269" width="0.0375%" height="15" fill="rgb(208,219,16)"/><text x="48.9755%" y="1279.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (141 samples, 0.05%)</title><rect x="48.7199%" y="1461" width="0.0489%" height="15" fill="rgb(216,158,51)"/><text x="48.9699%" y="1471.50"></text></g><g><title>std::io::Write::write_fmt (141 samples, 0.05%)</title><rect x="48.7199%" y="1445" width="0.0489%" height="15" fill="rgb(233,14,44)"/><text x="48.9699%" y="1455.50"></text></g><g><title>core::fmt::write (141 samples, 0.05%)</title><rect x="48.7199%" y="1429" width="0.0489%" height="15" fill="rgb(237,97,39)"/><text x="48.9699%" y="1439.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (141 samples, 0.05%)</title><rect x="48.7199%" y="1413" width="0.0489%" height="15" fill="rgb(218,198,43)"/><text x="48.9699%" y="1423.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (141 samples, 0.05%)</title><rect x="48.7199%" y="1397" width="0.0489%" height="15" fill="rgb(231,104,20)"/><text x="48.9699%" y="1407.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (141 samples, 0.05%)</title><rect x="48.7199%" y="1381" width="0.0489%" height="15" fill="rgb(254,36,13)"/><text x="48.9699%" y="1391.50"></text></g><g><title>core::fmt::write (141 samples, 0.05%)</title><rect x="48.7199%" y="1365" width="0.0489%" height="15" fill="rgb(248,14,50)"/><text x="48.9699%" y="1375.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (145 samples, 0.05%)</title><rect x="48.7196%" y="1605" width="0.0503%" height="15" fill="rgb(217,107,29)"/><text x="48.9696%" y="1615.50"></text></g><g><title>log::__private_api_log (145 samples, 0.05%)</title><rect x="48.7196%" y="1589" width="0.0503%" height="15" fill="rgb(251,169,33)"/><text x="48.9696%" y="1599.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (145 samples, 0.05%)</title><rect x="48.7196%" y="1573" width="0.0503%" height="15" fill="rgb(217,108,32)"/><text x="48.9696%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (145 samples, 0.05%)</title><rect x="48.7196%" y="1557" width="0.0503%" height="15" fill="rgb(219,66,42)"/><text x="48.9696%" y="1567.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (145 samples, 0.05%)</title><rect x="48.7196%" y="1541" width="0.0503%" height="15" fill="rgb(206,180,7)"/><text x="48.9696%" y="1551.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (145 samples, 0.05%)</title><rect x="48.7196%" y="1525" width="0.0503%" height="15" fill="rgb(208,226,31)"/><text x="48.9696%" y="1535.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (145 samples, 0.05%)</title><rect x="48.7196%" y="1509" width="0.0503%" height="15" fill="rgb(218,26,49)"/><text x="48.9696%" y="1519.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (145 samples, 0.05%)</title><rect x="48.7196%" y="1493" width="0.0503%" height="15" fill="rgb(233,197,48)"/><text x="48.9696%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (145 samples, 0.05%)</title><rect x="48.7196%" y="1477" width="0.0503%" height="15" fill="rgb(252,181,51)"/><text x="48.9696%" y="1487.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (253 samples, 0.09%)</title><rect x="48.6828%" y="1621" width="0.0878%" height="15" fill="rgb(253,90,19)"/><text x="48.9328%" y="1631.50"></text></g><g><title>core::task::wake::Waker::wake (66 samples, 0.02%)</title><rect x="48.7706%" y="1285" width="0.0229%" height="15" fill="rgb(215,171,30)"/><text x="49.0206%" y="1295.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (60 samples, 0.02%)</title><rect x="48.7726%" y="1269" width="0.0208%" height="15" fill="rgb(214,222,9)"/><text x="49.0226%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (60 samples, 0.02%)</title><rect x="48.7726%" y="1253" width="0.0208%" height="15" fill="rgb(223,3,22)"/><text x="49.0226%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (36 samples, 0.01%)</title><rect x="48.7810%" y="1237" width="0.0125%" height="15" fill="rgb(225,196,46)"/><text x="49.0310%" y="1247.50"></text></g><g><title>std::sys_common::poison::Flag::get (32 samples, 0.01%)</title><rect x="48.7935%" y="1221" width="0.0111%" height="15" fill="rgb(209,110,37)"/><text x="49.0435%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (32 samples, 0.01%)</title><rect x="48.7935%" y="1205" width="0.0111%" height="15" fill="rgb(249,89,12)"/><text x="49.0435%" y="1215.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (37 samples, 0.01%)</title><rect x="48.7935%" y="1237" width="0.0128%" height="15" fill="rgb(226,27,33)"/><text x="49.0435%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1525" width="0.0489%" height="15" fill="rgb(213,82,22)"/><text x="49.0206%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (141 samples, 0.05%)</title><rect x="48.7706%" y="1509" width="0.0489%" height="15" fill="rgb(248,140,0)"/><text x="49.0206%" y="1519.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1493" width="0.0489%" height="15" fill="rgb(228,106,3)"/><text x="49.0206%" y="1503.50"></text></g><g><title>tokio::runtime::park::Inner::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1477" width="0.0489%" height="15" fill="rgb(209,23,37)"/><text x="49.0206%" y="1487.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (141 samples, 0.05%)</title><rect x="48.7706%" y="1461" width="0.0489%" height="15" fill="rgb(241,93,50)"/><text x="49.0206%" y="1471.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1445" width="0.0489%" height="15" fill="rgb(253,46,43)"/><text x="49.0206%" y="1455.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1429" width="0.0489%" height="15" fill="rgb(226,206,43)"/><text x="49.0206%" y="1439.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1413" width="0.0489%" height="15" fill="rgb(217,54,7)"/><text x="49.0206%" y="1423.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (141 samples, 0.05%)</title><rect x="48.7706%" y="1397" width="0.0489%" height="15" fill="rgb(223,5,52)"/><text x="49.0206%" y="1407.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1381" width="0.0489%" height="15" fill="rgb(206,52,46)"/><text x="49.0206%" y="1391.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (141 samples, 0.05%)</title><rect x="48.7706%" y="1365" width="0.0489%" height="15" fill="rgb(253,136,11)"/><text x="49.0206%" y="1375.50"></text></g><g><title>tokio::io::driver::Driver::turn (141 samples, 0.05%)</title><rect x="48.7706%" y="1349" width="0.0489%" height="15" fill="rgb(208,106,33)"/><text x="49.0206%" y="1359.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (141 samples, 0.05%)</title><rect x="48.7706%" y="1333" width="0.0489%" height="15" fill="rgb(206,54,4)"/><text x="49.0206%" y="1343.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (141 samples, 0.05%)</title><rect x="48.7706%" y="1317" width="0.0489%" height="15" fill="rgb(213,3,15)"/><text x="49.0206%" y="1327.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (141 samples, 0.05%)</title><rect x="48.7706%" y="1301" width="0.0489%" height="15" fill="rgb(252,211,39)"/><text x="49.0206%" y="1311.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.03%)</title><rect x="48.7935%" y="1285" width="0.0260%" height="15" fill="rgb(223,6,36)"/><text x="49.0435%" y="1295.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.03%)</title><rect x="48.7935%" y="1269" width="0.0260%" height="15" fill="rgb(252,169,45)"/><text x="49.0435%" y="1279.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (75 samples, 0.03%)</title><rect x="48.7935%" y="1253" width="0.0260%" height="15" fill="rgb(212,48,26)"/><text x="49.0435%" y="1263.50"></text></g><g><title>std::sys_common::poison::map_result (38 samples, 0.01%)</title><rect x="48.8063%" y="1237" width="0.0132%" height="15" fill="rgb(251,102,48)"/><text x="49.0563%" y="1247.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (69 samples, 0.02%)</title><rect x="48.8195%" y="1141" width="0.0239%" height="15" fill="rgb(243,208,16)"/><text x="49.0695%" y="1151.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (69 samples, 0.02%)</title><rect x="48.8195%" y="1125" width="0.0239%" height="15" fill="rgb(219,96,24)"/><text x="49.0695%" y="1135.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (69 samples, 0.02%)</title><rect x="48.8195%" y="1109" width="0.0239%" height="15" fill="rgb(219,33,29)"/><text x="49.0695%" y="1119.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (69 samples, 0.02%)</title><rect x="48.8195%" y="1093" width="0.0239%" height="15" fill="rgb(223,176,5)"/><text x="49.0695%" y="1103.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (69 samples, 0.02%)</title><rect x="48.8195%" y="1077" width="0.0239%" height="15" fill="rgb(228,140,14)"/><text x="49.0695%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (69 samples, 0.02%)</title><rect x="48.8195%" y="1061" width="0.0239%" height="15" fill="rgb(217,179,31)"/><text x="49.0695%" y="1071.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (69 samples, 0.02%)</title><rect x="48.8195%" y="1045" width="0.0239%" height="15" fill="rgb(230,9,30)"/><text x="49.0695%" y="1055.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (69 samples, 0.02%)</title><rect x="48.8195%" y="1029" width="0.0239%" height="15" fill="rgb(230,136,20)"/><text x="49.0695%" y="1039.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (71 samples, 0.02%)</title><rect x="48.8195%" y="1157" width="0.0246%" height="15" fill="rgb(215,210,22)"/><text x="49.0695%" y="1167.50"></text></g><g><title>tokio::coop::CURRENT::__getit (34 samples, 0.01%)</title><rect x="48.8465%" y="965" width="0.0118%" height="15" fill="rgb(218,43,5)"/><text x="49.0965%" y="975.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (34 samples, 0.01%)</title><rect x="48.8465%" y="949" width="0.0118%" height="15" fill="rgb(216,11,5)"/><text x="49.0965%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (95 samples, 0.03%)</title><rect x="48.8441%" y="1141" width="0.0330%" height="15" fill="rgb(209,82,29)"/><text x="49.0941%" y="1151.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (95 samples, 0.03%)</title><rect x="48.8441%" y="1125" width="0.0330%" height="15" fill="rgb(244,115,12)"/><text x="49.0941%" y="1135.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (95 samples, 0.03%)</title><rect x="48.8441%" y="1109" width="0.0330%" height="15" fill="rgb(222,82,18)"/><text x="49.0941%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (95 samples, 0.03%)</title><rect x="48.8441%" y="1093" width="0.0330%" height="15" fill="rgb(249,227,8)"/><text x="49.0941%" y="1103.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (95 samples, 0.03%)</title><rect x="48.8441%" y="1077" width="0.0330%" height="15" fill="rgb(253,141,45)"/><text x="49.0941%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (95 samples, 0.03%)</title><rect x="48.8441%" y="1061" width="0.0330%" height="15" fill="rgb(234,184,4)"/><text x="49.0941%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (95 samples, 0.03%)</title><rect x="48.8441%" y="1045" width="0.0330%" height="15" fill="rgb(218,194,23)"/><text x="49.0941%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (95 samples, 0.03%)</title><rect x="48.8441%" y="1029" width="0.0330%" height="15" fill="rgb(235,66,41)"/><text x="49.0941%" y="1039.50"></text></g><g><title>tokio::coop::poll_proceed (88 samples, 0.03%)</title><rect x="48.8465%" y="1013" width="0.0305%" height="15" fill="rgb(245,217,1)"/><text x="49.0965%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (88 samples, 0.03%)</title><rect x="48.8465%" y="997" width="0.0305%" height="15" fill="rgb(229,91,1)"/><text x="49.0965%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (88 samples, 0.03%)</title><rect x="48.8465%" y="981" width="0.0305%" height="15" fill="rgb(207,101,30)"/><text x="49.0965%" y="991.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (54 samples, 0.02%)</title><rect x="48.8583%" y="965" width="0.0187%" height="15" fill="rgb(223,82,49)"/><text x="49.1083%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (34 samples, 0.01%)</title><rect x="48.8861%" y="1013" width="0.0118%" height="15" fill="rgb(218,167,17)"/><text x="49.1361%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (90 samples, 0.03%)</title><rect x="48.8771%" y="1141" width="0.0312%" height="15" fill="rgb(208,103,14)"/><text x="49.1271%" y="1151.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (90 samples, 0.03%)</title><rect x="48.8771%" y="1125" width="0.0312%" height="15" fill="rgb(238,20,8)"/><text x="49.1271%" y="1135.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (90 samples, 0.03%)</title><rect x="48.8771%" y="1109" width="0.0312%" height="15" fill="rgb(218,80,54)"/><text x="49.1271%" y="1119.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (90 samples, 0.03%)</title><rect x="48.8771%" y="1093" width="0.0312%" height="15" fill="rgb(240,144,17)"/><text x="49.1271%" y="1103.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (90 samples, 0.03%)</title><rect x="48.8771%" y="1077" width="0.0312%" height="15" fill="rgb(245,27,50)"/><text x="49.1271%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (90 samples, 0.03%)</title><rect x="48.8771%" y="1061" width="0.0312%" height="15" fill="rgb(251,51,7)"/><text x="49.1271%" y="1071.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (90 samples, 0.03%)</title><rect x="48.8771%" y="1045" width="0.0312%" height="15" fill="rgb(245,217,29)"/><text x="49.1271%" y="1055.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (90 samples, 0.03%)</title><rect x="48.8771%" y="1029" width="0.0312%" height="15" fill="rgb(221,176,29)"/><text x="49.1271%" y="1039.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (224 samples, 0.08%)</title><rect x="48.8441%" y="1157" width="0.0777%" height="15" fill="rgb(212,180,24)"/><text x="49.0941%" y="1167.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.02%)</title><rect x="48.9218%" y="1141" width="0.0187%" height="15" fill="rgb(254,24,2)"/><text x="49.1718%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (54 samples, 0.02%)</title><rect x="48.9218%" y="1125" width="0.0187%" height="15" fill="rgb(230,100,2)"/><text x="49.1718%" y="1135.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (54 samples, 0.02%)</title><rect x="48.9218%" y="1109" width="0.0187%" height="15" fill="rgb(219,142,25)"/><text x="49.1718%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (54 samples, 0.02%)</title><rect x="48.9218%" y="1093" width="0.0187%" height="15" fill="rgb(240,73,43)"/><text x="49.1718%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (54 samples, 0.02%)</title><rect x="48.9218%" y="1077" width="0.0187%" height="15" fill="rgb(214,114,15)"/><text x="49.1718%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (54 samples, 0.02%)</title><rect x="48.9218%" y="1061" width="0.0187%" height="15" fill="rgb(207,130,4)"/><text x="49.1718%" y="1071.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (54 samples, 0.02%)</title><rect x="48.9218%" y="1045" width="0.0187%" height="15" fill="rgb(221,25,40)"/><text x="49.1718%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (54 samples, 0.02%)</title><rect x="48.9218%" y="1029" width="0.0187%" height="15" fill="rgb(241,184,7)"/><text x="49.1718%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (50 samples, 0.02%)</title><rect x="48.9232%" y="1013" width="0.0173%" height="15" fill="rgb(235,159,4)"/><text x="49.1732%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (50 samples, 0.02%)</title><rect x="48.9232%" y="997" width="0.0173%" height="15" fill="rgb(214,87,48)"/><text x="49.1732%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (1,115 samples, 0.39%)</title><rect x="48.5697%" y="1765" width="0.3869%" height="15" fill="rgb(246,198,24)"/><text x="48.8197%" y="1775.50"></text></g><g><title>std::panicking::try (1,115 samples, 0.39%)</title><rect x="48.5697%" y="1749" width="0.3869%" height="15" fill="rgb(209,66,40)"/><text x="48.8197%" y="1759.50"></text></g><g><title>__rust_try (1,115 samples, 0.39%)</title><rect x="48.5697%" y="1733" width="0.3869%" height="15" fill="rgb(233,147,39)"/><text x="48.8197%" y="1743.50"></text></g><g><title>std::panicking::try::do_call (1,115 samples, 0.39%)</title><rect x="48.5697%" y="1717" width="0.3869%" height="15" fill="rgb(231,145,52)"/><text x="48.8197%" y="1727.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,115 samples, 0.39%)</title><rect x="48.5697%" y="1701" width="0.3869%" height="15" fill="rgb(206,20,26)"/><text x="48.8197%" y="1711.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (789 samples, 0.27%)</title><rect x="48.6828%" y="1685" width="0.2737%" height="15" fill="rgb(238,220,4)"/><text x="48.9328%" y="1695.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (789 samples, 0.27%)</title><rect x="48.6828%" y="1669" width="0.2737%" height="15" fill="rgb(252,195,42)"/><text x="48.9328%" y="1679.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (789 samples, 0.27%)</title><rect x="48.6828%" y="1653" width="0.2737%" height="15" fill="rgb(209,10,6)"/><text x="48.9328%" y="1663.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (789 samples, 0.27%)</title><rect x="48.6828%" y="1637" width="0.2737%" height="15" fill="rgb(229,3,52)"/><text x="48.9328%" y="1647.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (536 samples, 0.19%)</title><rect x="48.7706%" y="1621" width="0.1860%" height="15" fill="rgb(253,49,37)"/><text x="49.0206%" y="1631.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (536 samples, 0.19%)</title><rect x="48.7706%" y="1605" width="0.1860%" height="15" fill="rgb(240,103,49)"/><text x="49.0206%" y="1615.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (536 samples, 0.19%)</title><rect x="48.7706%" y="1589" width="0.1860%" height="15" fill="rgb(250,182,30)"/><text x="49.0206%" y="1599.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (536 samples, 0.19%)</title><rect x="48.7706%" y="1573" width="0.1860%" height="15" fill="rgb(248,8,30)"/><text x="49.0206%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (536 samples, 0.19%)</title><rect x="48.7706%" y="1557" width="0.1860%" height="15" fill="rgb(237,120,30)"/><text x="49.0206%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (536 samples, 0.19%)</title><rect x="48.7706%" y="1541" width="0.1860%" height="15" fill="rgb(221,146,34)"/><text x="49.0206%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (395 samples, 0.14%)</title><rect x="48.8195%" y="1525" width="0.1370%" height="15" fill="rgb(242,55,13)"/><text x="49.0695%" y="1535.50"></text></g><g><title>tokio::coop::budget (395 samples, 0.14%)</title><rect x="48.8195%" y="1509" width="0.1370%" height="15" fill="rgb(242,112,31)"/><text x="49.0695%" y="1519.50"></text></g><g><title>tokio::coop::with_budget (395 samples, 0.14%)</title><rect x="48.8195%" y="1493" width="0.1370%" height="15" fill="rgb(249,192,27)"/><text x="49.0695%" y="1503.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (395 samples, 0.14%)</title><rect x="48.8195%" y="1477" width="0.1370%" height="15" fill="rgb(208,204,44)"/><text x="49.0695%" y="1487.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (395 samples, 0.14%)</title><rect x="48.8195%" y="1461" width="0.1370%" height="15" fill="rgb(208,93,54)"/><text x="49.0695%" y="1471.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (395 samples, 0.14%)</title><rect x="48.8195%" y="1445" width="0.1370%" height="15" fill="rgb(242,1,31)"/><text x="49.0695%" y="1455.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (395 samples, 0.14%)</title><rect x="48.8195%" y="1429" width="0.1370%" height="15" fill="rgb(241,83,25)"/><text x="49.0695%" y="1439.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (395 samples, 0.14%)</title><rect x="48.8195%" y="1413" width="0.1370%" height="15" fill="rgb(205,169,50)"/><text x="49.0695%" y="1423.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (395 samples, 0.14%)</title><rect x="48.8195%" y="1397" width="0.1370%" height="15" fill="rgb(239,186,37)"/><text x="49.0695%" y="1407.50"></text></g><g><title>tokio::runtime::task::raw::poll (395 samples, 0.14%)</title><rect x="48.8195%" y="1381" width="0.1370%" height="15" fill="rgb(205,221,10)"/><text x="49.0695%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (395 samples, 0.14%)</title><rect x="48.8195%" y="1365" width="0.1370%" height="15" fill="rgb(218,196,15)"/><text x="49.0695%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (395 samples, 0.14%)</title><rect x="48.8195%" y="1349" width="0.1370%" height="15" fill="rgb(218,196,35)"/><text x="49.0695%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (395 samples, 0.14%)</title><rect x="48.8195%" y="1333" width="0.1370%" height="15" fill="rgb(233,63,24)"/><text x="49.0695%" y="1343.50"></text></g><g><title>std::panic::catch_unwind (395 samples, 0.14%)</title><rect x="48.8195%" y="1317" width="0.1370%" height="15" fill="rgb(225,8,4)"/><text x="49.0695%" y="1327.50"></text></g><g><title>std::panicking::try (395 samples, 0.14%)</title><rect x="48.8195%" y="1301" width="0.1370%" height="15" fill="rgb(234,105,35)"/><text x="49.0695%" y="1311.50"></text></g><g><title>__rust_try (395 samples, 0.14%)</title><rect x="48.8195%" y="1285" width="0.1370%" height="15" fill="rgb(236,21,32)"/><text x="49.0695%" y="1295.50"></text></g><g><title>std::panicking::try::do_call (395 samples, 0.14%)</title><rect x="48.8195%" y="1269" width="0.1370%" height="15" fill="rgb(228,109,6)"/><text x="49.0695%" y="1279.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (395 samples, 0.14%)</title><rect x="48.8195%" y="1253" width="0.1370%" height="15" fill="rgb(229,215,31)"/><text x="49.0695%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (395 samples, 0.14%)</title><rect x="48.8195%" y="1237" width="0.1370%" height="15" fill="rgb(221,52,54)"/><text x="49.0695%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (395 samples, 0.14%)</title><rect x="48.8195%" y="1221" width="0.1370%" height="15" fill="rgb(252,129,43)"/><text x="49.0695%" y="1231.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (395 samples, 0.14%)</title><rect x="48.8195%" y="1205" width="0.1370%" height="15" fill="rgb(248,183,27)"/><text x="49.0695%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (395 samples, 0.14%)</title><rect x="48.8195%" y="1189" width="0.1370%" height="15" fill="rgb(250,0,22)"/><text x="49.0695%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (395 samples, 0.14%)</title><rect x="48.8195%" y="1173" width="0.1370%" height="15" fill="rgb(213,166,10)"/><text x="49.0695%" y="1183.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (100 samples, 0.03%)</title><rect x="48.9218%" y="1157" width="0.0347%" height="15" fill="rgb(207,163,36)"/><text x="49.1718%" y="1167.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (46 samples, 0.02%)</title><rect x="48.9406%" y="1141" width="0.0160%" height="15" fill="rgb(208,122,22)"/><text x="49.1906%" y="1151.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (46 samples, 0.02%)</title><rect x="48.9406%" y="1125" width="0.0160%" height="15" fill="rgb(207,104,49)"/><text x="49.1906%" y="1135.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (46 samples, 0.02%)</title><rect x="48.9406%" y="1109" width="0.0160%" height="15" fill="rgb(248,211,50)"/><text x="49.1906%" y="1119.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (46 samples, 0.02%)</title><rect x="48.9406%" y="1093" width="0.0160%" height="15" fill="rgb(217,13,45)"/><text x="49.1906%" y="1103.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (46 samples, 0.02%)</title><rect x="48.9406%" y="1077" width="0.0160%" height="15" fill="rgb(211,216,49)"/><text x="49.1906%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (46 samples, 0.02%)</title><rect x="48.9406%" y="1061" width="0.0160%" height="15" fill="rgb(221,58,53)"/><text x="49.1906%" y="1071.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (46 samples, 0.02%)</title><rect x="48.9406%" y="1045" width="0.0160%" height="15" fill="rgb(220,112,41)"/><text x="49.1906%" y="1055.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (46 samples, 0.02%)</title><rect x="48.9406%" y="1029" width="0.0160%" height="15" fill="rgb(236,38,28)"/><text x="49.1906%" y="1039.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (58 samples, 0.02%)</title><rect x="48.9607%" y="1189" width="0.0201%" height="15" fill="rgb(227,195,22)"/><text x="49.2107%" y="1199.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (58 samples, 0.02%)</title><rect x="48.9607%" y="1173" width="0.0201%" height="15" fill="rgb(214,55,33)"/><text x="49.2107%" y="1183.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (36 samples, 0.01%)</title><rect x="48.9808%" y="1189" width="0.0125%" height="15" fill="rgb(248,80,13)"/><text x="49.2308%" y="1199.50"></text></g><g><title>tokio::time::driver::ClockTime::now (36 samples, 0.01%)</title><rect x="48.9808%" y="1173" width="0.0125%" height="15" fill="rgb(238,52,6)"/><text x="49.2308%" y="1183.50"></text></g><g><title>tokio::time::driver::ClockTime::instant_to_tick (36 samples, 0.01%)</title><rect x="48.9808%" y="1157" width="0.0125%" height="15" fill="rgb(224,198,47)"/><text x="49.2308%" y="1167.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (36 samples, 0.01%)</title><rect x="48.9808%" y="1141" width="0.0125%" height="15" fill="rgb(233,171,20)"/><text x="49.2308%" y="1151.50"></text></g><g><title>std::time::Instant::checked_duration_since (36 samples, 0.01%)</title><rect x="48.9808%" y="1125" width="0.0125%" height="15" fill="rgb(241,30,25)"/><text x="49.2308%" y="1135.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (34 samples, 0.01%)</title><rect x="48.9815%" y="1109" width="0.0118%" height="15" fill="rgb(207,171,38)"/><text x="49.2315%" y="1119.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (66 samples, 0.02%)</title><rect x="48.9933%" y="1125" width="0.0229%" height="15" fill="rgb(234,70,1)"/><text x="49.2433%" y="1135.50"></text></g><g><title>std::thread::panicking (47 samples, 0.02%)</title><rect x="48.9999%" y="1109" width="0.0163%" height="15" fill="rgb(232,178,18)"/><text x="49.2499%" y="1119.50"></text></g><g><title>std::panicking::panicking (45 samples, 0.02%)</title><rect x="49.0006%" y="1093" width="0.0156%" height="15" fill="rgb(241,78,40)"/><text x="49.2506%" y="1103.50"></text></g><g><title>std::panicking::panic_count::is_zero (35 samples, 0.01%)</title><rect x="49.0041%" y="1077" width="0.0121%" height="15" fill="rgb(222,35,25)"/><text x="49.2541%" y="1087.50"></text></g><g><title>tokio::time::driver::handle::Handle::lock (92 samples, 0.03%)</title><rect x="48.9933%" y="1189" width="0.0319%" height="15" fill="rgb(207,92,16)"/><text x="49.2433%" y="1199.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (92 samples, 0.03%)</title><rect x="48.9933%" y="1173" width="0.0319%" height="15" fill="rgb(216,59,51)"/><text x="49.2433%" y="1183.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (92 samples, 0.03%)</title><rect x="48.9933%" y="1157" width="0.0319%" height="15" fill="rgb(213,80,28)"/><text x="49.2433%" y="1167.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (92 samples, 0.03%)</title><rect x="48.9933%" y="1141" width="0.0319%" height="15" fill="rgb(220,93,7)"/><text x="49.2433%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (60 samples, 0.02%)</title><rect x="49.0887%" y="1125" width="0.0208%" height="15" fill="rgb(225,24,44)"/><text x="49.3387%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (126 samples, 0.04%)</title><rect x="49.0773%" y="1141" width="0.0437%" height="15" fill="rgb(243,74,40)"/><text x="49.3273%" y="1151.50"></text></g><g><title>core::slice::raw::from_raw_parts (33 samples, 0.01%)</title><rect x="49.1095%" y="1125" width="0.0114%" height="15" fill="rgb(228,39,7)"/><text x="49.3595%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (232 samples, 0.08%)</title><rect x="49.0585%" y="1157" width="0.0805%" height="15" fill="rgb(227,79,8)"/><text x="49.3085%" y="1167.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (52 samples, 0.02%)</title><rect x="49.1210%" y="1141" width="0.0180%" height="15" fill="rgb(236,58,11)"/><text x="49.3710%" y="1151.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (56 samples, 0.02%)</title><rect x="49.1678%" y="1141" width="0.0194%" height="15" fill="rgb(249,63,35)"/><text x="49.4178%" y="1151.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (36 samples, 0.01%)</title><rect x="49.1748%" y="1125" width="0.0125%" height="15" fill="rgb(252,114,16)"/><text x="49.4248%" y="1135.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (193 samples, 0.07%)</title><rect x="49.1394%" y="1157" width="0.0670%" height="15" fill="rgb(254,151,24)"/><text x="49.3894%" y="1167.50"></text></g><g><title>core::mem::replace (40 samples, 0.01%)</title><rect x="49.1925%" y="1141" width="0.0139%" height="15" fill="rgb(253,54,39)"/><text x="49.4425%" y="1151.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (815 samples, 0.28%)</title><rect x="48.9565%" y="1733" width="0.2828%" height="15" fill="rgb(243,25,45)"/><text x="49.2065%" y="1743.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (815 samples, 0.28%)</title><rect x="48.9565%" y="1717" width="0.2828%" height="15" fill="rgb(234,134,9)"/><text x="49.2065%" y="1727.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (815 samples, 0.28%)</title><rect x="48.9565%" y="1701" width="0.2828%" height="15" fill="rgb(227,166,31)"/><text x="49.2065%" y="1711.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (815 samples, 0.28%)</title><rect x="48.9565%" y="1685" width="0.2828%" height="15" fill="rgb(245,143,41)"/><text x="49.2065%" y="1695.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (815 samples, 0.28%)</title><rect x="48.9565%" y="1669" width="0.2828%" height="15" fill="rgb(238,181,32)"/><text x="49.2065%" y="1679.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (815 samples, 0.28%)</title><rect x="48.9565%" y="1653" width="0.2828%" height="15" fill="rgb(224,113,18)"/><text x="49.2065%" y="1663.50"></text></g><g><title>tokio::runtime::task::raw::poll (815 samples, 0.28%)</title><rect x="48.9565%" y="1637" width="0.2828%" height="15" fill="rgb(240,229,28)"/><text x="49.2065%" y="1647.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (815 samples, 0.28%)</title><rect x="48.9565%" y="1621" width="0.2828%" height="15" fill="rgb(250,185,3)"/><text x="49.2065%" y="1631.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (815 samples, 0.28%)</title><rect x="48.9565%" y="1605" width="0.2828%" height="15" fill="rgb(212,59,25)"/><text x="49.2065%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (815 samples, 0.28%)</title><rect x="48.9565%" y="1589" width="0.2828%" height="15" fill="rgb(221,87,20)"/><text x="49.2065%" y="1599.50"></text></g><g><title>std::panic::catch_unwind (815 samples, 0.28%)</title><rect x="48.9565%" y="1573" width="0.2828%" height="15" fill="rgb(213,74,28)"/><text x="49.2065%" y="1583.50"></text></g><g><title>std::panicking::try (815 samples, 0.28%)</title><rect x="48.9565%" y="1557" width="0.2828%" height="15" fill="rgb(224,132,34)"/><text x="49.2065%" y="1567.50"></text></g><g><title>__rust_try (815 samples, 0.28%)</title><rect x="48.9565%" y="1541" width="0.2828%" height="15" fill="rgb(222,101,24)"/><text x="49.2065%" y="1551.50"></text></g><g><title>std::panicking::try::do_call (815 samples, 0.28%)</title><rect x="48.9565%" y="1525" width="0.2828%" height="15" fill="rgb(254,142,4)"/><text x="49.2065%" y="1535.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (815 samples, 0.28%)</title><rect x="48.9565%" y="1509" width="0.2828%" height="15" fill="rgb(230,229,49)"/><text x="49.2065%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (815 samples, 0.28%)</title><rect x="48.9565%" y="1493" width="0.2828%" height="15" fill="rgb(238,70,47)"/><text x="49.2065%" y="1503.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (815 samples, 0.28%)</title><rect x="48.9565%" y="1477" width="0.2828%" height="15" fill="rgb(231,160,17)"/><text x="49.2065%" y="1487.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (815 samples, 0.28%)</title><rect x="48.9565%" y="1461" width="0.2828%" height="15" fill="rgb(218,68,53)"/><text x="49.2065%" y="1471.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (815 samples, 0.28%)</title><rect x="48.9565%" y="1445" width="0.2828%" height="15" fill="rgb(236,111,10)"/><text x="49.2065%" y="1455.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (815 samples, 0.28%)</title><rect x="48.9565%" y="1429" width="0.2828%" height="15" fill="rgb(224,34,41)"/><text x="49.2065%" y="1439.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (815 samples, 0.28%)</title><rect x="48.9565%" y="1413" width="0.2828%" height="15" fill="rgb(241,118,19)"/><text x="49.2065%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (815 samples, 0.28%)</title><rect x="48.9565%" y="1397" width="0.2828%" height="15" fill="rgb(238,129,25)"/><text x="49.2065%" y="1407.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (815 samples, 0.28%)</title><rect x="48.9565%" y="1381" width="0.2828%" height="15" fill="rgb(238,22,31)"/><text x="49.2065%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (815 samples, 0.28%)</title><rect x="48.9565%" y="1365" width="0.2828%" height="15" fill="rgb(222,174,48)"/><text x="49.2065%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (815 samples, 0.28%)</title><rect x="48.9565%" y="1349" width="0.2828%" height="15" fill="rgb(206,152,40)"/><text x="49.2065%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (803 samples, 0.28%)</title><rect x="48.9607%" y="1333" width="0.2786%" height="15" fill="rgb(218,99,54)"/><text x="49.2107%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (803 samples, 0.28%)</title><rect x="48.9607%" y="1317" width="0.2786%" height="15" fill="rgb(220,174,26)"/><text x="49.2107%" y="1327.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (803 samples, 0.28%)</title><rect x="48.9607%" y="1301" width="0.2786%" height="15" fill="rgb(245,116,9)"/><text x="49.2107%" y="1311.50"></text></g><g><title>tokio::runtime::park::Inner::park (803 samples, 0.28%)</title><rect x="48.9607%" y="1285" width="0.2786%" height="15" fill="rgb(209,72,35)"/><text x="49.2107%" y="1295.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (803 samples, 0.28%)</title><rect x="48.9607%" y="1269" width="0.2786%" height="15" fill="rgb(226,126,21)"/><text x="49.2107%" y="1279.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (803 samples, 0.28%)</title><rect x="48.9607%" y="1253" width="0.2786%" height="15" fill="rgb(227,192,1)"/><text x="49.2107%" y="1263.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (803 samples, 0.28%)</title><rect x="48.9607%" y="1237" width="0.2786%" height="15" fill="rgb(237,180,29)"/><text x="49.2107%" y="1247.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (803 samples, 0.28%)</title><rect x="48.9607%" y="1221" width="0.2786%" height="15" fill="rgb(230,197,35)"/><text x="49.2107%" y="1231.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (803 samples, 0.28%)</title><rect x="48.9607%" y="1205" width="0.2786%" height="15" fill="rgb(246,193,31)"/><text x="49.2107%" y="1215.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (617 samples, 0.21%)</title><rect x="49.0252%" y="1189" width="0.2141%" height="15" fill="rgb(241,36,4)"/><text x="49.2752%" y="1199.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (617 samples, 0.21%)</title><rect x="49.0252%" y="1173" width="0.2141%" height="15" fill="rgb(241,130,17)"/><text x="49.2752%" y="1183.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (88 samples, 0.03%)</title><rect x="49.2088%" y="1157" width="0.0305%" height="15" fill="rgb(206,137,32)"/><text x="49.4588%" y="1167.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (48 samples, 0.02%)</title><rect x="49.2393%" y="1461" width="0.0167%" height="15" fill="rgb(237,228,51)"/><text x="49.4893%" y="1471.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (48 samples, 0.02%)</title><rect x="49.2393%" y="1445" width="0.0167%" height="15" fill="rgb(243,6,42)"/><text x="49.4893%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (71 samples, 0.02%)</title><rect x="49.2393%" y="1509" width="0.0246%" height="15" fill="rgb(251,74,28)"/><text x="49.4893%" y="1519.50"></text></g><g><title>std::io::Write::write_fmt (71 samples, 0.02%)</title><rect x="49.2393%" y="1493" width="0.0246%" height="15" fill="rgb(218,20,49)"/><text x="49.4893%" y="1503.50"></text></g><g><title>core::fmt::write (71 samples, 0.02%)</title><rect x="49.2393%" y="1477" width="0.0246%" height="15" fill="rgb(238,28,14)"/><text x="49.4893%" y="1487.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (29 samples, 0.01%)</title><rect x="49.2639%" y="1461" width="0.0101%" height="15" fill="rgb(229,40,46)"/><text x="49.5139%" y="1471.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (29 samples, 0.01%)</title><rect x="49.2639%" y="1445" width="0.0101%" height="15" fill="rgb(244,195,20)"/><text x="49.5139%" y="1455.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (29 samples, 0.01%)</title><rect x="49.2639%" y="1429" width="0.0101%" height="15" fill="rgb(253,56,35)"/><text x="49.5139%" y="1439.50"></text></g><g><title>core::fmt::write (29 samples, 0.01%)</title><rect x="49.2639%" y="1413" width="0.0101%" height="15" fill="rgb(210,149,44)"/><text x="49.5139%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (53 samples, 0.02%)</title><rect x="49.2639%" y="1509" width="0.0184%" height="15" fill="rgb(240,135,12)"/><text x="49.5139%" y="1519.50"></text></g><g><title>std::io::Write::write_fmt (53 samples, 0.02%)</title><rect x="49.2639%" y="1493" width="0.0184%" height="15" fill="rgb(251,24,50)"/><text x="49.5139%" y="1503.50"></text></g><g><title>core::fmt::write (53 samples, 0.02%)</title><rect x="49.2639%" y="1477" width="0.0184%" height="15" fill="rgb(243,200,47)"/><text x="49.5139%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (29 samples, 0.01%)</title><rect x="49.2823%" y="1509" width="0.0101%" height="15" fill="rgb(224,166,26)"/><text x="49.5323%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (29 samples, 0.01%)</title><rect x="49.2823%" y="1493" width="0.0101%" height="15" fill="rgb(233,0,47)"/><text x="49.5323%" y="1503.50"></text></g><g><title>std::io::Write::write_fmt (29 samples, 0.01%)</title><rect x="49.2823%" y="1477" width="0.0101%" height="15" fill="rgb(253,80,5)"/><text x="49.5323%" y="1487.50"></text></g><g><title>core::fmt::write (29 samples, 0.01%)</title><rect x="49.2823%" y="1461" width="0.0101%" height="15" fill="rgb(214,133,25)"/><text x="49.5323%" y="1471.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (29 samples, 0.01%)</title><rect x="49.2823%" y="1445" width="0.0101%" height="15" fill="rgb(209,27,14)"/><text x="49.5323%" y="1455.50"></text></g><g><title>std::io::Write::write_all (29 samples, 0.01%)</title><rect x="49.2823%" y="1429" width="0.0101%" height="15" fill="rgb(219,102,51)"/><text x="49.5323%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (47 samples, 0.02%)</title><rect x="49.2924%" y="1509" width="0.0163%" height="15" fill="rgb(237,18,16)"/><text x="49.5424%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (47 samples, 0.02%)</title><rect x="49.2924%" y="1493" width="0.0163%" height="15" fill="rgb(241,85,17)"/><text x="49.5424%" y="1503.50"></text></g><g><title>std::io::Write::write_fmt (47 samples, 0.02%)</title><rect x="49.2924%" y="1477" width="0.0163%" height="15" fill="rgb(236,90,42)"/><text x="49.5424%" y="1487.50"></text></g><g><title>core::fmt::write (47 samples, 0.02%)</title><rect x="49.2924%" y="1461" width="0.0163%" height="15" fill="rgb(249,57,21)"/><text x="49.5424%" y="1471.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (29 samples, 0.01%)</title><rect x="49.3260%" y="1413" width="0.0101%" height="15" fill="rgb(243,12,36)"/><text x="49.5760%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="49.3361%" y="1413" width="0.0139%" height="15" fill="rgb(253,128,47)"/><text x="49.5861%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="49.3361%" y="1397" width="0.0139%" height="15" fill="rgb(207,33,20)"/><text x="49.5861%" y="1407.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (35 samples, 0.01%)</title><rect x="49.3378%" y="1381" width="0.0121%" height="15" fill="rgb(233,215,35)"/><text x="49.5878%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (375 samples, 0.13%)</title><rect x="49.2393%" y="1557" width="0.1301%" height="15" fill="rgb(249,188,52)"/><text x="49.4893%" y="1567.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (375 samples, 0.13%)</title><rect x="49.2393%" y="1541" width="0.1301%" height="15" fill="rgb(225,12,32)"/><text x="49.4893%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (375 samples, 0.13%)</title><rect x="49.2393%" y="1525" width="0.1301%" height="15" fill="rgb(247,98,14)"/><text x="49.4893%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (175 samples, 0.06%)</title><rect x="49.3087%" y="1509" width="0.0607%" height="15" fill="rgb(247,219,48)"/><text x="49.5587%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (175 samples, 0.06%)</title><rect x="49.3087%" y="1493" width="0.0607%" height="15" fill="rgb(253,60,48)"/><text x="49.5587%" y="1503.50"></text></g><g><title>std::io::Write::write_fmt (175 samples, 0.06%)</title><rect x="49.3087%" y="1477" width="0.0607%" height="15" fill="rgb(245,15,52)"/><text x="49.5587%" y="1487.50"></text></g><g><title>core::fmt::write (175 samples, 0.06%)</title><rect x="49.3087%" y="1461" width="0.0607%" height="15" fill="rgb(220,133,28)"/><text x="49.5587%" y="1471.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (175 samples, 0.06%)</title><rect x="49.3087%" y="1445" width="0.0607%" height="15" fill="rgb(217,180,4)"/><text x="49.5587%" y="1455.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (175 samples, 0.06%)</title><rect x="49.3087%" y="1429" width="0.0607%" height="15" fill="rgb(251,24,1)"/><text x="49.5587%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (33 samples, 0.01%)</title><rect x="49.3580%" y="1413" width="0.0114%" height="15" fill="rgb(212,185,49)"/><text x="49.6080%" y="1423.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (399 samples, 0.14%)</title><rect x="49.2393%" y="1653" width="0.1384%" height="15" fill="rgb(215,175,22)"/><text x="49.4893%" y="1663.50"></text></g><g><title>log::__private_api_log (399 samples, 0.14%)</title><rect x="49.2393%" y="1637" width="0.1384%" height="15" fill="rgb(250,205,14)"/><text x="49.4893%" y="1647.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (399 samples, 0.14%)</title><rect x="49.2393%" y="1621" width="0.1384%" height="15" fill="rgb(225,211,22)"/><text x="49.4893%" y="1631.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (399 samples, 0.14%)</title><rect x="49.2393%" y="1605" width="0.1384%" height="15" fill="rgb(251,179,42)"/><text x="49.4893%" y="1615.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (399 samples, 0.14%)</title><rect x="49.2393%" y="1589" width="0.1384%" height="15" fill="rgb(208,216,51)"/><text x="49.4893%" y="1599.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (399 samples, 0.14%)</title><rect x="49.2393%" y="1573" width="0.1384%" height="15" fill="rgb(235,36,11)"/><text x="49.4893%" y="1583.50"></text></g><g><title>&lt;tunneler::streams::error::RecvError as core::fmt::Display&gt;::fmt (38 samples, 0.01%)</title><rect x="49.3857%" y="1397" width="0.0132%" height="15" fill="rgb(213,189,28)"/><text x="49.6357%" y="1407.50"></text></g><g><title>core::fmt::Formatter::write_fmt (38 samples, 0.01%)</title><rect x="49.3857%" y="1381" width="0.0132%" height="15" fill="rgb(227,203,42)"/><text x="49.6357%" y="1391.50"></text></g><g><title>core::fmt::write (38 samples, 0.01%)</title><rect x="49.3857%" y="1365" width="0.0132%" height="15" fill="rgb(244,72,36)"/><text x="49.6357%" y="1375.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (38 samples, 0.01%)</title><rect x="49.3857%" y="1349" width="0.0132%" height="15" fill="rgb(213,53,17)"/><text x="49.6357%" y="1359.50"></text></g><g><title>std::io::Write::write_all (38 samples, 0.01%)</title><rect x="49.3857%" y="1333" width="0.0132%" height="15" fill="rgb(207,167,3)"/><text x="49.6357%" y="1343.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (38 samples, 0.01%)</title><rect x="49.3857%" y="1317" width="0.0132%" height="15" fill="rgb(216,98,30)"/><text x="49.6357%" y="1327.50"></text></g><g><title>std::io::Write::write_all (38 samples, 0.01%)</title><rect x="49.3857%" y="1301" width="0.0132%" height="15" fill="rgb(236,123,15)"/><text x="49.6357%" y="1311.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (38 samples, 0.01%)</title><rect x="49.3857%" y="1285" width="0.0132%" height="15" fill="rgb(248,81,50)"/><text x="49.6357%" y="1295.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (71 samples, 0.02%)</title><rect x="49.3805%" y="1509" width="0.0246%" height="15" fill="rgb(214,120,4)"/><text x="49.6305%" y="1519.50"></text></g><g><title>std::io::Write::write_fmt (71 samples, 0.02%)</title><rect x="49.3805%" y="1493" width="0.0246%" height="15" fill="rgb(208,179,34)"/><text x="49.6305%" y="1503.50"></text></g><g><title>core::fmt::write (71 samples, 0.02%)</title><rect x="49.3805%" y="1477" width="0.0246%" height="15" fill="rgb(227,140,7)"/><text x="49.6305%" y="1487.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (71 samples, 0.02%)</title><rect x="49.3805%" y="1461" width="0.0246%" height="15" fill="rgb(214,22,6)"/><text x="49.6305%" y="1471.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (71 samples, 0.02%)</title><rect x="49.3805%" y="1445" width="0.0246%" height="15" fill="rgb(207,137,27)"/><text x="49.6305%" y="1455.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (71 samples, 0.02%)</title><rect x="49.3805%" y="1429" width="0.0246%" height="15" fill="rgb(210,8,46)"/><text x="49.6305%" y="1439.50"></text></g><g><title>core::fmt::write (71 samples, 0.02%)</title><rect x="49.3805%" y="1413" width="0.0246%" height="15" fill="rgb(240,16,54)"/><text x="49.6305%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (45 samples, 0.02%)</title><rect x="49.4051%" y="1509" width="0.0156%" height="15" fill="rgb(211,209,29)"/><text x="49.6551%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (45 samples, 0.02%)</title><rect x="49.4051%" y="1493" width="0.0156%" height="15" fill="rgb(226,228,24)"/><text x="49.6551%" y="1503.50"></text></g><g><title>std::io::Write::write_fmt (45 samples, 0.02%)</title><rect x="49.4051%" y="1477" width="0.0156%" height="15" fill="rgb(222,84,9)"/><text x="49.6551%" y="1487.50"></text></g><g><title>core::fmt::write (45 samples, 0.02%)</title><rect x="49.4051%" y="1461" width="0.0156%" height="15" fill="rgb(234,203,30)"/><text x="49.6551%" y="1471.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (45 samples, 0.02%)</title><rect x="49.4051%" y="1445" width="0.0156%" height="15" fill="rgb(238,109,14)"/><text x="49.6551%" y="1455.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (45 samples, 0.02%)</title><rect x="49.4051%" y="1429" width="0.0156%" height="15" fill="rgb(233,206,34)"/><text x="49.6551%" y="1439.50"></text></g><g><title>core::fmt::write (45 samples, 0.02%)</title><rect x="49.4051%" y="1413" width="0.0156%" height="15" fill="rgb(220,167,47)"/><text x="49.6551%" y="1423.50"></text></g><g><title>core::fmt::run (45 samples, 0.02%)</title><rect x="49.4051%" y="1397" width="0.0156%" height="15" fill="rgb(238,105,10)"/><text x="49.6551%" y="1407.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (45 samples, 0.02%)</title><rect x="49.4051%" y="1381" width="0.0156%" height="15" fill="rgb(213,227,17)"/><text x="49.6551%" y="1391.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (45 samples, 0.02%)</title><rect x="49.4051%" y="1365" width="0.0156%" height="15" fill="rgb(217,132,38)"/><text x="49.6551%" y="1375.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (45 samples, 0.02%)</title><rect x="49.4051%" y="1349" width="0.0156%" height="15" fill="rgb(242,146,4)"/><text x="49.6551%" y="1359.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (45 samples, 0.02%)</title><rect x="49.4051%" y="1333" width="0.0156%" height="15" fill="rgb(212,61,9)"/><text x="49.6551%" y="1343.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (45 samples, 0.02%)</title><rect x="49.4051%" y="1317" width="0.0156%" height="15" fill="rgb(247,126,22)"/><text x="49.6551%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (53 samples, 0.02%)</title><rect x="49.4225%" y="1253" width="0.0184%" height="15" fill="rgb(220,196,2)"/><text x="49.6725%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (66 samples, 0.02%)</title><rect x="49.4208%" y="1269" width="0.0229%" height="15" fill="rgb(208,46,4)"/><text x="49.6708%" y="1279.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (54 samples, 0.02%)</title><rect x="49.4457%" y="1253" width="0.0187%" height="15" fill="rgb(252,104,46)"/><text x="49.6957%" y="1263.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (127 samples, 0.04%)</title><rect x="49.4208%" y="1317" width="0.0441%" height="15" fill="rgb(237,152,48)"/><text x="49.6708%" y="1327.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (127 samples, 0.04%)</title><rect x="49.4208%" y="1301" width="0.0441%" height="15" fill="rgb(221,59,37)"/><text x="49.6708%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (127 samples, 0.04%)</title><rect x="49.4208%" y="1285" width="0.0441%" height="15" fill="rgb(209,202,51)"/><text x="49.6708%" y="1295.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (61 samples, 0.02%)</title><rect x="49.4437%" y="1269" width="0.0212%" height="15" fill="rgb(228,81,30)"/><text x="49.6937%" y="1279.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (42 samples, 0.01%)</title><rect x="49.4686%" y="1269" width="0.0146%" height="15" fill="rgb(227,42,39)"/><text x="49.7186%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (716 samples, 0.25%)</title><rect x="49.2393%" y="1669" width="0.2484%" height="15" fill="rgb(221,26,2)"/><text x="49.4893%" y="1679.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (317 samples, 0.11%)</title><rect x="49.3777%" y="1653" width="0.1100%" height="15" fill="rgb(254,61,31)"/><text x="49.6277%" y="1663.50"></text></g><g><title>log::__private_api_log (316 samples, 0.11%)</title><rect x="49.3781%" y="1637" width="0.1096%" height="15" fill="rgb(222,173,38)"/><text x="49.6281%" y="1647.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (316 samples, 0.11%)</title><rect x="49.3781%" y="1621" width="0.1096%" height="15" fill="rgb(218,50,12)"/><text x="49.6281%" y="1631.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (316 samples, 0.11%)</title><rect x="49.3781%" y="1605" width="0.1096%" height="15" fill="rgb(223,88,40)"/><text x="49.6281%" y="1615.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (316 samples, 0.11%)</title><rect x="49.3781%" y="1589" width="0.1096%" height="15" fill="rgb(237,54,19)"/><text x="49.6281%" y="1599.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (316 samples, 0.11%)</title><rect x="49.3781%" y="1573" width="0.1096%" height="15" fill="rgb(251,129,25)"/><text x="49.6281%" y="1583.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (316 samples, 0.11%)</title><rect x="49.3781%" y="1557" width="0.1096%" height="15" fill="rgb(238,97,19)"/><text x="49.6281%" y="1567.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (316 samples, 0.11%)</title><rect x="49.3781%" y="1541" width="0.1096%" height="15" fill="rgb(240,169,18)"/><text x="49.6281%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (316 samples, 0.11%)</title><rect x="49.3781%" y="1525" width="0.1096%" height="15" fill="rgb(230,187,49)"/><text x="49.6281%" y="1535.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (193 samples, 0.07%)</title><rect x="49.4208%" y="1509" width="0.0670%" height="15" fill="rgb(209,44,26)"/><text x="49.6708%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (193 samples, 0.07%)</title><rect x="49.4208%" y="1493" width="0.0670%" height="15" fill="rgb(244,0,6)"/><text x="49.6708%" y="1503.50"></text></g><g><title>std::io::Write::write_fmt (193 samples, 0.07%)</title><rect x="49.4208%" y="1477" width="0.0670%" height="15" fill="rgb(248,18,21)"/><text x="49.6708%" y="1487.50"></text></g><g><title>core::fmt::write (193 samples, 0.07%)</title><rect x="49.4208%" y="1461" width="0.0670%" height="15" fill="rgb(245,180,19)"/><text x="49.6708%" y="1471.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (193 samples, 0.07%)</title><rect x="49.4208%" y="1445" width="0.0670%" height="15" fill="rgb(252,118,36)"/><text x="49.6708%" y="1455.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (193 samples, 0.07%)</title><rect x="49.4208%" y="1429" width="0.0670%" height="15" fill="rgb(210,224,19)"/><text x="49.6708%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (193 samples, 0.07%)</title><rect x="49.4208%" y="1413" width="0.0670%" height="15" fill="rgb(218,30,24)"/><text x="49.6708%" y="1423.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (193 samples, 0.07%)</title><rect x="49.4208%" y="1397" width="0.0670%" height="15" fill="rgb(219,75,50)"/><text x="49.6708%" y="1407.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (193 samples, 0.07%)</title><rect x="49.4208%" y="1381" width="0.0670%" height="15" fill="rgb(234,72,50)"/><text x="49.6708%" y="1391.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (193 samples, 0.07%)</title><rect x="49.4208%" y="1365" width="0.0670%" height="15" fill="rgb(219,100,48)"/><text x="49.6708%" y="1375.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (193 samples, 0.07%)</title><rect x="49.4208%" y="1349" width="0.0670%" height="15" fill="rgb(253,5,41)"/><text x="49.6708%" y="1359.50"></text></g><g><title>std::io::Write::write_all (193 samples, 0.07%)</title><rect x="49.4208%" y="1333" width="0.0670%" height="15" fill="rgb(247,181,11)"/><text x="49.6708%" y="1343.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (66 samples, 0.02%)</title><rect x="49.4648%" y="1317" width="0.0229%" height="15" fill="rgb(222,223,25)"/><text x="49.7148%" y="1327.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (66 samples, 0.02%)</title><rect x="49.4648%" y="1301" width="0.0229%" height="15" fill="rgb(214,198,28)"/><text x="49.7148%" y="1311.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (66 samples, 0.02%)</title><rect x="49.4648%" y="1285" width="0.0229%" height="15" fill="rgb(230,46,43)"/><text x="49.7148%" y="1295.50"></text></g><g><title>&lt;tokio::util::linked_list::DrainFilter&lt;T,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.01%)</title><rect x="49.4905%" y="1333" width="0.0135%" height="15" fill="rgb(233,65,53)"/><text x="49.7405%" y="1343.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (39 samples, 0.01%)</title><rect x="49.4905%" y="1317" width="0.0135%" height="15" fill="rgb(221,121,27)"/><text x="49.7405%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (84 samples, 0.03%)</title><rect x="49.5117%" y="1173" width="0.0291%" height="15" fill="rgb(247,70,47)"/><text x="49.7617%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (65 samples, 0.02%)</title><rect x="49.5183%" y="1157" width="0.0226%" height="15" fill="rgb(228,85,35)"/><text x="49.7683%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1573" width="0.0937%" height="15" fill="rgb(209,50,18)"/><text x="49.7405%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (270 samples, 0.09%)</title><rect x="49.4905%" y="1557" width="0.0937%" height="15" fill="rgb(250,19,35)"/><text x="49.7405%" y="1567.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1541" width="0.0937%" height="15" fill="rgb(253,107,29)"/><text x="49.7405%" y="1551.50"></text></g><g><title>tokio::runtime::park::Inner::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1525" width="0.0937%" height="15" fill="rgb(252,179,29)"/><text x="49.7405%" y="1535.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (270 samples, 0.09%)</title><rect x="49.4905%" y="1509" width="0.0937%" height="15" fill="rgb(238,194,6)"/><text x="49.7405%" y="1519.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1493" width="0.0937%" height="15" fill="rgb(238,164,29)"/><text x="49.7405%" y="1503.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1477" width="0.0937%" height="15" fill="rgb(224,25,9)"/><text x="49.7405%" y="1487.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1461" width="0.0937%" height="15" fill="rgb(244,153,23)"/><text x="49.7405%" y="1471.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (270 samples, 0.09%)</title><rect x="49.4905%" y="1445" width="0.0937%" height="15" fill="rgb(212,203,14)"/><text x="49.7405%" y="1455.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1429" width="0.0937%" height="15" fill="rgb(220,164,20)"/><text x="49.7405%" y="1439.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (270 samples, 0.09%)</title><rect x="49.4905%" y="1413" width="0.0937%" height="15" fill="rgb(222,203,48)"/><text x="49.7405%" y="1423.50"></text></g><g><title>tokio::io::driver::Driver::turn (270 samples, 0.09%)</title><rect x="49.4905%" y="1397" width="0.0937%" height="15" fill="rgb(215,159,22)"/><text x="49.7405%" y="1407.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (270 samples, 0.09%)</title><rect x="49.4905%" y="1381" width="0.0937%" height="15" fill="rgb(216,183,47)"/><text x="49.7405%" y="1391.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (270 samples, 0.09%)</title><rect x="49.4905%" y="1365" width="0.0937%" height="15" fill="rgb(229,195,25)"/><text x="49.7405%" y="1375.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (270 samples, 0.09%)</title><rect x="49.4905%" y="1349" width="0.0937%" height="15" fill="rgb(224,132,51)"/><text x="49.7405%" y="1359.50"></text></g><g><title>core::task::wake::Waker::wake (231 samples, 0.08%)</title><rect x="49.5040%" y="1333" width="0.0801%" height="15" fill="rgb(240,63,7)"/><text x="49.7540%" y="1343.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (231 samples, 0.08%)</title><rect x="49.5040%" y="1317" width="0.0801%" height="15" fill="rgb(249,182,41)"/><text x="49.7540%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (231 samples, 0.08%)</title><rect x="49.5040%" y="1301" width="0.0801%" height="15" fill="rgb(243,47,26)"/><text x="49.7540%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (231 samples, 0.08%)</title><rect x="49.5040%" y="1285" width="0.0801%" height="15" fill="rgb(233,48,2)"/><text x="49.7540%" y="1295.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (231 samples, 0.08%)</title><rect x="49.5040%" y="1269" width="0.0801%" height="15" fill="rgb(244,165,34)"/><text x="49.7540%" y="1279.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (231 samples, 0.08%)</title><rect x="49.5040%" y="1253" width="0.0801%" height="15" fill="rgb(207,89,7)"/><text x="49.7540%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (231 samples, 0.08%)</title><rect x="49.5040%" y="1237" width="0.0801%" height="15" fill="rgb(244,117,36)"/><text x="49.7540%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (231 samples, 0.08%)</title><rect x="49.5040%" y="1221" width="0.0801%" height="15" fill="rgb(226,144,34)"/><text x="49.7540%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (231 samples, 0.08%)</title><rect x="49.5040%" y="1205" width="0.0801%" height="15" fill="rgb(213,23,19)"/><text x="49.7540%" y="1215.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (231 samples, 0.08%)</title><rect x="49.5040%" y="1189" width="0.0801%" height="15" fill="rgb(217,75,12)"/><text x="49.7540%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (125 samples, 0.04%)</title><rect x="49.5408%" y="1173" width="0.0434%" height="15" fill="rgb(224,159,17)"/><text x="49.7908%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (42 samples, 0.01%)</title><rect x="49.7070%" y="1173" width="0.0146%" height="15" fill="rgb(217,118,1)"/><text x="49.9570%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (72 samples, 0.02%)</title><rect x="49.7025%" y="1189" width="0.0250%" height="15" fill="rgb(232,180,48)"/><text x="49.9525%" y="1199.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.01%)</title><rect x="49.7275%" y="1189" width="0.0121%" height="15" fill="rgb(230,27,33)"/><text x="49.9775%" y="1199.50"></text></g><g><title>alloc::vec::from_elem (59 samples, 0.02%)</title><rect x="49.7531%" y="1189" width="0.0205%" height="15" fill="rgb(205,31,21)"/><text x="50.0031%" y="1199.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (42 samples, 0.01%)</title><rect x="49.7590%" y="1173" width="0.0146%" height="15" fill="rgb(253,59,4)"/><text x="50.0090%" y="1183.50"></text></g><g><title>core::future::get_context (40 samples, 0.01%)</title><rect x="49.7802%" y="1189" width="0.0139%" height="15" fill="rgb(224,201,9)"/><text x="50.0302%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (29 samples, 0.01%)</title><rect x="49.7941%" y="1189" width="0.0101%" height="15" fill="rgb(229,206,30)"/><text x="50.0441%" y="1199.50"></text></g><g><title>&lt;dashmap::lock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="49.8316%" y="1157" width="0.0114%" height="15" fill="rgb(212,67,47)"/><text x="50.0816%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (125 samples, 0.04%)</title><rect x="49.8142%" y="1189" width="0.0434%" height="15" fill="rgb(211,96,50)"/><text x="50.0642%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place (93 samples, 0.03%)</title><rect x="49.8253%" y="1173" width="0.0323%" height="15" fill="rgb(252,114,18)"/><text x="50.0753%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.01%)</title><rect x="49.8430%" y="1157" width="0.0146%" height="15" fill="rgb(223,58,37)"/><text x="50.0930%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.01%)</title><rect x="49.8451%" y="1141" width="0.0125%" height="15" fill="rgb(237,70,4)"/><text x="50.0951%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.01%)</title><rect x="49.8826%" y="1173" width="0.0135%" height="15" fill="rgb(244,85,46)"/><text x="50.1326%" y="1183.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (70 samples, 0.02%)</title><rect x="49.8739%" y="1189" width="0.0243%" height="15" fill="rgb(223,39,52)"/><text x="50.1239%" y="1199.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (45 samples, 0.02%)</title><rect x="49.8982%" y="1189" width="0.0156%" height="15" fill="rgb(218,200,14)"/><text x="50.1482%" y="1199.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (989 samples, 0.34%)</title><rect x="49.5842%" y="1205" width="0.3431%" height="15" fill="rgb(208,171,16)"/><text x="49.8342%" y="1215.50"></text></g><g><title>tokio::io::driver::registration::Registration::clear_readiness (101 samples, 0.04%)</title><rect x="49.9273%" y="1077" width="0.0350%" height="15" fill="rgb(234,200,18)"/><text x="50.1773%" y="1087.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::clear_readiness (101 samples, 0.04%)</title><rect x="49.9273%" y="1061" width="0.0350%" height="15" fill="rgb(228,45,11)"/><text x="50.1773%" y="1071.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (101 samples, 0.04%)</title><rect x="49.9273%" y="1045" width="0.0350%" height="15" fill="rgb(237,182,11)"/><text x="50.1773%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 samples, 0.02%)</title><rect x="49.9624%" y="1029" width="0.0173%" height="15" fill="rgb(241,175,49)"/><text x="50.2124%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (49 samples, 0.02%)</title><rect x="49.9627%" y="1013" width="0.0170%" height="15" fill="rgb(247,38,35)"/><text x="50.2127%" y="1023.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (64 samples, 0.02%)</title><rect x="49.9624%" y="1045" width="0.0222%" height="15" fill="rgb(228,39,49)"/><text x="50.2124%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (118 samples, 0.04%)</title><rect x="49.9624%" y="1061" width="0.0409%" height="15" fill="rgb(226,101,26)"/><text x="50.2124%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (54 samples, 0.02%)</title><rect x="49.9846%" y="1045" width="0.0187%" height="15" fill="rgb(206,141,19)"/><text x="50.2346%" y="1055.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.02%)</title><rect x="49.9846%" y="1029" width="0.0187%" height="15" fill="rgb(211,200,13)"/><text x="50.2346%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (40 samples, 0.01%)</title><rect x="49.9894%" y="1013" width="0.0139%" height="15" fill="rgb(241,121,6)"/><text x="50.2394%" y="1023.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (48 samples, 0.02%)</title><rect x="50.0033%" y="1061" width="0.0167%" height="15" fill="rgb(234,221,29)"/><text x="50.2533%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (48 samples, 0.02%)</title><rect x="50.0033%" y="1045" width="0.0167%" height="15" fill="rgb(229,136,5)"/><text x="50.2533%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (48 samples, 0.02%)</title><rect x="50.0033%" y="1029" width="0.0167%" height="15" fill="rgb(238,36,11)"/><text x="50.2533%" y="1039.50"></text></g><g><title>core::mem::replace (31 samples, 0.01%)</title><rect x="50.0092%" y="1013" width="0.0108%" height="15" fill="rgb(251,55,41)"/><text x="50.2592%" y="1023.50"></text></g><g><title>tokio::coop::CURRENT::__getit (33 samples, 0.01%)</title><rect x="50.0557%" y="1013" width="0.0114%" height="15" fill="rgb(242,34,40)"/><text x="50.3057%" y="1023.50"></text></g><g><title>tokio::coop::poll_proceed (210 samples, 0.07%)</title><rect x="50.0199%" y="1061" width="0.0729%" height="15" fill="rgb(215,42,17)"/><text x="50.2699%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (210 samples, 0.07%)</title><rect x="50.0199%" y="1045" width="0.0729%" height="15" fill="rgb(207,44,46)"/><text x="50.2699%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (196 samples, 0.07%)</title><rect x="50.0248%" y="1029" width="0.0680%" height="15" fill="rgb(211,206,28)"/><text x="50.2748%" y="1039.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (74 samples, 0.03%)</title><rect x="50.0671%" y="1013" width="0.0257%" height="15" fill="rgb(237,167,16)"/><text x="50.3171%" y="1023.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (34 samples, 0.01%)</title><rect x="50.1126%" y="1029" width="0.0118%" height="15" fill="rgb(233,66,6)"/><text x="50.3626%" y="1039.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::inner (60 samples, 0.02%)</title><rect x="50.1285%" y="1029" width="0.0208%" height="15" fill="rgb(246,123,29)"/><text x="50.3785%" y="1039.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (590 samples, 0.20%)</title><rect x="49.9624%" y="1077" width="0.2047%" height="15" fill="rgb(209,62,40)"/><text x="50.2124%" y="1087.50"></text></g><g><title>tokio::io::driver::Handle::inner (214 samples, 0.07%)</title><rect x="50.0928%" y="1061" width="0.0742%" height="15" fill="rgb(218,4,25)"/><text x="50.3428%" y="1071.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (214 samples, 0.07%)</title><rect x="50.0928%" y="1045" width="0.0742%" height="15" fill="rgb(253,91,49)"/><text x="50.3428%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32 samples, 0.01%)</title><rect x="50.1560%" y="1029" width="0.0111%" height="15" fill="rgb(228,155,29)"/><text x="50.4060%" y="1039.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (766 samples, 0.27%)</title><rect x="49.9273%" y="1205" width="0.2658%" height="15" fill="rgb(243,57,37)"/><text x="50.1773%" y="1215.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (766 samples, 0.27%)</title><rect x="49.9273%" y="1189" width="0.2658%" height="15" fill="rgb(244,167,17)"/><text x="50.1773%" y="1199.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (766 samples, 0.27%)</title><rect x="49.9273%" y="1173" width="0.2658%" height="15" fill="rgb(207,181,38)"/><text x="50.1773%" y="1183.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (766 samples, 0.27%)</title><rect x="49.9273%" y="1157" width="0.2658%" height="15" fill="rgb(211,8,23)"/><text x="50.1773%" y="1167.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (766 samples, 0.27%)</title><rect x="49.9273%" y="1141" width="0.2658%" height="15" fill="rgb(235,11,44)"/><text x="50.1773%" y="1151.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (766 samples, 0.27%)</title><rect x="49.9273%" y="1125" width="0.2658%" height="15" fill="rgb(248,18,52)"/><text x="50.1773%" y="1135.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (766 samples, 0.27%)</title><rect x="49.9273%" y="1109" width="0.2658%" height="15" fill="rgb(208,4,7)"/><text x="50.1773%" y="1119.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (766 samples, 0.27%)</title><rect x="49.9273%" y="1093" width="0.2658%" height="15" fill="rgb(240,17,39)"/><text x="50.1773%" y="1103.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (75 samples, 0.03%)</title><rect x="50.1671%" y="1077" width="0.0260%" height="15" fill="rgb(207,170,3)"/><text x="50.4171%" y="1087.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (75 samples, 0.03%)</title><rect x="50.1671%" y="1061" width="0.0260%" height="15" fill="rgb(236,100,52)"/><text x="50.4171%" y="1071.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (75 samples, 0.03%)</title><rect x="50.1671%" y="1045" width="0.0260%" height="15" fill="rgb(246,78,51)"/><text x="50.4171%" y="1055.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (75 samples, 0.03%)</title><rect x="50.1671%" y="1029" width="0.0260%" height="15" fill="rgb(211,17,15)"/><text x="50.4171%" y="1039.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (75 samples, 0.03%)</title><rect x="50.1671%" y="1013" width="0.0260%" height="15" fill="rgb(209,59,46)"/><text x="50.4171%" y="1023.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (75 samples, 0.03%)</title><rect x="50.1671%" y="997" width="0.0260%" height="15" fill="rgb(210,92,25)"/><text x="50.4171%" y="1007.50"></text></g><g><title>tokio::coop::poll_proceed (42 samples, 0.01%)</title><rect x="50.1948%" y="1061" width="0.0146%" height="15" fill="rgb(238,174,52)"/><text x="50.4448%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (42 samples, 0.01%)</title><rect x="50.1948%" y="1045" width="0.0146%" height="15" fill="rgb(230,73,7)"/><text x="50.4448%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (42 samples, 0.01%)</title><rect x="50.1948%" y="1029" width="0.0146%" height="15" fill="rgb(243,124,40)"/><text x="50.4448%" y="1039.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (42 samples, 0.01%)</title><rect x="50.1948%" y="1013" width="0.0146%" height="15" fill="rgb(244,170,11)"/><text x="50.4448%" y="1023.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (42 samples, 0.01%)</title><rect x="50.1948%" y="997" width="0.0146%" height="15" fill="rgb(207,114,54)"/><text x="50.4448%" y="1007.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (42 samples, 0.01%)</title><rect x="50.1948%" y="981" width="0.0146%" height="15" fill="rgb(205,42,20)"/><text x="50.4448%" y="991.50"></text></g><g><title>core::mem::replace (42 samples, 0.01%)</title><rect x="50.1948%" y="965" width="0.0146%" height="15" fill="rgb(230,30,28)"/><text x="50.4448%" y="975.50"></text></g><g><title>core::mem::swap (42 samples, 0.01%)</title><rect x="50.1948%" y="949" width="0.0146%" height="15" fill="rgb(205,73,54)"/><text x="50.4448%" y="959.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (42 samples, 0.01%)</title><rect x="50.1948%" y="933" width="0.0146%" height="15" fill="rgb(254,227,23)"/><text x="50.4448%" y="943.50"></text></g><g><title>core::ptr::read (33 samples, 0.01%)</title><rect x="50.1979%" y="917" width="0.0114%" height="15" fill="rgb(228,202,34)"/><text x="50.4479%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.02%)</title><rect x="50.2389%" y="1029" width="0.0187%" height="15" fill="rgb(222,225,37)"/><text x="50.4889%" y="1039.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (33 samples, 0.01%)</title><rect x="50.2576%" y="1029" width="0.0114%" height="15" fill="rgb(221,14,54)"/><text x="50.5076%" y="1039.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (37 samples, 0.01%)</title><rect x="50.2840%" y="1029" width="0.0128%" height="15" fill="rgb(254,102,2)"/><text x="50.5340%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.11%)</title><rect x="50.1931%" y="1189" width="0.1065%" height="15" fill="rgb(232,104,17)"/><text x="50.4431%" y="1199.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (307 samples, 0.11%)</title><rect x="50.1931%" y="1173" width="0.1065%" height="15" fill="rgb(250,220,14)"/><text x="50.4431%" y="1183.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.11%)</title><rect x="50.1931%" y="1157" width="0.1065%" height="15" fill="rgb(241,158,9)"/><text x="50.4431%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (307 samples, 0.11%)</title><rect x="50.1931%" y="1141" width="0.1065%" height="15" fill="rgb(246,9,43)"/><text x="50.4431%" y="1151.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (307 samples, 0.11%)</title><rect x="50.1931%" y="1125" width="0.1065%" height="15" fill="rgb(206,73,33)"/><text x="50.4431%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (307 samples, 0.11%)</title><rect x="50.1931%" y="1109" width="0.1065%" height="15" fill="rgb(222,79,8)"/><text x="50.4431%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (307 samples, 0.11%)</title><rect x="50.1931%" y="1093" width="0.1065%" height="15" fill="rgb(234,8,54)"/><text x="50.4431%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (307 samples, 0.11%)</title><rect x="50.1931%" y="1077" width="0.1065%" height="15" fill="rgb(209,134,38)"/><text x="50.4431%" y="1087.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (260 samples, 0.09%)</title><rect x="50.2094%" y="1061" width="0.0902%" height="15" fill="rgb(230,127,29)"/><text x="50.4594%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (260 samples, 0.09%)</title><rect x="50.2094%" y="1045" width="0.0902%" height="15" fill="rgb(242,44,41)"/><text x="50.4594%" y="1055.50"></text></g><g><title>tokio::io::driver::Handle::inner (29 samples, 0.01%)</title><rect x="50.3083%" y="1061" width="0.0101%" height="15" fill="rgb(222,56,43)"/><text x="50.5583%" y="1071.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (29 samples, 0.01%)</title><rect x="50.3083%" y="1045" width="0.0101%" height="15" fill="rgb(238,39,47)"/><text x="50.5583%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (29 samples, 0.01%)</title><rect x="50.3083%" y="1029" width="0.0101%" height="15" fill="rgb(226,79,43)"/><text x="50.5583%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (29 samples, 0.01%)</title><rect x="50.3083%" y="1013" width="0.0101%" height="15" fill="rgb(242,105,53)"/><text x="50.5583%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32 samples, 0.01%)</title><rect x="50.3333%" y="1045" width="0.0111%" height="15" fill="rgb(251,132,46)"/><text x="50.5833%" y="1055.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (180 samples, 0.06%)</title><rect x="50.2996%" y="1189" width="0.0625%" height="15" fill="rgb(231,77,14)"/><text x="50.5496%" y="1199.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (180 samples, 0.06%)</title><rect x="50.2996%" y="1173" width="0.0625%" height="15" fill="rgb(240,135,9)"/><text x="50.5496%" y="1183.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (180 samples, 0.06%)</title><rect x="50.2996%" y="1157" width="0.0625%" height="15" fill="rgb(248,109,14)"/><text x="50.5496%" y="1167.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (180 samples, 0.06%)</title><rect x="50.2996%" y="1141" width="0.0625%" height="15" fill="rgb(227,146,52)"/><text x="50.5496%" y="1151.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (180 samples, 0.06%)</title><rect x="50.2996%" y="1125" width="0.0625%" height="15" fill="rgb(232,54,3)"/><text x="50.5496%" y="1135.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (180 samples, 0.06%)</title><rect x="50.2996%" y="1109" width="0.0625%" height="15" fill="rgb(229,201,43)"/><text x="50.5496%" y="1119.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (180 samples, 0.06%)</title><rect x="50.2996%" y="1093" width="0.0625%" height="15" fill="rgb(252,161,33)"/><text x="50.5496%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (180 samples, 0.06%)</title><rect x="50.2996%" y="1077" width="0.0625%" height="15" fill="rgb(226,146,40)"/><text x="50.5496%" y="1087.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (126 samples, 0.04%)</title><rect x="50.3183%" y="1061" width="0.0437%" height="15" fill="rgb(219,47,25)"/><text x="50.5683%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (53 samples, 0.02%)</title><rect x="50.3620%" y="1109" width="0.0184%" height="15" fill="rgb(250,135,13)"/><text x="50.6120%" y="1119.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (53 samples, 0.02%)</title><rect x="50.3620%" y="1093" width="0.0184%" height="15" fill="rgb(219,229,18)"/><text x="50.6120%" y="1103.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (53 samples, 0.02%)</title><rect x="50.3620%" y="1077" width="0.0184%" height="15" fill="rgb(217,152,27)"/><text x="50.6120%" y="1087.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (553 samples, 0.19%)</title><rect x="50.1931%" y="1205" width="0.1919%" height="15" fill="rgb(225,71,47)"/><text x="50.4431%" y="1215.50"></text></g><g><title>log::__private_api_log (66 samples, 0.02%)</title><rect x="50.3620%" y="1189" width="0.0229%" height="15" fill="rgb(220,139,14)"/><text x="50.6120%" y="1199.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (66 samples, 0.02%)</title><rect x="50.3620%" y="1173" width="0.0229%" height="15" fill="rgb(247,54,32)"/><text x="50.6120%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (66 samples, 0.02%)</title><rect x="50.3620%" y="1157" width="0.0229%" height="15" fill="rgb(252,131,39)"/><text x="50.6120%" y="1167.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (66 samples, 0.02%)</title><rect x="50.3620%" y="1141" width="0.0229%" height="15" fill="rgb(210,108,39)"/><text x="50.6120%" y="1151.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (66 samples, 0.02%)</title><rect x="50.3620%" y="1125" width="0.0229%" height="15" fill="rgb(205,23,29)"/><text x="50.6120%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.01%)</title><rect x="50.3912%" y="1029" width="0.0101%" height="15" fill="rgb(246,139,46)"/><text x="50.6412%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (77 samples, 0.03%)</title><rect x="50.3849%" y="1045" width="0.0267%" height="15" fill="rgb(250,81,26)"/><text x="50.6349%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (88 samples, 0.03%)</title><rect x="50.3849%" y="1061" width="0.0305%" height="15" fill="rgb(214,104,7)"/><text x="50.6349%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (33 samples, 0.01%)</title><rect x="50.4186%" y="1029" width="0.0114%" height="15" fill="rgb(233,189,8)"/><text x="50.6686%" y="1039.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (50 samples, 0.02%)</title><rect x="50.4339%" y="997" width="0.0173%" height="15" fill="rgb(228,141,17)"/><text x="50.6839%" y="1007.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (42 samples, 0.01%)</title><rect x="50.4366%" y="981" width="0.0146%" height="15" fill="rgb(247,157,1)"/><text x="50.6866%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (196 samples, 0.07%)</title><rect x="50.3849%" y="1189" width="0.0680%" height="15" fill="rgb(249,225,5)"/><text x="50.6349%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (196 samples, 0.07%)</title><rect x="50.3849%" y="1173" width="0.0680%" height="15" fill="rgb(242,55,13)"/><text x="50.6349%" y="1183.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (196 samples, 0.07%)</title><rect x="50.3849%" y="1157" width="0.0680%" height="15" fill="rgb(230,49,50)"/><text x="50.6349%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (196 samples, 0.07%)</title><rect x="50.3849%" y="1141" width="0.0680%" height="15" fill="rgb(241,111,38)"/><text x="50.6349%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (196 samples, 0.07%)</title><rect x="50.3849%" y="1125" width="0.0680%" height="15" fill="rgb(252,155,4)"/><text x="50.6349%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (196 samples, 0.07%)</title><rect x="50.3849%" y="1109" width="0.0680%" height="15" fill="rgb(212,69,32)"/><text x="50.6349%" y="1119.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (196 samples, 0.07%)</title><rect x="50.3849%" y="1093" width="0.0680%" height="15" fill="rgb(243,107,47)"/><text x="50.6349%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (196 samples, 0.07%)</title><rect x="50.3849%" y="1077" width="0.0680%" height="15" fill="rgb(247,130,12)"/><text x="50.6349%" y="1087.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (108 samples, 0.04%)</title><rect x="50.4155%" y="1061" width="0.0375%" height="15" fill="rgb(233,74,16)"/><text x="50.6655%" y="1071.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (108 samples, 0.04%)</title><rect x="50.4155%" y="1045" width="0.0375%" height="15" fill="rgb(208,58,18)"/><text x="50.6655%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (66 samples, 0.02%)</title><rect x="50.4301%" y="1029" width="0.0229%" height="15" fill="rgb(242,225,1)"/><text x="50.6801%" y="1039.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (63 samples, 0.02%)</title><rect x="50.4311%" y="1013" width="0.0219%" height="15" fill="rgb(249,39,40)"/><text x="50.6811%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (4,415 samples, 1.53%)</title><rect x="48.9565%" y="1765" width="1.5318%" height="15" fill="rgb(207,72,44)"/><text x="49.2065%" y="1775.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,415 samples, 1.53%)</title><rect x="48.9565%" y="1749" width="1.5318%" height="15" fill="rgb(215,193,12)"/><text x="49.2065%" y="1759.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,600 samples, 1.25%)</title><rect x="49.2393%" y="1733" width="1.2490%" height="15" fill="rgb(248,41,39)"/><text x="49.4893%" y="1743.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3,600 samples, 1.25%)</title><rect x="49.2393%" y="1717" width="1.2490%" height="15" fill="rgb(253,85,4)"/><text x="49.4893%" y="1727.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,600 samples, 1.25%)</title><rect x="49.2393%" y="1701" width="1.2490%" height="15" fill="rgb(243,70,31)"/><text x="49.4893%" y="1711.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3,600 samples, 1.25%)</title><rect x="49.2393%" y="1685" width="1.2490%" height="15" fill="rgb(253,195,26)"/><text x="49.4893%" y="1695.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,884 samples, 1.00%)</title><rect x="49.4877%" y="1669" width="1.0006%" height="15" fill="rgb(243,42,11)"/><text x="49.7377%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2,884 samples, 1.00%)</title><rect x="49.4877%" y="1653" width="1.0006%" height="15" fill="rgb(239,66,17)"/><text x="49.7377%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2,884 samples, 1.00%)</title><rect x="49.4877%" y="1637" width="1.0006%" height="15" fill="rgb(217,132,21)"/><text x="49.7377%" y="1647.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2,884 samples, 1.00%)</title><rect x="49.4877%" y="1621" width="1.0006%" height="15" fill="rgb(252,202,21)"/><text x="49.7377%" y="1631.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2,884 samples, 1.00%)</title><rect x="49.4877%" y="1605" width="1.0006%" height="15" fill="rgb(233,98,36)"/><text x="49.7377%" y="1615.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2,884 samples, 1.00%)</title><rect x="49.4877%" y="1589" width="1.0006%" height="15" fill="rgb(216,153,54)"/><text x="49.7377%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1573" width="0.9042%" height="15" fill="rgb(250,99,7)"/><text x="49.8342%" y="1583.50"></text></g><g><title>tokio::coop::budget (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1557" width="0.9042%" height="15" fill="rgb(207,56,50)"/><text x="49.8342%" y="1567.50"></text></g><g><title>tokio::coop::with_budget (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1541" width="0.9042%" height="15" fill="rgb(244,61,34)"/><text x="49.8342%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1525" width="0.9042%" height="15" fill="rgb(241,50,38)"/><text x="49.8342%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1509" width="0.9042%" height="15" fill="rgb(212,166,30)"/><text x="49.8342%" y="1519.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1493" width="0.9042%" height="15" fill="rgb(249,127,32)"/><text x="49.8342%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1477" width="0.9042%" height="15" fill="rgb(209,103,0)"/><text x="49.8342%" y="1487.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1461" width="0.9042%" height="15" fill="rgb(238,209,51)"/><text x="49.8342%" y="1471.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1445" width="0.9042%" height="15" fill="rgb(237,56,23)"/><text x="49.8342%" y="1455.50"></text></g><g><title>tokio::runtime::task::raw::poll (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1429" width="0.9042%" height="15" fill="rgb(215,153,46)"/><text x="49.8342%" y="1439.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1413" width="0.9042%" height="15" fill="rgb(224,49,31)"/><text x="49.8342%" y="1423.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1397" width="0.9042%" height="15" fill="rgb(250,18,42)"/><text x="49.8342%" y="1407.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1381" width="0.9042%" height="15" fill="rgb(215,176,39)"/><text x="49.8342%" y="1391.50"></text></g><g><title>std::panic::catch_unwind (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1365" width="0.9042%" height="15" fill="rgb(223,77,29)"/><text x="49.8342%" y="1375.50"></text></g><g><title>std::panicking::try (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1349" width="0.9042%" height="15" fill="rgb(234,94,52)"/><text x="49.8342%" y="1359.50"></text></g><g><title>__rust_try (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1333" width="0.9042%" height="15" fill="rgb(220,154,50)"/><text x="49.8342%" y="1343.50"></text></g><g><title>std::panicking::try::do_call (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1317" width="0.9042%" height="15" fill="rgb(212,11,10)"/><text x="49.8342%" y="1327.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1301" width="0.9042%" height="15" fill="rgb(205,166,19)"/><text x="49.8342%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1285" width="0.9042%" height="15" fill="rgb(244,198,16)"/><text x="49.8342%" y="1295.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1269" width="0.9042%" height="15" fill="rgb(219,69,12)"/><text x="49.8342%" y="1279.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1253" width="0.9042%" height="15" fill="rgb(245,30,7)"/><text x="49.8342%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1237" width="0.9042%" height="15" fill="rgb(218,221,48)"/><text x="49.8342%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,606 samples, 0.90%)</title><rect x="49.5842%" y="1221" width="0.9042%" height="15" fill="rgb(216,66,15)"/><text x="49.8342%" y="1231.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (298 samples, 0.10%)</title><rect x="50.3849%" y="1205" width="0.1034%" height="15" fill="rgb(226,122,50)"/><text x="50.6349%" y="1215.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (102 samples, 0.04%)</title><rect x="50.4530%" y="1189" width="0.0354%" height="15" fill="rgb(239,156,16)"/><text x="50.7030%" y="1199.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (102 samples, 0.04%)</title><rect x="50.4530%" y="1173" width="0.0354%" height="15" fill="rgb(224,27,38)"/><text x="50.7030%" y="1183.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (102 samples, 0.04%)</title><rect x="50.4530%" y="1157" width="0.0354%" height="15" fill="rgb(224,39,27)"/><text x="50.7030%" y="1167.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (102 samples, 0.04%)</title><rect x="50.4530%" y="1141" width="0.0354%" height="15" fill="rgb(215,92,29)"/><text x="50.7030%" y="1151.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (102 samples, 0.04%)</title><rect x="50.4530%" y="1125" width="0.0354%" height="15" fill="rgb(207,159,16)"/><text x="50.7030%" y="1135.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (102 samples, 0.04%)</title><rect x="50.4530%" y="1109" width="0.0354%" height="15" fill="rgb(238,163,47)"/><text x="50.7030%" y="1119.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (102 samples, 0.04%)</title><rect x="50.4530%" y="1093" width="0.0354%" height="15" fill="rgb(219,91,49)"/><text x="50.7030%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (102 samples, 0.04%)</title><rect x="50.4530%" y="1077" width="0.0354%" height="15" fill="rgb(227,167,31)"/><text x="50.7030%" y="1087.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (63 samples, 0.02%)</title><rect x="50.4665%" y="1061" width="0.0219%" height="15" fill="rgb(234,80,54)"/><text x="50.7165%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (42 samples, 0.01%)</title><rect x="50.4883%" y="1301" width="0.0146%" height="15" fill="rgb(212,114,2)"/><text x="50.7383%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (42 samples, 0.01%)</title><rect x="50.4883%" y="1285" width="0.0146%" height="15" fill="rgb(234,50,24)"/><text x="50.7383%" y="1295.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (42 samples, 0.01%)</title><rect x="50.4883%" y="1269" width="0.0146%" height="15" fill="rgb(221,68,8)"/><text x="50.7383%" y="1279.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (42 samples, 0.01%)</title><rect x="50.4883%" y="1253" width="0.0146%" height="15" fill="rgb(254,180,31)"/><text x="50.7383%" y="1263.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (42 samples, 0.01%)</title><rect x="50.4883%" y="1237" width="0.0146%" height="15" fill="rgb(247,130,50)"/><text x="50.7383%" y="1247.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (42 samples, 0.01%)</title><rect x="50.4883%" y="1221" width="0.0146%" height="15" fill="rgb(211,109,4)"/><text x="50.7383%" y="1231.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (42 samples, 0.01%)</title><rect x="50.4883%" y="1205" width="0.0146%" height="15" fill="rgb(238,50,21)"/><text x="50.7383%" y="1215.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (32 samples, 0.01%)</title><rect x="50.4918%" y="1189" width="0.0111%" height="15" fill="rgb(225,57,45)"/><text x="50.7418%" y="1199.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (32 samples, 0.01%)</title><rect x="50.4918%" y="1173" width="0.0111%" height="15" fill="rgb(209,196,50)"/><text x="50.7418%" y="1183.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (51 samples, 0.02%)</title><rect x="50.5955%" y="1157" width="0.0177%" height="15" fill="rgb(242,140,13)"/><text x="50.8455%" y="1167.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.01%)</title><rect x="50.6320%" y="1109" width="0.0114%" height="15" fill="rgb(217,111,7)"/><text x="50.8820%" y="1119.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.03%)</title><rect x="50.6240%" y="1125" width="0.0326%" height="15" fill="rgb(253,193,51)"/><text x="50.8740%" y="1135.50"></text></g><g><title>std::sys_common::poison::Flag::done (38 samples, 0.01%)</title><rect x="50.6434%" y="1109" width="0.0132%" height="15" fill="rgb(252,70,29)"/><text x="50.8934%" y="1119.50"></text></g><g><title>std::thread::panicking (31 samples, 0.01%)</title><rect x="50.6459%" y="1093" width="0.0108%" height="15" fill="rgb(232,127,12)"/><text x="50.8959%" y="1103.50"></text></g><g><title>core::mem::drop (123 samples, 0.04%)</title><rect x="50.6143%" y="1157" width="0.0427%" height="15" fill="rgb(211,180,21)"/><text x="50.8643%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (115 samples, 0.04%)</title><rect x="50.6171%" y="1141" width="0.0399%" height="15" fill="rgb(229,72,13)"/><text x="50.8671%" y="1151.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (41 samples, 0.01%)</title><rect x="50.6570%" y="1157" width="0.0142%" height="15" fill="rgb(240,211,49)"/><text x="50.9070%" y="1167.50"></text></g><g><title>__vdso_clock_gettime (32 samples, 0.01%)</title><rect x="50.7676%" y="1029" width="0.0111%" height="15" fill="rgb(219,149,40)"/><text x="51.0176%" y="1039.50"></text></g><g><title>__GI___clock_gettime (127 samples, 0.04%)</title><rect x="50.7350%" y="1045" width="0.0441%" height="15" fill="rgb(210,127,46)"/><text x="50.9850%" y="1055.50"></text></g><g><title>std::time::Instant::now (167 samples, 0.06%)</title><rect x="50.7229%" y="1093" width="0.0579%" height="15" fill="rgb(220,106,7)"/><text x="50.9729%" y="1103.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (166 samples, 0.06%)</title><rect x="50.7232%" y="1077" width="0.0576%" height="15" fill="rgb(249,31,22)"/><text x="50.9732%" y="1087.50"></text></g><g><title>std::sys::unix::time::inner::now (166 samples, 0.06%)</title><rect x="50.7232%" y="1061" width="0.0576%" height="15" fill="rgb(253,1,49)"/><text x="50.9732%" y="1071.50"></text></g><g><title>tokio::time::clock::Clock::now (220 samples, 0.08%)</title><rect x="50.7066%" y="1125" width="0.0763%" height="15" fill="rgb(227,144,33)"/><text x="50.9566%" y="1135.50"></text></g><g><title>tokio::time::clock::now (193 samples, 0.07%)</title><rect x="50.7159%" y="1109" width="0.0670%" height="15" fill="rgb(249,163,44)"/><text x="50.9659%" y="1119.50"></text></g><g><title>tokio::time::driver::ClockTime::now (399 samples, 0.14%)</title><rect x="50.6885%" y="1141" width="0.1384%" height="15" fill="rgb(234,15,39)"/><text x="50.9385%" y="1151.50"></text></g><g><title>tokio::time::driver::ClockTime::instant_to_tick (127 samples, 0.04%)</title><rect x="50.7829%" y="1125" width="0.0441%" height="15" fill="rgb(207,66,16)"/><text x="51.0329%" y="1135.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (33 samples, 0.01%)</title><rect x="50.8155%" y="1109" width="0.0114%" height="15" fill="rgb(233,112,24)"/><text x="51.0655%" y="1119.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (461 samples, 0.16%)</title><rect x="50.6715%" y="1157" width="0.1599%" height="15" fill="rgb(230,90,22)"/><text x="50.9215%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (70 samples, 0.02%)</title><rect x="50.8408%" y="1141" width="0.0243%" height="15" fill="rgb(229,61,13)"/><text x="51.0908%" y="1151.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (49 samples, 0.02%)</title><rect x="50.8481%" y="1125" width="0.0170%" height="15" fill="rgb(225,57,24)"/><text x="51.0981%" y="1135.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (32 samples, 0.01%)</title><rect x="50.8540%" y="1109" width="0.0111%" height="15" fill="rgb(208,169,48)"/><text x="51.1040%" y="1119.50"></text></g><g><title>tokio::time::driver::handle::Handle::lock (196 samples, 0.07%)</title><rect x="50.8315%" y="1157" width="0.0680%" height="15" fill="rgb(244,218,51)"/><text x="51.0815%" y="1167.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (98 samples, 0.03%)</title><rect x="50.8655%" y="1141" width="0.0340%" height="15" fill="rgb(214,148,10)"/><text x="51.1155%" y="1151.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.03%)</title><rect x="50.8742%" y="1125" width="0.0253%" height="15" fill="rgb(225,174,27)"/><text x="51.1242%" y="1135.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.01%)</title><rect x="50.8873%" y="1109" width="0.0121%" height="15" fill="rgb(230,96,26)"/><text x="51.1373%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1301" width="0.4216%" height="15" fill="rgb(232,10,30)"/><text x="50.7529%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1285" width="0.4216%" height="15" fill="rgb(222,8,50)"/><text x="50.7529%" y="1295.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1269" width="0.4216%" height="15" fill="rgb(213,81,27)"/><text x="50.7529%" y="1279.50"></text></g><g><title>tokio::runtime::park::Inner::park (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1253" width="0.4216%" height="15" fill="rgb(245,50,10)"/><text x="50.7529%" y="1263.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1237" width="0.4216%" height="15" fill="rgb(216,100,18)"/><text x="50.7529%" y="1247.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1221" width="0.4216%" height="15" fill="rgb(236,147,54)"/><text x="50.7529%" y="1231.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1205" width="0.4216%" height="15" fill="rgb(205,143,26)"/><text x="50.7529%" y="1215.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1189" width="0.4216%" height="15" fill="rgb(236,26,9)"/><text x="50.7529%" y="1199.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (1,215 samples, 0.42%)</title><rect x="50.5029%" y="1173" width="0.4216%" height="15" fill="rgb(221,165,53)"/><text x="50.7529%" y="1183.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (72 samples, 0.02%)</title><rect x="50.8995%" y="1157" width="0.0250%" height="15" fill="rgb(214,110,17)"/><text x="51.1495%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (46 samples, 0.02%)</title><rect x="50.9085%" y="1141" width="0.0160%" height="15" fill="rgb(237,197,12)"/><text x="51.1585%" y="1151.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::pointers (51 samples, 0.02%)</title><rect x="50.9338%" y="981" width="0.0177%" height="15" fill="rgb(205,84,17)"/><text x="51.1838%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (92 samples, 0.03%)</title><rect x="50.9245%" y="1125" width="0.0319%" height="15" fill="rgb(237,18,45)"/><text x="51.1745%" y="1135.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (92 samples, 0.03%)</title><rect x="50.9245%" y="1109" width="0.0319%" height="15" fill="rgb(221,87,14)"/><text x="51.1745%" y="1119.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release (92 samples, 0.03%)</title><rect x="50.9245%" y="1093" width="0.0319%" height="15" fill="rgb(238,186,15)"/><text x="51.1745%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (92 samples, 0.03%)</title><rect x="50.9245%" y="1077" width="0.0319%" height="15" fill="rgb(208,115,11)"/><text x="51.1745%" y="1087.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release::{{closure}} (92 samples, 0.03%)</title><rect x="50.9245%" y="1061" width="0.0319%" height="15" fill="rgb(254,175,0)"/><text x="51.1745%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release (92 samples, 0.03%)</title><rect x="50.9245%" y="1045" width="0.0319%" height="15" fill="rgb(227,24,42)"/><text x="51.1745%" y="1055.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (92 samples, 0.03%)</title><rect x="50.9245%" y="1029" width="0.0319%" height="15" fill="rgb(223,211,37)"/><text x="51.1745%" y="1039.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release::{{closure}} (92 samples, 0.03%)</title><rect x="50.9245%" y="1013" width="0.0319%" height="15" fill="rgb(235,49,27)"/><text x="51.1745%" y="1023.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (92 samples, 0.03%)</title><rect x="50.9245%" y="997" width="0.0319%" height="15" fill="rgb(254,97,51)"/><text x="51.1745%" y="1007.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (91 samples, 0.03%)</title><rect x="50.9564%" y="933" width="0.0316%" height="15" fill="rgb(249,51,40)"/><text x="51.2064%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1701" width="0.5072%" height="15" fill="rgb(210,128,45)"/><text x="50.7383%" y="1711.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1685" width="0.5072%" height="15" fill="rgb(224,137,50)"/><text x="50.7383%" y="1695.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1669" width="0.5072%" height="15" fill="rgb(242,15,9)"/><text x="50.7383%" y="1679.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1653" width="0.5072%" height="15" fill="rgb(233,187,41)"/><text x="50.7383%" y="1663.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1637" width="0.5072%" height="15" fill="rgb(227,2,29)"/><text x="50.7383%" y="1647.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1621" width="0.5072%" height="15" fill="rgb(222,70,3)"/><text x="50.7383%" y="1631.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1605" width="0.5072%" height="15" fill="rgb(213,11,42)"/><text x="50.7383%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1589" width="0.5072%" height="15" fill="rgb(225,150,9)"/><text x="50.7383%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1573" width="0.5072%" height="15" fill="rgb(230,162,45)"/><text x="50.7383%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1557" width="0.5072%" height="15" fill="rgb(222,14,52)"/><text x="50.7383%" y="1567.50"></text></g><g><title>std::panic::catch_unwind (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1541" width="0.5072%" height="15" fill="rgb(254,198,14)"/><text x="50.7383%" y="1551.50"></text></g><g><title>std::panicking::try (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1525" width="0.5072%" height="15" fill="rgb(220,217,30)"/><text x="50.7383%" y="1535.50"></text></g><g><title>__rust_try (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1509" width="0.5072%" height="15" fill="rgb(215,146,41)"/><text x="50.7383%" y="1519.50"></text></g><g><title>std::panicking::try::do_call (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1493" width="0.5072%" height="15" fill="rgb(217,27,36)"/><text x="50.7383%" y="1503.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1477" width="0.5072%" height="15" fill="rgb(219,218,39)"/><text x="50.7383%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1461" width="0.5072%" height="15" fill="rgb(219,4,42)"/><text x="50.7383%" y="1471.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1445" width="0.5072%" height="15" fill="rgb(249,119,36)"/><text x="50.7383%" y="1455.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1429" width="0.5072%" height="15" fill="rgb(209,23,33)"/><text x="50.7383%" y="1439.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1413" width="0.5072%" height="15" fill="rgb(211,10,0)"/><text x="50.7383%" y="1423.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1397" width="0.5072%" height="15" fill="rgb(208,99,37)"/><text x="50.7383%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1381" width="0.5072%" height="15" fill="rgb(213,132,31)"/><text x="50.7383%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1365" width="0.5072%" height="15" fill="rgb(243,129,40)"/><text x="50.7383%" y="1375.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1349" width="0.5072%" height="15" fill="rgb(210,66,33)"/><text x="50.7383%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1333" width="0.5072%" height="15" fill="rgb(209,189,4)"/><text x="50.7383%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,462 samples, 0.51%)</title><rect x="50.4883%" y="1317" width="0.5072%" height="15" fill="rgb(214,107,37)"/><text x="50.7383%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (205 samples, 0.07%)</title><rect x="50.9245%" y="1301" width="0.0711%" height="15" fill="rgb(245,88,54)"/><text x="51.1745%" y="1311.50"></text></g><g><title>tokio::coop::budget (205 samples, 0.07%)</title><rect x="50.9245%" y="1285" width="0.0711%" height="15" fill="rgb(205,146,20)"/><text x="51.1745%" y="1295.50"></text></g><g><title>tokio::coop::with_budget (205 samples, 0.07%)</title><rect x="50.9245%" y="1269" width="0.0711%" height="15" fill="rgb(220,161,25)"/><text x="51.1745%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (205 samples, 0.07%)</title><rect x="50.9245%" y="1253" width="0.0711%" height="15" fill="rgb(215,152,15)"/><text x="51.1745%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (205 samples, 0.07%)</title><rect x="50.9245%" y="1237" width="0.0711%" height="15" fill="rgb(233,192,44)"/><text x="51.1745%" y="1247.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (205 samples, 0.07%)</title><rect x="50.9245%" y="1221" width="0.0711%" height="15" fill="rgb(240,170,46)"/><text x="51.1745%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (205 samples, 0.07%)</title><rect x="50.9245%" y="1205" width="0.0711%" height="15" fill="rgb(207,104,33)"/><text x="51.1745%" y="1215.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (205 samples, 0.07%)</title><rect x="50.9245%" y="1189" width="0.0711%" height="15" fill="rgb(219,21,39)"/><text x="51.1745%" y="1199.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (205 samples, 0.07%)</title><rect x="50.9245%" y="1173" width="0.0711%" height="15" fill="rgb(214,133,29)"/><text x="51.1745%" y="1183.50"></text></g><g><title>tokio::runtime::task::raw::poll (205 samples, 0.07%)</title><rect x="50.9245%" y="1157" width="0.0711%" height="15" fill="rgb(226,93,6)"/><text x="51.1745%" y="1167.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (205 samples, 0.07%)</title><rect x="50.9245%" y="1141" width="0.0711%" height="15" fill="rgb(252,222,34)"/><text x="51.1745%" y="1151.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (113 samples, 0.04%)</title><rect x="50.9564%" y="1125" width="0.0392%" height="15" fill="rgb(252,92,48)"/><text x="51.2064%" y="1135.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (113 samples, 0.04%)</title><rect x="50.9564%" y="1109" width="0.0392%" height="15" fill="rgb(245,223,24)"/><text x="51.2064%" y="1119.50"></text></g><g><title>std::panic::catch_unwind (113 samples, 0.04%)</title><rect x="50.9564%" y="1093" width="0.0392%" height="15" fill="rgb(205,176,3)"/><text x="51.2064%" y="1103.50"></text></g><g><title>std::panicking::try (113 samples, 0.04%)</title><rect x="50.9564%" y="1077" width="0.0392%" height="15" fill="rgb(235,151,15)"/><text x="51.2064%" y="1087.50"></text></g><g><title>__rust_try (113 samples, 0.04%)</title><rect x="50.9564%" y="1061" width="0.0392%" height="15" fill="rgb(237,209,11)"/><text x="51.2064%" y="1071.50"></text></g><g><title>std::panicking::try::do_call (113 samples, 0.04%)</title><rect x="50.9564%" y="1045" width="0.0392%" height="15" fill="rgb(243,227,24)"/><text x="51.2064%" y="1055.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (113 samples, 0.04%)</title><rect x="50.9564%" y="1029" width="0.0392%" height="15" fill="rgb(239,193,16)"/><text x="51.2064%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (113 samples, 0.04%)</title><rect x="50.9564%" y="1013" width="0.0392%" height="15" fill="rgb(231,27,9)"/><text x="51.2064%" y="1023.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (113 samples, 0.04%)</title><rect x="50.9564%" y="997" width="0.0392%" height="15" fill="rgb(219,169,10)"/><text x="51.2064%" y="1007.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (113 samples, 0.04%)</title><rect x="50.9564%" y="981" width="0.0392%" height="15" fill="rgb(244,229,43)"/><text x="51.2064%" y="991.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (113 samples, 0.04%)</title><rect x="50.9564%" y="965" width="0.0392%" height="15" fill="rgb(254,38,20)"/><text x="51.2064%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (113 samples, 0.04%)</title><rect x="50.9564%" y="949" width="0.0392%" height="15" fill="rgb(250,47,30)"/><text x="51.2064%" y="959.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (73 samples, 0.03%)</title><rect x="50.9956%" y="1429" width="0.0253%" height="15" fill="rgb(224,124,36)"/><text x="51.2456%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (73 samples, 0.03%)</title><rect x="50.9956%" y="1413" width="0.0253%" height="15" fill="rgb(246,68,51)"/><text x="51.2456%" y="1423.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (33 samples, 0.01%)</title><rect x="51.0209%" y="1397" width="0.0114%" height="15" fill="rgb(253,43,49)"/><text x="51.2709%" y="1407.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (113 samples, 0.04%)</title><rect x="50.9956%" y="1477" width="0.0392%" height="15" fill="rgb(219,54,36)"/><text x="51.2456%" y="1487.50"></text></g><g><title>std::io::Write::write_fmt (113 samples, 0.04%)</title><rect x="50.9956%" y="1461" width="0.0392%" height="15" fill="rgb(227,133,34)"/><text x="51.2456%" y="1471.50"></text></g><g><title>core::fmt::write (113 samples, 0.04%)</title><rect x="50.9956%" y="1445" width="0.0392%" height="15" fill="rgb(247,227,15)"/><text x="51.2456%" y="1455.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (40 samples, 0.01%)</title><rect x="51.0209%" y="1429" width="0.0139%" height="15" fill="rgb(229,96,14)"/><text x="51.2709%" y="1439.50"></text></g><g><title>std::io::Write::write_all (40 samples, 0.01%)</title><rect x="51.0209%" y="1413" width="0.0139%" height="15" fill="rgb(220,79,17)"/><text x="51.2709%" y="1423.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (34 samples, 0.01%)</title><rect x="51.0417%" y="1365" width="0.0118%" height="15" fill="rgb(205,131,53)"/><text x="51.2917%" y="1375.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (55 samples, 0.02%)</title><rect x="51.0348%" y="1429" width="0.0191%" height="15" fill="rgb(209,50,29)"/><text x="51.2848%" y="1439.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (55 samples, 0.02%)</title><rect x="51.0348%" y="1413" width="0.0191%" height="15" fill="rgb(245,86,46)"/><text x="51.2848%" y="1423.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (55 samples, 0.02%)</title><rect x="51.0348%" y="1397" width="0.0191%" height="15" fill="rgb(235,66,46)"/><text x="51.2848%" y="1407.50"></text></g><g><title>core::fmt::write (52 samples, 0.02%)</title><rect x="51.0358%" y="1381" width="0.0180%" height="15" fill="rgb(232,148,31)"/><text x="51.2858%" y="1391.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (63 samples, 0.02%)</title><rect x="51.0348%" y="1477" width="0.0219%" height="15" fill="rgb(217,149,8)"/><text x="51.2848%" y="1487.50"></text></g><g><title>std::io::Write::write_fmt (63 samples, 0.02%)</title><rect x="51.0348%" y="1461" width="0.0219%" height="15" fill="rgb(209,183,11)"/><text x="51.2848%" y="1471.50"></text></g><g><title>core::fmt::write (63 samples, 0.02%)</title><rect x="51.0348%" y="1445" width="0.0219%" height="15" fill="rgb(208,55,20)"/><text x="51.2848%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (48 samples, 0.02%)</title><rect x="51.0705%" y="1445" width="0.0167%" height="15" fill="rgb(218,39,14)"/><text x="51.3205%" y="1455.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (67 samples, 0.02%)</title><rect x="51.0872%" y="1413" width="0.0232%" height="15" fill="rgb(216,169,33)"/><text x="51.3372%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (67 samples, 0.02%)</title><rect x="51.0872%" y="1397" width="0.0232%" height="15" fill="rgb(233,80,24)"/><text x="51.3372%" y="1407.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (344 samples, 0.12%)</title><rect x="50.9956%" y="1525" width="0.1194%" height="15" fill="rgb(213,179,31)"/><text x="51.2456%" y="1535.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (344 samples, 0.12%)</title><rect x="50.9956%" y="1509" width="0.1194%" height="15" fill="rgb(209,19,5)"/><text x="51.2456%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (344 samples, 0.12%)</title><rect x="50.9956%" y="1493" width="0.1194%" height="15" fill="rgb(219,18,35)"/><text x="51.2456%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (136 samples, 0.05%)</title><rect x="51.0678%" y="1477" width="0.0472%" height="15" fill="rgb(209,169,16)"/><text x="51.3178%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (136 samples, 0.05%)</title><rect x="51.0678%" y="1461" width="0.0472%" height="15" fill="rgb(245,90,51)"/><text x="51.3178%" y="1471.50"></text></g><g><title>std::io::Write::write_fmt (80 samples, 0.03%)</title><rect x="51.0872%" y="1445" width="0.0278%" height="15" fill="rgb(220,99,45)"/><text x="51.3372%" y="1455.50"></text></g><g><title>core::fmt::write (80 samples, 0.03%)</title><rect x="51.0872%" y="1429" width="0.0278%" height="15" fill="rgb(249,89,25)"/><text x="51.3372%" y="1439.50"></text></g><g><title>do_output_char (31 samples, 0.01%)</title><rect x="51.3054%" y="1157" width="0.0108%" height="15" fill="rgb(239,193,0)"/><text x="51.5554%" y="1167.50"></text></g><g><title>select_task_rq_fair (87 samples, 0.03%)</title><rect x="51.3935%" y="1045" width="0.0302%" height="15" fill="rgb(231,126,1)"/><text x="51.6435%" y="1055.50"></text></g><g><title>select_idle_sibling (49 samples, 0.02%)</title><rect x="51.4067%" y="1029" width="0.0170%" height="15" fill="rgb(243,166,3)"/><text x="51.6567%" y="1039.50"></text></g><g><title>enqueue_entity (51 samples, 0.02%)</title><rect x="51.4373%" y="997" width="0.0177%" height="15" fill="rgb(223,22,34)"/><text x="51.6873%" y="1007.50"></text></g><g><title>enqueue_task_fair (74 samples, 0.03%)</title><rect x="51.4321%" y="1013" width="0.0257%" height="15" fill="rgb(251,52,51)"/><text x="51.6821%" y="1023.50"></text></g><g><title>activate_task (132 samples, 0.05%)</title><rect x="51.4282%" y="1029" width="0.0458%" height="15" fill="rgb(221,165,28)"/><text x="51.6782%" y="1039.50"></text></g><g><title>psi_task_change (45 samples, 0.02%)</title><rect x="51.4584%" y="1013" width="0.0156%" height="15" fill="rgb(218,121,47)"/><text x="51.7084%" y="1023.50"></text></g><g><title>check_preempt_curr (44 samples, 0.02%)</title><rect x="51.4761%" y="1013" width="0.0153%" height="15" fill="rgb(209,120,9)"/><text x="51.7261%" y="1023.50"></text></g><g><title>ttwu_do_activate (184 samples, 0.06%)</title><rect x="51.4279%" y="1045" width="0.0638%" height="15" fill="rgb(236,68,12)"/><text x="51.6779%" y="1055.50"></text></g><g><title>ttwu_do_wakeup (46 samples, 0.02%)</title><rect x="51.4758%" y="1029" width="0.0160%" height="15" fill="rgb(225,194,26)"/><text x="51.7258%" y="1039.50"></text></g><g><title>try_to_wake_up (365 samples, 0.13%)</title><rect x="51.3720%" y="1061" width="0.1266%" height="15" fill="rgb(231,84,39)"/><text x="51.6220%" y="1071.50"></text></g><g><title>__queue_work (431 samples, 0.15%)</title><rect x="51.3495%" y="1109" width="0.1495%" height="15" fill="rgb(210,11,45)"/><text x="51.5995%" y="1119.50"></text></g><g><title>insert_work (373 samples, 0.13%)</title><rect x="51.3696%" y="1093" width="0.1294%" height="15" fill="rgb(224,54,52)"/><text x="51.6196%" y="1103.50"></text></g><g><title>wake_up_process (373 samples, 0.13%)</title><rect x="51.3696%" y="1077" width="0.1294%" height="15" fill="rgb(238,102,14)"/><text x="51.6196%" y="1087.50"></text></g><g><title>tty_flip_buffer_push (489 samples, 0.17%)</title><rect x="51.3387%" y="1141" width="0.1697%" height="15" fill="rgb(243,160,52)"/><text x="51.5887%" y="1151.50"></text></g><g><title>queue_work_on (480 samples, 0.17%)</title><rect x="51.3419%" y="1125" width="0.1665%" height="15" fill="rgb(216,114,19)"/><text x="51.5919%" y="1135.50"></text></g><g><title>pty_write (545 samples, 0.19%)</title><rect x="51.3269%" y="1157" width="0.1891%" height="15" fill="rgb(244,166,37)"/><text x="51.5769%" y="1167.50"></text></g><g><title>n_tty_write (873 samples, 0.30%)</title><rect x="51.2284%" y="1173" width="0.3029%" height="15" fill="rgb(246,29,44)"/><text x="51.4784%" y="1183.50"></text></g><g><title>__vfs_write (1,056 samples, 0.37%)</title><rect x="51.1791%" y="1205" width="0.3664%" height="15" fill="rgb(215,56,53)"/><text x="51.4291%" y="1215.50"></text></g><g><title>tty_write (1,044 samples, 0.36%)</title><rect x="51.1833%" y="1189" width="0.3622%" height="15" fill="rgb(217,60,2)"/><text x="51.4333%" y="1199.50"></text></g><g><title>rw_verify_area (31 samples, 0.01%)</title><rect x="51.5493%" y="1205" width="0.0108%" height="15" fill="rgb(207,26,24)"/><text x="51.7993%" y="1215.50"></text></g><g><title>ksys_write (1,190 samples, 0.41%)</title><rect x="51.1503%" y="1237" width="0.4129%" height="15" fill="rgb(252,210,15)"/><text x="51.4003%" y="1247.50"></text></g><g><title>vfs_write (1,141 samples, 0.40%)</title><rect x="51.1673%" y="1221" width="0.3959%" height="15" fill="rgb(253,209,26)"/><text x="51.4173%" y="1231.50"></text></g><g><title>__x64_sys_write (1,197 samples, 0.42%)</title><rect x="51.1483%" y="1253" width="0.4153%" height="15" fill="rgb(238,170,14)"/><text x="51.3983%" y="1263.50"></text></g><g><title>do_syscall_64 (1,211 samples, 0.42%)</title><rect x="51.1455%" y="1269" width="0.4202%" height="15" fill="rgb(216,178,15)"/><text x="51.3955%" y="1279.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,230 samples, 0.43%)</title><rect x="51.1392%" y="1285" width="0.4268%" height="15" fill="rgb(250,197,2)"/><text x="51.3892%" y="1295.50"></text></g><g><title>__GI___libc_write (1,265 samples, 0.44%)</title><rect x="51.1299%" y="1317" width="0.4389%" height="15" fill="rgb(212,70,42)"/><text x="51.3799%" y="1327.50"></text></g><g><title>__GI___libc_write (1,258 samples, 0.44%)</title><rect x="51.1323%" y="1301" width="0.4365%" height="15" fill="rgb(227,213,9)"/><text x="51.3823%" y="1311.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (1,269 samples, 0.44%)</title><rect x="51.1295%" y="1349" width="0.4403%" height="15" fill="rgb(245,99,25)"/><text x="51.3795%" y="1359.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1,269 samples, 0.44%)</title><rect x="51.1295%" y="1333" width="0.4403%" height="15" fill="rgb(250,82,29)"/><text x="51.3795%" y="1343.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write (1,271 samples, 0.44%)</title><rect x="51.1295%" y="1365" width="0.4410%" height="15" fill="rgb(241,226,54)"/><text x="51.3795%" y="1375.50"></text></g><g><title>&lt;termcolor::LossyStandardStream&lt;W&gt; as std::io::Write&gt;::write (1,285 samples, 0.45%)</title><rect x="51.1250%" y="1413" width="0.4458%" height="15" fill="rgb(221,99,41)"/><text x="51.3750%" y="1423.50"></text></g><g><title>&lt;termcolor::IoStandardStreamLock as std::io::Write&gt;::write (1,274 samples, 0.44%)</title><rect x="51.1288%" y="1397" width="0.4420%" height="15" fill="rgb(213,90,21)"/><text x="51.3788%" y="1407.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write (1,274 samples, 0.44%)</title><rect x="51.1288%" y="1381" width="0.4420%" height="15" fill="rgb(205,208,24)"/><text x="51.3788%" y="1391.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (1,705 samples, 0.59%)</title><rect x="50.9956%" y="1621" width="0.5916%" height="15" fill="rgb(246,31,12)"/><text x="51.2456%" y="1631.50"></text></g><g><title>log::__private_api_log (1,705 samples, 0.59%)</title><rect x="50.9956%" y="1605" width="0.5916%" height="15" fill="rgb(213,154,6)"/><text x="51.2456%" y="1615.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (1,705 samples, 0.59%)</title><rect x="50.9956%" y="1589" width="0.5916%" height="15" fill="rgb(222,163,29)"/><text x="51.2456%" y="1599.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,705 samples, 0.59%)</title><rect x="50.9956%" y="1573" width="0.5916%" height="15" fill="rgb(227,201,8)"/><text x="51.2456%" y="1583.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1,705 samples, 0.59%)</title><rect x="50.9956%" y="1557" width="0.5916%" height="15" fill="rgb(233,9,32)"/><text x="51.2456%" y="1567.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1,705 samples, 0.59%)</title><rect x="50.9956%" y="1541" width="0.5916%" height="15" fill="rgb(217,54,24)"/><text x="51.2456%" y="1551.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1525" width="0.4722%" height="15" fill="rgb(235,192,0)"/><text x="51.3649%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1509" width="0.4722%" height="15" fill="rgb(235,45,9)"/><text x="51.3649%" y="1519.50"></text></g><g><title>env_logger::fmt::Formatter::print (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1493" width="0.4722%" height="15" fill="rgb(246,42,40)"/><text x="51.3649%" y="1503.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1477" width="0.4722%" height="15" fill="rgb(248,111,24)"/><text x="51.3649%" y="1487.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1461" width="0.4722%" height="15" fill="rgb(249,65,22)"/><text x="51.3649%" y="1471.50"></text></g><g><title>termcolor::BufferWriter::print (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1445" width="0.4722%" height="15" fill="rgb(238,111,51)"/><text x="51.3649%" y="1455.50"></text></g><g><title>std::io::Write::write_all (1,361 samples, 0.47%)</title><rect x="51.1149%" y="1429" width="0.4722%" height="15" fill="rgb(250,118,22)"/><text x="51.3649%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (43 samples, 0.01%)</title><rect x="51.5872%" y="1477" width="0.0149%" height="15" fill="rgb(234,84,26)"/><text x="51.8372%" y="1487.50"></text></g><g><title>std::io::Write::write_fmt (43 samples, 0.01%)</title><rect x="51.5872%" y="1461" width="0.0149%" height="15" fill="rgb(243,172,12)"/><text x="51.8372%" y="1471.50"></text></g><g><title>core::fmt::write (43 samples, 0.01%)</title><rect x="51.5872%" y="1445" width="0.0149%" height="15" fill="rgb(236,150,49)"/><text x="51.8372%" y="1455.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (43 samples, 0.01%)</title><rect x="51.5872%" y="1429" width="0.0149%" height="15" fill="rgb(225,197,26)"/><text x="51.8372%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (43 samples, 0.01%)</title><rect x="51.5872%" y="1413" width="0.0149%" height="15" fill="rgb(214,17,42)"/><text x="51.8372%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (43 samples, 0.01%)</title><rect x="51.5872%" y="1397" width="0.0149%" height="15" fill="rgb(224,165,40)"/><text x="51.8372%" y="1407.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (43 samples, 0.01%)</title><rect x="51.5872%" y="1381" width="0.0149%" height="15" fill="rgb(246,100,4)"/><text x="51.8372%" y="1391.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (43 samples, 0.01%)</title><rect x="51.5872%" y="1365" width="0.0149%" height="15" fill="rgb(222,103,0)"/><text x="51.8372%" y="1375.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (43 samples, 0.01%)</title><rect x="51.5872%" y="1349" width="0.0149%" height="15" fill="rgb(227,189,26)"/><text x="51.8372%" y="1359.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (43 samples, 0.01%)</title><rect x="51.5872%" y="1333" width="0.0149%" height="15" fill="rgb(214,202,17)"/><text x="51.8372%" y="1343.50"></text></g><g><title>std::io::Write::write_all (43 samples, 0.01%)</title><rect x="51.5872%" y="1317" width="0.0149%" height="15" fill="rgb(229,111,3)"/><text x="51.8372%" y="1327.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (35 samples, 0.01%)</title><rect x="51.6021%" y="1285" width="0.0121%" height="15" fill="rgb(229,172,15)"/><text x="51.8521%" y="1295.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (35 samples, 0.01%)</title><rect x="51.6021%" y="1269" width="0.0121%" height="15" fill="rgb(230,224,35)"/><text x="51.8521%" y="1279.50"></text></g><g><title>core::cell::BorrowRefMut::new (35 samples, 0.01%)</title><rect x="51.6021%" y="1253" width="0.0121%" height="15" fill="rgb(251,141,6)"/><text x="51.8521%" y="1263.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (35 samples, 0.01%)</title><rect x="51.6021%" y="1237" width="0.0121%" height="15" fill="rgb(225,208,6)"/><text x="51.8521%" y="1247.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (35 samples, 0.01%)</title><rect x="51.6021%" y="1221" width="0.0121%" height="15" fill="rgb(246,181,16)"/><text x="51.8521%" y="1231.50"></text></g><g><title>core::mem::replace (35 samples, 0.01%)</title><rect x="51.6021%" y="1205" width="0.0121%" height="15" fill="rgb(227,129,36)"/><text x="51.8521%" y="1215.50"></text></g><g><title>core::mem::swap (31 samples, 0.01%)</title><rect x="51.6035%" y="1189" width="0.0108%" height="15" fill="rgb(248,117,24)"/><text x="51.8535%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (29 samples, 0.01%)</title><rect x="51.6042%" y="1173" width="0.0101%" height="15" fill="rgb(214,185,35)"/><text x="51.8542%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="51.6142%" y="1285" width="0.0108%" height="15" fill="rgb(236,150,34)"/><text x="51.8642%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="51.6142%" y="1269" width="0.0108%" height="15" fill="rgb(243,228,27)"/><text x="51.8642%" y="1279.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="51.6142%" y="1253" width="0.0108%" height="15" fill="rgb(245,77,44)"/><text x="51.8642%" y="1263.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (31 samples, 0.01%)</title><rect x="51.6142%" y="1237" width="0.0108%" height="15" fill="rgb(235,214,42)"/><text x="51.8642%" y="1247.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (31 samples, 0.01%)</title><rect x="51.6142%" y="1221" width="0.0108%" height="15" fill="rgb(221,74,3)"/><text x="51.8642%" y="1231.50"></text></g><g><title>core::mem::replace (31 samples, 0.01%)</title><rect x="51.6142%" y="1205" width="0.0108%" height="15" fill="rgb(206,121,29)"/><text x="51.8642%" y="1215.50"></text></g><g><title>core::mem::swap (31 samples, 0.01%)</title><rect x="51.6142%" y="1189" width="0.0108%" height="15" fill="rgb(249,131,53)"/><text x="51.8642%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (31 samples, 0.01%)</title><rect x="51.6142%" y="1173" width="0.0108%" height="15" fill="rgb(236,170,29)"/><text x="51.8642%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (39 samples, 0.01%)</title><rect x="51.6253%" y="1189" width="0.0135%" height="15" fill="rgb(247,96,15)"/><text x="51.8753%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 0.02%)</title><rect x="51.6250%" y="1205" width="0.0194%" height="15" fill="rgb(211,210,7)"/><text x="51.8750%" y="1215.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (149 samples, 0.05%)</title><rect x="51.6021%" y="1365" width="0.0517%" height="15" fill="rgb(240,88,50)"/><text x="51.8521%" y="1375.50"></text></g><g><title>std::io::Write::write_all (149 samples, 0.05%)</title><rect x="51.6021%" y="1349" width="0.0517%" height="15" fill="rgb(209,229,26)"/><text x="51.8521%" y="1359.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (149 samples, 0.05%)</title><rect x="51.6021%" y="1333" width="0.0517%" height="15" fill="rgb(210,68,23)"/><text x="51.8521%" y="1343.50"></text></g><g><title>std::io::Write::write_all (149 samples, 0.05%)</title><rect x="51.6021%" y="1317" width="0.0517%" height="15" fill="rgb(229,180,13)"/><text x="51.8521%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (149 samples, 0.05%)</title><rect x="51.6021%" y="1301" width="0.0517%" height="15" fill="rgb(236,53,44)"/><text x="51.8521%" y="1311.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (83 samples, 0.03%)</title><rect x="51.6250%" y="1285" width="0.0288%" height="15" fill="rgb(244,214,29)"/><text x="51.8750%" y="1295.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (83 samples, 0.03%)</title><rect x="51.6250%" y="1269" width="0.0288%" height="15" fill="rgb(220,75,29)"/><text x="51.8750%" y="1279.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (83 samples, 0.03%)</title><rect x="51.6250%" y="1253" width="0.0288%" height="15" fill="rgb(214,183,37)"/><text x="51.8750%" y="1263.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (83 samples, 0.03%)</title><rect x="51.6250%" y="1237" width="0.0288%" height="15" fill="rgb(239,117,29)"/><text x="51.8750%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (83 samples, 0.03%)</title><rect x="51.6250%" y="1221" width="0.0288%" height="15" fill="rgb(237,171,35)"/><text x="51.8750%" y="1231.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (61 samples, 0.02%)</title><rect x="51.6666%" y="1221" width="0.0212%" height="15" fill="rgb(229,178,53)"/><text x="51.9166%" y="1231.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (36 samples, 0.01%)</title><rect x="51.6753%" y="1205" width="0.0125%" height="15" fill="rgb(210,102,19)"/><text x="51.9253%" y="1215.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (46 samples, 0.02%)</title><rect x="51.6878%" y="1221" width="0.0160%" height="15" fill="rgb(235,127,22)"/><text x="51.9378%" y="1231.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.01%)</title><rect x="51.7166%" y="1205" width="0.0108%" height="15" fill="rgb(244,31,31)"/><text x="51.9666%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (253 samples, 0.09%)</title><rect x="51.6538%" y="1237" width="0.0878%" height="15" fill="rgb(231,43,21)"/><text x="51.9038%" y="1247.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (89 samples, 0.03%)</title><rect x="51.7107%" y="1221" width="0.0309%" height="15" fill="rgb(217,131,35)"/><text x="51.9607%" y="1231.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (31 samples, 0.01%)</title><rect x="51.7308%" y="1205" width="0.0108%" height="15" fill="rgb(221,149,4)"/><text x="51.9808%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (310 samples, 0.11%)</title><rect x="51.6538%" y="1269" width="0.1076%" height="15" fill="rgb(232,170,28)"/><text x="51.9038%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (310 samples, 0.11%)</title><rect x="51.6538%" y="1253" width="0.1076%" height="15" fill="rgb(238,56,10)"/><text x="51.9038%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (57 samples, 0.02%)</title><rect x="51.7415%" y="1237" width="0.0198%" height="15" fill="rgb(235,196,14)"/><text x="51.9915%" y="1247.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (38 samples, 0.01%)</title><rect x="51.7613%" y="1253" width="0.0132%" height="15" fill="rgb(216,45,48)"/><text x="52.0113%" y="1263.50"></text></g><g><title>&lt;tunneler::streams::error::RecvError as core::fmt::Display&gt;::fmt (359 samples, 0.12%)</title><rect x="51.6538%" y="1365" width="0.1246%" height="15" fill="rgb(238,213,17)"/><text x="51.9038%" y="1375.50"></text></g><g><title>core::fmt::Formatter::write_fmt (359 samples, 0.12%)</title><rect x="51.6538%" y="1349" width="0.1246%" height="15" fill="rgb(212,13,2)"/><text x="51.9038%" y="1359.50"></text></g><g><title>core::fmt::write (359 samples, 0.12%)</title><rect x="51.6538%" y="1333" width="0.1246%" height="15" fill="rgb(240,114,20)"/><text x="51.9038%" y="1343.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (359 samples, 0.12%)</title><rect x="51.6538%" y="1317" width="0.1246%" height="15" fill="rgb(228,41,40)"/><text x="51.9038%" y="1327.50"></text></g><g><title>std::io::Write::write_all (359 samples, 0.12%)</title><rect x="51.6538%" y="1301" width="0.1246%" height="15" fill="rgb(244,132,35)"/><text x="51.9038%" y="1311.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (359 samples, 0.12%)</title><rect x="51.6538%" y="1285" width="0.1246%" height="15" fill="rgb(253,189,4)"/><text x="51.9038%" y="1295.50"></text></g><g><title>std::io::Write::write_all (49 samples, 0.02%)</title><rect x="51.7613%" y="1269" width="0.0170%" height="15" fill="rgb(224,37,19)"/><text x="52.0113%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (35 samples, 0.01%)</title><rect x="51.7901%" y="1173" width="0.0121%" height="15" fill="rgb(235,223,18)"/><text x="52.0401%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (588 samples, 0.20%)</title><rect x="51.6021%" y="1477" width="0.2040%" height="15" fill="rgb(235,163,25)"/><text x="51.8521%" y="1487.50"></text></g><g><title>std::io::Write::write_fmt (588 samples, 0.20%)</title><rect x="51.6021%" y="1461" width="0.2040%" height="15" fill="rgb(217,145,28)"/><text x="51.8521%" y="1471.50"></text></g><g><title>core::fmt::write (588 samples, 0.20%)</title><rect x="51.6021%" y="1445" width="0.2040%" height="15" fill="rgb(223,223,32)"/><text x="51.8521%" y="1455.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (588 samples, 0.20%)</title><rect x="51.6021%" y="1429" width="0.2040%" height="15" fill="rgb(227,189,39)"/><text x="51.8521%" y="1439.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (588 samples, 0.20%)</title><rect x="51.6021%" y="1413" width="0.2040%" height="15" fill="rgb(248,10,22)"/><text x="51.8521%" y="1423.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (588 samples, 0.20%)</title><rect x="51.6021%" y="1397" width="0.2040%" height="15" fill="rgb(248,46,39)"/><text x="51.8521%" y="1407.50"></text></g><g><title>core::fmt::write (588 samples, 0.20%)</title><rect x="51.6021%" y="1381" width="0.2040%" height="15" fill="rgb(248,113,48)"/><text x="51.8521%" y="1391.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (80 samples, 0.03%)</title><rect x="51.7783%" y="1365" width="0.0278%" height="15" fill="rgb(245,16,25)"/><text x="52.0283%" y="1375.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (80 samples, 0.03%)</title><rect x="51.7783%" y="1349" width="0.0278%" height="15" fill="rgb(249,152,16)"/><text x="52.0283%" y="1359.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (80 samples, 0.03%)</title><rect x="51.7783%" y="1333" width="0.0278%" height="15" fill="rgb(250,16,1)"/><text x="52.0283%" y="1343.50"></text></g><g><title>std::io::Write::write_all (80 samples, 0.03%)</title><rect x="51.7783%" y="1317" width="0.0278%" height="15" fill="rgb(249,138,3)"/><text x="52.0283%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (80 samples, 0.03%)</title><rect x="51.7783%" y="1301" width="0.0278%" height="15" fill="rgb(227,71,41)"/><text x="52.0283%" y="1311.50"></text></g><g><title>std::io::Write::write_all (80 samples, 0.03%)</title><rect x="51.7783%" y="1285" width="0.0278%" height="15" fill="rgb(209,184,23)"/><text x="52.0283%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (80 samples, 0.03%)</title><rect x="51.7783%" y="1269" width="0.0278%" height="15" fill="rgb(223,215,31)"/><text x="52.0283%" y="1279.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (50 samples, 0.02%)</title><rect x="51.7887%" y="1253" width="0.0173%" height="15" fill="rgb(210,146,28)"/><text x="52.0387%" y="1263.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (50 samples, 0.02%)</title><rect x="51.7887%" y="1237" width="0.0173%" height="15" fill="rgb(209,183,41)"/><text x="52.0387%" y="1247.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (50 samples, 0.02%)</title><rect x="51.7887%" y="1221" width="0.0173%" height="15" fill="rgb(209,224,45)"/><text x="52.0387%" y="1231.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (50 samples, 0.02%)</title><rect x="51.7887%" y="1205" width="0.0173%" height="15" fill="rgb(224,209,51)"/><text x="52.0387%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (50 samples, 0.02%)</title><rect x="51.7887%" y="1189" width="0.0173%" height="15" fill="rgb(223,17,39)"/><text x="52.0387%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (37 samples, 0.01%)</title><rect x="51.8061%" y="1477" width="0.0128%" height="15" fill="rgb(234,204,37)"/><text x="52.0561%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (37 samples, 0.01%)</title><rect x="51.8061%" y="1461" width="0.0128%" height="15" fill="rgb(236,120,5)"/><text x="52.0561%" y="1471.50"></text></g><g><title>std::io::Write::write_fmt (37 samples, 0.01%)</title><rect x="51.8061%" y="1445" width="0.0128%" height="15" fill="rgb(248,97,27)"/><text x="52.0561%" y="1455.50"></text></g><g><title>core::fmt::write (37 samples, 0.01%)</title><rect x="51.8061%" y="1429" width="0.0128%" height="15" fill="rgb(240,66,17)"/><text x="52.0561%" y="1439.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (37 samples, 0.01%)</title><rect x="51.8061%" y="1413" width="0.0128%" height="15" fill="rgb(210,79,3)"/><text x="52.0561%" y="1423.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (37 samples, 0.01%)</title><rect x="51.8061%" y="1397" width="0.0128%" height="15" fill="rgb(214,176,27)"/><text x="52.0561%" y="1407.50"></text></g><g><title>core::fmt::write (37 samples, 0.01%)</title><rect x="51.8061%" y="1381" width="0.0128%" height="15" fill="rgb(235,185,3)"/><text x="52.0561%" y="1391.50"></text></g><g><title>core::fmt::run (37 samples, 0.01%)</title><rect x="51.8061%" y="1365" width="0.0128%" height="15" fill="rgb(227,24,12)"/><text x="52.0561%" y="1375.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (37 samples, 0.01%)</title><rect x="51.8061%" y="1349" width="0.0128%" height="15" fill="rgb(252,169,48)"/><text x="52.0561%" y="1359.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (37 samples, 0.01%)</title><rect x="51.8061%" y="1333" width="0.0128%" height="15" fill="rgb(212,65,1)"/><text x="52.0561%" y="1343.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (37 samples, 0.01%)</title><rect x="51.8061%" y="1317" width="0.0128%" height="15" fill="rgb(242,39,24)"/><text x="52.0561%" y="1327.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (37 samples, 0.01%)</title><rect x="51.8061%" y="1301" width="0.0128%" height="15" fill="rgb(249,32,23)"/><text x="52.0561%" y="1311.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (37 samples, 0.01%)</title><rect x="51.8061%" y="1285" width="0.0128%" height="15" fill="rgb(251,195,23)"/><text x="52.0561%" y="1295.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (740 samples, 0.26%)</title><rect x="51.5872%" y="1621" width="0.2567%" height="15" fill="rgb(236,174,8)"/><text x="51.8372%" y="1631.50"></text></g><g><title>log::__private_api_log (740 samples, 0.26%)</title><rect x="51.5872%" y="1605" width="0.2567%" height="15" fill="rgb(220,197,8)"/><text x="51.8372%" y="1615.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (740 samples, 0.26%)</title><rect x="51.5872%" y="1589" width="0.2567%" height="15" fill="rgb(240,108,37)"/><text x="51.8372%" y="1599.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (740 samples, 0.26%)</title><rect x="51.5872%" y="1573" width="0.2567%" height="15" fill="rgb(232,176,24)"/><text x="51.8372%" y="1583.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (740 samples, 0.26%)</title><rect x="51.5872%" y="1557" width="0.2567%" height="15" fill="rgb(243,35,29)"/><text x="51.8372%" y="1567.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (740 samples, 0.26%)</title><rect x="51.5872%" y="1541" width="0.2567%" height="15" fill="rgb(210,37,18)"/><text x="51.8372%" y="1551.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (740 samples, 0.26%)</title><rect x="51.5872%" y="1525" width="0.2567%" height="15" fill="rgb(224,184,40)"/><text x="51.8372%" y="1535.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (740 samples, 0.26%)</title><rect x="51.5872%" y="1509" width="0.2567%" height="15" fill="rgb(236,39,29)"/><text x="51.8372%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (740 samples, 0.26%)</title><rect x="51.5872%" y="1493" width="0.2567%" height="15" fill="rgb(232,48,39)"/><text x="51.8372%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (72 samples, 0.02%)</title><rect x="51.8189%" y="1477" width="0.0250%" height="15" fill="rgb(236,34,42)"/><text x="52.0689%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (72 samples, 0.02%)</title><rect x="51.8189%" y="1461" width="0.0250%" height="15" fill="rgb(243,106,37)"/><text x="52.0689%" y="1471.50"></text></g><g><title>std::io::Write::write_fmt (72 samples, 0.02%)</title><rect x="51.8189%" y="1445" width="0.0250%" height="15" fill="rgb(218,96,6)"/><text x="52.0689%" y="1455.50"></text></g><g><title>core::fmt::write (72 samples, 0.02%)</title><rect x="51.8189%" y="1429" width="0.0250%" height="15" fill="rgb(235,130,12)"/><text x="52.0689%" y="1439.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (69 samples, 0.02%)</title><rect x="51.8200%" y="1413" width="0.0239%" height="15" fill="rgb(231,95,0)"/><text x="52.0700%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (69 samples, 0.02%)</title><rect x="51.8200%" y="1397" width="0.0239%" height="15" fill="rgb(228,12,23)"/><text x="52.0700%" y="1407.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (69 samples, 0.02%)</title><rect x="51.8200%" y="1381" width="0.0239%" height="15" fill="rgb(216,12,1)"/><text x="52.0700%" y="1391.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (69 samples, 0.02%)</title><rect x="51.8200%" y="1365" width="0.0239%" height="15" fill="rgb(219,59,3)"/><text x="52.0700%" y="1375.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (69 samples, 0.02%)</title><rect x="51.8200%" y="1349" width="0.0239%" height="15" fill="rgb(215,208,46)"/><text x="52.0700%" y="1359.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (69 samples, 0.02%)</title><rect x="51.8200%" y="1333" width="0.0239%" height="15" fill="rgb(254,224,29)"/><text x="52.0700%" y="1343.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (69 samples, 0.02%)</title><rect x="51.8200%" y="1317" width="0.0239%" height="15" fill="rgb(232,14,29)"/><text x="52.0700%" y="1327.50"></text></g><g><title>std::io::Write::write_all (69 samples, 0.02%)</title><rect x="51.8200%" y="1301" width="0.0239%" height="15" fill="rgb(208,45,52)"/><text x="52.0700%" y="1311.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,446 samples, 0.85%)</title><rect x="50.9956%" y="1637" width="0.8487%" height="15" fill="rgb(234,191,28)"/><text x="51.2456%" y="1647.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.02%)</title><rect x="51.8675%" y="1205" width="0.0215%" height="15" fill="rgb(244,67,43)"/><text x="52.1175%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (115 samples, 0.04%)</title><rect x="51.8508%" y="1301" width="0.0399%" height="15" fill="rgb(236,189,24)"/><text x="52.1008%" y="1311.50"></text></g><g><title>core::mem::take (115 samples, 0.04%)</title><rect x="51.8508%" y="1285" width="0.0399%" height="15" fill="rgb(239,214,33)"/><text x="52.1008%" y="1295.50"></text></g><g><title>core::mem::replace (115 samples, 0.04%)</title><rect x="51.8508%" y="1269" width="0.0399%" height="15" fill="rgb(226,176,41)"/><text x="52.1008%" y="1279.50"></text></g><g><title>core::mem::swap (115 samples, 0.04%)</title><rect x="51.8508%" y="1253" width="0.0399%" height="15" fill="rgb(248,47,8)"/><text x="52.1008%" y="1263.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (115 samples, 0.04%)</title><rect x="51.8508%" y="1237" width="0.0399%" height="15" fill="rgb(218,81,44)"/><text x="52.1008%" y="1247.50"></text></g><g><title>core::ptr::read (115 samples, 0.04%)</title><rect x="51.8508%" y="1221" width="0.0399%" height="15" fill="rgb(213,98,6)"/><text x="52.1008%" y="1231.50"></text></g><g><title>tokio::park::thread::wake (33 samples, 0.01%)</title><rect x="51.8907%" y="1285" width="0.0114%" height="15" fill="rgb(222,85,22)"/><text x="52.1407%" y="1295.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (45 samples, 0.02%)</title><rect x="51.9095%" y="1173" width="0.0156%" height="15" fill="rgb(239,46,39)"/><text x="52.1595%" y="1183.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (30 samples, 0.01%)</title><rect x="51.9147%" y="1157" width="0.0104%" height="15" fill="rgb(237,12,29)"/><text x="52.1647%" y="1167.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (81 samples, 0.03%)</title><rect x="51.9022%" y="1237" width="0.0281%" height="15" fill="rgb(214,77,8)"/><text x="52.1522%" y="1247.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (81 samples, 0.03%)</title><rect x="51.9022%" y="1221" width="0.0281%" height="15" fill="rgb(217,168,37)"/><text x="52.1522%" y="1231.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (81 samples, 0.03%)</title><rect x="51.9022%" y="1205" width="0.0281%" height="15" fill="rgb(221,217,23)"/><text x="52.1522%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (81 samples, 0.03%)</title><rect x="51.9022%" y="1189" width="0.0281%" height="15" fill="rgb(243,229,36)"/><text x="52.1522%" y="1199.50"></text></g><g><title>core::task::wake::Waker::wake (137 samples, 0.05%)</title><rect x="51.8907%" y="1301" width="0.0475%" height="15" fill="rgb(251,163,40)"/><text x="52.1407%" y="1311.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (104 samples, 0.04%)</title><rect x="51.9022%" y="1285" width="0.0361%" height="15" fill="rgb(237,222,12)"/><text x="52.1522%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (104 samples, 0.04%)</title><rect x="51.9022%" y="1269" width="0.0361%" height="15" fill="rgb(248,132,6)"/><text x="52.1522%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (104 samples, 0.04%)</title><rect x="51.9022%" y="1253" width="0.0361%" height="15" fill="rgb(227,167,50)"/><text x="52.1522%" y="1263.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (46 samples, 0.02%)</title><rect x="51.9383%" y="1253" width="0.0160%" height="15" fill="rgb(242,84,37)"/><text x="52.1883%" y="1263.50"></text></g><g><title>std::thread::panicking (33 samples, 0.01%)</title><rect x="51.9428%" y="1237" width="0.0114%" height="15" fill="rgb(212,4,50)"/><text x="52.1928%" y="1247.50"></text></g><g><title>std::panicking::panicking (33 samples, 0.01%)</title><rect x="51.9428%" y="1221" width="0.0114%" height="15" fill="rgb(230,228,32)"/><text x="52.1928%" y="1231.50"></text></g><g><title>std::panicking::panic_count::is_zero (33 samples, 0.01%)</title><rect x="51.9428%" y="1205" width="0.0114%" height="15" fill="rgb(248,217,23)"/><text x="52.1928%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (33 samples, 0.01%)</title><rect x="51.9428%" y="1189" width="0.0114%" height="15" fill="rgb(238,197,32)"/><text x="52.1928%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1541" width="0.1079%" height="15" fill="rgb(236,106,1)"/><text x="52.1008%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (311 samples, 0.11%)</title><rect x="51.8508%" y="1525" width="0.1079%" height="15" fill="rgb(219,228,13)"/><text x="52.1008%" y="1535.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1509" width="0.1079%" height="15" fill="rgb(238,30,35)"/><text x="52.1008%" y="1519.50"></text></g><g><title>tokio::runtime::park::Inner::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1493" width="0.1079%" height="15" fill="rgb(236,70,23)"/><text x="52.1008%" y="1503.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (311 samples, 0.11%)</title><rect x="51.8508%" y="1477" width="0.1079%" height="15" fill="rgb(249,104,48)"/><text x="52.1008%" y="1487.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1461" width="0.1079%" height="15" fill="rgb(254,117,50)"/><text x="52.1008%" y="1471.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1445" width="0.1079%" height="15" fill="rgb(223,152,4)"/><text x="52.1008%" y="1455.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1429" width="0.1079%" height="15" fill="rgb(245,6,2)"/><text x="52.1008%" y="1439.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (311 samples, 0.11%)</title><rect x="51.8508%" y="1413" width="0.1079%" height="15" fill="rgb(249,150,24)"/><text x="52.1008%" y="1423.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1397" width="0.1079%" height="15" fill="rgb(228,185,42)"/><text x="52.1008%" y="1407.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (311 samples, 0.11%)</title><rect x="51.8508%" y="1381" width="0.1079%" height="15" fill="rgb(226,39,33)"/><text x="52.1008%" y="1391.50"></text></g><g><title>tokio::io::driver::Driver::turn (311 samples, 0.11%)</title><rect x="51.8508%" y="1365" width="0.1079%" height="15" fill="rgb(221,166,19)"/><text x="52.1008%" y="1375.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (311 samples, 0.11%)</title><rect x="51.8508%" y="1349" width="0.1079%" height="15" fill="rgb(209,109,2)"/><text x="52.1008%" y="1359.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (311 samples, 0.11%)</title><rect x="51.8508%" y="1333" width="0.1079%" height="15" fill="rgb(252,216,26)"/><text x="52.1008%" y="1343.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (311 samples, 0.11%)</title><rect x="51.8508%" y="1317" width="0.1079%" height="15" fill="rgb(227,173,36)"/><text x="52.1008%" y="1327.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.02%)</title><rect x="51.9383%" y="1301" width="0.0205%" height="15" fill="rgb(209,90,7)"/><text x="52.1883%" y="1311.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.02%)</title><rect x="51.9383%" y="1285" width="0.0205%" height="15" fill="rgb(250,194,11)"/><text x="52.1883%" y="1295.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (59 samples, 0.02%)</title><rect x="51.9383%" y="1269" width="0.0205%" height="15" fill="rgb(220,72,50)"/><text x="52.1883%" y="1279.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.01%)</title><rect x="51.9993%" y="1029" width="0.0111%" height="15" fill="rgb(222,106,48)"/><text x="52.2493%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (31 samples, 0.01%)</title><rect x="52.0111%" y="1029" width="0.0108%" height="15" fill="rgb(216,220,45)"/><text x="52.2611%" y="1039.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (45 samples, 0.02%)</title><rect x="52.0375%" y="1013" width="0.0156%" height="15" fill="rgb(234,112,18)"/><text x="52.2875%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (121 samples, 0.04%)</title><rect x="52.0219%" y="1029" width="0.0420%" height="15" fill="rgb(206,179,9)"/><text x="52.2719%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="52.0531%" y="1013" width="0.0108%" height="15" fill="rgb(215,115,40)"/><text x="52.3031%" y="1023.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (34 samples, 0.01%)</title><rect x="52.0639%" y="1029" width="0.0118%" height="15" fill="rgb(222,69,34)"/><text x="52.3139%" y="1039.50"></text></g><g><title>tokio::coop::poll_proceed (63 samples, 0.02%)</title><rect x="52.0757%" y="1029" width="0.0219%" height="15" fill="rgb(209,161,10)"/><text x="52.3257%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (42 samples, 0.01%)</title><rect x="52.0830%" y="1013" width="0.0146%" height="15" fill="rgb(217,6,38)"/><text x="52.3330%" y="1023.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (424 samples, 0.15%)</title><rect x="51.9612%" y="1045" width="0.1471%" height="15" fill="rgb(229,229,48)"/><text x="52.2112%" y="1055.50"></text></g><g><title>tokio::io::driver::Handle::inner (31 samples, 0.01%)</title><rect x="52.0975%" y="1029" width="0.0108%" height="15" fill="rgb(225,21,28)"/><text x="52.3475%" y="1039.50"></text></g><g><title>apparmor_socket_recvmsg (37 samples, 0.01%)</title><rect x="52.2308%" y="789" width="0.0128%" height="15" fill="rgb(206,33,13)"/><text x="52.4808%" y="799.50"></text></g><g><title>kfree_skbmem (97 samples, 0.03%)</title><rect x="52.3123%" y="741" width="0.0337%" height="15" fill="rgb(242,178,17)"/><text x="52.5623%" y="751.50"></text></g><g><title>kmem_cache_free (82 samples, 0.03%)</title><rect x="52.3175%" y="725" width="0.0285%" height="15" fill="rgb(220,162,5)"/><text x="52.5675%" y="735.50"></text></g><g><title>skb_release_data (135 samples, 0.05%)</title><rect x="52.3525%" y="725" width="0.0468%" height="15" fill="rgb(210,33,43)"/><text x="52.6025%" y="735.50"></text></g><g><title>skb_free_head (87 samples, 0.03%)</title><rect x="52.3692%" y="709" width="0.0302%" height="15" fill="rgb(216,116,54)"/><text x="52.6192%" y="719.50"></text></g><g><title>kfree (84 samples, 0.03%)</title><rect x="52.3702%" y="693" width="0.0291%" height="15" fill="rgb(249,92,24)"/><text x="52.6202%" y="703.50"></text></g><g><title>skb_release_all (172 samples, 0.06%)</title><rect x="52.3459%" y="741" width="0.0597%" height="15" fill="rgb(231,189,14)"/><text x="52.5959%" y="751.50"></text></g><g><title>__kfree_skb (280 samples, 0.10%)</title><rect x="52.3112%" y="757" width="0.0971%" height="15" fill="rgb(230,8,41)"/><text x="52.5612%" y="767.50"></text></g><g><title>lock_sock_nested (48 samples, 0.02%)</title><rect x="52.4268%" y="757" width="0.0167%" height="15" fill="rgb(249,7,27)"/><text x="52.6768%" y="767.50"></text></g><g><title>release_sock (42 samples, 0.01%)</title><rect x="52.4434%" y="757" width="0.0146%" height="15" fill="rgb(232,86,5)"/><text x="52.6934%" y="767.50"></text></g><g><title>copy_user_generic_string (54 samples, 0.02%)</title><rect x="52.4896%" y="693" width="0.0187%" height="15" fill="rgb(224,175,18)"/><text x="52.7396%" y="703.50"></text></g><g><title>_copy_to_iter (70 samples, 0.02%)</title><rect x="52.4844%" y="709" width="0.0243%" height="15" fill="rgb(220,129,12)"/><text x="52.7344%" y="719.50"></text></g><g><title>skb_copy_datagram_iter (152 samples, 0.05%)</title><rect x="52.4584%" y="757" width="0.0527%" height="15" fill="rgb(210,19,36)"/><text x="52.7084%" y="767.50"></text></g><g><title>__skb_datagram_iter (151 samples, 0.05%)</title><rect x="52.4587%" y="741" width="0.0524%" height="15" fill="rgb(219,96,14)"/><text x="52.7087%" y="751.50"></text></g><g><title>simple_copy_to_iter (113 samples, 0.04%)</title><rect x="52.4719%" y="725" width="0.0392%" height="15" fill="rgb(249,106,1)"/><text x="52.7219%" y="735.50"></text></g><g><title>tcp_rcv_space_adjust (32 samples, 0.01%)</title><rect x="52.5198%" y="757" width="0.0111%" height="15" fill="rgb(249,155,20)"/><text x="52.7698%" y="767.50"></text></g><g><title>inet_recvmsg (839 samples, 0.29%)</title><rect x="52.2436%" y="789" width="0.2911%" height="15" fill="rgb(244,168,9)"/><text x="52.4936%" y="799.50"></text></g><g><title>tcp_recvmsg (791 samples, 0.27%)</title><rect x="52.2602%" y="773" width="0.2744%" height="15" fill="rgb(216,23,50)"/><text x="52.5102%" y="783.50"></text></g><g><title>security_socket_recvmsg (75 samples, 0.03%)</title><rect x="52.5347%" y="789" width="0.0260%" height="15" fill="rgb(224,219,20)"/><text x="52.7847%" y="799.50"></text></g><g><title>apparmor_socket_recvmsg (47 samples, 0.02%)</title><rect x="52.5444%" y="773" width="0.0163%" height="15" fill="rgb(222,156,15)"/><text x="52.7944%" y="783.50"></text></g><g><title>aa_sk_perm (45 samples, 0.02%)</title><rect x="52.5451%" y="757" width="0.0156%" height="15" fill="rgb(231,97,17)"/><text x="52.7951%" y="767.50"></text></g><g><title>sock_recvmsg (989 samples, 0.34%)</title><rect x="52.2186%" y="805" width="0.3431%" height="15" fill="rgb(218,70,48)"/><text x="52.4686%" y="815.50"></text></g><g><title>__fdget (32 samples, 0.01%)</title><rect x="52.5649%" y="789" width="0.0111%" height="15" fill="rgb(212,196,52)"/><text x="52.8149%" y="799.50"></text></g><g><title>__fget_light (32 samples, 0.01%)</title><rect x="52.5649%" y="773" width="0.0111%" height="15" fill="rgb(243,203,18)"/><text x="52.8149%" y="783.50"></text></g><g><title>__fget (31 samples, 0.01%)</title><rect x="52.5652%" y="757" width="0.0108%" height="15" fill="rgb(252,125,41)"/><text x="52.8152%" y="767.50"></text></g><g><title>__sys_recvfrom (1,121 samples, 0.39%)</title><rect x="52.1943%" y="821" width="0.3889%" height="15" fill="rgb(223,180,33)"/><text x="52.4443%" y="831.50"></text></g><g><title>sockfd_lookup_light (62 samples, 0.02%)</title><rect x="52.5617%" y="805" width="0.0215%" height="15" fill="rgb(254,159,46)"/><text x="52.8117%" y="815.50"></text></g><g><title>__x64_sys_recvfrom (1,153 samples, 0.40%)</title><rect x="52.1943%" y="837" width="0.4000%" height="15" fill="rgb(254,38,10)"/><text x="52.4443%" y="847.50"></text></g><g><title>do_syscall_64 (1,204 samples, 0.42%)</title><rect x="52.1808%" y="853" width="0.4177%" height="15" fill="rgb(208,217,32)"/><text x="52.4308%" y="863.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,240 samples, 0.43%)</title><rect x="52.1700%" y="869" width="0.4302%" height="15" fill="rgb(221,120,13)"/><text x="52.4200%" y="879.50"></text></g><g><title>__libc_recv (1,311 samples, 0.45%)</title><rect x="52.1499%" y="885" width="0.4549%" height="15" fill="rgb(246,54,52)"/><text x="52.3999%" y="895.50"></text></g><g><title>__libc_recv (1,341 samples, 0.47%)</title><rect x="52.1399%" y="901" width="0.4653%" height="15" fill="rgb(242,34,25)"/><text x="52.3899%" y="911.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1,456 samples, 0.51%)</title><rect x="52.1083%" y="1029" width="0.5052%" height="15" fill="rgb(247,209,9)"/><text x="52.3583%" y="1039.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1,432 samples, 0.50%)</title><rect x="52.1166%" y="1013" width="0.4968%" height="15" fill="rgb(228,71,26)"/><text x="52.3666%" y="1023.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (1,410 samples, 0.49%)</title><rect x="52.1242%" y="997" width="0.4892%" height="15" fill="rgb(222,145,49)"/><text x="52.3742%" y="1007.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (1,385 samples, 0.48%)</title><rect x="52.1329%" y="981" width="0.4805%" height="15" fill="rgb(218,121,17)"/><text x="52.3829%" y="991.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1,377 samples, 0.48%)</title><rect x="52.1357%" y="965" width="0.4778%" height="15" fill="rgb(244,50,7)"/><text x="52.3857%" y="975.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1,366 samples, 0.47%)</title><rect x="52.1395%" y="949" width="0.4739%" height="15" fill="rgb(246,229,37)"/><text x="52.3895%" y="959.50"></text></g><g><title>std::sys::unix::net::Socket::read (1,366 samples, 0.47%)</title><rect x="52.1395%" y="933" width="0.4739%" height="15" fill="rgb(225,18,5)"/><text x="52.3895%" y="943.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1,366 samples, 0.47%)</title><rect x="52.1395%" y="917" width="0.4739%" height="15" fill="rgb(213,204,8)"/><text x="52.3895%" y="927.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (30 samples, 0.01%)</title><rect x="52.6405%" y="981" width="0.0104%" height="15" fill="rgb(238,103,6)"/><text x="52.8905%" y="991.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1157" width="0.6981%" height="15" fill="rgb(222,25,35)"/><text x="52.2087%" y="1167.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1141" width="0.6981%" height="15" fill="rgb(213,203,35)"/><text x="52.2087%" y="1151.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1125" width="0.6981%" height="15" fill="rgb(221,79,53)"/><text x="52.2087%" y="1135.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1109" width="0.6981%" height="15" fill="rgb(243,200,35)"/><text x="52.2087%" y="1119.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1093" width="0.6981%" height="15" fill="rgb(248,60,25)"/><text x="52.2087%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1077" width="0.6981%" height="15" fill="rgb(227,53,46)"/><text x="52.2087%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (2,012 samples, 0.70%)</title><rect x="51.9587%" y="1061" width="0.6981%" height="15" fill="rgb(216,120,32)"/><text x="52.2087%" y="1071.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (1,581 samples, 0.55%)</title><rect x="52.1083%" y="1045" width="0.5485%" height="15" fill="rgb(220,134,1)"/><text x="52.3583%" y="1055.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (110 samples, 0.04%)</title><rect x="52.6187%" y="1029" width="0.0382%" height="15" fill="rgb(237,168,5)"/><text x="52.8687%" y="1039.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (96 samples, 0.03%)</title><rect x="52.6235%" y="1013" width="0.0333%" height="15" fill="rgb(231,100,33)"/><text x="52.8735%" y="1023.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (77 samples, 0.03%)</title><rect x="52.6301%" y="997" width="0.0267%" height="15" fill="rgb(236,177,47)"/><text x="52.8801%" y="1007.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (2,050 samples, 0.71%)</title><rect x="51.9587%" y="1173" width="0.7113%" height="15" fill="rgb(235,7,49)"/><text x="52.2087%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (38 samples, 0.01%)</title><rect x="52.6568%" y="1157" width="0.0132%" height="15" fill="rgb(232,119,22)"/><text x="52.9068%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (38 samples, 0.01%)</title><rect x="52.6568%" y="1141" width="0.0132%" height="15" fill="rgb(254,73,53)"/><text x="52.9068%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (38 samples, 0.01%)</title><rect x="52.6568%" y="1125" width="0.0132%" height="15" fill="rgb(251,35,20)"/><text x="52.9068%" y="1135.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (38 samples, 0.01%)</title><rect x="52.6568%" y="1109" width="0.0132%" height="15" fill="rgb(241,119,20)"/><text x="52.9068%" y="1119.50"></text></g><g><title>core::task::wake::Waker::wake (38 samples, 0.01%)</title><rect x="52.6568%" y="1093" width="0.0132%" height="15" fill="rgb(207,102,14)"/><text x="52.9068%" y="1103.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (38 samples, 0.01%)</title><rect x="52.6568%" y="1077" width="0.0132%" height="15" fill="rgb(248,201,50)"/><text x="52.9068%" y="1087.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (38 samples, 0.01%)</title><rect x="52.6568%" y="1061" width="0.0132%" height="15" fill="rgb(222,185,44)"/><text x="52.9068%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (38 samples, 0.01%)</title><rect x="52.6568%" y="1045" width="0.0132%" height="15" fill="rgb(218,107,18)"/><text x="52.9068%" y="1055.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (38 samples, 0.01%)</title><rect x="52.6568%" y="1029" width="0.0132%" height="15" fill="rgb(237,177,39)"/><text x="52.9068%" y="1039.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (38 samples, 0.01%)</title><rect x="52.6568%" y="1013" width="0.0132%" height="15" fill="rgb(246,69,6)"/><text x="52.9068%" y="1023.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (38 samples, 0.01%)</title><rect x="52.6568%" y="997" width="0.0132%" height="15" fill="rgb(234,208,37)"/><text x="52.9068%" y="1007.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (38 samples, 0.01%)</title><rect x="52.6568%" y="981" width="0.0132%" height="15" fill="rgb(225,4,6)"/><text x="52.9068%" y="991.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (38 samples, 0.01%)</title><rect x="52.6568%" y="965" width="0.0132%" height="15" fill="rgb(233,45,0)"/><text x="52.9068%" y="975.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (38 samples, 0.01%)</title><rect x="52.6568%" y="949" width="0.0132%" height="15" fill="rgb(226,136,5)"/><text x="52.9068%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (38 samples, 0.01%)</title><rect x="52.6568%" y="933" width="0.0132%" height="15" fill="rgb(211,91,47)"/><text x="52.9068%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (35 samples, 0.01%)</title><rect x="52.7050%" y="949" width="0.0121%" height="15" fill="rgb(242,88,51)"/><text x="52.9550%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (59 samples, 0.02%)</title><rect x="52.7005%" y="965" width="0.0205%" height="15" fill="rgb(230,91,28)"/><text x="52.9505%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (165 samples, 0.06%)</title><rect x="52.6700%" y="1157" width="0.0572%" height="15" fill="rgb(254,186,29)"/><text x="52.9200%" y="1167.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (165 samples, 0.06%)</title><rect x="52.6700%" y="1141" width="0.0572%" height="15" fill="rgb(238,6,4)"/><text x="52.9200%" y="1151.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (165 samples, 0.06%)</title><rect x="52.6700%" y="1125" width="0.0572%" height="15" fill="rgb(221,151,16)"/><text x="52.9200%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (165 samples, 0.06%)</title><rect x="52.6700%" y="1109" width="0.0572%" height="15" fill="rgb(251,143,52)"/><text x="52.9200%" y="1119.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (165 samples, 0.06%)</title><rect x="52.6700%" y="1093" width="0.0572%" height="15" fill="rgb(206,90,15)"/><text x="52.9200%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (165 samples, 0.06%)</title><rect x="52.6700%" y="1077" width="0.0572%" height="15" fill="rgb(218,35,8)"/><text x="52.9200%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (165 samples, 0.06%)</title><rect x="52.6700%" y="1061" width="0.0572%" height="15" fill="rgb(239,215,6)"/><text x="52.9200%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (165 samples, 0.06%)</title><rect x="52.6700%" y="1045" width="0.0572%" height="15" fill="rgb(245,116,39)"/><text x="52.9200%" y="1055.50"></text></g><g><title>tokio::coop::poll_proceed (137 samples, 0.05%)</title><rect x="52.6797%" y="1029" width="0.0475%" height="15" fill="rgb(242,65,28)"/><text x="52.9297%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (137 samples, 0.05%)</title><rect x="52.6797%" y="1013" width="0.0475%" height="15" fill="rgb(252,132,53)"/><text x="52.9297%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (137 samples, 0.05%)</title><rect x="52.6797%" y="997" width="0.0475%" height="15" fill="rgb(224,159,50)"/><text x="52.9297%" y="1007.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (128 samples, 0.04%)</title><rect x="52.6828%" y="981" width="0.0444%" height="15" fill="rgb(224,93,4)"/><text x="52.9328%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (53 samples, 0.02%)</title><rect x="52.7272%" y="1029" width="0.0184%" height="15" fill="rgb(208,81,34)"/><text x="52.9772%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.01%)</title><rect x="52.7331%" y="1013" width="0.0125%" height="15" fill="rgb(233,92,54)"/><text x="52.9831%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.01%)</title><rect x="52.7331%" y="997" width="0.0125%" height="15" fill="rgb(237,21,14)"/><text x="52.9831%" y="1007.50"></text></g><g><title>tokio::coop::poll_proceed (48 samples, 0.02%)</title><rect x="52.7526%" y="1029" width="0.0167%" height="15" fill="rgb(249,128,51)"/><text x="53.0026%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (48 samples, 0.02%)</title><rect x="52.7526%" y="1013" width="0.0167%" height="15" fill="rgb(223,129,24)"/><text x="53.0026%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (39 samples, 0.01%)</title><rect x="52.7557%" y="997" width="0.0135%" height="15" fill="rgb(231,168,25)"/><text x="53.0057%" y="1007.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (235 samples, 0.08%)</title><rect x="52.7272%" y="1157" width="0.0815%" height="15" fill="rgb(224,39,20)"/><text x="52.9772%" y="1167.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (235 samples, 0.08%)</title><rect x="52.7272%" y="1141" width="0.0815%" height="15" fill="rgb(225,152,53)"/><text x="52.9772%" y="1151.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (235 samples, 0.08%)</title><rect x="52.7272%" y="1125" width="0.0815%" height="15" fill="rgb(252,17,24)"/><text x="52.9772%" y="1135.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (235 samples, 0.08%)</title><rect x="52.7272%" y="1109" width="0.0815%" height="15" fill="rgb(250,114,30)"/><text x="52.9772%" y="1119.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (235 samples, 0.08%)</title><rect x="52.7272%" y="1093" width="0.0815%" height="15" fill="rgb(229,5,4)"/><text x="52.9772%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (235 samples, 0.08%)</title><rect x="52.7272%" y="1077" width="0.0815%" height="15" fill="rgb(225,176,49)"/><text x="52.9772%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (235 samples, 0.08%)</title><rect x="52.7272%" y="1061" width="0.0815%" height="15" fill="rgb(224,221,49)"/><text x="52.9772%" y="1071.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (235 samples, 0.08%)</title><rect x="52.7272%" y="1045" width="0.0815%" height="15" fill="rgb(253,169,27)"/><text x="52.9772%" y="1055.50"></text></g><g><title>tokio::io::driver::Handle::inner (114 samples, 0.04%)</title><rect x="52.7692%" y="1029" width="0.0396%" height="15" fill="rgb(211,206,16)"/><text x="53.0192%" y="1039.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (114 samples, 0.04%)</title><rect x="52.7692%" y="1013" width="0.0396%" height="15" fill="rgb(244,87,35)"/><text x="53.0192%" y="1023.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (38 samples, 0.01%)</title><rect x="52.8147%" y="1013" width="0.0132%" height="15" fill="rgb(246,28,10)"/><text x="53.0647%" y="1023.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (40 samples, 0.01%)</title><rect x="52.8147%" y="1029" width="0.0139%" height="15" fill="rgb(229,12,44)"/><text x="53.0647%" y="1039.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (70 samples, 0.02%)</title><rect x="52.8147%" y="1077" width="0.0243%" height="15" fill="rgb(210,145,37)"/><text x="53.0647%" y="1087.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (70 samples, 0.02%)</title><rect x="52.8147%" y="1061" width="0.0243%" height="15" fill="rgb(227,112,52)"/><text x="53.0647%" y="1071.50"></text></g><g><title>env_logger::fmt::Formatter::print (70 samples, 0.02%)</title><rect x="52.8147%" y="1045" width="0.0243%" height="15" fill="rgb(238,155,34)"/><text x="53.0647%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="52.8286%" y="1029" width="0.0104%" height="15" fill="rgb(239,226,36)"/><text x="53.0786%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="52.8286%" y="1013" width="0.0104%" height="15" fill="rgb(230,16,23)"/><text x="53.0786%" y="1023.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (30 samples, 0.01%)</title><rect x="52.8286%" y="997" width="0.0104%" height="15" fill="rgb(236,171,36)"/><text x="53.0786%" y="1007.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (495 samples, 0.17%)</title><rect x="52.6700%" y="1173" width="0.1717%" height="15" fill="rgb(221,22,14)"/><text x="52.9200%" y="1183.50"></text></g><g><title>log::__private_api_log (78 samples, 0.03%)</title><rect x="52.8147%" y="1157" width="0.0271%" height="15" fill="rgb(242,43,11)"/><text x="53.0647%" y="1167.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (78 samples, 0.03%)</title><rect x="52.8147%" y="1141" width="0.0271%" height="15" fill="rgb(232,69,23)"/><text x="53.0647%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (78 samples, 0.03%)</title><rect x="52.8147%" y="1125" width="0.0271%" height="15" fill="rgb(216,180,54)"/><text x="53.0647%" y="1135.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (78 samples, 0.03%)</title><rect x="52.8147%" y="1109" width="0.0271%" height="15" fill="rgb(216,5,24)"/><text x="53.0647%" y="1119.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (78 samples, 0.03%)</title><rect x="52.8147%" y="1093" width="0.0271%" height="15" fill="rgb(225,89,9)"/><text x="53.0647%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (53 samples, 0.02%)</title><rect x="52.8459%" y="1013" width="0.0184%" height="15" fill="rgb(243,75,33)"/><text x="53.0959%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (96 samples, 0.03%)</title><rect x="52.8459%" y="1029" width="0.0333%" height="15" fill="rgb(247,141,45)"/><text x="53.0959%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (43 samples, 0.01%)</title><rect x="52.8643%" y="1013" width="0.0149%" height="15" fill="rgb(232,177,36)"/><text x="53.1143%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (146 samples, 0.05%)</title><rect x="52.8417%" y="1157" width="0.0507%" height="15" fill="rgb(219,125,36)"/><text x="53.0917%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (146 samples, 0.05%)</title><rect x="52.8417%" y="1141" width="0.0507%" height="15" fill="rgb(227,94,9)"/><text x="53.0917%" y="1151.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (146 samples, 0.05%)</title><rect x="52.8417%" y="1125" width="0.0507%" height="15" fill="rgb(240,34,52)"/><text x="53.0917%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (146 samples, 0.05%)</title><rect x="52.8417%" y="1109" width="0.0507%" height="15" fill="rgb(216,45,12)"/><text x="53.0917%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (146 samples, 0.05%)</title><rect x="52.8417%" y="1093" width="0.0507%" height="15" fill="rgb(246,21,19)"/><text x="53.0917%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (146 samples, 0.05%)</title><rect x="52.8417%" y="1077" width="0.0507%" height="15" fill="rgb(213,98,42)"/><text x="53.0917%" y="1087.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (146 samples, 0.05%)</title><rect x="52.8417%" y="1061" width="0.0507%" height="15" fill="rgb(250,136,47)"/><text x="53.0917%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (146 samples, 0.05%)</title><rect x="52.8417%" y="1045" width="0.0507%" height="15" fill="rgb(251,124,27)"/><text x="53.0917%" y="1055.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (38 samples, 0.01%)</title><rect x="52.8792%" y="1029" width="0.0132%" height="15" fill="rgb(229,180,14)"/><text x="53.1292%" y="1039.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (38 samples, 0.01%)</title><rect x="52.8792%" y="1013" width="0.0132%" height="15" fill="rgb(245,216,25)"/><text x="53.1292%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="52.8924%" y="1029" width="0.0104%" height="15" fill="rgb(251,43,5)"/><text x="53.1424%" y="1039.50"></text></g><g><title>tokio::coop::poll_proceed (35 samples, 0.01%)</title><rect x="52.9066%" y="1029" width="0.0121%" height="15" fill="rgb(250,128,24)"/><text x="53.1566%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.01%)</title><rect x="52.9066%" y="1013" width="0.0121%" height="15" fill="rgb(217,117,27)"/><text x="53.1566%" y="1023.50"></text></g><g><title>std::panicking::try (7,063 samples, 2.45%)</title><rect x="50.4883%" y="1765" width="2.4506%" height="15" fill="rgb(245,147,4)"/><text x="50.7383%" y="1775.50">st..</text></g><g><title>__rust_try (7,063 samples, 2.45%)</title><rect x="50.4883%" y="1749" width="2.4506%" height="15" fill="rgb(242,201,35)"/><text x="50.7383%" y="1759.50">__..</text></g><g><title>std::panicking::try::do_call (7,063 samples, 2.45%)</title><rect x="50.4883%" y="1733" width="2.4506%" height="15" fill="rgb(218,181,1)"/><text x="50.7383%" y="1743.50">st..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,063 samples, 2.45%)</title><rect x="50.4883%" y="1717" width="2.4506%" height="15" fill="rgb(222,6,29)"/><text x="50.7383%" y="1727.50">&lt;s..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (5,601 samples, 1.94%)</title><rect x="50.9956%" y="1701" width="1.9433%" height="15" fill="rgb(208,186,3)"/><text x="51.2456%" y="1711.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (5,601 samples, 1.94%)</title><rect x="50.9956%" y="1685" width="1.9433%" height="15" fill="rgb(216,36,26)"/><text x="51.2456%" y="1695.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5,601 samples, 1.94%)</title><rect x="50.9956%" y="1669" width="1.9433%" height="15" fill="rgb(248,201,23)"/><text x="51.2456%" y="1679.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (5,601 samples, 1.94%)</title><rect x="50.9956%" y="1653" width="1.9433%" height="15" fill="rgb(251,170,31)"/><text x="51.2456%" y="1663.50">t..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3,155 samples, 1.09%)</title><rect x="51.8442%" y="1637" width="1.0946%" height="15" fill="rgb(207,110,25)"/><text x="52.0942%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (3,155 samples, 1.09%)</title><rect x="51.8442%" y="1621" width="1.0946%" height="15" fill="rgb(250,54,15)"/><text x="52.0942%" y="1631.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (3,155 samples, 1.09%)</title><rect x="51.8442%" y="1605" width="1.0946%" height="15" fill="rgb(227,68,33)"/><text x="52.0942%" y="1615.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3,155 samples, 1.09%)</title><rect x="51.8442%" y="1589" width="1.0946%" height="15" fill="rgb(238,34,41)"/><text x="52.0942%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (3,155 samples, 1.09%)</title><rect x="51.8442%" y="1573" width="1.0946%" height="15" fill="rgb(220,11,15)"/><text x="52.0942%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (3,155 samples, 1.09%)</title><rect x="51.8442%" y="1557" width="1.0946%" height="15" fill="rgb(246,111,35)"/><text x="52.0942%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1541" width="0.9802%" height="15" fill="rgb(209,88,53)"/><text x="52.2087%" y="1551.50"></text></g><g><title>tokio::coop::budget (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1525" width="0.9802%" height="15" fill="rgb(231,185,47)"/><text x="52.2087%" y="1535.50"></text></g><g><title>tokio::coop::with_budget (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1509" width="0.9802%" height="15" fill="rgb(233,154,1)"/><text x="52.2087%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1493" width="0.9802%" height="15" fill="rgb(225,15,46)"/><text x="52.2087%" y="1503.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1477" width="0.9802%" height="15" fill="rgb(211,135,41)"/><text x="52.2087%" y="1487.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1461" width="0.9802%" height="15" fill="rgb(208,54,0)"/><text x="52.2087%" y="1471.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1445" width="0.9802%" height="15" fill="rgb(244,136,14)"/><text x="52.2087%" y="1455.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1429" width="0.9802%" height="15" fill="rgb(241,56,14)"/><text x="52.2087%" y="1439.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1413" width="0.9802%" height="15" fill="rgb(205,80,24)"/><text x="52.2087%" y="1423.50"></text></g><g><title>tokio::runtime::task::raw::poll (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1397" width="0.9802%" height="15" fill="rgb(220,57,4)"/><text x="52.2087%" y="1407.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1381" width="0.9802%" height="15" fill="rgb(226,193,50)"/><text x="52.2087%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1365" width="0.9802%" height="15" fill="rgb(231,168,22)"/><text x="52.2087%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1349" width="0.9802%" height="15" fill="rgb(254,215,14)"/><text x="52.2087%" y="1359.50"></text></g><g><title>std::panic::catch_unwind (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1333" width="0.9802%" height="15" fill="rgb(211,115,16)"/><text x="52.2087%" y="1343.50"></text></g><g><title>std::panicking::try (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1317" width="0.9802%" height="15" fill="rgb(236,210,16)"/><text x="52.2087%" y="1327.50"></text></g><g><title>__rust_try (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1301" width="0.9802%" height="15" fill="rgb(221,94,12)"/><text x="52.2087%" y="1311.50"></text></g><g><title>std::panicking::try::do_call (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1285" width="0.9802%" height="15" fill="rgb(235,218,49)"/><text x="52.2087%" y="1295.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1269" width="0.9802%" height="15" fill="rgb(217,114,14)"/><text x="52.2087%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1253" width="0.9802%" height="15" fill="rgb(216,145,22)"/><text x="52.2087%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1237" width="0.9802%" height="15" fill="rgb(217,112,39)"/><text x="52.2087%" y="1247.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1221" width="0.9802%" height="15" fill="rgb(225,85,32)"/><text x="52.2087%" y="1231.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1205" width="0.9802%" height="15" fill="rgb(245,209,47)"/><text x="52.2087%" y="1215.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,825 samples, 0.98%)</title><rect x="51.9587%" y="1189" width="0.9802%" height="15" fill="rgb(218,220,15)"/><text x="52.2087%" y="1199.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (280 samples, 0.10%)</title><rect x="52.8417%" y="1173" width="0.0971%" height="15" fill="rgb(222,202,31)"/><text x="53.0917%" y="1183.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (134 samples, 0.05%)</title><rect x="52.8924%" y="1157" width="0.0465%" height="15" fill="rgb(243,203,4)"/><text x="53.1424%" y="1167.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (134 samples, 0.05%)</title><rect x="52.8924%" y="1141" width="0.0465%" height="15" fill="rgb(237,92,17)"/><text x="53.1424%" y="1151.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (134 samples, 0.05%)</title><rect x="52.8924%" y="1125" width="0.0465%" height="15" fill="rgb(231,119,7)"/><text x="53.1424%" y="1135.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (134 samples, 0.05%)</title><rect x="52.8924%" y="1109" width="0.0465%" height="15" fill="rgb(237,82,41)"/><text x="53.1424%" y="1119.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (134 samples, 0.05%)</title><rect x="52.8924%" y="1093" width="0.0465%" height="15" fill="rgb(226,81,48)"/><text x="53.1424%" y="1103.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (134 samples, 0.05%)</title><rect x="52.8924%" y="1077" width="0.0465%" height="15" fill="rgb(234,70,51)"/><text x="53.1424%" y="1087.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (134 samples, 0.05%)</title><rect x="52.8924%" y="1061" width="0.0465%" height="15" fill="rgb(251,86,4)"/><text x="53.1424%" y="1071.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (134 samples, 0.05%)</title><rect x="52.8924%" y="1045" width="0.0465%" height="15" fill="rgb(244,144,28)"/><text x="53.1424%" y="1055.50"></text></g><g><title>tokio::io::driver::Handle::inner (58 samples, 0.02%)</title><rect x="52.9188%" y="1029" width="0.0201%" height="15" fill="rgb(232,161,39)"/><text x="53.1688%" y="1039.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (58 samples, 0.02%)</title><rect x="52.9188%" y="1013" width="0.0201%" height="15" fill="rgb(247,34,51)"/><text x="53.1688%" y="1023.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (169 samples, 0.06%)</title><rect x="52.9413%" y="933" width="0.0586%" height="15" fill="rgb(225,132,2)"/><text x="53.1913%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (169 samples, 0.06%)</title><rect x="52.9413%" y="917" width="0.0586%" height="15" fill="rgb(209,159,44)"/><text x="53.1913%" y="927.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (230 samples, 0.08%)</title><rect x="52.9392%" y="1765" width="0.0798%" height="15" fill="rgb(251,214,1)"/><text x="53.1892%" y="1775.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (230 samples, 0.08%)</title><rect x="52.9392%" y="1749" width="0.0798%" height="15" fill="rgb(247,84,47)"/><text x="53.1892%" y="1759.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (230 samples, 0.08%)</title><rect x="52.9392%" y="1733" width="0.0798%" height="15" fill="rgb(240,111,43)"/><text x="53.1892%" y="1743.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1717" width="0.0798%" height="15" fill="rgb(215,214,35)"/><text x="53.1892%" y="1727.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1701" width="0.0798%" height="15" fill="rgb(248,207,23)"/><text x="53.1892%" y="1711.50"></text></g><g><title>std::panic::catch_unwind (230 samples, 0.08%)</title><rect x="52.9392%" y="1685" width="0.0798%" height="15" fill="rgb(214,186,4)"/><text x="53.1892%" y="1695.50"></text></g><g><title>std::panicking::try (230 samples, 0.08%)</title><rect x="52.9392%" y="1669" width="0.0798%" height="15" fill="rgb(220,133,22)"/><text x="53.1892%" y="1679.50"></text></g><g><title>__rust_try (230 samples, 0.08%)</title><rect x="52.9392%" y="1653" width="0.0798%" height="15" fill="rgb(239,134,19)"/><text x="53.1892%" y="1663.50"></text></g><g><title>std::panicking::try::do_call (230 samples, 0.08%)</title><rect x="52.9392%" y="1637" width="0.0798%" height="15" fill="rgb(250,140,9)"/><text x="53.1892%" y="1647.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (230 samples, 0.08%)</title><rect x="52.9392%" y="1621" width="0.0798%" height="15" fill="rgb(225,59,14)"/><text x="53.1892%" y="1631.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1605" width="0.0798%" height="15" fill="rgb(214,152,51)"/><text x="53.1892%" y="1615.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (230 samples, 0.08%)</title><rect x="52.9392%" y="1589" width="0.0798%" height="15" fill="rgb(251,227,43)"/><text x="53.1892%" y="1599.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1573" width="0.0798%" height="15" fill="rgb(241,96,17)"/><text x="53.1892%" y="1583.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (230 samples, 0.08%)</title><rect x="52.9392%" y="1557" width="0.0798%" height="15" fill="rgb(234,198,43)"/><text x="53.1892%" y="1567.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (230 samples, 0.08%)</title><rect x="52.9392%" y="1541" width="0.0798%" height="15" fill="rgb(220,108,29)"/><text x="53.1892%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1525" width="0.0798%" height="15" fill="rgb(226,163,33)"/><text x="53.1892%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1509" width="0.0798%" height="15" fill="rgb(205,194,45)"/><text x="53.1892%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1493" width="0.0798%" height="15" fill="rgb(206,143,44)"/><text x="53.1892%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (230 samples, 0.08%)</title><rect x="52.9392%" y="1477" width="0.0798%" height="15" fill="rgb(236,136,36)"/><text x="53.1892%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (230 samples, 0.08%)</title><rect x="52.9392%" y="1461" width="0.0798%" height="15" fill="rgb(249,172,42)"/><text x="53.1892%" y="1471.50"></text></g><g><title>std::panic::catch_unwind (230 samples, 0.08%)</title><rect x="52.9392%" y="1445" width="0.0798%" height="15" fill="rgb(216,139,23)"/><text x="53.1892%" y="1455.50"></text></g><g><title>std::panicking::try (230 samples, 0.08%)</title><rect x="52.9392%" y="1429" width="0.0798%" height="15" fill="rgb(207,166,20)"/><text x="53.1892%" y="1439.50"></text></g><g><title>__rust_try (230 samples, 0.08%)</title><rect x="52.9392%" y="1413" width="0.0798%" height="15" fill="rgb(210,209,22)"/><text x="53.1892%" y="1423.50"></text></g><g><title>std::panicking::try::do_call (230 samples, 0.08%)</title><rect x="52.9392%" y="1397" width="0.0798%" height="15" fill="rgb(232,118,20)"/><text x="53.1892%" y="1407.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (230 samples, 0.08%)</title><rect x="52.9392%" y="1381" width="0.0798%" height="15" fill="rgb(238,113,42)"/><text x="53.1892%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1365" width="0.0798%" height="15" fill="rgb(231,42,5)"/><text x="53.1892%" y="1375.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1349" width="0.0798%" height="15" fill="rgb(243,166,24)"/><text x="53.1892%" y="1359.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (230 samples, 0.08%)</title><rect x="52.9392%" y="1333" width="0.0798%" height="15" fill="rgb(237,226,12)"/><text x="53.1892%" y="1343.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1317" width="0.0798%" height="15" fill="rgb(229,133,24)"/><text x="53.1892%" y="1327.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1301" width="0.0798%" height="15" fill="rgb(238,33,43)"/><text x="53.1892%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1285" width="0.0798%" height="15" fill="rgb(227,59,38)"/><text x="53.1892%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (230 samples, 0.08%)</title><rect x="52.9392%" y="1269" width="0.0798%" height="15" fill="rgb(230,97,0)"/><text x="53.1892%" y="1279.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (230 samples, 0.08%)</title><rect x="52.9392%" y="1253" width="0.0798%" height="15" fill="rgb(250,173,50)"/><text x="53.1892%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1237" width="0.0798%" height="15" fill="rgb(240,15,50)"/><text x="53.1892%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (230 samples, 0.08%)</title><rect x="52.9392%" y="1221" width="0.0798%" height="15" fill="rgb(221,93,22)"/><text x="53.1892%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (230 samples, 0.08%)</title><rect x="52.9392%" y="1205" width="0.0798%" height="15" fill="rgb(245,180,53)"/><text x="53.1892%" y="1215.50"></text></g><g><title>tokio::coop::budget (230 samples, 0.08%)</title><rect x="52.9392%" y="1189" width="0.0798%" height="15" fill="rgb(231,88,51)"/><text x="53.1892%" y="1199.50"></text></g><g><title>tokio::coop::with_budget (230 samples, 0.08%)</title><rect x="52.9392%" y="1173" width="0.0798%" height="15" fill="rgb(240,58,21)"/><text x="53.1892%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (230 samples, 0.08%)</title><rect x="52.9392%" y="1157" width="0.0798%" height="15" fill="rgb(237,21,10)"/><text x="53.1892%" y="1167.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (230 samples, 0.08%)</title><rect x="52.9392%" y="1141" width="0.0798%" height="15" fill="rgb(218,43,11)"/><text x="53.1892%" y="1151.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1125" width="0.0798%" height="15" fill="rgb(218,221,29)"/><text x="53.1892%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (230 samples, 0.08%)</title><rect x="52.9392%" y="1109" width="0.0798%" height="15" fill="rgb(214,118,42)"/><text x="53.1892%" y="1119.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (230 samples, 0.08%)</title><rect x="52.9392%" y="1093" width="0.0798%" height="15" fill="rgb(251,200,26)"/><text x="53.1892%" y="1103.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1077" width="0.0798%" height="15" fill="rgb(237,101,39)"/><text x="53.1892%" y="1087.50"></text></g><g><title>tokio::runtime::task::raw::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1061" width="0.0798%" height="15" fill="rgb(251,117,11)"/><text x="53.1892%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (230 samples, 0.08%)</title><rect x="52.9392%" y="1045" width="0.0798%" height="15" fill="rgb(216,223,23)"/><text x="53.1892%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (224 samples, 0.08%)</title><rect x="52.9413%" y="1029" width="0.0777%" height="15" fill="rgb(251,54,12)"/><text x="53.1913%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (224 samples, 0.08%)</title><rect x="52.9413%" y="1013" width="0.0777%" height="15" fill="rgb(254,176,54)"/><text x="53.1913%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (224 samples, 0.08%)</title><rect x="52.9413%" y="997" width="0.0777%" height="15" fill="rgb(210,32,8)"/><text x="53.1913%" y="1007.50"></text></g><g><title>std::panicking::try (224 samples, 0.08%)</title><rect x="52.9413%" y="981" width="0.0777%" height="15" fill="rgb(235,52,38)"/><text x="53.1913%" y="991.50"></text></g><g><title>__rust_try (224 samples, 0.08%)</title><rect x="52.9413%" y="965" width="0.0777%" height="15" fill="rgb(231,4,44)"/><text x="53.1913%" y="975.50"></text></g><g><title>std::panicking::try::do_call (224 samples, 0.08%)</title><rect x="52.9413%" y="949" width="0.0777%" height="15" fill="rgb(249,2,32)"/><text x="53.1913%" y="959.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::take (55 samples, 0.02%)</title><rect x="53.0000%" y="933" width="0.0191%" height="15" fill="rgb(224,65,26)"/><text x="53.2500%" y="943.50"></text></g><g><title>core::ptr::read (55 samples, 0.02%)</title><rect x="53.0000%" y="917" width="0.0191%" height="15" fill="rgb(250,73,40)"/><text x="53.2500%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.02%)</title><rect x="53.0000%" y="901" width="0.0191%" height="15" fill="rgb(253,177,16)"/><text x="53.2500%" y="911.50"></text></g><g><title>ep_poll (31 samples, 0.01%)</title><rect x="53.0267%" y="1109" width="0.0108%" height="15" fill="rgb(217,32,34)"/><text x="53.2767%" y="1119.50"></text></g><g><title>mio::poll::Poll::poll (53 samples, 0.02%)</title><rect x="53.0194%" y="1221" width="0.0184%" height="15" fill="rgb(212,7,10)"/><text x="53.2694%" y="1231.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (53 samples, 0.02%)</title><rect x="53.0194%" y="1205" width="0.0184%" height="15" fill="rgb(245,89,8)"/><text x="53.2694%" y="1215.50"></text></g><g><title>epoll_wait (47 samples, 0.02%)</title><rect x="53.0215%" y="1189" width="0.0163%" height="15" fill="rgb(237,16,53)"/><text x="53.2715%" y="1199.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (41 samples, 0.01%)</title><rect x="53.0235%" y="1173" width="0.0142%" height="15" fill="rgb(250,204,30)"/><text x="53.2735%" y="1183.50"></text></g><g><title>do_syscall_64 (40 samples, 0.01%)</title><rect x="53.0239%" y="1157" width="0.0139%" height="15" fill="rgb(208,77,27)"/><text x="53.2739%" y="1167.50"></text></g><g><title>__x64_sys_epoll_wait (39 samples, 0.01%)</title><rect x="53.0242%" y="1141" width="0.0135%" height="15" fill="rgb(250,204,28)"/><text x="53.2742%" y="1151.50"></text></g><g><title>do_epoll_wait (39 samples, 0.01%)</title><rect x="53.0242%" y="1125" width="0.0135%" height="15" fill="rgb(244,63,21)"/><text x="53.2742%" y="1135.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (62 samples, 0.02%)</title><rect x="53.0190%" y="1269" width="0.0215%" height="15" fill="rgb(236,85,44)"/><text x="53.2690%" y="1279.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (62 samples, 0.02%)</title><rect x="53.0190%" y="1253" width="0.0215%" height="15" fill="rgb(215,98,4)"/><text x="53.2690%" y="1263.50"></text></g><g><title>tokio::io::driver::Driver::turn (62 samples, 0.02%)</title><rect x="53.0190%" y="1237" width="0.0215%" height="15" fill="rgb(235,38,11)"/><text x="53.2690%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (86 samples, 0.03%)</title><rect x="53.0190%" y="1381" width="0.0298%" height="15" fill="rgb(254,186,25)"/><text x="53.2690%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (86 samples, 0.03%)</title><rect x="53.0190%" y="1365" width="0.0298%" height="15" fill="rgb(225,55,31)"/><text x="53.2690%" y="1375.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (86 samples, 0.03%)</title><rect x="53.0190%" y="1349" width="0.0298%" height="15" fill="rgb(211,15,21)"/><text x="53.2690%" y="1359.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (86 samples, 0.03%)</title><rect x="53.0190%" y="1333" width="0.0298%" height="15" fill="rgb(215,187,41)"/><text x="53.2690%" y="1343.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (86 samples, 0.03%)</title><rect x="53.0190%" y="1317" width="0.0298%" height="15" fill="rgb(248,69,32)"/><text x="53.2690%" y="1327.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (86 samples, 0.03%)</title><rect x="53.0190%" y="1301" width="0.0298%" height="15" fill="rgb(252,102,52)"/><text x="53.2690%" y="1311.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (86 samples, 0.03%)</title><rect x="53.0190%" y="1285" width="0.0298%" height="15" fill="rgb(253,140,32)"/><text x="53.2690%" y="1295.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (94 samples, 0.03%)</title><rect x="53.0190%" y="1765" width="0.0326%" height="15" fill="rgb(216,56,42)"/><text x="53.2690%" y="1775.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (94 samples, 0.03%)</title><rect x="53.0190%" y="1749" width="0.0326%" height="15" fill="rgb(216,184,14)"/><text x="53.2690%" y="1759.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (94 samples, 0.03%)</title><rect x="53.0190%" y="1733" width="0.0326%" height="15" fill="rgb(237,187,27)"/><text x="53.2690%" y="1743.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (94 samples, 0.03%)</title><rect x="53.0190%" y="1717" width="0.0326%" height="15" fill="rgb(219,65,3)"/><text x="53.2690%" y="1727.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (94 samples, 0.03%)</title><rect x="53.0190%" y="1701" width="0.0326%" height="15" fill="rgb(245,83,25)"/><text x="53.2690%" y="1711.50"></text></g><g><title>tokio::runtime::task::raw::poll (94 samples, 0.03%)</title><rect x="53.0190%" y="1685" width="0.0326%" height="15" fill="rgb(214,205,45)"/><text x="53.2690%" y="1695.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (94 samples, 0.03%)</title><rect x="53.0190%" y="1669" width="0.0326%" height="15" fill="rgb(241,20,18)"/><text x="53.2690%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (94 samples, 0.03%)</title><rect x="53.0190%" y="1653" width="0.0326%" height="15" fill="rgb(232,163,23)"/><text x="53.2690%" y="1663.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (94 samples, 0.03%)</title><rect x="53.0190%" y="1637" width="0.0326%" height="15" fill="rgb(214,5,46)"/><text x="53.2690%" y="1647.50"></text></g><g><title>std::panic::catch_unwind (94 samples, 0.03%)</title><rect x="53.0190%" y="1621" width="0.0326%" height="15" fill="rgb(229,78,17)"/><text x="53.2690%" y="1631.50"></text></g><g><title>std::panicking::try (94 samples, 0.03%)</title><rect x="53.0190%" y="1605" width="0.0326%" height="15" fill="rgb(248,89,10)"/><text x="53.2690%" y="1615.50"></text></g><g><title>__rust_try (94 samples, 0.03%)</title><rect x="53.0190%" y="1589" width="0.0326%" height="15" fill="rgb(248,54,15)"/><text x="53.2690%" y="1599.50"></text></g><g><title>std::panicking::try::do_call (94 samples, 0.03%)</title><rect x="53.0190%" y="1573" width="0.0326%" height="15" fill="rgb(223,116,6)"/><text x="53.2690%" y="1583.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (94 samples, 0.03%)</title><rect x="53.0190%" y="1557" width="0.0326%" height="15" fill="rgb(205,125,38)"/><text x="53.2690%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (94 samples, 0.03%)</title><rect x="53.0190%" y="1541" width="0.0326%" height="15" fill="rgb(251,78,38)"/><text x="53.2690%" y="1551.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (94 samples, 0.03%)</title><rect x="53.0190%" y="1525" width="0.0326%" height="15" fill="rgb(253,78,28)"/><text x="53.2690%" y="1535.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (94 samples, 0.03%)</title><rect x="53.0190%" y="1509" width="0.0326%" height="15" fill="rgb(209,120,3)"/><text x="53.2690%" y="1519.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (94 samples, 0.03%)</title><rect x="53.0190%" y="1493" width="0.0326%" height="15" fill="rgb(238,229,9)"/><text x="53.2690%" y="1503.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (94 samples, 0.03%)</title><rect x="53.0190%" y="1477" width="0.0326%" height="15" fill="rgb(253,159,18)"/><text x="53.2690%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (94 samples, 0.03%)</title><rect x="53.0190%" y="1461" width="0.0326%" height="15" fill="rgb(244,42,34)"/><text x="53.2690%" y="1471.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (94 samples, 0.03%)</title><rect x="53.0190%" y="1445" width="0.0326%" height="15" fill="rgb(224,8,7)"/><text x="53.2690%" y="1455.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (94 samples, 0.03%)</title><rect x="53.0190%" y="1429" width="0.0326%" height="15" fill="rgb(210,201,45)"/><text x="53.2690%" y="1439.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (94 samples, 0.03%)</title><rect x="53.0190%" y="1413" width="0.0326%" height="15" fill="rgb(252,185,21)"/><text x="53.2690%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (94 samples, 0.03%)</title><rect x="53.0190%" y="1397" width="0.0326%" height="15" fill="rgb(223,131,1)"/><text x="53.2690%" y="1407.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.02%)</title><rect x="53.0746%" y="1109" width="0.0156%" height="15" fill="rgb(245,141,16)"/><text x="53.3246%" y="1119.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (114 samples, 0.04%)</title><rect x="53.0517%" y="1765" width="0.0396%" height="15" fill="rgb(229,55,45)"/><text x="53.3017%" y="1775.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (114 samples, 0.04%)</title><rect x="53.0517%" y="1749" width="0.0396%" height="15" fill="rgb(208,92,15)"/><text x="53.3017%" y="1759.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (114 samples, 0.04%)</title><rect x="53.0517%" y="1733" width="0.0396%" height="15" fill="rgb(234,185,47)"/><text x="53.3017%" y="1743.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (114 samples, 0.04%)</title><rect x="53.0517%" y="1717" width="0.0396%" height="15" fill="rgb(253,104,50)"/><text x="53.3017%" y="1727.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (114 samples, 0.04%)</title><rect x="53.0517%" y="1701" width="0.0396%" height="15" fill="rgb(205,70,7)"/><text x="53.3017%" y="1711.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (114 samples, 0.04%)</title><rect x="53.0517%" y="1685" width="0.0396%" height="15" fill="rgb(240,178,43)"/><text x="53.3017%" y="1695.50"></text></g><g><title>tokio::runtime::task::raw::poll (114 samples, 0.04%)</title><rect x="53.0517%" y="1669" width="0.0396%" height="15" fill="rgb(214,112,2)"/><text x="53.3017%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (114 samples, 0.04%)</title><rect x="53.0517%" y="1653" width="0.0396%" height="15" fill="rgb(206,46,17)"/><text x="53.3017%" y="1663.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (114 samples, 0.04%)</title><rect x="53.0517%" y="1637" width="0.0396%" height="15" fill="rgb(225,220,16)"/><text x="53.3017%" y="1647.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (114 samples, 0.04%)</title><rect x="53.0517%" y="1621" width="0.0396%" height="15" fill="rgb(238,65,40)"/><text x="53.3017%" y="1631.50"></text></g><g><title>std::panic::catch_unwind (114 samples, 0.04%)</title><rect x="53.0517%" y="1605" width="0.0396%" height="15" fill="rgb(230,151,21)"/><text x="53.3017%" y="1615.50"></text></g><g><title>std::panicking::try (114 samples, 0.04%)</title><rect x="53.0517%" y="1589" width="0.0396%" height="15" fill="rgb(218,58,49)"/><text x="53.3017%" y="1599.50"></text></g><g><title>__rust_try (114 samples, 0.04%)</title><rect x="53.0517%" y="1573" width="0.0396%" height="15" fill="rgb(219,179,14)"/><text x="53.3017%" y="1583.50"></text></g><g><title>std::panicking::try::do_call (114 samples, 0.04%)</title><rect x="53.0517%" y="1557" width="0.0396%" height="15" fill="rgb(223,72,1)"/><text x="53.3017%" y="1567.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (114 samples, 0.04%)</title><rect x="53.0517%" y="1541" width="0.0396%" height="15" fill="rgb(238,126,10)"/><text x="53.3017%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (114 samples, 0.04%)</title><rect x="53.0517%" y="1525" width="0.0396%" height="15" fill="rgb(224,206,38)"/><text x="53.3017%" y="1535.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (114 samples, 0.04%)</title><rect x="53.0517%" y="1509" width="0.0396%" height="15" fill="rgb(212,201,54)"/><text x="53.3017%" y="1519.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (114 samples, 0.04%)</title><rect x="53.0517%" y="1493" width="0.0396%" height="15" fill="rgb(218,154,48)"/><text x="53.3017%" y="1503.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (114 samples, 0.04%)</title><rect x="53.0517%" y="1477" width="0.0396%" height="15" fill="rgb(232,93,24)"/><text x="53.3017%" y="1487.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (114 samples, 0.04%)</title><rect x="53.0517%" y="1461" width="0.0396%" height="15" fill="rgb(245,30,21)"/><text x="53.3017%" y="1471.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (114 samples, 0.04%)</title><rect x="53.0517%" y="1445" width="0.0396%" height="15" fill="rgb(242,148,29)"/><text x="53.3017%" y="1455.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (114 samples, 0.04%)</title><rect x="53.0517%" y="1429" width="0.0396%" height="15" fill="rgb(244,153,54)"/><text x="53.3017%" y="1439.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (114 samples, 0.04%)</title><rect x="53.0517%" y="1413" width="0.0396%" height="15" fill="rgb(252,87,22)"/><text x="53.3017%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (114 samples, 0.04%)</title><rect x="53.0517%" y="1397" width="0.0396%" height="15" fill="rgb(210,51,29)"/><text x="53.3017%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (114 samples, 0.04%)</title><rect x="53.0517%" y="1381" width="0.0396%" height="15" fill="rgb(242,136,47)"/><text x="53.3017%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (88 samples, 0.03%)</title><rect x="53.0607%" y="1365" width="0.0305%" height="15" fill="rgb(238,68,4)"/><text x="53.3107%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (88 samples, 0.03%)</title><rect x="53.0607%" y="1349" width="0.0305%" height="15" fill="rgb(242,161,30)"/><text x="53.3107%" y="1359.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (88 samples, 0.03%)</title><rect x="53.0607%" y="1333" width="0.0305%" height="15" fill="rgb(218,58,44)"/><text x="53.3107%" y="1343.50"></text></g><g><title>tokio::runtime::park::Inner::park (88 samples, 0.03%)</title><rect x="53.0607%" y="1317" width="0.0305%" height="15" fill="rgb(252,125,32)"/><text x="53.3107%" y="1327.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (88 samples, 0.03%)</title><rect x="53.0607%" y="1301" width="0.0305%" height="15" fill="rgb(219,178,0)"/><text x="53.3107%" y="1311.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (88 samples, 0.03%)</title><rect x="53.0607%" y="1285" width="0.0305%" height="15" fill="rgb(213,152,7)"/><text x="53.3107%" y="1295.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (88 samples, 0.03%)</title><rect x="53.0607%" y="1269" width="0.0305%" height="15" fill="rgb(249,109,34)"/><text x="53.3107%" y="1279.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (88 samples, 0.03%)</title><rect x="53.0607%" y="1253" width="0.0305%" height="15" fill="rgb(232,96,21)"/><text x="53.3107%" y="1263.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (88 samples, 0.03%)</title><rect x="53.0607%" y="1237" width="0.0305%" height="15" fill="rgb(228,27,39)"/><text x="53.3107%" y="1247.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (88 samples, 0.03%)</title><rect x="53.0607%" y="1221" width="0.0305%" height="15" fill="rgb(211,182,52)"/><text x="53.3107%" y="1231.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (88 samples, 0.03%)</title><rect x="53.0607%" y="1205" width="0.0305%" height="15" fill="rgb(234,178,38)"/><text x="53.3107%" y="1215.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (88 samples, 0.03%)</title><rect x="53.0607%" y="1189" width="0.0305%" height="15" fill="rgb(221,111,3)"/><text x="53.3107%" y="1199.50"></text></g><g><title>core::mem::replace (88 samples, 0.03%)</title><rect x="53.0607%" y="1173" width="0.0305%" height="15" fill="rgb(228,175,21)"/><text x="53.3107%" y="1183.50"></text></g><g><title>core::mem::swap (88 samples, 0.03%)</title><rect x="53.0607%" y="1157" width="0.0305%" height="15" fill="rgb(228,174,43)"/><text x="53.3107%" y="1167.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (88 samples, 0.03%)</title><rect x="53.0607%" y="1141" width="0.0305%" height="15" fill="rgb(211,191,0)"/><text x="53.3107%" y="1151.50"></text></g><g><title>core::ptr::read (88 samples, 0.03%)</title><rect x="53.0607%" y="1125" width="0.0305%" height="15" fill="rgb(253,117,3)"/><text x="53.3107%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (32 samples, 0.01%)</title><rect x="53.0912%" y="1269" width="0.0111%" height="15" fill="rgb(241,127,19)"/><text x="53.3412%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (32 samples, 0.01%)</title><rect x="53.0912%" y="1253" width="0.0111%" height="15" fill="rgb(218,103,12)"/><text x="53.3412%" y="1263.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (32 samples, 0.01%)</title><rect x="53.0912%" y="1237" width="0.0111%" height="15" fill="rgb(236,214,43)"/><text x="53.3412%" y="1247.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (32 samples, 0.01%)</title><rect x="53.0912%" y="1221" width="0.0111%" height="15" fill="rgb(244,144,19)"/><text x="53.3412%" y="1231.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (32 samples, 0.01%)</title><rect x="53.0912%" y="1205" width="0.0111%" height="15" fill="rgb(246,188,10)"/><text x="53.3412%" y="1215.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (32 samples, 0.01%)</title><rect x="53.0912%" y="1189" width="0.0111%" height="15" fill="rgb(212,193,33)"/><text x="53.3412%" y="1199.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (32 samples, 0.01%)</title><rect x="53.0912%" y="1173" width="0.0111%" height="15" fill="rgb(241,51,29)"/><text x="53.3412%" y="1183.50"></text></g><g><title>core::ops::function::FnOnce::call_once (32 samples, 0.01%)</title><rect x="53.1360%" y="949" width="0.0111%" height="15" fill="rgb(211,58,19)"/><text x="53.3860%" y="959.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (108 samples, 0.04%)</title><rect x="53.1099%" y="965" width="0.0375%" height="15" fill="rgb(229,111,26)"/><text x="53.3599%" y="975.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::is_ready (36 samples, 0.01%)</title><rect x="53.1814%" y="949" width="0.0125%" height="15" fill="rgb(213,115,40)"/><text x="53.4314%" y="959.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (259 samples, 0.09%)</title><rect x="53.1943%" y="949" width="0.0899%" height="15" fill="rgb(209,56,44)"/><text x="53.4443%" y="959.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (113 samples, 0.04%)</title><rect x="53.2449%" y="933" width="0.0392%" height="15" fill="rgb(230,108,32)"/><text x="53.4949%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1765" width="0.2130%" height="15" fill="rgb(216,165,31)"/><text x="53.3412%" y="1775.50"></text></g><g><title>std::panic::catch_unwind (614 samples, 0.21%)</title><rect x="53.0912%" y="1749" width="0.2130%" height="15" fill="rgb(218,122,21)"/><text x="53.3412%" y="1759.50"></text></g><g><title>std::panicking::try (614 samples, 0.21%)</title><rect x="53.0912%" y="1733" width="0.2130%" height="15" fill="rgb(223,224,47)"/><text x="53.3412%" y="1743.50"></text></g><g><title>__rust_try (614 samples, 0.21%)</title><rect x="53.0912%" y="1717" width="0.2130%" height="15" fill="rgb(238,102,44)"/><text x="53.3412%" y="1727.50"></text></g><g><title>std::panicking::try::do_call (614 samples, 0.21%)</title><rect x="53.0912%" y="1701" width="0.2130%" height="15" fill="rgb(236,46,40)"/><text x="53.3412%" y="1711.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (614 samples, 0.21%)</title><rect x="53.0912%" y="1685" width="0.2130%" height="15" fill="rgb(247,202,50)"/><text x="53.3412%" y="1695.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1669" width="0.2130%" height="15" fill="rgb(209,99,20)"/><text x="53.3412%" y="1679.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (614 samples, 0.21%)</title><rect x="53.0912%" y="1653" width="0.2130%" height="15" fill="rgb(252,27,34)"/><text x="53.3412%" y="1663.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1637" width="0.2130%" height="15" fill="rgb(215,206,23)"/><text x="53.3412%" y="1647.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (614 samples, 0.21%)</title><rect x="53.0912%" y="1621" width="0.2130%" height="15" fill="rgb(212,135,36)"/><text x="53.3412%" y="1631.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (614 samples, 0.21%)</title><rect x="53.0912%" y="1605" width="0.2130%" height="15" fill="rgb(240,189,1)"/><text x="53.3412%" y="1615.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (614 samples, 0.21%)</title><rect x="53.0912%" y="1589" width="0.2130%" height="15" fill="rgb(242,56,20)"/><text x="53.3412%" y="1599.50"></text></g><g><title>tokio::runtime::task::raw::poll (614 samples, 0.21%)</title><rect x="53.0912%" y="1573" width="0.2130%" height="15" fill="rgb(247,132,33)"/><text x="53.3412%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (614 samples, 0.21%)</title><rect x="53.0912%" y="1557" width="0.2130%" height="15" fill="rgb(208,149,11)"/><text x="53.3412%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (614 samples, 0.21%)</title><rect x="53.0912%" y="1541" width="0.2130%" height="15" fill="rgb(211,33,11)"/><text x="53.3412%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (614 samples, 0.21%)</title><rect x="53.0912%" y="1525" width="0.2130%" height="15" fill="rgb(221,29,38)"/><text x="53.3412%" y="1535.50"></text></g><g><title>std::panic::catch_unwind (614 samples, 0.21%)</title><rect x="53.0912%" y="1509" width="0.2130%" height="15" fill="rgb(206,182,49)"/><text x="53.3412%" y="1519.50"></text></g><g><title>std::panicking::try (614 samples, 0.21%)</title><rect x="53.0912%" y="1493" width="0.2130%" height="15" fill="rgb(216,140,1)"/><text x="53.3412%" y="1503.50"></text></g><g><title>__rust_try (614 samples, 0.21%)</title><rect x="53.0912%" y="1477" width="0.2130%" height="15" fill="rgb(232,57,40)"/><text x="53.3412%" y="1487.50"></text></g><g><title>std::panicking::try::do_call (614 samples, 0.21%)</title><rect x="53.0912%" y="1461" width="0.2130%" height="15" fill="rgb(224,186,18)"/><text x="53.3412%" y="1471.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (614 samples, 0.21%)</title><rect x="53.0912%" y="1445" width="0.2130%" height="15" fill="rgb(215,121,11)"/><text x="53.3412%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1429" width="0.2130%" height="15" fill="rgb(245,147,10)"/><text x="53.3412%" y="1439.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (614 samples, 0.21%)</title><rect x="53.0912%" y="1413" width="0.2130%" height="15" fill="rgb(238,153,13)"/><text x="53.3412%" y="1423.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (614 samples, 0.21%)</title><rect x="53.0912%" y="1397" width="0.2130%" height="15" fill="rgb(233,108,0)"/><text x="53.3412%" y="1407.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1381" width="0.2130%" height="15" fill="rgb(212,157,17)"/><text x="53.3412%" y="1391.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (614 samples, 0.21%)</title><rect x="53.0912%" y="1365" width="0.2130%" height="15" fill="rgb(225,213,38)"/><text x="53.3412%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1349" width="0.2130%" height="15" fill="rgb(248,16,11)"/><text x="53.3412%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (614 samples, 0.21%)</title><rect x="53.0912%" y="1333" width="0.2130%" height="15" fill="rgb(241,33,4)"/><text x="53.3412%" y="1343.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (614 samples, 0.21%)</title><rect x="53.0912%" y="1317" width="0.2130%" height="15" fill="rgb(222,26,43)"/><text x="53.3412%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (614 samples, 0.21%)</title><rect x="53.0912%" y="1301" width="0.2130%" height="15" fill="rgb(243,29,36)"/><text x="53.3412%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (614 samples, 0.21%)</title><rect x="53.0912%" y="1285" width="0.2130%" height="15" fill="rgb(241,9,27)"/><text x="53.3412%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (582 samples, 0.20%)</title><rect x="53.1023%" y="1269" width="0.2019%" height="15" fill="rgb(205,117,26)"/><text x="53.3523%" y="1279.50"></text></g><g><title>tokio::coop::budget (582 samples, 0.20%)</title><rect x="53.1023%" y="1253" width="0.2019%" height="15" fill="rgb(209,80,39)"/><text x="53.3523%" y="1263.50"></text></g><g><title>tokio::coop::with_budget (582 samples, 0.20%)</title><rect x="53.1023%" y="1237" width="0.2019%" height="15" fill="rgb(239,155,6)"/><text x="53.3523%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (582 samples, 0.20%)</title><rect x="53.1023%" y="1221" width="0.2019%" height="15" fill="rgb(212,104,12)"/><text x="53.3523%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (582 samples, 0.20%)</title><rect x="53.1023%" y="1205" width="0.2019%" height="15" fill="rgb(234,204,3)"/><text x="53.3523%" y="1215.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (582 samples, 0.20%)</title><rect x="53.1023%" y="1189" width="0.2019%" height="15" fill="rgb(251,218,7)"/><text x="53.3523%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (582 samples, 0.20%)</title><rect x="53.1023%" y="1173" width="0.2019%" height="15" fill="rgb(221,81,32)"/><text x="53.3523%" y="1183.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (582 samples, 0.20%)</title><rect x="53.1023%" y="1157" width="0.2019%" height="15" fill="rgb(214,152,26)"/><text x="53.3523%" y="1167.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (582 samples, 0.20%)</title><rect x="53.1023%" y="1141" width="0.2019%" height="15" fill="rgb(223,22,3)"/><text x="53.3523%" y="1151.50"></text></g><g><title>tokio::runtime::task::raw::poll (582 samples, 0.20%)</title><rect x="53.1023%" y="1125" width="0.2019%" height="15" fill="rgb(207,174,7)"/><text x="53.3523%" y="1135.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (582 samples, 0.20%)</title><rect x="53.1023%" y="1109" width="0.2019%" height="15" fill="rgb(224,19,52)"/><text x="53.3523%" y="1119.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (560 samples, 0.19%)</title><rect x="53.1099%" y="1093" width="0.1943%" height="15" fill="rgb(228,24,14)"/><text x="53.3599%" y="1103.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (560 samples, 0.19%)</title><rect x="53.1099%" y="1077" width="0.1943%" height="15" fill="rgb(230,153,43)"/><text x="53.3599%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (560 samples, 0.19%)</title><rect x="53.1099%" y="1061" width="0.1943%" height="15" fill="rgb(231,106,12)"/><text x="53.3599%" y="1071.50"></text></g><g><title>std::panicking::try (560 samples, 0.19%)</title><rect x="53.1099%" y="1045" width="0.1943%" height="15" fill="rgb(215,92,2)"/><text x="53.3599%" y="1055.50"></text></g><g><title>__rust_try (560 samples, 0.19%)</title><rect x="53.1099%" y="1029" width="0.1943%" height="15" fill="rgb(249,143,25)"/><text x="53.3599%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (560 samples, 0.19%)</title><rect x="53.1099%" y="1013" width="0.1943%" height="15" fill="rgb(252,7,35)"/><text x="53.3599%" y="1023.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (560 samples, 0.19%)</title><rect x="53.1099%" y="997" width="0.1943%" height="15" fill="rgb(216,69,40)"/><text x="53.3599%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (560 samples, 0.19%)</title><rect x="53.1099%" y="981" width="0.1943%" height="15" fill="rgb(240,36,33)"/><text x="53.3599%" y="991.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (452 samples, 0.16%)</title><rect x="53.1474%" y="965" width="0.1568%" height="15" fill="rgb(231,128,14)"/><text x="53.3974%" y="975.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::drop_future_or_output (58 samples, 0.02%)</title><rect x="53.2841%" y="949" width="0.0201%" height="15" fill="rgb(245,143,14)"/><text x="53.5341%" y="959.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.01%)</title><rect x="53.2921%" y="933" width="0.0121%" height="15" fill="rgb(222,130,28)"/><text x="53.5421%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (38 samples, 0.01%)</title><rect x="53.3511%" y="1317" width="0.0132%" height="15" fill="rgb(212,10,48)"/><text x="53.6011%" y="1327.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (52 samples, 0.02%)</title><rect x="53.3767%" y="1301" width="0.0180%" height="15" fill="rgb(254,118,45)"/><text x="53.6267%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place (139 samples, 0.05%)</title><rect x="53.3643%" y="1317" width="0.0482%" height="15" fill="rgb(228,6,45)"/><text x="53.6143%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place (51 samples, 0.02%)</title><rect x="53.3948%" y="1301" width="0.0177%" height="15" fill="rgb(241,18,35)"/><text x="53.6448%" y="1311.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (29 samples, 0.01%)</title><rect x="53.4219%" y="1301" width="0.0101%" height="15" fill="rgb(227,214,53)"/><text x="53.6719%" y="1311.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (77 samples, 0.03%)</title><rect x="53.4125%" y="1317" width="0.0267%" height="15" fill="rgb(224,107,51)"/><text x="53.6625%" y="1327.50"></text></g><g><title>tokio::coop::poll_proceed (62 samples, 0.02%)</title><rect x="53.4392%" y="1317" width="0.0215%" height="15" fill="rgb(248,60,28)"/><text x="53.6892%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (44 samples, 0.02%)</title><rect x="53.4454%" y="1301" width="0.0153%" height="15" fill="rgb(249,101,23)"/><text x="53.6954%" y="1311.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (453 samples, 0.16%)</title><rect x="53.3122%" y="1333" width="0.1572%" height="15" fill="rgb(228,51,19)"/><text x="53.5622%" y="1343.50"></text></g><g><title>entry_SYSCALL_64 (31 samples, 0.01%)</title><rect x="53.5089%" y="1157" width="0.0108%" height="15" fill="rgb(213,20,6)"/><text x="53.7589%" y="1167.50"></text></g><g><title>skb_release_data (37 samples, 0.01%)</title><rect x="53.6706%" y="1013" width="0.0128%" height="15" fill="rgb(212,124,10)"/><text x="53.9206%" y="1023.50"></text></g><g><title>skb_release_all (60 samples, 0.02%)</title><rect x="53.6689%" y="1029" width="0.0208%" height="15" fill="rgb(248,3,40)"/><text x="53.9189%" y="1039.50"></text></g><g><title>__kfree_skb (91 samples, 0.03%)</title><rect x="53.6606%" y="1045" width="0.0316%" height="15" fill="rgb(223,178,23)"/><text x="53.9106%" y="1055.50"></text></g><g><title>__perf_event_task_sched_out (29 samples, 0.01%)</title><rect x="53.7241%" y="981" width="0.0101%" height="15" fill="rgb(240,132,45)"/><text x="53.9741%" y="991.50"></text></g><g><title>deactivate_task (45 samples, 0.02%)</title><rect x="53.7341%" y="981" width="0.0156%" height="15" fill="rgb(245,164,36)"/><text x="53.9841%" y="991.50"></text></g><g><title>__sched_text_start (110 samples, 0.04%)</title><rect x="53.7230%" y="997" width="0.0382%" height="15" fill="rgb(231,188,53)"/><text x="53.9730%" y="1007.50"></text></g><g><title>__lock_sock (121 samples, 0.04%)</title><rect x="53.7202%" y="1029" width="0.0420%" height="15" fill="rgb(237,198,39)"/><text x="53.9702%" y="1039.50"></text></g><g><title>schedule (116 samples, 0.04%)</title><rect x="53.7220%" y="1013" width="0.0402%" height="15" fill="rgb(223,120,35)"/><text x="53.9720%" y="1023.50"></text></g><g><title>_raw_spin_lock_bh (33 samples, 0.01%)</title><rect x="53.7629%" y="1029" width="0.0114%" height="15" fill="rgb(253,107,49)"/><text x="54.0129%" y="1039.50"></text></g><g><title>native_queued_spin_lock_slowpath (32 samples, 0.01%)</title><rect x="53.7633%" y="1013" width="0.0111%" height="15" fill="rgb(216,44,31)"/><text x="54.0133%" y="1023.50"></text></g><g><title>lock_sock_nested (177 samples, 0.06%)</title><rect x="53.7143%" y="1045" width="0.0614%" height="15" fill="rgb(253,87,21)"/><text x="53.9643%" y="1055.50"></text></g><g><title>__release_sock (40 samples, 0.01%)</title><rect x="53.7799%" y="1029" width="0.0139%" height="15" fill="rgb(226,18,2)"/><text x="54.0299%" y="1039.50"></text></g><g><title>tcp_v4_do_rcv (37 samples, 0.01%)</title><rect x="53.7810%" y="1013" width="0.0128%" height="15" fill="rgb(216,8,46)"/><text x="54.0310%" y="1023.50"></text></g><g><title>tcp_rcv_established (37 samples, 0.01%)</title><rect x="53.7810%" y="997" width="0.0128%" height="15" fill="rgb(226,140,39)"/><text x="54.0310%" y="1007.50"></text></g><g><title>release_sock (93 samples, 0.03%)</title><rect x="53.7757%" y="1045" width="0.0323%" height="15" fill="rgb(221,194,54)"/><text x="54.0257%" y="1055.50"></text></g><g><title>__check_object_size (76 samples, 0.03%)</title><rect x="53.8451%" y="997" width="0.0264%" height="15" fill="rgb(213,92,11)"/><text x="54.0951%" y="1007.50"></text></g><g><title>__virt_addr_valid (43 samples, 0.01%)</title><rect x="53.8566%" y="981" width="0.0149%" height="15" fill="rgb(229,162,46)"/><text x="54.1066%" y="991.50"></text></g><g><title>copy_user_generic_string (219 samples, 0.08%)</title><rect x="53.8795%" y="981" width="0.0760%" height="15" fill="rgb(214,111,36)"/><text x="54.1295%" y="991.50"></text></g><g><title>_copy_to_iter (242 samples, 0.08%)</title><rect x="53.8732%" y="997" width="0.0840%" height="15" fill="rgb(207,6,21)"/><text x="54.1232%" y="1007.50"></text></g><g><title>__skb_datagram_iter (440 samples, 0.15%)</title><rect x="53.8111%" y="1029" width="0.1527%" height="15" fill="rgb(213,127,38)"/><text x="54.0611%" y="1039.50"></text></g><g><title>simple_copy_to_iter (350 samples, 0.12%)</title><rect x="53.8424%" y="1013" width="0.1214%" height="15" fill="rgb(238,118,32)"/><text x="54.0924%" y="1023.50"></text></g><g><title>skb_copy_datagram_iter (450 samples, 0.16%)</title><rect x="53.8080%" y="1045" width="0.1561%" height="15" fill="rgb(240,139,39)"/><text x="54.0580%" y="1055.50"></text></g><g><title>__ip_local_out (47 samples, 0.02%)</title><rect x="53.9836%" y="933" width="0.0163%" height="15" fill="rgb(235,10,37)"/><text x="54.2336%" y="943.50"></text></g><g><title>nf_hook_slow (40 samples, 0.01%)</title><rect x="53.9860%" y="917" width="0.0139%" height="15" fill="rgb(249,171,38)"/><text x="54.2360%" y="927.50"></text></g><g><title>__tcp_push_pending_frames (40 samples, 0.01%)</title><rect x="54.0273%" y="613" width="0.0139%" height="15" fill="rgb(242,144,32)"/><text x="54.2773%" y="623.50"></text></g><g><title>tcp_write_xmit (39 samples, 0.01%)</title><rect x="54.0276%" y="597" width="0.0135%" height="15" fill="rgb(217,117,21)"/><text x="54.2776%" y="607.50"></text></g><g><title>tcp_ack (32 samples, 0.01%)</title><rect x="54.0426%" y="613" width="0.0111%" height="15" fill="rgb(249,87,1)"/><text x="54.2926%" y="623.50"></text></g><g><title>tcp_rcv_established (87 samples, 0.03%)</title><rect x="54.0259%" y="629" width="0.0302%" height="15" fill="rgb(248,196,48)"/><text x="54.2759%" y="639.50"></text></g><g><title>ip_local_deliver_finish (119 samples, 0.04%)</title><rect x="54.0151%" y="693" width="0.0413%" height="15" fill="rgb(251,206,33)"/><text x="54.2651%" y="703.50"></text></g><g><title>ip_protocol_deliver_rcu (119 samples, 0.04%)</title><rect x="54.0151%" y="677" width="0.0413%" height="15" fill="rgb(232,141,28)"/><text x="54.2651%" y="687.50"></text></g><g><title>tcp_v4_rcv (113 samples, 0.04%)</title><rect x="54.0172%" y="661" width="0.0392%" height="15" fill="rgb(209,167,14)"/><text x="54.2672%" y="671.50"></text></g><g><title>tcp_v4_do_rcv (93 samples, 0.03%)</title><rect x="54.0242%" y="645" width="0.0323%" height="15" fill="rgb(225,11,50)"/><text x="54.2742%" y="655.50"></text></g><g><title>ip_rcv_finish (126 samples, 0.04%)</title><rect x="54.0148%" y="725" width="0.0437%" height="15" fill="rgb(209,50,20)"/><text x="54.2648%" y="735.50"></text></g><g><title>ip_local_deliver (126 samples, 0.04%)</title><rect x="54.0148%" y="709" width="0.0437%" height="15" fill="rgb(212,17,46)"/><text x="54.2648%" y="719.50"></text></g><g><title>__netif_receive_skb_one_core (145 samples, 0.05%)</title><rect x="54.0113%" y="757" width="0.0503%" height="15" fill="rgb(216,101,39)"/><text x="54.2613%" y="767.50"></text></g><g><title>ip_rcv (139 samples, 0.05%)</title><rect x="54.0134%" y="741" width="0.0482%" height="15" fill="rgb(212,228,48)"/><text x="54.2634%" y="751.50"></text></g><g><title>process_backlog (149 samples, 0.05%)</title><rect x="54.0103%" y="789" width="0.0517%" height="15" fill="rgb(250,6,50)"/><text x="54.2603%" y="799.50"></text></g><g><title>__netif_receive_skb (146 samples, 0.05%)</title><rect x="54.0113%" y="773" width="0.0507%" height="15" fill="rgb(250,160,48)"/><text x="54.2613%" y="783.50"></text></g><g><title>net_rx_action (157 samples, 0.05%)</title><rect x="54.0079%" y="805" width="0.0545%" height="15" fill="rgb(244,216,33)"/><text x="54.2579%" y="815.50"></text></g><g><title>do_softirq.part.0 (166 samples, 0.06%)</title><rect x="54.0051%" y="853" width="0.0576%" height="15" fill="rgb(207,157,5)"/><text x="54.2551%" y="863.50"></text></g><g><title>do_softirq_own_stack (165 samples, 0.06%)</title><rect x="54.0054%" y="837" width="0.0572%" height="15" fill="rgb(228,199,8)"/><text x="54.2554%" y="847.50"></text></g><g><title>__softirqentry_text_start (163 samples, 0.06%)</title><rect x="54.0061%" y="821" width="0.0566%" height="15" fill="rgb(227,80,20)"/><text x="54.2561%" y="831.50"></text></g><g><title>__local_bh_enable_ip (169 samples, 0.06%)</title><rect x="54.0051%" y="869" width="0.0586%" height="15" fill="rgb(222,9,33)"/><text x="54.2551%" y="879.50"></text></g><g><title>ip_finish_output (205 samples, 0.07%)</title><rect x="54.0016%" y="917" width="0.0711%" height="15" fill="rgb(239,44,28)"/><text x="54.2516%" y="927.50"></text></g><g><title>__ip_finish_output (203 samples, 0.07%)</title><rect x="54.0023%" y="901" width="0.0704%" height="15" fill="rgb(249,187,43)"/><text x="54.2523%" y="911.50"></text></g><g><title>ip_finish_output2 (202 samples, 0.07%)</title><rect x="54.0027%" y="885" width="0.0701%" height="15" fill="rgb(216,141,28)"/><text x="54.2527%" y="895.50"></text></g><g><title>ip_output (211 samples, 0.07%)</title><rect x="53.9999%" y="933" width="0.0732%" height="15" fill="rgb(230,154,53)"/><text x="54.2499%" y="943.50"></text></g><g><title>ip_local_out (262 samples, 0.09%)</title><rect x="53.9832%" y="949" width="0.0909%" height="15" fill="rgb(227,82,4)"/><text x="54.2332%" y="959.50"></text></g><g><title>__ip_queue_xmit (268 samples, 0.09%)</title><rect x="53.9815%" y="965" width="0.0930%" height="15" fill="rgb(220,107,16)"/><text x="54.2315%" y="975.50"></text></g><g><title>ip_queue_xmit (271 samples, 0.09%)</title><rect x="53.9815%" y="981" width="0.0940%" height="15" fill="rgb(207,187,2)"/><text x="54.2315%" y="991.50"></text></g><g><title>tcp_cleanup_rbuf (322 samples, 0.11%)</title><rect x="53.9645%" y="1045" width="0.1117%" height="15" fill="rgb(210,162,52)"/><text x="54.2145%" y="1055.50"></text></g><g><title>tcp_send_ack (297 samples, 0.10%)</title><rect x="53.9732%" y="1029" width="0.1030%" height="15" fill="rgb(217,216,49)"/><text x="54.2232%" y="1039.50"></text></g><g><title>__tcp_send_ack.part.0 (297 samples, 0.10%)</title><rect x="53.9732%" y="1013" width="0.1030%" height="15" fill="rgb(218,146,49)"/><text x="54.2232%" y="1023.50"></text></g><g><title>__tcp_transmit_skb (281 samples, 0.10%)</title><rect x="53.9787%" y="997" width="0.0975%" height="15" fill="rgb(216,55,40)"/><text x="54.2287%" y="1007.50"></text></g><g><title>tcp_rcv_space_adjust (72 samples, 0.02%)</title><rect x="54.0797%" y="1045" width="0.0250%" height="15" fill="rgb(208,196,21)"/><text x="54.3297%" y="1055.50"></text></g><g><title>tcp_mstamp_refresh (49 samples, 0.02%)</title><rect x="54.0877%" y="1029" width="0.0170%" height="15" fill="rgb(242,117,42)"/><text x="54.3377%" y="1039.50"></text></g><g><title>inet_recvmsg (1,479 samples, 0.51%)</title><rect x="53.5964%" y="1077" width="0.5131%" height="15" fill="rgb(210,11,23)"/><text x="53.8464%" y="1087.50"></text></g><g><title>tcp_recvmsg (1,445 samples, 0.50%)</title><rect x="53.6082%" y="1061" width="0.5014%" height="15" fill="rgb(217,110,2)"/><text x="53.8582%" y="1071.50"></text></g><g><title>security_socket_recvmsg (78 samples, 0.03%)</title><rect x="54.1095%" y="1077" width="0.0271%" height="15" fill="rgb(229,77,54)"/><text x="54.3595%" y="1087.50"></text></g><g><title>apparmor_socket_recvmsg (60 samples, 0.02%)</title><rect x="54.1158%" y="1061" width="0.0208%" height="15" fill="rgb(218,53,16)"/><text x="54.3658%" y="1071.50"></text></g><g><title>aa_sk_perm (59 samples, 0.02%)</title><rect x="54.1161%" y="1045" width="0.0205%" height="15" fill="rgb(215,38,13)"/><text x="54.3661%" y="1055.50"></text></g><g><title>sock_recvmsg (1,608 samples, 0.56%)</title><rect x="53.5794%" y="1093" width="0.5579%" height="15" fill="rgb(235,42,18)"/><text x="53.8294%" y="1103.50"></text></g><g><title>__fdget (36 samples, 0.01%)</title><rect x="54.1407%" y="1077" width="0.0125%" height="15" fill="rgb(219,66,54)"/><text x="54.3907%" y="1087.50"></text></g><g><title>__fget_light (34 samples, 0.01%)</title><rect x="54.1414%" y="1061" width="0.0118%" height="15" fill="rgb(222,205,4)"/><text x="54.3914%" y="1071.50"></text></g><g><title>__fget (33 samples, 0.01%)</title><rect x="54.1418%" y="1045" width="0.0114%" height="15" fill="rgb(227,213,46)"/><text x="54.3918%" y="1055.50"></text></g><g><title>__sys_recvfrom (1,759 samples, 0.61%)</title><rect x="53.5533%" y="1109" width="0.6103%" height="15" fill="rgb(250,145,42)"/><text x="53.8033%" y="1119.50"></text></g><g><title>sockfd_lookup_light (76 samples, 0.03%)</title><rect x="54.1373%" y="1093" width="0.0264%" height="15" fill="rgb(219,15,2)"/><text x="54.3873%" y="1103.50"></text></g><g><title>__fget_light (30 samples, 0.01%)</title><rect x="54.1532%" y="1077" width="0.0104%" height="15" fill="rgb(231,181,52)"/><text x="54.4032%" y="1087.50"></text></g><g><title>__x64_sys_recvfrom (1,791 samples, 0.62%)</title><rect x="53.5533%" y="1125" width="0.6214%" height="15" fill="rgb(235,1,42)"/><text x="53.8033%" y="1135.50"></text></g><g><title>do_syscall_64 (1,857 samples, 0.64%)</title><rect x="53.5357%" y="1141" width="0.6443%" height="15" fill="rgb(249,88,27)"/><text x="53.7857%" y="1151.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,910 samples, 0.66%)</title><rect x="53.5197%" y="1157" width="0.6627%" height="15" fill="rgb(235,145,16)"/><text x="53.7697%" y="1167.50"></text></g><g><title>__libc_recv (2,018 samples, 0.70%)</title><rect x="53.4899%" y="1173" width="0.7002%" height="15" fill="rgb(237,114,19)"/><text x="53.7399%" y="1183.50"></text></g><g><title>__libc_recv (2,038 samples, 0.71%)</title><rect x="53.4833%" y="1189" width="0.7071%" height="15" fill="rgb(238,51,50)"/><text x="53.7333%" y="1199.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2,092 samples, 0.73%)</title><rect x="53.4694%" y="1317" width="0.7258%" height="15" fill="rgb(205,194,25)"/><text x="53.7194%" y="1327.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (2,092 samples, 0.73%)</title><rect x="53.4694%" y="1301" width="0.7258%" height="15" fill="rgb(215,203,17)"/><text x="53.7194%" y="1311.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (2,092 samples, 0.73%)</title><rect x="53.4694%" y="1285" width="0.7258%" height="15" fill="rgb(233,112,49)"/><text x="53.7194%" y="1295.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (2,092 samples, 0.73%)</title><rect x="53.4694%" y="1269" width="0.7258%" height="15" fill="rgb(241,130,26)"/><text x="53.7194%" y="1279.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2,077 samples, 0.72%)</title><rect x="53.4746%" y="1253" width="0.7206%" height="15" fill="rgb(252,223,19)"/><text x="53.7246%" y="1263.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2,062 samples, 0.72%)</title><rect x="53.4798%" y="1237" width="0.7154%" height="15" fill="rgb(211,95,25)"/><text x="53.7298%" y="1247.50"></text></g><g><title>std::sys::unix::net::Socket::read (2,062 samples, 0.72%)</title><rect x="53.4798%" y="1221" width="0.7154%" height="15" fill="rgb(251,182,27)"/><text x="53.7298%" y="1231.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2,062 samples, 0.72%)</title><rect x="53.4798%" y="1205" width="0.7154%" height="15" fill="rgb(238,24,4)"/><text x="53.7298%" y="1215.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (42 samples, 0.01%)</title><rect x="54.2029%" y="1269" width="0.0146%" height="15" fill="rgb(224,220,25)"/><text x="54.4529%" y="1279.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1445" width="0.9101%" height="15" fill="rgb(239,133,26)"/><text x="53.5622%" y="1455.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1429" width="0.9101%" height="15" fill="rgb(211,94,48)"/><text x="53.5622%" y="1439.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1413" width="0.9101%" height="15" fill="rgb(239,87,6)"/><text x="53.5622%" y="1423.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1397" width="0.9101%" height="15" fill="rgb(227,62,0)"/><text x="53.5622%" y="1407.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1381" width="0.9101%" height="15" fill="rgb(211,226,4)"/><text x="53.5622%" y="1391.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1365" width="0.9101%" height="15" fill="rgb(253,38,52)"/><text x="53.5622%" y="1375.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (2,623 samples, 0.91%)</title><rect x="53.3122%" y="1349" width="0.9101%" height="15" fill="rgb(229,126,40)"/><text x="53.5622%" y="1359.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (2,170 samples, 0.75%)</title><rect x="53.4694%" y="1333" width="0.7529%" height="15" fill="rgb(229,165,44)"/><text x="53.7194%" y="1343.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (78 samples, 0.03%)</title><rect x="54.1952%" y="1317" width="0.0271%" height="15" fill="rgb(247,95,47)"/><text x="54.4452%" y="1327.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (78 samples, 0.03%)</title><rect x="54.1952%" y="1301" width="0.0271%" height="15" fill="rgb(216,140,30)"/><text x="54.4452%" y="1311.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (78 samples, 0.03%)</title><rect x="54.1952%" y="1285" width="0.0271%" height="15" fill="rgb(246,214,8)"/><text x="54.4452%" y="1295.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (29 samples, 0.01%)</title><rect x="54.2223%" y="1365" width="0.0101%" height="15" fill="rgb(227,224,15)"/><text x="54.4723%" y="1375.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (29 samples, 0.01%)</title><rect x="54.2223%" y="1349" width="0.0101%" height="15" fill="rgb(233,175,4)"/><text x="54.4723%" y="1359.50"></text></g><g><title>env_logger::fmt::Formatter::print (29 samples, 0.01%)</title><rect x="54.2223%" y="1333" width="0.0101%" height="15" fill="rgb(221,66,45)"/><text x="54.4723%" y="1343.50"></text></g><g><title>log::__private_api_log (40 samples, 0.01%)</title><rect x="54.2223%" y="1445" width="0.0139%" height="15" fill="rgb(221,178,18)"/><text x="54.4723%" y="1455.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (40 samples, 0.01%)</title><rect x="54.2223%" y="1429" width="0.0139%" height="15" fill="rgb(213,81,29)"/><text x="54.4723%" y="1439.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (40 samples, 0.01%)</title><rect x="54.2223%" y="1413" width="0.0139%" height="15" fill="rgb(220,89,49)"/><text x="54.4723%" y="1423.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (40 samples, 0.01%)</title><rect x="54.2223%" y="1397" width="0.0139%" height="15" fill="rgb(227,60,33)"/><text x="54.4723%" y="1407.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (40 samples, 0.01%)</title><rect x="54.2223%" y="1381" width="0.0139%" height="15" fill="rgb(205,113,12)"/><text x="54.4723%" y="1391.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::push_back (94 samples, 0.03%)</title><rect x="54.2469%" y="1173" width="0.0326%" height="15" fill="rgb(211,32,1)"/><text x="54.4969%" y="1183.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (2,871 samples, 1.00%)</title><rect x="53.3122%" y="1461" width="0.9961%" height="15" fill="rgb(246,2,12)"/><text x="53.5622%" y="1471.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (208 samples, 0.07%)</title><rect x="54.2362%" y="1445" width="0.0722%" height="15" fill="rgb(243,37,27)"/><text x="54.4862%" y="1455.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (208 samples, 0.07%)</title><rect x="54.2362%" y="1429" width="0.0722%" height="15" fill="rgb(248,211,31)"/><text x="54.4862%" y="1439.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (208 samples, 0.07%)</title><rect x="54.2362%" y="1413" width="0.0722%" height="15" fill="rgb(242,146,47)"/><text x="54.4862%" y="1423.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (208 samples, 0.07%)</title><rect x="54.2362%" y="1397" width="0.0722%" height="15" fill="rgb(206,70,20)"/><text x="54.4862%" y="1407.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (208 samples, 0.07%)</title><rect x="54.2362%" y="1381" width="0.0722%" height="15" fill="rgb(215,10,51)"/><text x="54.4862%" y="1391.50"></text></g><g><title>core::task::wake::Waker::wake (208 samples, 0.07%)</title><rect x="54.2362%" y="1365" width="0.0722%" height="15" fill="rgb(243,178,53)"/><text x="54.4862%" y="1375.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (208 samples, 0.07%)</title><rect x="54.2362%" y="1349" width="0.0722%" height="15" fill="rgb(233,221,20)"/><text x="54.4862%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (208 samples, 0.07%)</title><rect x="54.2362%" y="1333" width="0.0722%" height="15" fill="rgb(218,95,35)"/><text x="54.4862%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (208 samples, 0.07%)</title><rect x="54.2362%" y="1317" width="0.0722%" height="15" fill="rgb(229,13,5)"/><text x="54.4862%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (208 samples, 0.07%)</title><rect x="54.2362%" y="1301" width="0.0722%" height="15" fill="rgb(252,164,30)"/><text x="54.4862%" y="1311.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (208 samples, 0.07%)</title><rect x="54.2362%" y="1285" width="0.0722%" height="15" fill="rgb(232,68,36)"/><text x="54.4862%" y="1295.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (208 samples, 0.07%)</title><rect x="54.2362%" y="1269" width="0.0722%" height="15" fill="rgb(219,59,54)"/><text x="54.4862%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (208 samples, 0.07%)</title><rect x="54.2362%" y="1253" width="0.0722%" height="15" fill="rgb(250,92,33)"/><text x="54.4862%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (208 samples, 0.07%)</title><rect x="54.2362%" y="1237" width="0.0722%" height="15" fill="rgb(229,162,54)"/><text x="54.4862%" y="1247.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (208 samples, 0.07%)</title><rect x="54.2362%" y="1221" width="0.0722%" height="15" fill="rgb(244,114,52)"/><text x="54.4862%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (208 samples, 0.07%)</title><rect x="54.2362%" y="1205" width="0.0722%" height="15" fill="rgb(212,211,43)"/><text x="54.4862%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (190 samples, 0.07%)</title><rect x="54.2424%" y="1189" width="0.0659%" height="15" fill="rgb(226,147,8)"/><text x="54.4924%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (83 samples, 0.03%)</title><rect x="54.2795%" y="1173" width="0.0288%" height="15" fill="rgb(226,23,13)"/><text x="54.5295%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (65 samples, 0.02%)</title><rect x="54.2858%" y="1157" width="0.0226%" height="15" fill="rgb(240,63,4)"/><text x="54.5358%" y="1167.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (31 samples, 0.01%)</title><rect x="54.3083%" y="1269" width="0.0108%" height="15" fill="rgb(221,1,32)"/><text x="54.5583%" y="1279.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (31 samples, 0.01%)</title><rect x="54.3083%" y="1253" width="0.0108%" height="15" fill="rgb(242,117,10)"/><text x="54.5583%" y="1263.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (60 samples, 0.02%)</title><rect x="54.3083%" y="1317" width="0.0208%" height="15" fill="rgb(249,172,44)"/><text x="54.5583%" y="1327.50"></text></g><g><title>std::io::Write::write_fmt (60 samples, 0.02%)</title><rect x="54.3083%" y="1301" width="0.0208%" height="15" fill="rgb(244,46,45)"/><text x="54.5583%" y="1311.50"></text></g><g><title>core::fmt::write (60 samples, 0.02%)</title><rect x="54.3083%" y="1285" width="0.0208%" height="15" fill="rgb(206,43,17)"/><text x="54.5583%" y="1295.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (29 samples, 0.01%)</title><rect x="54.3191%" y="1269" width="0.0101%" height="15" fill="rgb(239,218,39)"/><text x="54.5691%" y="1279.50"></text></g><g><title>std::io::Write::write_all (29 samples, 0.01%)</title><rect x="54.3191%" y="1253" width="0.0101%" height="15" fill="rgb(208,169,54)"/><text x="54.5691%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (29 samples, 0.01%)</title><rect x="54.3191%" y="1237" width="0.0101%" height="15" fill="rgb(247,25,42)"/><text x="54.5691%" y="1247.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (55 samples, 0.02%)</title><rect x="54.3291%" y="1205" width="0.0191%" height="15" fill="rgb(226,23,31)"/><text x="54.5791%" y="1215.50"></text></g><g><title>std::io::Write::write_all (55 samples, 0.02%)</title><rect x="54.3291%" y="1189" width="0.0191%" height="15" fill="rgb(247,16,28)"/><text x="54.5791%" y="1199.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (84 samples, 0.03%)</title><rect x="54.3291%" y="1269" width="0.0291%" height="15" fill="rgb(231,147,38)"/><text x="54.5791%" y="1279.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (84 samples, 0.03%)</title><rect x="54.3291%" y="1253" width="0.0291%" height="15" fill="rgb(253,81,48)"/><text x="54.5791%" y="1263.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (84 samples, 0.03%)</title><rect x="54.3291%" y="1237" width="0.0291%" height="15" fill="rgb(249,222,43)"/><text x="54.5791%" y="1247.50"></text></g><g><title>core::fmt::write (84 samples, 0.03%)</title><rect x="54.3291%" y="1221" width="0.0291%" height="15" fill="rgb(221,3,27)"/><text x="54.5791%" y="1231.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (109 samples, 0.04%)</title><rect x="54.3291%" y="1317" width="0.0378%" height="15" fill="rgb(228,180,5)"/><text x="54.5791%" y="1327.50"></text></g><g><title>std::io::Write::write_fmt (109 samples, 0.04%)</title><rect x="54.3291%" y="1301" width="0.0378%" height="15" fill="rgb(227,131,42)"/><text x="54.5791%" y="1311.50"></text></g><g><title>core::fmt::write (109 samples, 0.04%)</title><rect x="54.3291%" y="1285" width="0.0378%" height="15" fill="rgb(212,3,39)"/><text x="54.5791%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (37 samples, 0.01%)</title><rect x="54.3899%" y="1157" width="0.0128%" height="15" fill="rgb(226,45,5)"/><text x="54.6399%" y="1167.50"></text></g><g><title>&lt;log::Level as core::fmt::Display&gt;::fmt (33 samples, 0.01%)</title><rect x="54.3912%" y="1141" width="0.0114%" height="15" fill="rgb(215,167,45)"/><text x="54.6412%" y="1151.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (162 samples, 0.06%)</title><rect x="54.3670%" y="1253" width="0.0562%" height="15" fill="rgb(250,218,53)"/><text x="54.6170%" y="1263.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (162 samples, 0.06%)</title><rect x="54.3670%" y="1237" width="0.0562%" height="15" fill="rgb(207,140,0)"/><text x="54.6170%" y="1247.50"></text></g><g><title>core::fmt::write (162 samples, 0.06%)</title><rect x="54.3670%" y="1221" width="0.0562%" height="15" fill="rgb(238,133,51)"/><text x="54.6170%" y="1231.50"></text></g><g><title>core::fmt::run (158 samples, 0.05%)</title><rect x="54.3683%" y="1205" width="0.0548%" height="15" fill="rgb(218,203,53)"/><text x="54.6183%" y="1215.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (158 samples, 0.05%)</title><rect x="54.3683%" y="1189" width="0.0548%" height="15" fill="rgb(226,184,25)"/><text x="54.6183%" y="1199.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (158 samples, 0.05%)</title><rect x="54.3683%" y="1173" width="0.0548%" height="15" fill="rgb(231,121,21)"/><text x="54.6183%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (189 samples, 0.07%)</title><rect x="54.3670%" y="1317" width="0.0656%" height="15" fill="rgb(251,14,34)"/><text x="54.6170%" y="1327.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (189 samples, 0.07%)</title><rect x="54.3670%" y="1301" width="0.0656%" height="15" fill="rgb(249,193,11)"/><text x="54.6170%" y="1311.50"></text></g><g><title>std::io::Write::write_fmt (189 samples, 0.07%)</title><rect x="54.3670%" y="1285" width="0.0656%" height="15" fill="rgb(220,172,37)"/><text x="54.6170%" y="1295.50"></text></g><g><title>core::fmt::write (189 samples, 0.07%)</title><rect x="54.3670%" y="1269" width="0.0656%" height="15" fill="rgb(231,229,43)"/><text x="54.6170%" y="1279.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (60 samples, 0.02%)</title><rect x="54.4325%" y="1317" width="0.0208%" height="15" fill="rgb(250,161,5)"/><text x="54.6825%" y="1327.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (60 samples, 0.02%)</title><rect x="54.4325%" y="1301" width="0.0208%" height="15" fill="rgb(218,225,18)"/><text x="54.6825%" y="1311.50"></text></g><g><title>std::io::Write::write_fmt (60 samples, 0.02%)</title><rect x="54.4325%" y="1285" width="0.0208%" height="15" fill="rgb(245,45,42)"/><text x="54.6825%" y="1295.50"></text></g><g><title>core::fmt::write (60 samples, 0.02%)</title><rect x="54.4325%" y="1269" width="0.0208%" height="15" fill="rgb(211,115,1)"/><text x="54.6825%" y="1279.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (34 samples, 0.01%)</title><rect x="54.4416%" y="1253" width="0.0118%" height="15" fill="rgb(248,133,52)"/><text x="54.6916%" y="1263.50"></text></g><g><title>std::io::Write::write_all (34 samples, 0.01%)</title><rect x="54.4416%" y="1237" width="0.0118%" height="15" fill="rgb(238,100,21)"/><text x="54.6916%" y="1247.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (201 samples, 0.07%)</title><rect x="54.4534%" y="1253" width="0.0697%" height="15" fill="rgb(247,144,11)"/><text x="54.7034%" y="1263.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (201 samples, 0.07%)</title><rect x="54.4534%" y="1237" width="0.0697%" height="15" fill="rgb(206,164,16)"/><text x="54.7034%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,544 samples, 1.23%)</title><rect x="53.3042%" y="1765" width="1.2296%" height="15" fill="rgb(222,34,3)"/><text x="53.5542%" y="1775.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1749" width="1.2216%" height="15" fill="rgb(248,82,4)"/><text x="53.5622%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1733" width="1.2216%" height="15" fill="rgb(228,81,46)"/><text x="53.5622%" y="1743.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1717" width="1.2216%" height="15" fill="rgb(227,67,47)"/><text x="53.5622%" y="1727.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1701" width="1.2216%" height="15" fill="rgb(215,93,53)"/><text x="53.5622%" y="1711.50"></text></g><g><title>tokio::runtime::task::raw::poll (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1685" width="1.2216%" height="15" fill="rgb(248,194,39)"/><text x="53.5622%" y="1695.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1669" width="1.2216%" height="15" fill="rgb(215,5,19)"/><text x="53.5622%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1653" width="1.2216%" height="15" fill="rgb(226,215,51)"/><text x="53.5622%" y="1663.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1637" width="1.2216%" height="15" fill="rgb(225,56,26)"/><text x="53.5622%" y="1647.50"></text></g><g><title>std::panic::catch_unwind (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1621" width="1.2216%" height="15" fill="rgb(222,75,29)"/><text x="53.5622%" y="1631.50"></text></g><g><title>std::panicking::try (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1605" width="1.2216%" height="15" fill="rgb(236,139,6)"/><text x="53.5622%" y="1615.50"></text></g><g><title>__rust_try (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1589" width="1.2216%" height="15" fill="rgb(223,137,36)"/><text x="53.5622%" y="1599.50"></text></g><g><title>std::panicking::try::do_call (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1573" width="1.2216%" height="15" fill="rgb(226,99,2)"/><text x="53.5622%" y="1583.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1557" width="1.2216%" height="15" fill="rgb(206,133,23)"/><text x="53.5622%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1541" width="1.2216%" height="15" fill="rgb(243,173,15)"/><text x="53.5622%" y="1551.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1525" width="1.2216%" height="15" fill="rgb(228,69,28)"/><text x="53.5622%" y="1535.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1509" width="1.2216%" height="15" fill="rgb(212,51,22)"/><text x="53.5622%" y="1519.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1493" width="1.2216%" height="15" fill="rgb(227,113,0)"/><text x="53.5622%" y="1503.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,521 samples, 1.22%)</title><rect x="53.3122%" y="1477" width="1.2216%" height="15" fill="rgb(252,84,27)"/><text x="53.5622%" y="1487.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (650 samples, 0.23%)</title><rect x="54.3083%" y="1461" width="0.2255%" height="15" fill="rgb(223,145,39)"/><text x="54.5583%" y="1471.50"></text></g><g><title>log::__private_api_log (650 samples, 0.23%)</title><rect x="54.3083%" y="1445" width="0.2255%" height="15" fill="rgb(239,219,30)"/><text x="54.5583%" y="1455.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (650 samples, 0.23%)</title><rect x="54.3083%" y="1429" width="0.2255%" height="15" fill="rgb(224,196,39)"/><text x="54.5583%" y="1439.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (650 samples, 0.23%)</title><rect x="54.3083%" y="1413" width="0.2255%" height="15" fill="rgb(205,35,43)"/><text x="54.5583%" y="1423.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (650 samples, 0.23%)</title><rect x="54.3083%" y="1397" width="0.2255%" height="15" fill="rgb(228,201,21)"/><text x="54.5583%" y="1407.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (650 samples, 0.23%)</title><rect x="54.3083%" y="1381" width="0.2255%" height="15" fill="rgb(237,118,16)"/><text x="54.5583%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (650 samples, 0.23%)</title><rect x="54.3083%" y="1365" width="0.2255%" height="15" fill="rgb(241,17,19)"/><text x="54.5583%" y="1375.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (650 samples, 0.23%)</title><rect x="54.3083%" y="1349" width="0.2255%" height="15" fill="rgb(214,10,25)"/><text x="54.5583%" y="1359.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (650 samples, 0.23%)</title><rect x="54.3083%" y="1333" width="0.2255%" height="15" fill="rgb(238,37,29)"/><text x="54.5583%" y="1343.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (232 samples, 0.08%)</title><rect x="54.4534%" y="1317" width="0.0805%" height="15" fill="rgb(253,83,25)"/><text x="54.7034%" y="1327.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (232 samples, 0.08%)</title><rect x="54.4534%" y="1301" width="0.0805%" height="15" fill="rgb(234,192,12)"/><text x="54.7034%" y="1311.50"></text></g><g><title>std::io::Write::write_fmt (232 samples, 0.08%)</title><rect x="54.4534%" y="1285" width="0.0805%" height="15" fill="rgb(241,216,45)"/><text x="54.7034%" y="1295.50"></text></g><g><title>core::fmt::write (232 samples, 0.08%)</title><rect x="54.4534%" y="1269" width="0.0805%" height="15" fill="rgb(242,22,33)"/><text x="54.7034%" y="1279.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (31 samples, 0.01%)</title><rect x="54.5231%" y="1253" width="0.0108%" height="15" fill="rgb(231,105,49)"/><text x="54.7731%" y="1263.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (31 samples, 0.01%)</title><rect x="54.5231%" y="1237" width="0.0108%" height="15" fill="rgb(218,204,15)"/><text x="54.7731%" y="1247.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (44 samples, 0.02%)</title><rect x="54.5359%" y="1301" width="0.0153%" height="15" fill="rgb(235,138,41)"/><text x="54.7859%" y="1311.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (44 samples, 0.02%)</title><rect x="54.5359%" y="1285" width="0.0153%" height="15" fill="rgb(246,0,9)"/><text x="54.7859%" y="1295.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (74 samples, 0.03%)</title><rect x="54.5352%" y="1429" width="0.0257%" height="15" fill="rgb(210,74,4)"/><text x="54.7852%" y="1439.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (74 samples, 0.03%)</title><rect x="54.5352%" y="1413" width="0.0257%" height="15" fill="rgb(250,60,41)"/><text x="54.7852%" y="1423.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (74 samples, 0.03%)</title><rect x="54.5352%" y="1397" width="0.0257%" height="15" fill="rgb(220,115,12)"/><text x="54.7852%" y="1407.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (74 samples, 0.03%)</title><rect x="54.5352%" y="1381" width="0.0257%" height="15" fill="rgb(237,100,13)"/><text x="54.7852%" y="1391.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (74 samples, 0.03%)</title><rect x="54.5352%" y="1365" width="0.0257%" height="15" fill="rgb(213,55,26)"/><text x="54.7852%" y="1375.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (74 samples, 0.03%)</title><rect x="54.5352%" y="1349" width="0.0257%" height="15" fill="rgb(216,17,4)"/><text x="54.7852%" y="1359.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (74 samples, 0.03%)</title><rect x="54.5352%" y="1333" width="0.0257%" height="15" fill="rgb(220,153,47)"/><text x="54.7852%" y="1343.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (72 samples, 0.02%)</title><rect x="54.5359%" y="1317" width="0.0250%" height="15" fill="rgb(215,131,9)"/><text x="54.7859%" y="1327.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (129 samples, 0.04%)</title><rect x="54.5338%" y="1445" width="0.0448%" height="15" fill="rgb(233,46,42)"/><text x="54.7838%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (39 samples, 0.01%)</title><rect x="54.5786%" y="1301" width="0.0135%" height="15" fill="rgb(226,86,7)"/><text x="54.8286%" y="1311.50"></text></g><g><title>std::io::Write::write_fmt (39 samples, 0.01%)</title><rect x="54.5786%" y="1285" width="0.0135%" height="15" fill="rgb(239,226,21)"/><text x="54.8286%" y="1295.50"></text></g><g><title>core::fmt::write (39 samples, 0.01%)</title><rect x="54.5786%" y="1269" width="0.0135%" height="15" fill="rgb(244,137,22)"/><text x="54.8286%" y="1279.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (237 samples, 0.08%)</title><rect x="54.5338%" y="1765" width="0.0822%" height="15" fill="rgb(211,139,35)"/><text x="54.7838%" y="1775.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (237 samples, 0.08%)</title><rect x="54.5338%" y="1749" width="0.0822%" height="15" fill="rgb(214,62,50)"/><text x="54.7838%" y="1759.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (237 samples, 0.08%)</title><rect x="54.5338%" y="1733" width="0.0822%" height="15" fill="rgb(212,113,44)"/><text x="54.7838%" y="1743.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (237 samples, 0.08%)</title><rect x="54.5338%" y="1717" width="0.0822%" height="15" fill="rgb(226,150,43)"/><text x="54.7838%" y="1727.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (237 samples, 0.08%)</title><rect x="54.5338%" y="1701" width="0.0822%" height="15" fill="rgb(250,71,37)"/><text x="54.7838%" y="1711.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (237 samples, 0.08%)</title><rect x="54.5338%" y="1685" width="0.0822%" height="15" fill="rgb(219,76,19)"/><text x="54.7838%" y="1695.50"></text></g><g><title>tokio::runtime::task::raw::poll (237 samples, 0.08%)</title><rect x="54.5338%" y="1669" width="0.0822%" height="15" fill="rgb(250,39,11)"/><text x="54.7838%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (237 samples, 0.08%)</title><rect x="54.5338%" y="1653" width="0.0822%" height="15" fill="rgb(230,64,31)"/><text x="54.7838%" y="1663.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (237 samples, 0.08%)</title><rect x="54.5338%" y="1637" width="0.0822%" height="15" fill="rgb(208,222,23)"/><text x="54.7838%" y="1647.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (237 samples, 0.08%)</title><rect x="54.5338%" y="1621" width="0.0822%" height="15" fill="rgb(227,125,18)"/><text x="54.7838%" y="1631.50"></text></g><g><title>std::panic::catch_unwind (237 samples, 0.08%)</title><rect x="54.5338%" y="1605" width="0.0822%" height="15" fill="rgb(234,210,9)"/><text x="54.7838%" y="1615.50"></text></g><g><title>std::panicking::try (237 samples, 0.08%)</title><rect x="54.5338%" y="1589" width="0.0822%" height="15" fill="rgb(217,127,24)"/><text x="54.7838%" y="1599.50"></text></g><g><title>__rust_try (237 samples, 0.08%)</title><rect x="54.5338%" y="1573" width="0.0822%" height="15" fill="rgb(239,141,48)"/><text x="54.7838%" y="1583.50"></text></g><g><title>std::panicking::try::do_call (237 samples, 0.08%)</title><rect x="54.5338%" y="1557" width="0.0822%" height="15" fill="rgb(227,109,8)"/><text x="54.7838%" y="1567.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (237 samples, 0.08%)</title><rect x="54.5338%" y="1541" width="0.0822%" height="15" fill="rgb(235,184,23)"/><text x="54.7838%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (237 samples, 0.08%)</title><rect x="54.5338%" y="1525" width="0.0822%" height="15" fill="rgb(227,226,48)"/><text x="54.7838%" y="1535.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (237 samples, 0.08%)</title><rect x="54.5338%" y="1509" width="0.0822%" height="15" fill="rgb(206,150,11)"/><text x="54.7838%" y="1519.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (237 samples, 0.08%)</title><rect x="54.5338%" y="1493" width="0.0822%" height="15" fill="rgb(254,2,33)"/><text x="54.7838%" y="1503.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (237 samples, 0.08%)</title><rect x="54.5338%" y="1477" width="0.0822%" height="15" fill="rgb(243,160,20)"/><text x="54.7838%" y="1487.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (237 samples, 0.08%)</title><rect x="54.5338%" y="1461" width="0.0822%" height="15" fill="rgb(218,208,30)"/><text x="54.7838%" y="1471.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (108 samples, 0.04%)</title><rect x="54.5786%" y="1445" width="0.0375%" height="15" fill="rgb(224,120,49)"/><text x="54.8286%" y="1455.50"></text></g><g><title>log::__private_api_log (108 samples, 0.04%)</title><rect x="54.5786%" y="1429" width="0.0375%" height="15" fill="rgb(246,12,2)"/><text x="54.8286%" y="1439.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (108 samples, 0.04%)</title><rect x="54.5786%" y="1413" width="0.0375%" height="15" fill="rgb(236,117,3)"/><text x="54.8286%" y="1423.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (108 samples, 0.04%)</title><rect x="54.5786%" y="1397" width="0.0375%" height="15" fill="rgb(216,128,52)"/><text x="54.8286%" y="1407.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (108 samples, 0.04%)</title><rect x="54.5786%" y="1381" width="0.0375%" height="15" fill="rgb(246,145,19)"/><text x="54.8286%" y="1391.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (108 samples, 0.04%)</title><rect x="54.5786%" y="1365" width="0.0375%" height="15" fill="rgb(222,11,46)"/><text x="54.8286%" y="1375.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (108 samples, 0.04%)</title><rect x="54.5786%" y="1349" width="0.0375%" height="15" fill="rgb(245,82,36)"/><text x="54.8286%" y="1359.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (108 samples, 0.04%)</title><rect x="54.5786%" y="1333" width="0.0375%" height="15" fill="rgb(250,73,51)"/><text x="54.8286%" y="1343.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (108 samples, 0.04%)</title><rect x="54.5786%" y="1317" width="0.0375%" height="15" fill="rgb(221,189,23)"/><text x="54.8286%" y="1327.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (34 samples, 0.01%)</title><rect x="54.6043%" y="1301" width="0.0118%" height="15" fill="rgb(210,33,7)"/><text x="54.8543%" y="1311.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (34 samples, 0.01%)</title><rect x="54.6043%" y="1285" width="0.0118%" height="15" fill="rgb(210,107,22)"/><text x="54.8543%" y="1295.50"></text></g><g><title>std::io::Write::write_fmt (34 samples, 0.01%)</title><rect x="54.6043%" y="1269" width="0.0118%" height="15" fill="rgb(222,116,37)"/><text x="54.8543%" y="1279.50"></text></g><g><title>core::fmt::write (34 samples, 0.01%)</title><rect x="54.6043%" y="1253" width="0.0118%" height="15" fill="rgb(254,17,48)"/><text x="54.8543%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (34 samples, 0.01%)</title><rect x="54.6043%" y="1237" width="0.0118%" height="15" fill="rgb(224,36,32)"/><text x="54.8543%" y="1247.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (34 samples, 0.01%)</title><rect x="54.6043%" y="1221" width="0.0118%" height="15" fill="rgb(232,90,46)"/><text x="54.8543%" y="1231.50"></text></g><g><title>tokio::io::driver::registration::Registration::clear_readiness (37 samples, 0.01%)</title><rect x="54.6161%" y="1349" width="0.0128%" height="15" fill="rgb(241,66,40)"/><text x="54.8661%" y="1359.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::clear_readiness (37 samples, 0.01%)</title><rect x="54.6161%" y="1333" width="0.0128%" height="15" fill="rgb(249,184,29)"/><text x="54.8661%" y="1343.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (37 samples, 0.01%)</title><rect x="54.6161%" y="1317" width="0.0128%" height="15" fill="rgb(231,181,1)"/><text x="54.8661%" y="1327.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (47 samples, 0.02%)</title><rect x="54.6289%" y="1317" width="0.0163%" height="15" fill="rgb(224,94,2)"/><text x="54.8789%" y="1327.50"></text></g><g><title>tokio::coop::Budget::is_unconstrained (44 samples, 0.02%)</title><rect x="54.6300%" y="1301" width="0.0153%" height="15" fill="rgb(229,170,15)"/><text x="54.8800%" y="1311.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (44 samples, 0.02%)</title><rect x="54.6300%" y="1285" width="0.0153%" height="15" fill="rgb(240,127,35)"/><text x="54.8800%" y="1295.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (37 samples, 0.01%)</title><rect x="54.6452%" y="1285" width="0.0128%" height="15" fill="rgb(248,196,34)"/><text x="54.8952%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place (123 samples, 0.04%)</title><rect x="54.6289%" y="1333" width="0.0427%" height="15" fill="rgb(236,137,7)"/><text x="54.8789%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place (76 samples, 0.03%)</title><rect x="54.6452%" y="1317" width="0.0264%" height="15" fill="rgb(235,127,16)"/><text x="54.8952%" y="1327.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.03%)</title><rect x="54.6452%" y="1301" width="0.0264%" height="15" fill="rgb(250,192,54)"/><text x="54.8952%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (39 samples, 0.01%)</title><rect x="54.6581%" y="1285" width="0.0135%" height="15" fill="rgb(218,98,20)"/><text x="54.9081%" y="1295.50"></text></g><g><title>tokio::coop::poll_proceed (120 samples, 0.04%)</title><rect x="54.6803%" y="1333" width="0.0416%" height="15" fill="rgb(230,176,47)"/><text x="54.9303%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (120 samples, 0.04%)</title><rect x="54.6803%" y="1317" width="0.0416%" height="15" fill="rgb(244,2,33)"/><text x="54.9303%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (108 samples, 0.04%)</title><rect x="54.6844%" y="1301" width="0.0375%" height="15" fill="rgb(231,100,17)"/><text x="54.9344%" y="1311.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (327 samples, 0.11%)</title><rect x="54.6289%" y="1349" width="0.1135%" height="15" fill="rgb(245,23,12)"/><text x="54.8789%" y="1359.50"></text></g><g><title>tokio::io::driver::Handle::inner (59 samples, 0.02%)</title><rect x="54.7219%" y="1333" width="0.0205%" height="15" fill="rgb(249,55,22)"/><text x="54.9719%" y="1343.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (59 samples, 0.02%)</title><rect x="54.7219%" y="1317" width="0.0205%" height="15" fill="rgb(207,134,9)"/><text x="54.9719%" y="1327.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (423 samples, 0.15%)</title><rect x="54.6161%" y="1461" width="0.1468%" height="15" fill="rgb(218,134,0)"/><text x="54.8661%" y="1471.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (423 samples, 0.15%)</title><rect x="54.6161%" y="1445" width="0.1468%" height="15" fill="rgb(213,212,33)"/><text x="54.8661%" y="1455.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (423 samples, 0.15%)</title><rect x="54.6161%" y="1429" width="0.1468%" height="15" fill="rgb(252,106,18)"/><text x="54.8661%" y="1439.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (423 samples, 0.15%)</title><rect x="54.6161%" y="1413" width="0.1468%" height="15" fill="rgb(208,126,42)"/><text x="54.8661%" y="1423.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (423 samples, 0.15%)</title><rect x="54.6161%" y="1397" width="0.1468%" height="15" fill="rgb(246,175,29)"/><text x="54.8661%" y="1407.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (423 samples, 0.15%)</title><rect x="54.6161%" y="1381" width="0.1468%" height="15" fill="rgb(215,13,50)"/><text x="54.8661%" y="1391.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (423 samples, 0.15%)</title><rect x="54.6161%" y="1365" width="0.1468%" height="15" fill="rgb(216,172,15)"/><text x="54.8661%" y="1375.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (59 samples, 0.02%)</title><rect x="54.7424%" y="1349" width="0.0205%" height="15" fill="rgb(212,103,13)"/><text x="54.9924%" y="1359.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (59 samples, 0.02%)</title><rect x="54.7424%" y="1333" width="0.0205%" height="15" fill="rgb(231,171,36)"/><text x="54.9924%" y="1343.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (59 samples, 0.02%)</title><rect x="54.7424%" y="1317" width="0.0205%" height="15" fill="rgb(250,123,20)"/><text x="54.9924%" y="1327.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (59 samples, 0.02%)</title><rect x="54.7424%" y="1301" width="0.0205%" height="15" fill="rgb(212,53,50)"/><text x="54.9924%" y="1311.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (59 samples, 0.02%)</title><rect x="54.7424%" y="1285" width="0.0205%" height="15" fill="rgb(243,54,12)"/><text x="54.9924%" y="1295.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (59 samples, 0.02%)</title><rect x="54.7424%" y="1269" width="0.0205%" height="15" fill="rgb(234,101,34)"/><text x="54.9924%" y="1279.50"></text></g><g><title>try_to_wake_up (37 samples, 0.01%)</title><rect x="54.7899%" y="997" width="0.0128%" height="15" fill="rgb(254,67,22)"/><text x="55.0399%" y="1007.50"></text></g><g><title>futex_wake (46 samples, 0.02%)</title><rect x="54.7871%" y="1029" width="0.0160%" height="15" fill="rgb(250,35,47)"/><text x="55.0371%" y="1039.50"></text></g><g><title>wake_up_q (39 samples, 0.01%)</title><rect x="54.7896%" y="1013" width="0.0135%" height="15" fill="rgb(226,126,38)"/><text x="55.0396%" y="1023.50"></text></g><g><title>do_futex (52 samples, 0.02%)</title><rect x="54.7854%" y="1045" width="0.0180%" height="15" fill="rgb(216,138,53)"/><text x="55.0354%" y="1055.50"></text></g><g><title>__x64_sys_futex (54 samples, 0.02%)</title><rect x="54.7850%" y="1061" width="0.0187%" height="15" fill="rgb(246,199,43)"/><text x="55.0350%" y="1071.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (59 samples, 0.02%)</title><rect x="54.7837%" y="1141" width="0.0205%" height="15" fill="rgb(232,125,11)"/><text x="55.0337%" y="1151.50"></text></g><g><title>__pthread_cond_signal (59 samples, 0.02%)</title><rect x="54.7837%" y="1125" width="0.0205%" height="15" fill="rgb(218,219,45)"/><text x="55.0337%" y="1135.50"></text></g><g><title>futex_wake (59 samples, 0.02%)</title><rect x="54.7837%" y="1109" width="0.0205%" height="15" fill="rgb(216,102,54)"/><text x="55.0337%" y="1119.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (58 samples, 0.02%)</title><rect x="54.7840%" y="1093" width="0.0201%" height="15" fill="rgb(250,228,7)"/><text x="55.0340%" y="1103.50"></text></g><g><title>do_syscall_64 (56 samples, 0.02%)</title><rect x="54.7847%" y="1077" width="0.0194%" height="15" fill="rgb(226,125,25)"/><text x="55.0347%" y="1087.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (69 samples, 0.02%)</title><rect x="54.7833%" y="1173" width="0.0239%" height="15" fill="rgb(224,165,27)"/><text x="55.0333%" y="1183.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (69 samples, 0.02%)</title><rect x="54.7833%" y="1157" width="0.0239%" height="15" fill="rgb(233,86,3)"/><text x="55.0333%" y="1167.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (578 samples, 0.20%)</title><rect x="54.6161%" y="1477" width="0.2005%" height="15" fill="rgb(228,116,20)"/><text x="54.8661%" y="1487.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (133 samples, 0.05%)</title><rect x="54.7705%" y="1461" width="0.0461%" height="15" fill="rgb(209,192,17)"/><text x="55.0205%" y="1471.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (133 samples, 0.05%)</title><rect x="54.7705%" y="1445" width="0.0461%" height="15" fill="rgb(224,88,34)"/><text x="55.0205%" y="1455.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (133 samples, 0.05%)</title><rect x="54.7705%" y="1429" width="0.0461%" height="15" fill="rgb(233,38,6)"/><text x="55.0205%" y="1439.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (133 samples, 0.05%)</title><rect x="54.7705%" y="1413" width="0.0461%" height="15" fill="rgb(212,59,30)"/><text x="55.0205%" y="1423.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (133 samples, 0.05%)</title><rect x="54.7705%" y="1397" width="0.0461%" height="15" fill="rgb(213,80,3)"/><text x="55.0205%" y="1407.50"></text></g><g><title>core::task::wake::Waker::wake (133 samples, 0.05%)</title><rect x="54.7705%" y="1381" width="0.0461%" height="15" fill="rgb(251,178,7)"/><text x="55.0205%" y="1391.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (133 samples, 0.05%)</title><rect x="54.7705%" y="1365" width="0.0461%" height="15" fill="rgb(213,154,26)"/><text x="55.0205%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (133 samples, 0.05%)</title><rect x="54.7705%" y="1349" width="0.0461%" height="15" fill="rgb(238,165,49)"/><text x="55.0205%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (133 samples, 0.05%)</title><rect x="54.7705%" y="1333" width="0.0461%" height="15" fill="rgb(248,91,46)"/><text x="55.0205%" y="1343.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (133 samples, 0.05%)</title><rect x="54.7705%" y="1317" width="0.0461%" height="15" fill="rgb(244,21,52)"/><text x="55.0205%" y="1327.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (133 samples, 0.05%)</title><rect x="54.7705%" y="1301" width="0.0461%" height="15" fill="rgb(247,122,20)"/><text x="55.0205%" y="1311.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (133 samples, 0.05%)</title><rect x="54.7705%" y="1285" width="0.0461%" height="15" fill="rgb(218,27,9)"/><text x="55.0205%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (133 samples, 0.05%)</title><rect x="54.7705%" y="1269" width="0.0461%" height="15" fill="rgb(246,7,6)"/><text x="55.0205%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (133 samples, 0.05%)</title><rect x="54.7705%" y="1253" width="0.0461%" height="15" fill="rgb(227,135,54)"/><text x="55.0205%" y="1263.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (133 samples, 0.05%)</title><rect x="54.7705%" y="1237" width="0.0461%" height="15" fill="rgb(247,14,11)"/><text x="55.0205%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (133 samples, 0.05%)</title><rect x="54.7705%" y="1221" width="0.0461%" height="15" fill="rgb(206,149,34)"/><text x="55.0205%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (115 samples, 0.04%)</title><rect x="54.7767%" y="1205" width="0.0399%" height="15" fill="rgb(227,228,4)"/><text x="55.0267%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (96 samples, 0.03%)</title><rect x="54.7833%" y="1189" width="0.0333%" height="15" fill="rgb(238,218,28)"/><text x="55.0333%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (31 samples, 0.01%)</title><rect x="54.8166%" y="1333" width="0.0108%" height="15" fill="rgb(252,86,40)"/><text x="55.0666%" y="1343.50"></text></g><g><title>std::io::Write::write_fmt (31 samples, 0.01%)</title><rect x="54.8166%" y="1317" width="0.0108%" height="15" fill="rgb(251,225,11)"/><text x="55.0666%" y="1327.50"></text></g><g><title>core::fmt::write (31 samples, 0.01%)</title><rect x="54.8166%" y="1301" width="0.0108%" height="15" fill="rgb(206,46,49)"/><text x="55.0666%" y="1311.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (38 samples, 0.01%)</title><rect x="54.8274%" y="1333" width="0.0132%" height="15" fill="rgb(245,128,24)"/><text x="55.0774%" y="1343.50"></text></g><g><title>std::io::Write::write_fmt (38 samples, 0.01%)</title><rect x="54.8274%" y="1317" width="0.0132%" height="15" fill="rgb(219,177,34)"/><text x="55.0774%" y="1327.50"></text></g><g><title>core::fmt::write (38 samples, 0.01%)</title><rect x="54.8274%" y="1301" width="0.0132%" height="15" fill="rgb(218,60,48)"/><text x="55.0774%" y="1311.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (32 samples, 0.01%)</title><rect x="54.8406%" y="1269" width="0.0111%" height="15" fill="rgb(221,11,5)"/><text x="55.0906%" y="1279.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (32 samples, 0.01%)</title><rect x="54.8406%" y="1253" width="0.0111%" height="15" fill="rgb(220,148,13)"/><text x="55.0906%" y="1263.50"></text></g><g><title>core::fmt::write (32 samples, 0.01%)</title><rect x="54.8406%" y="1237" width="0.0111%" height="15" fill="rgb(210,16,3)"/><text x="55.0906%" y="1247.50"></text></g><g><title>core::fmt::run (32 samples, 0.01%)</title><rect x="54.8406%" y="1221" width="0.0111%" height="15" fill="rgb(236,80,2)"/><text x="55.0906%" y="1231.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (32 samples, 0.01%)</title><rect x="54.8406%" y="1205" width="0.0111%" height="15" fill="rgb(239,129,19)"/><text x="55.0906%" y="1215.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (32 samples, 0.01%)</title><rect x="54.8406%" y="1189" width="0.0111%" height="15" fill="rgb(220,106,35)"/><text x="55.0906%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (47 samples, 0.02%)</title><rect x="54.8406%" y="1333" width="0.0163%" height="15" fill="rgb(252,139,45)"/><text x="55.0906%" y="1343.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (47 samples, 0.02%)</title><rect x="54.8406%" y="1317" width="0.0163%" height="15" fill="rgb(229,8,36)"/><text x="55.0906%" y="1327.50"></text></g><g><title>std::io::Write::write_fmt (47 samples, 0.02%)</title><rect x="54.8406%" y="1301" width="0.0163%" height="15" fill="rgb(230,126,33)"/><text x="55.0906%" y="1311.50"></text></g><g><title>core::fmt::write (47 samples, 0.02%)</title><rect x="54.8406%" y="1285" width="0.0163%" height="15" fill="rgb(239,140,21)"/><text x="55.0906%" y="1295.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (44 samples, 0.02%)</title><rect x="54.8801%" y="1221" width="0.0153%" height="15" fill="rgb(254,104,9)"/><text x="55.1301%" y="1231.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.03%)</title><rect x="54.8641%" y="1237" width="0.0316%" height="15" fill="rgb(239,52,14)"/><text x="55.1141%" y="1247.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (122 samples, 0.04%)</title><rect x="54.8641%" y="1269" width="0.0423%" height="15" fill="rgb(208,227,44)"/><text x="55.1141%" y="1279.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (122 samples, 0.04%)</title><rect x="54.8641%" y="1253" width="0.0423%" height="15" fill="rgb(246,18,19)"/><text x="55.1141%" y="1263.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (881 samples, 0.31%)</title><rect x="54.6161%" y="1765" width="0.3057%" height="15" fill="rgb(235,228,25)"/><text x="54.8661%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (881 samples, 0.31%)</title><rect x="54.6161%" y="1749" width="0.3057%" height="15" fill="rgb(240,156,20)"/><text x="54.8661%" y="1759.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (881 samples, 0.31%)</title><rect x="54.6161%" y="1733" width="0.3057%" height="15" fill="rgb(224,8,20)"/><text x="54.8661%" y="1743.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (881 samples, 0.31%)</title><rect x="54.6161%" y="1717" width="0.3057%" height="15" fill="rgb(214,12,52)"/><text x="54.8661%" y="1727.50"></text></g><g><title>tokio::runtime::task::raw::poll (881 samples, 0.31%)</title><rect x="54.6161%" y="1701" width="0.3057%" height="15" fill="rgb(211,220,47)"/><text x="54.8661%" y="1711.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (881 samples, 0.31%)</title><rect x="54.6161%" y="1685" width="0.3057%" height="15" fill="rgb(250,173,5)"/><text x="54.8661%" y="1695.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (881 samples, 0.31%)</title><rect x="54.6161%" y="1669" width="0.3057%" height="15" fill="rgb(250,125,52)"/><text x="54.8661%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (881 samples, 0.31%)</title><rect x="54.6161%" y="1653" width="0.3057%" height="15" fill="rgb(209,133,18)"/><text x="54.8661%" y="1663.50"></text></g><g><title>std::panic::catch_unwind (881 samples, 0.31%)</title><rect x="54.6161%" y="1637" width="0.3057%" height="15" fill="rgb(216,173,22)"/><text x="54.8661%" y="1647.50"></text></g><g><title>std::panicking::try (881 samples, 0.31%)</title><rect x="54.6161%" y="1621" width="0.3057%" height="15" fill="rgb(205,3,22)"/><text x="54.8661%" y="1631.50"></text></g><g><title>__rust_try (881 samples, 0.31%)</title><rect x="54.6161%" y="1605" width="0.3057%" height="15" fill="rgb(248,22,20)"/><text x="54.8661%" y="1615.50"></text></g><g><title>std::panicking::try::do_call (881 samples, 0.31%)</title><rect x="54.6161%" y="1589" width="0.3057%" height="15" fill="rgb(233,6,29)"/><text x="54.8661%" y="1599.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (881 samples, 0.31%)</title><rect x="54.6161%" y="1573" width="0.3057%" height="15" fill="rgb(240,22,54)"/><text x="54.8661%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (881 samples, 0.31%)</title><rect x="54.6161%" y="1557" width="0.3057%" height="15" fill="rgb(231,133,32)"/><text x="54.8661%" y="1567.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (881 samples, 0.31%)</title><rect x="54.6161%" y="1541" width="0.3057%" height="15" fill="rgb(248,193,4)"/><text x="54.8661%" y="1551.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (881 samples, 0.31%)</title><rect x="54.6161%" y="1525" width="0.3057%" height="15" fill="rgb(211,178,46)"/><text x="54.8661%" y="1535.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (881 samples, 0.31%)</title><rect x="54.6161%" y="1509" width="0.3057%" height="15" fill="rgb(224,5,42)"/><text x="54.8661%" y="1519.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (881 samples, 0.31%)</title><rect x="54.6161%" y="1493" width="0.3057%" height="15" fill="rgb(239,176,25)"/><text x="54.8661%" y="1503.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (303 samples, 0.11%)</title><rect x="54.8166%" y="1477" width="0.1051%" height="15" fill="rgb(245,187,50)"/><text x="55.0666%" y="1487.50"></text></g><g><title>log::__private_api_log (303 samples, 0.11%)</title><rect x="54.8166%" y="1461" width="0.1051%" height="15" fill="rgb(248,24,15)"/><text x="55.0666%" y="1471.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (303 samples, 0.11%)</title><rect x="54.8166%" y="1445" width="0.1051%" height="15" fill="rgb(205,166,13)"/><text x="55.0666%" y="1455.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (303 samples, 0.11%)</title><rect x="54.8166%" y="1429" width="0.1051%" height="15" fill="rgb(208,114,23)"/><text x="55.0666%" y="1439.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (303 samples, 0.11%)</title><rect x="54.8166%" y="1413" width="0.1051%" height="15" fill="rgb(239,127,18)"/><text x="55.0666%" y="1423.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (303 samples, 0.11%)</title><rect x="54.8166%" y="1397" width="0.1051%" height="15" fill="rgb(219,154,28)"/><text x="55.0666%" y="1407.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (303 samples, 0.11%)</title><rect x="54.8166%" y="1381" width="0.1051%" height="15" fill="rgb(225,157,23)"/><text x="55.0666%" y="1391.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (303 samples, 0.11%)</title><rect x="54.8166%" y="1365" width="0.1051%" height="15" fill="rgb(219,8,6)"/><text x="55.0666%" y="1375.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (303 samples, 0.11%)</title><rect x="54.8166%" y="1349" width="0.1051%" height="15" fill="rgb(212,47,6)"/><text x="55.0666%" y="1359.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (166 samples, 0.06%)</title><rect x="54.8641%" y="1333" width="0.0576%" height="15" fill="rgb(224,190,4)"/><text x="55.1141%" y="1343.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (166 samples, 0.06%)</title><rect x="54.8641%" y="1317" width="0.0576%" height="15" fill="rgb(239,183,29)"/><text x="55.1141%" y="1327.50"></text></g><g><title>std::io::Write::write_fmt (166 samples, 0.06%)</title><rect x="54.8641%" y="1301" width="0.0576%" height="15" fill="rgb(213,57,7)"/><text x="55.1141%" y="1311.50"></text></g><g><title>core::fmt::write (166 samples, 0.06%)</title><rect x="54.8641%" y="1285" width="0.0576%" height="15" fill="rgb(216,148,1)"/><text x="55.1141%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (44 samples, 0.02%)</title><rect x="54.9065%" y="1269" width="0.0153%" height="15" fill="rgb(236,182,29)"/><text x="55.1565%" y="1279.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (44 samples, 0.02%)</title><rect x="54.9065%" y="1253" width="0.0153%" height="15" fill="rgb(244,120,48)"/><text x="55.1565%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (32 samples, 0.01%)</title><rect x="54.9224%" y="1525" width="0.0111%" height="15" fill="rgb(206,71,34)"/><text x="55.1724%" y="1535.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (32 samples, 0.01%)</title><rect x="54.9224%" y="1509" width="0.0111%" height="15" fill="rgb(242,32,6)"/><text x="55.1724%" y="1519.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (34 samples, 0.01%)</title><rect x="54.9224%" y="1573" width="0.0118%" height="15" fill="rgb(241,35,3)"/><text x="55.1724%" y="1583.50"></text></g><g><title>std::io::Write::write_fmt (34 samples, 0.01%)</title><rect x="54.9224%" y="1557" width="0.0118%" height="15" fill="rgb(222,62,19)"/><text x="55.1724%" y="1567.50"></text></g><g><title>core::fmt::write (34 samples, 0.01%)</title><rect x="54.9224%" y="1541" width="0.0118%" height="15" fill="rgb(223,110,41)"/><text x="55.1724%" y="1551.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.02%)</title><rect x="54.9568%" y="1477" width="0.0194%" height="15" fill="rgb(208,224,4)"/><text x="55.2068%" y="1487.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (89 samples, 0.03%)</title><rect x="54.9568%" y="1509" width="0.0309%" height="15" fill="rgb(241,137,19)"/><text x="55.2068%" y="1519.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (89 samples, 0.03%)</title><rect x="54.9568%" y="1493" width="0.0309%" height="15" fill="rgb(244,24,17)"/><text x="55.2068%" y="1503.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (215 samples, 0.07%)</title><rect x="54.9224%" y="1717" width="0.0746%" height="15" fill="rgb(245,178,49)"/><text x="55.1724%" y="1727.50"></text></g><g><title>log::__private_api_log (215 samples, 0.07%)</title><rect x="54.9224%" y="1701" width="0.0746%" height="15" fill="rgb(219,160,38)"/><text x="55.1724%" y="1711.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (215 samples, 0.07%)</title><rect x="54.9224%" y="1685" width="0.0746%" height="15" fill="rgb(228,137,14)"/><text x="55.1724%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (215 samples, 0.07%)</title><rect x="54.9224%" y="1669" width="0.0746%" height="15" fill="rgb(237,134,11)"/><text x="55.1724%" y="1679.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (215 samples, 0.07%)</title><rect x="54.9224%" y="1653" width="0.0746%" height="15" fill="rgb(211,126,44)"/><text x="55.1724%" y="1663.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (215 samples, 0.07%)</title><rect x="54.9224%" y="1637" width="0.0746%" height="15" fill="rgb(226,171,33)"/><text x="55.1724%" y="1647.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (215 samples, 0.07%)</title><rect x="54.9224%" y="1621" width="0.0746%" height="15" fill="rgb(253,99,13)"/><text x="55.1724%" y="1631.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (215 samples, 0.07%)</title><rect x="54.9224%" y="1605" width="0.0746%" height="15" fill="rgb(244,48,7)"/><text x="55.1724%" y="1615.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (215 samples, 0.07%)</title><rect x="54.9224%" y="1589" width="0.0746%" height="15" fill="rgb(244,217,54)"/><text x="55.1724%" y="1599.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (116 samples, 0.04%)</title><rect x="54.9568%" y="1573" width="0.0402%" height="15" fill="rgb(224,15,18)"/><text x="55.2068%" y="1583.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (116 samples, 0.04%)</title><rect x="54.9568%" y="1557" width="0.0402%" height="15" fill="rgb(244,99,12)"/><text x="55.2068%" y="1567.50"></text></g><g><title>std::io::Write::write_fmt (116 samples, 0.04%)</title><rect x="54.9568%" y="1541" width="0.0402%" height="15" fill="rgb(233,226,8)"/><text x="55.2068%" y="1551.50"></text></g><g><title>core::fmt::write (116 samples, 0.04%)</title><rect x="54.9568%" y="1525" width="0.0402%" height="15" fill="rgb(229,211,3)"/><text x="55.2068%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (231 samples, 0.08%)</title><rect x="54.9224%" y="1733" width="0.0801%" height="15" fill="rgb(216,140,21)"/><text x="55.1724%" y="1743.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (32 samples, 0.01%)</title><rect x="55.0126%" y="1205" width="0.0111%" height="15" fill="rgb(234,122,30)"/><text x="55.2626%" y="1215.50"></text></g><g><title>core::mem::take (32 samples, 0.01%)</title><rect x="55.0126%" y="1189" width="0.0111%" height="15" fill="rgb(236,25,46)"/><text x="55.2626%" y="1199.50"></text></g><g><title>core::mem::replace (32 samples, 0.01%)</title><rect x="55.0126%" y="1173" width="0.0111%" height="15" fill="rgb(217,52,54)"/><text x="55.2626%" y="1183.50"></text></g><g><title>core::mem::swap (32 samples, 0.01%)</title><rect x="55.0126%" y="1157" width="0.0111%" height="15" fill="rgb(222,29,26)"/><text x="55.2626%" y="1167.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (32 samples, 0.01%)</title><rect x="55.0126%" y="1141" width="0.0111%" height="15" fill="rgb(216,177,29)"/><text x="55.2626%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1637" width="0.0382%" height="15" fill="rgb(247,136,51)"/><text x="55.2526%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (110 samples, 0.04%)</title><rect x="55.0026%" y="1621" width="0.0382%" height="15" fill="rgb(231,47,47)"/><text x="55.2526%" y="1631.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1605" width="0.0382%" height="15" fill="rgb(211,192,36)"/><text x="55.2526%" y="1615.50"></text></g><g><title>tokio::runtime::park::Inner::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1589" width="0.0382%" height="15" fill="rgb(229,156,32)"/><text x="55.2526%" y="1599.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (110 samples, 0.04%)</title><rect x="55.0026%" y="1573" width="0.0382%" height="15" fill="rgb(248,213,20)"/><text x="55.2526%" y="1583.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1557" width="0.0382%" height="15" fill="rgb(217,64,7)"/><text x="55.2526%" y="1567.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1541" width="0.0382%" height="15" fill="rgb(232,142,8)"/><text x="55.2526%" y="1551.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1525" width="0.0382%" height="15" fill="rgb(224,92,44)"/><text x="55.2526%" y="1535.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (110 samples, 0.04%)</title><rect x="55.0026%" y="1509" width="0.0382%" height="15" fill="rgb(214,169,17)"/><text x="55.2526%" y="1519.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1493" width="0.0382%" height="15" fill="rgb(210,59,37)"/><text x="55.2526%" y="1503.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (110 samples, 0.04%)</title><rect x="55.0026%" y="1477" width="0.0382%" height="15" fill="rgb(214,116,48)"/><text x="55.2526%" y="1487.50"></text></g><g><title>tokio::io::driver::Driver::turn (110 samples, 0.04%)</title><rect x="55.0026%" y="1461" width="0.0382%" height="15" fill="rgb(244,191,6)"/><text x="55.2526%" y="1471.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (110 samples, 0.04%)</title><rect x="55.0026%" y="1445" width="0.0382%" height="15" fill="rgb(241,50,52)"/><text x="55.2526%" y="1455.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (110 samples, 0.04%)</title><rect x="55.0026%" y="1429" width="0.0382%" height="15" fill="rgb(236,75,39)"/><text x="55.2526%" y="1439.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (110 samples, 0.04%)</title><rect x="55.0026%" y="1413" width="0.0382%" height="15" fill="rgb(236,99,0)"/><text x="55.2526%" y="1423.50"></text></g><g><title>core::task::wake::Waker::wake (110 samples, 0.04%)</title><rect x="55.0026%" y="1397" width="0.0382%" height="15" fill="rgb(207,202,15)"/><text x="55.2526%" y="1407.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (110 samples, 0.04%)</title><rect x="55.0026%" y="1381" width="0.0382%" height="15" fill="rgb(233,207,14)"/><text x="55.2526%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (110 samples, 0.04%)</title><rect x="55.0026%" y="1365" width="0.0382%" height="15" fill="rgb(226,27,51)"/><text x="55.2526%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (110 samples, 0.04%)</title><rect x="55.0026%" y="1349" width="0.0382%" height="15" fill="rgb(206,104,42)"/><text x="55.2526%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (110 samples, 0.04%)</title><rect x="55.0026%" y="1333" width="0.0382%" height="15" fill="rgb(212,225,4)"/><text x="55.2526%" y="1343.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (110 samples, 0.04%)</title><rect x="55.0026%" y="1317" width="0.0382%" height="15" fill="rgb(233,96,42)"/><text x="55.2526%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (110 samples, 0.04%)</title><rect x="55.0026%" y="1301" width="0.0382%" height="15" fill="rgb(229,21,32)"/><text x="55.2526%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (110 samples, 0.04%)</title><rect x="55.0026%" y="1285" width="0.0382%" height="15" fill="rgb(226,216,24)"/><text x="55.2526%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (110 samples, 0.04%)</title><rect x="55.0026%" y="1269" width="0.0382%" height="15" fill="rgb(221,163,17)"/><text x="55.2526%" y="1279.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (110 samples, 0.04%)</title><rect x="55.0026%" y="1253" width="0.0382%" height="15" fill="rgb(216,216,42)"/><text x="55.2526%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (110 samples, 0.04%)</title><rect x="55.0026%" y="1237" width="0.0382%" height="15" fill="rgb(240,118,7)"/><text x="55.2526%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (81 samples, 0.03%)</title><rect x="55.0126%" y="1221" width="0.0281%" height="15" fill="rgb(221,67,37)"/><text x="55.2626%" y="1231.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::push_back (49 samples, 0.02%)</title><rect x="55.0237%" y="1205" width="0.0170%" height="15" fill="rgb(241,32,44)"/><text x="55.2737%" y="1215.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (58 samples, 0.02%)</title><rect x="55.0480%" y="1237" width="0.0201%" height="15" fill="rgb(235,204,43)"/><text x="55.2980%" y="1247.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (105 samples, 0.04%)</title><rect x="55.0480%" y="1253" width="0.0364%" height="15" fill="rgb(213,116,10)"/><text x="55.2980%" y="1263.50"></text></g><g><title>alloc::vec::from_elem (58 samples, 0.02%)</title><rect x="55.0845%" y="1253" width="0.0201%" height="15" fill="rgb(239,15,48)"/><text x="55.3345%" y="1263.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (58 samples, 0.02%)</title><rect x="55.0845%" y="1237" width="0.0201%" height="15" fill="rgb(207,123,36)"/><text x="55.3345%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (58 samples, 0.02%)</title><rect x="55.0845%" y="1221" width="0.0201%" height="15" fill="rgb(209,103,30)"/><text x="55.3345%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (58 samples, 0.02%)</title><rect x="55.0845%" y="1205" width="0.0201%" height="15" fill="rgb(238,100,19)"/><text x="55.3345%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (58 samples, 0.02%)</title><rect x="55.0845%" y="1189" width="0.0201%" height="15" fill="rgb(244,30,14)"/><text x="55.3345%" y="1199.50"></text></g><g><title>log::__private_api_log (52 samples, 0.02%)</title><rect x="55.1119%" y="1253" width="0.0180%" height="15" fill="rgb(249,174,6)"/><text x="55.3619%" y="1263.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (35 samples, 0.01%)</title><rect x="55.1299%" y="1205" width="0.0121%" height="15" fill="rgb(235,213,41)"/><text x="55.3799%" y="1215.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (35 samples, 0.01%)</title><rect x="55.1299%" y="1189" width="0.0121%" height="15" fill="rgb(213,118,6)"/><text x="55.3799%" y="1199.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (35 samples, 0.01%)</title><rect x="55.1299%" y="1173" width="0.0121%" height="15" fill="rgb(235,44,51)"/><text x="55.3799%" y="1183.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (71 samples, 0.02%)</title><rect x="55.1455%" y="1205" width="0.0246%" height="15" fill="rgb(217,9,53)"/><text x="55.3955%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (35 samples, 0.01%)</title><rect x="55.1580%" y="1189" width="0.0121%" height="15" fill="rgb(237,172,34)"/><text x="55.4080%" y="1199.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (35 samples, 0.01%)</title><rect x="55.1580%" y="1173" width="0.0121%" height="15" fill="rgb(206,206,11)"/><text x="55.4080%" y="1183.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (117 samples, 0.04%)</title><rect x="55.1299%" y="1253" width="0.0406%" height="15" fill="rgb(214,149,29)"/><text x="55.3799%" y="1263.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (117 samples, 0.04%)</title><rect x="55.1299%" y="1237" width="0.0406%" height="15" fill="rgb(208,123,3)"/><text x="55.3799%" y="1247.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (117 samples, 0.04%)</title><rect x="55.1299%" y="1221" width="0.0406%" height="15" fill="rgb(229,126,4)"/><text x="55.3799%" y="1231.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (39 samples, 0.01%)</title><rect x="55.1705%" y="1205" width="0.0135%" height="15" fill="rgb(222,92,36)"/><text x="55.4205%" y="1215.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::write (39 samples, 0.01%)</title><rect x="55.1705%" y="1189" width="0.0135%" height="15" fill="rgb(216,39,41)"/><text x="55.4205%" y="1199.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::try_write_internal (39 samples, 0.01%)</title><rect x="55.1705%" y="1173" width="0.0135%" height="15" fill="rgb(253,127,28)"/><text x="55.4205%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (30 samples, 0.01%)</title><rect x="55.1840%" y="1205" width="0.0104%" height="15" fill="rgb(249,152,51)"/><text x="55.4340%" y="1215.50"></text></g><g><title>&lt;dashmap::lock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.01%)</title><rect x="55.1840%" y="1189" width="0.0104%" height="15" fill="rgb(209,123,42)"/><text x="55.4340%" y="1199.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (112 samples, 0.04%)</title><rect x="55.1705%" y="1253" width="0.0389%" height="15" fill="rgb(241,118,22)"/><text x="55.4205%" y="1263.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (112 samples, 0.04%)</title><rect x="55.1705%" y="1237" width="0.0389%" height="15" fill="rgb(208,25,7)"/><text x="55.4205%" y="1247.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (112 samples, 0.04%)</title><rect x="55.1705%" y="1221" width="0.0389%" height="15" fill="rgb(243,144,39)"/><text x="55.4205%" y="1231.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (75 samples, 0.03%)</title><rect x="55.2094%" y="1205" width="0.0260%" height="15" fill="rgb(250,50,5)"/><text x="55.4594%" y="1215.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (42 samples, 0.01%)</title><rect x="55.2208%" y="1189" width="0.0146%" height="15" fill="rgb(207,67,11)"/><text x="55.4708%" y="1199.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (149 samples, 0.05%)</title><rect x="55.2094%" y="1237" width="0.0517%" height="15" fill="rgb(245,204,40)"/><text x="55.4594%" y="1247.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (149 samples, 0.05%)</title><rect x="55.2094%" y="1221" width="0.0517%" height="15" fill="rgb(238,228,24)"/><text x="55.4594%" y="1231.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (74 samples, 0.03%)</title><rect x="55.2354%" y="1205" width="0.0257%" height="15" fill="rgb(217,116,22)"/><text x="55.4854%" y="1215.50"></text></g><g><title>tunneler::message::header::MessageHeader::deserialize (167 samples, 0.06%)</title><rect x="55.2094%" y="1253" width="0.0579%" height="15" fill="rgb(234,98,12)"/><text x="55.4594%" y="1263.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (700 samples, 0.24%)</title><rect x="55.0407%" y="1269" width="0.2429%" height="15" fill="rgb(242,170,50)"/><text x="55.2907%" y="1279.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (47 samples, 0.02%)</title><rect x="55.2673%" y="1253" width="0.0163%" height="15" fill="rgb(235,7,5)"/><text x="55.5173%" y="1263.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (47 samples, 0.02%)</title><rect x="55.2673%" y="1237" width="0.0163%" height="15" fill="rgb(241,114,28)"/><text x="55.5173%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::inc_num_messages (32 samples, 0.01%)</title><rect x="55.2725%" y="1221" width="0.0111%" height="15" fill="rgb(246,112,42)"/><text x="55.5225%" y="1231.50"></text></g><g><title>core::ptr::read (30 samples, 0.01%)</title><rect x="55.2885%" y="981" width="0.0104%" height="15" fill="rgb(248,228,14)"/><text x="55.5385%" y="991.50"></text></g><g><title>tokio::coop::poll_proceed (40 samples, 0.01%)</title><rect x="55.2874%" y="1125" width="0.0139%" height="15" fill="rgb(208,133,18)"/><text x="55.5374%" y="1135.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (40 samples, 0.01%)</title><rect x="55.2874%" y="1109" width="0.0139%" height="15" fill="rgb(207,35,49)"/><text x="55.5374%" y="1119.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (40 samples, 0.01%)</title><rect x="55.2874%" y="1093" width="0.0139%" height="15" fill="rgb(205,68,36)"/><text x="55.5374%" y="1103.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (40 samples, 0.01%)</title><rect x="55.2874%" y="1077" width="0.0139%" height="15" fill="rgb(245,62,40)"/><text x="55.5374%" y="1087.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (40 samples, 0.01%)</title><rect x="55.2874%" y="1061" width="0.0139%" height="15" fill="rgb(228,27,24)"/><text x="55.5374%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (40 samples, 0.01%)</title><rect x="55.2874%" y="1045" width="0.0139%" height="15" fill="rgb(253,19,12)"/><text x="55.5374%" y="1055.50"></text></g><g><title>core::mem::replace (40 samples, 0.01%)</title><rect x="55.2874%" y="1029" width="0.0139%" height="15" fill="rgb(232,28,20)"/><text x="55.5374%" y="1039.50"></text></g><g><title>core::mem::swap (40 samples, 0.01%)</title><rect x="55.2874%" y="1013" width="0.0139%" height="15" fill="rgb(218,35,51)"/><text x="55.5374%" y="1023.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (40 samples, 0.01%)</title><rect x="55.2874%" y="997" width="0.0139%" height="15" fill="rgb(212,90,40)"/><text x="55.5374%" y="1007.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (119 samples, 0.04%)</title><rect x="55.2836%" y="1269" width="0.0413%" height="15" fill="rgb(220,172,12)"/><text x="55.5336%" y="1279.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (119 samples, 0.04%)</title><rect x="55.2836%" y="1253" width="0.0413%" height="15" fill="rgb(226,159,20)"/><text x="55.5336%" y="1263.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (119 samples, 0.04%)</title><rect x="55.2836%" y="1237" width="0.0413%" height="15" fill="rgb(234,205,16)"/><text x="55.5336%" y="1247.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (119 samples, 0.04%)</title><rect x="55.2836%" y="1221" width="0.0413%" height="15" fill="rgb(207,9,39)"/><text x="55.5336%" y="1231.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (119 samples, 0.04%)</title><rect x="55.2836%" y="1205" width="0.0413%" height="15" fill="rgb(249,143,15)"/><text x="55.5336%" y="1215.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (119 samples, 0.04%)</title><rect x="55.2836%" y="1189" width="0.0413%" height="15" fill="rgb(253,133,29)"/><text x="55.5336%" y="1199.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (119 samples, 0.04%)</title><rect x="55.2836%" y="1173" width="0.0413%" height="15" fill="rgb(221,187,0)"/><text x="55.5336%" y="1183.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (119 samples, 0.04%)</title><rect x="55.2836%" y="1157" width="0.0413%" height="15" fill="rgb(205,204,26)"/><text x="55.5336%" y="1167.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (119 samples, 0.04%)</title><rect x="55.2836%" y="1141" width="0.0413%" height="15" fill="rgb(224,68,54)"/><text x="55.5336%" y="1151.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (68 samples, 0.02%)</title><rect x="55.3013%" y="1125" width="0.0236%" height="15" fill="rgb(209,67,4)"/><text x="55.5513%" y="1135.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (48 samples, 0.02%)</title><rect x="55.3083%" y="1109" width="0.0167%" height="15" fill="rgb(228,229,18)"/><text x="55.5583%" y="1119.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (48 samples, 0.02%)</title><rect x="55.3083%" y="1093" width="0.0167%" height="15" fill="rgb(231,89,13)"/><text x="55.5583%" y="1103.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (32 samples, 0.01%)</title><rect x="55.3138%" y="1077" width="0.0111%" height="15" fill="rgb(210,182,18)"/><text x="55.5638%" y="1087.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (32 samples, 0.01%)</title><rect x="55.3138%" y="1061" width="0.0111%" height="15" fill="rgb(240,105,2)"/><text x="55.5638%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 0.02%)</title><rect x="55.3249%" y="1253" width="0.0160%" height="15" fill="rgb(207,170,50)"/><text x="55.5749%" y="1263.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (46 samples, 0.02%)</title><rect x="55.3249%" y="1237" width="0.0160%" height="15" fill="rgb(232,133,24)"/><text x="55.5749%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 0.02%)</title><rect x="55.3249%" y="1221" width="0.0160%" height="15" fill="rgb(235,166,27)"/><text x="55.5749%" y="1231.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (46 samples, 0.02%)</title><rect x="55.3249%" y="1205" width="0.0160%" height="15" fill="rgb(209,19,13)"/><text x="55.5749%" y="1215.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (46 samples, 0.02%)</title><rect x="55.3249%" y="1189" width="0.0160%" height="15" fill="rgb(226,79,39)"/><text x="55.5749%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (46 samples, 0.02%)</title><rect x="55.3249%" y="1173" width="0.0160%" height="15" fill="rgb(222,163,10)"/><text x="55.5749%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (46 samples, 0.02%)</title><rect x="55.3249%" y="1157" width="0.0160%" height="15" fill="rgb(214,44,19)"/><text x="55.5749%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (46 samples, 0.02%)</title><rect x="55.3249%" y="1141" width="0.0160%" height="15" fill="rgb(210,217,13)"/><text x="55.5749%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (46 samples, 0.02%)</title><rect x="55.3249%" y="1125" width="0.0160%" height="15" fill="rgb(237,61,54)"/><text x="55.5749%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (46 samples, 0.02%)</title><rect x="55.3249%" y="1109" width="0.0160%" height="15" fill="rgb(226,184,24)"/><text x="55.5749%" y="1119.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,240 samples, 0.43%)</title><rect x="54.9224%" y="1765" width="0.4302%" height="15" fill="rgb(223,226,4)"/><text x="55.1724%" y="1775.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,240 samples, 0.43%)</title><rect x="54.9224%" y="1749" width="0.4302%" height="15" fill="rgb(210,26,41)"/><text x="55.1724%" y="1759.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,009 samples, 0.35%)</title><rect x="55.0026%" y="1733" width="0.3501%" height="15" fill="rgb(220,221,6)"/><text x="55.2526%" y="1743.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1,009 samples, 0.35%)</title><rect x="55.0026%" y="1717" width="0.3501%" height="15" fill="rgb(225,89,49)"/><text x="55.2526%" y="1727.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1,009 samples, 0.35%)</title><rect x="55.0026%" y="1701" width="0.3501%" height="15" fill="rgb(218,70,45)"/><text x="55.2526%" y="1711.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,009 samples, 0.35%)</title><rect x="55.0026%" y="1685" width="0.3501%" height="15" fill="rgb(238,166,21)"/><text x="55.2526%" y="1695.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,009 samples, 0.35%)</title><rect x="55.0026%" y="1669" width="0.3501%" height="15" fill="rgb(224,141,44)"/><text x="55.2526%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,009 samples, 0.35%)</title><rect x="55.0026%" y="1653" width="0.3501%" height="15" fill="rgb(230,12,49)"/><text x="55.2526%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (899 samples, 0.31%)</title><rect x="55.0407%" y="1637" width="0.3119%" height="15" fill="rgb(212,174,12)"/><text x="55.2907%" y="1647.50"></text></g><g><title>tokio::coop::budget (899 samples, 0.31%)</title><rect x="55.0407%" y="1621" width="0.3119%" height="15" fill="rgb(246,67,9)"/><text x="55.2907%" y="1631.50"></text></g><g><title>tokio::coop::with_budget (899 samples, 0.31%)</title><rect x="55.0407%" y="1605" width="0.3119%" height="15" fill="rgb(239,35,23)"/><text x="55.2907%" y="1615.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (899 samples, 0.31%)</title><rect x="55.0407%" y="1589" width="0.3119%" height="15" fill="rgb(211,167,0)"/><text x="55.2907%" y="1599.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (899 samples, 0.31%)</title><rect x="55.0407%" y="1573" width="0.3119%" height="15" fill="rgb(225,119,45)"/><text x="55.2907%" y="1583.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (899 samples, 0.31%)</title><rect x="55.0407%" y="1557" width="0.3119%" height="15" fill="rgb(210,162,6)"/><text x="55.2907%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (899 samples, 0.31%)</title><rect x="55.0407%" y="1541" width="0.3119%" height="15" fill="rgb(208,118,35)"/><text x="55.2907%" y="1551.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (899 samples, 0.31%)</title><rect x="55.0407%" y="1525" width="0.3119%" height="15" fill="rgb(239,4,53)"/><text x="55.2907%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (899 samples, 0.31%)</title><rect x="55.0407%" y="1509" width="0.3119%" height="15" fill="rgb(213,130,21)"/><text x="55.2907%" y="1519.50"></text></g><g><title>tokio::runtime::task::raw::poll (899 samples, 0.31%)</title><rect x="55.0407%" y="1493" width="0.3119%" height="15" fill="rgb(235,148,0)"/><text x="55.2907%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (899 samples, 0.31%)</title><rect x="55.0407%" y="1477" width="0.3119%" height="15" fill="rgb(244,224,18)"/><text x="55.2907%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (899 samples, 0.31%)</title><rect x="55.0407%" y="1461" width="0.3119%" height="15" fill="rgb(211,214,4)"/><text x="55.2907%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (899 samples, 0.31%)</title><rect x="55.0407%" y="1445" width="0.3119%" height="15" fill="rgb(206,119,25)"/><text x="55.2907%" y="1455.50"></text></g><g><title>std::panic::catch_unwind (899 samples, 0.31%)</title><rect x="55.0407%" y="1429" width="0.3119%" height="15" fill="rgb(243,93,47)"/><text x="55.2907%" y="1439.50"></text></g><g><title>std::panicking::try (899 samples, 0.31%)</title><rect x="55.0407%" y="1413" width="0.3119%" height="15" fill="rgb(224,194,6)"/><text x="55.2907%" y="1423.50"></text></g><g><title>__rust_try (899 samples, 0.31%)</title><rect x="55.0407%" y="1397" width="0.3119%" height="15" fill="rgb(243,229,6)"/><text x="55.2907%" y="1407.50"></text></g><g><title>std::panicking::try::do_call (899 samples, 0.31%)</title><rect x="55.0407%" y="1381" width="0.3119%" height="15" fill="rgb(207,23,50)"/><text x="55.2907%" y="1391.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (899 samples, 0.31%)</title><rect x="55.0407%" y="1365" width="0.3119%" height="15" fill="rgb(253,192,32)"/><text x="55.2907%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (899 samples, 0.31%)</title><rect x="55.0407%" y="1349" width="0.3119%" height="15" fill="rgb(213,21,6)"/><text x="55.2907%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (899 samples, 0.31%)</title><rect x="55.0407%" y="1333" width="0.3119%" height="15" fill="rgb(243,151,13)"/><text x="55.2907%" y="1343.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (899 samples, 0.31%)</title><rect x="55.0407%" y="1317" width="0.3119%" height="15" fill="rgb(233,165,41)"/><text x="55.2907%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (899 samples, 0.31%)</title><rect x="55.0407%" y="1301" width="0.3119%" height="15" fill="rgb(246,176,45)"/><text x="55.2907%" y="1311.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (899 samples, 0.31%)</title><rect x="55.0407%" y="1285" width="0.3119%" height="15" fill="rgb(217,170,52)"/><text x="55.2907%" y="1295.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (80 samples, 0.03%)</title><rect x="55.3249%" y="1269" width="0.0278%" height="15" fill="rgb(214,203,54)"/><text x="55.5749%" y="1279.50"></text></g><g><title>log::__private_api_log (34 samples, 0.01%)</title><rect x="55.3409%" y="1253" width="0.0118%" height="15" fill="rgb(248,215,49)"/><text x="55.5909%" y="1263.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (34 samples, 0.01%)</title><rect x="55.3409%" y="1237" width="0.0118%" height="15" fill="rgb(208,46,10)"/><text x="55.5909%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (34 samples, 0.01%)</title><rect x="55.3409%" y="1221" width="0.0118%" height="15" fill="rgb(254,5,31)"/><text x="55.5909%" y="1231.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (34 samples, 0.01%)</title><rect x="55.3409%" y="1205" width="0.0118%" height="15" fill="rgb(222,104,33)"/><text x="55.5909%" y="1215.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (34 samples, 0.01%)</title><rect x="55.3409%" y="1189" width="0.0118%" height="15" fill="rgb(248,49,16)"/><text x="55.5909%" y="1199.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (34 samples, 0.01%)</title><rect x="55.3409%" y="1173" width="0.0118%" height="15" fill="rgb(232,198,41)"/><text x="55.5909%" y="1183.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (34 samples, 0.01%)</title><rect x="55.3409%" y="1157" width="0.0118%" height="15" fill="rgb(214,125,3)"/><text x="55.5909%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (34 samples, 0.01%)</title><rect x="55.3409%" y="1141" width="0.0118%" height="15" fill="rgb(229,220,28)"/><text x="55.5909%" y="1151.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 0.02%)</title><rect x="55.3527%" y="1333" width="0.0177%" height="15" fill="rgb(222,64,37)"/><text x="55.6027%" y="1343.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (51 samples, 0.02%)</title><rect x="55.3527%" y="1317" width="0.0177%" height="15" fill="rgb(249,184,13)"/><text x="55.6027%" y="1327.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (47 samples, 0.02%)</title><rect x="55.3704%" y="1253" width="0.0163%" height="15" fill="rgb(252,176,6)"/><text x="55.6204%" y="1263.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (75 samples, 0.03%)</title><rect x="55.3704%" y="1333" width="0.0260%" height="15" fill="rgb(228,153,7)"/><text x="55.6204%" y="1343.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (75 samples, 0.03%)</title><rect x="55.3704%" y="1317" width="0.0260%" height="15" fill="rgb(242,193,5)"/><text x="55.6204%" y="1327.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (75 samples, 0.03%)</title><rect x="55.3704%" y="1301" width="0.0260%" height="15" fill="rgb(232,140,9)"/><text x="55.6204%" y="1311.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (75 samples, 0.03%)</title><rect x="55.3704%" y="1285" width="0.0260%" height="15" fill="rgb(213,222,16)"/><text x="55.6204%" y="1295.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (75 samples, 0.03%)</title><rect x="55.3704%" y="1269" width="0.0260%" height="15" fill="rgb(222,75,50)"/><text x="55.6204%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (99 samples, 0.03%)</title><rect x="55.3964%" y="1253" width="0.0343%" height="15" fill="rgb(205,180,2)"/><text x="55.6464%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.03%)</title><rect x="55.3964%" y="1237" width="0.0343%" height="15" fill="rgb(216,34,7)"/><text x="55.6464%" y="1247.50"></text></g><g><title>alloc::alloc::alloc_zeroed (99 samples, 0.03%)</title><rect x="55.3964%" y="1221" width="0.0343%" height="15" fill="rgb(253,16,32)"/><text x="55.6464%" y="1231.50"></text></g><g><title>__libc_calloc (99 samples, 0.03%)</title><rect x="55.3964%" y="1205" width="0.0343%" height="15" fill="rgb(208,97,28)"/><text x="55.6464%" y="1215.50"></text></g><g><title>_int_malloc (99 samples, 0.03%)</title><rect x="55.3964%" y="1189" width="0.0343%" height="15" fill="rgb(225,92,11)"/><text x="55.6464%" y="1199.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (35 samples, 0.01%)</title><rect x="55.4335%" y="1221" width="0.0121%" height="15" fill="rgb(243,38,12)"/><text x="55.6835%" y="1231.50"></text></g><g><title>alloc::vec::from_elem (168 samples, 0.06%)</title><rect x="55.3964%" y="1333" width="0.0583%" height="15" fill="rgb(208,139,16)"/><text x="55.6464%" y="1343.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (168 samples, 0.06%)</title><rect x="55.3964%" y="1317" width="0.0583%" height="15" fill="rgb(227,24,9)"/><text x="55.6464%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (168 samples, 0.06%)</title><rect x="55.3964%" y="1301" width="0.0583%" height="15" fill="rgb(206,62,11)"/><text x="55.6464%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (168 samples, 0.06%)</title><rect x="55.3964%" y="1285" width="0.0583%" height="15" fill="rgb(228,134,27)"/><text x="55.6464%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (168 samples, 0.06%)</title><rect x="55.3964%" y="1269" width="0.0583%" height="15" fill="rgb(205,55,33)"/><text x="55.6464%" y="1279.50"></text></g><g><title>core::alloc::layout::Layout::array (69 samples, 0.02%)</title><rect x="55.4307%" y="1253" width="0.0239%" height="15" fill="rgb(243,75,43)"/><text x="55.6807%" y="1263.50"></text></g><g><title>core::alloc::layout::Layout::repeat (69 samples, 0.02%)</title><rect x="55.4307%" y="1237" width="0.0239%" height="15" fill="rgb(223,27,42)"/><text x="55.6807%" y="1247.50"></text></g><g><title>env_logger::Logger::matches (40 samples, 0.01%)</title><rect x="55.4554%" y="1301" width="0.0139%" height="15" fill="rgb(232,189,33)"/><text x="55.7054%" y="1311.50"></text></g><g><title>env_logger::filter::Filter::matches (40 samples, 0.01%)</title><rect x="55.4554%" y="1285" width="0.0139%" height="15" fill="rgb(210,9,39)"/><text x="55.7054%" y="1295.50"></text></g><g><title>env_logger::filter::Filter::enabled (40 samples, 0.01%)</title><rect x="55.4554%" y="1269" width="0.0139%" height="15" fill="rgb(242,85,26)"/><text x="55.7054%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.01%)</title><rect x="55.4554%" y="1253" width="0.0139%" height="15" fill="rgb(248,44,4)"/><text x="55.7054%" y="1263.50"></text></g><g><title>log::__private_api_log (94 samples, 0.03%)</title><rect x="55.4554%" y="1333" width="0.0326%" height="15" fill="rgb(250,96,46)"/><text x="55.7054%" y="1343.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (94 samples, 0.03%)</title><rect x="55.4554%" y="1317" width="0.0326%" height="15" fill="rgb(229,116,26)"/><text x="55.7054%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (54 samples, 0.02%)</title><rect x="55.4692%" y="1301" width="0.0187%" height="15" fill="rgb(246,94,34)"/><text x="55.7192%" y="1311.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (54 samples, 0.02%)</title><rect x="55.4692%" y="1285" width="0.0187%" height="15" fill="rgb(251,73,21)"/><text x="55.7192%" y="1295.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (45 samples, 0.02%)</title><rect x="55.4880%" y="1285" width="0.0156%" height="15" fill="rgb(254,121,25)"/><text x="55.7380%" y="1295.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (45 samples, 0.02%)</title><rect x="55.4880%" y="1269" width="0.0156%" height="15" fill="rgb(215,161,49)"/><text x="55.7380%" y="1279.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (45 samples, 0.02%)</title><rect x="55.4880%" y="1253" width="0.0156%" height="15" fill="rgb(221,43,13)"/><text x="55.7380%" y="1263.50"></text></g><g><title>core::hash::Hasher::write_u32 (45 samples, 0.02%)</title><rect x="55.4880%" y="1237" width="0.0156%" height="15" fill="rgb(249,5,37)"/><text x="55.7380%" y="1247.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.02%)</title><rect x="55.4880%" y="1221" width="0.0156%" height="15" fill="rgb(226,25,44)"/><text x="55.7380%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (45 samples, 0.02%)</title><rect x="55.4880%" y="1205" width="0.0156%" height="15" fill="rgb(238,189,16)"/><text x="55.7380%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (45 samples, 0.02%)</title><rect x="55.4880%" y="1189" width="0.0156%" height="15" fill="rgb(251,186,8)"/><text x="55.7380%" y="1199.50"></text></g><g><title>core::hash::sip::u8to64_le (45 samples, 0.02%)</title><rect x="55.4880%" y="1173" width="0.0156%" height="15" fill="rgb(254,34,31)"/><text x="55.7380%" y="1183.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (34 samples, 0.01%)</title><rect x="55.4918%" y="1157" width="0.0118%" height="15" fill="rgb(225,215,27)"/><text x="55.7418%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.01%)</title><rect x="55.5074%" y="1221" width="0.0104%" height="15" fill="rgb(221,192,48)"/><text x="55.7574%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (30 samples, 0.01%)</title><rect x="55.5178%" y="1221" width="0.0104%" height="15" fill="rgb(219,137,20)"/><text x="55.7678%" y="1231.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.02%)</title><rect x="55.5074%" y="1237" width="0.0219%" height="15" fill="rgb(219,84,11)"/><text x="55.7574%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (31 samples, 0.01%)</title><rect x="55.5508%" y="1205" width="0.0108%" height="15" fill="rgb(224,10,23)"/><text x="55.8008%" y="1215.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (217 samples, 0.08%)</title><rect x="55.4880%" y="1333" width="0.0753%" height="15" fill="rgb(248,22,39)"/><text x="55.7380%" y="1343.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (217 samples, 0.08%)</title><rect x="55.4880%" y="1317" width="0.0753%" height="15" fill="rgb(212,154,20)"/><text x="55.7380%" y="1327.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (217 samples, 0.08%)</title><rect x="55.4880%" y="1301" width="0.0753%" height="15" fill="rgb(236,199,50)"/><text x="55.7380%" y="1311.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (172 samples, 0.06%)</title><rect x="55.5036%" y="1285" width="0.0597%" height="15" fill="rgb(211,9,17)"/><text x="55.7536%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (172 samples, 0.06%)</title><rect x="55.5036%" y="1269" width="0.0597%" height="15" fill="rgb(243,216,36)"/><text x="55.7536%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (161 samples, 0.06%)</title><rect x="55.5074%" y="1253" width="0.0559%" height="15" fill="rgb(250,2,10)"/><text x="55.7574%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (94 samples, 0.03%)</title><rect x="55.5307%" y="1237" width="0.0326%" height="15" fill="rgb(226,50,48)"/><text x="55.7807%" y="1247.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (94 samples, 0.03%)</title><rect x="55.5307%" y="1221" width="0.0326%" height="15" fill="rgb(243,81,16)"/><text x="55.7807%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (49 samples, 0.02%)</title><rect x="55.5667%" y="1253" width="0.0170%" height="15" fill="rgb(250,14,2)"/><text x="55.8167%" y="1263.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (76 samples, 0.03%)</title><rect x="55.5633%" y="1333" width="0.0264%" height="15" fill="rgb(233,135,29)"/><text x="55.8133%" y="1343.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (76 samples, 0.03%)</title><rect x="55.5633%" y="1317" width="0.0264%" height="15" fill="rgb(224,64,43)"/><text x="55.8133%" y="1327.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (76 samples, 0.03%)</title><rect x="55.5633%" y="1301" width="0.0264%" height="15" fill="rgb(238,84,13)"/><text x="55.8133%" y="1311.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (73 samples, 0.03%)</title><rect x="55.5643%" y="1285" width="0.0253%" height="15" fill="rgb(253,48,26)"/><text x="55.8143%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (73 samples, 0.03%)</title><rect x="55.5643%" y="1269" width="0.0253%" height="15" fill="rgb(205,223,31)"/><text x="55.8143%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (30 samples, 0.01%)</title><rect x="55.5938%" y="1237" width="0.0104%" height="15" fill="rgb(221,41,32)"/><text x="55.8438%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (68 samples, 0.02%)</title><rect x="55.5896%" y="1269" width="0.0236%" height="15" fill="rgb(213,158,31)"/><text x="55.8396%" y="1279.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (63 samples, 0.02%)</title><rect x="55.5914%" y="1253" width="0.0219%" height="15" fill="rgb(245,126,43)"/><text x="55.8414%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (33 samples, 0.01%)</title><rect x="55.6132%" y="1189" width="0.0114%" height="15" fill="rgb(227,7,22)"/><text x="55.8632%" y="1199.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (33 samples, 0.01%)</title><rect x="55.6132%" y="1173" width="0.0114%" height="15" fill="rgb(252,90,44)"/><text x="55.8632%" y="1183.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (33 samples, 0.01%)</title><rect x="55.6132%" y="1157" width="0.0114%" height="15" fill="rgb(253,91,0)"/><text x="55.8632%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (33 samples, 0.01%)</title><rect x="55.6132%" y="1141" width="0.0114%" height="15" fill="rgb(252,175,49)"/><text x="55.8632%" y="1151.50"></text></g><g><title>core::task::wake::Waker::wake (42 samples, 0.01%)</title><rect x="55.6132%" y="1253" width="0.0146%" height="15" fill="rgb(246,150,1)"/><text x="55.8632%" y="1263.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (42 samples, 0.01%)</title><rect x="55.6132%" y="1237" width="0.0146%" height="15" fill="rgb(241,192,25)"/><text x="55.8632%" y="1247.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (42 samples, 0.01%)</title><rect x="55.6132%" y="1221" width="0.0146%" height="15" fill="rgb(239,187,11)"/><text x="55.8632%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (42 samples, 0.01%)</title><rect x="55.6132%" y="1205" width="0.0146%" height="15" fill="rgb(218,202,51)"/><text x="55.8632%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (808 samples, 0.28%)</title><rect x="55.3527%" y="1349" width="0.2803%" height="15" fill="rgb(225,176,8)"/><text x="55.6027%" y="1359.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (125 samples, 0.04%)</title><rect x="55.5896%" y="1333" width="0.0434%" height="15" fill="rgb(219,122,41)"/><text x="55.8396%" y="1343.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (125 samples, 0.04%)</title><rect x="55.5896%" y="1317" width="0.0434%" height="15" fill="rgb(248,140,20)"/><text x="55.8396%" y="1327.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (125 samples, 0.04%)</title><rect x="55.5896%" y="1301" width="0.0434%" height="15" fill="rgb(245,41,37)"/><text x="55.8396%" y="1311.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (125 samples, 0.04%)</title><rect x="55.5896%" y="1285" width="0.0434%" height="15" fill="rgb(235,82,39)"/><text x="55.8396%" y="1295.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (57 samples, 0.02%)</title><rect x="55.6132%" y="1269" width="0.0198%" height="15" fill="rgb(230,108,42)"/><text x="55.8632%" y="1279.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (39 samples, 0.01%)</title><rect x="55.6382%" y="1205" width="0.0135%" height="15" fill="rgb(215,150,50)"/><text x="55.8882%" y="1215.50"></text></g><g><title>std::io::Write::write_fmt (39 samples, 0.01%)</title><rect x="55.6382%" y="1189" width="0.0135%" height="15" fill="rgb(233,212,5)"/><text x="55.8882%" y="1199.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::Style as core::clone::Clone&gt;::clone (44 samples, 0.02%)</title><rect x="55.6615%" y="1157" width="0.0153%" height="15" fill="rgb(245,80,22)"/><text x="55.9115%" y="1167.50"></text></g><g><title>&lt;termcolor::ColorSpec as core::clone::Clone&gt;::clone (37 samples, 0.01%)</title><rect x="55.6639%" y="1141" width="0.0128%" height="15" fill="rgb(238,129,16)"/><text x="55.9139%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place (33 samples, 0.01%)</title><rect x="55.6767%" y="1157" width="0.0114%" height="15" fill="rgb(240,19,0)"/><text x="55.9267%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (33 samples, 0.01%)</title><rect x="55.6767%" y="1141" width="0.0114%" height="15" fill="rgb(232,42,35)"/><text x="55.9267%" y="1151.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="55.6767%" y="1125" width="0.0114%" height="15" fill="rgb(223,130,24)"/><text x="55.9267%" y="1135.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (32 samples, 0.01%)</title><rect x="55.6923%" y="1109" width="0.0111%" height="15" fill="rgb(237,16,22)"/><text x="55.9423%" y="1119.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (134 samples, 0.05%)</title><rect x="55.6615%" y="1173" width="0.0465%" height="15" fill="rgb(248,192,20)"/><text x="55.9115%" y="1183.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::style (57 samples, 0.02%)</title><rect x="55.6882%" y="1157" width="0.0198%" height="15" fill="rgb(233,167,2)"/><text x="55.9382%" y="1167.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (57 samples, 0.02%)</title><rect x="55.6882%" y="1141" width="0.0198%" height="15" fill="rgb(252,71,44)"/><text x="55.9382%" y="1151.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (57 samples, 0.02%)</title><rect x="55.6882%" y="1125" width="0.0198%" height="15" fill="rgb(238,37,47)"/><text x="55.9382%" y="1135.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (239 samples, 0.08%)</title><rect x="55.6330%" y="1253" width="0.0829%" height="15" fill="rgb(214,202,54)"/><text x="55.8830%" y="1263.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (239 samples, 0.08%)</title><rect x="55.6330%" y="1237" width="0.0829%" height="15" fill="rgb(254,165,40)"/><text x="55.8830%" y="1247.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (239 samples, 0.08%)</title><rect x="55.6330%" y="1221" width="0.0829%" height="15" fill="rgb(246,173,38)"/><text x="55.8830%" y="1231.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (163 samples, 0.06%)</title><rect x="55.6594%" y="1205" width="0.0566%" height="15" fill="rgb(215,3,27)"/><text x="55.9094%" y="1215.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (163 samples, 0.06%)</title><rect x="55.6594%" y="1189" width="0.0566%" height="15" fill="rgb(239,169,51)"/><text x="55.9094%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (41 samples, 0.01%)</title><rect x="55.7159%" y="1141" width="0.0142%" height="15" fill="rgb(212,5,25)"/><text x="55.9659%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.02%)</title><rect x="55.7159%" y="1157" width="0.0187%" height="15" fill="rgb(243,45,17)"/><text x="55.9659%" y="1167.50"></text></g><g><title>try_to_wake_up (68 samples, 0.02%)</title><rect x="55.7565%" y="949" width="0.0236%" height="15" fill="rgb(242,97,9)"/><text x="56.0065%" y="959.50"></text></g><g><title>futex_wake (77 samples, 0.03%)</title><rect x="55.7537%" y="981" width="0.0267%" height="15" fill="rgb(228,71,31)"/><text x="56.0037%" y="991.50"></text></g><g><title>wake_up_q (69 samples, 0.02%)</title><rect x="55.7565%" y="965" width="0.0239%" height="15" fill="rgb(252,184,16)"/><text x="56.0065%" y="975.50"></text></g><g><title>__x64_sys_futex (81 samples, 0.03%)</title><rect x="55.7531%" y="1013" width="0.0281%" height="15" fill="rgb(236,169,46)"/><text x="56.0031%" y="1023.50"></text></g><g><title>do_futex (81 samples, 0.03%)</title><rect x="55.7531%" y="997" width="0.0281%" height="15" fill="rgb(207,17,47)"/><text x="56.0031%" y="1007.50"></text></g><g><title>do_syscall_64 (86 samples, 0.03%)</title><rect x="55.7520%" y="1029" width="0.0298%" height="15" fill="rgb(206,201,28)"/><text x="56.0020%" y="1039.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (88 samples, 0.03%)</title><rect x="55.7517%" y="1045" width="0.0305%" height="15" fill="rgb(224,184,23)"/><text x="56.0017%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_unlock (108 samples, 0.04%)</title><rect x="55.7454%" y="1077" width="0.0375%" height="15" fill="rgb(208,139,48)"/><text x="55.9954%" y="1087.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (106 samples, 0.04%)</title><rect x="55.7461%" y="1061" width="0.0368%" height="15" fill="rgb(208,130,10)"/><text x="55.9961%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (160 samples, 0.06%)</title><rect x="55.7347%" y="1157" width="0.0555%" height="15" fill="rgb(211,213,45)"/><text x="55.9847%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (160 samples, 0.06%)</title><rect x="55.7347%" y="1141" width="0.0555%" height="15" fill="rgb(235,100,30)"/><text x="55.9847%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place (153 samples, 0.05%)</title><rect x="55.7371%" y="1125" width="0.0531%" height="15" fill="rgb(206,144,31)"/><text x="55.9871%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place (148 samples, 0.05%)</title><rect x="55.7388%" y="1109" width="0.0513%" height="15" fill="rgb(224,200,26)"/><text x="55.9888%" y="1119.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.05%)</title><rect x="55.7409%" y="1093" width="0.0493%" height="15" fill="rgb(247,104,53)"/><text x="55.9909%" y="1103.50"></text></g><g><title>deactivate_task (29 samples, 0.01%)</title><rect x="55.8356%" y="933" width="0.0101%" height="15" fill="rgb(220,14,17)"/><text x="56.0856%" y="943.50"></text></g><g><title>futex_wait_queue_me (70 samples, 0.02%)</title><rect x="55.8270%" y="981" width="0.0243%" height="15" fill="rgb(230,140,40)"/><text x="56.0770%" y="991.50"></text></g><g><title>schedule (69 samples, 0.02%)</title><rect x="55.8273%" y="965" width="0.0239%" height="15" fill="rgb(229,2,41)"/><text x="56.0773%" y="975.50"></text></g><g><title>__sched_text_start (69 samples, 0.02%)</title><rect x="55.8273%" y="949" width="0.0239%" height="15" fill="rgb(232,89,16)"/><text x="56.0773%" y="959.50"></text></g><g><title>do_futex (80 samples, 0.03%)</title><rect x="55.8259%" y="1013" width="0.0278%" height="15" fill="rgb(247,59,52)"/><text x="56.0759%" y="1023.50"></text></g><g><title>futex_wait (78 samples, 0.03%)</title><rect x="55.8266%" y="997" width="0.0271%" height="15" fill="rgb(226,110,21)"/><text x="56.0766%" y="1007.50"></text></g><g><title>__x64_sys_futex (82 samples, 0.03%)</title><rect x="55.8256%" y="1029" width="0.0285%" height="15" fill="rgb(224,176,43)"/><text x="56.0756%" y="1039.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (86 samples, 0.03%)</title><rect x="55.8249%" y="1061" width="0.0298%" height="15" fill="rgb(221,73,6)"/><text x="56.0749%" y="1071.50"></text></g><g><title>do_syscall_64 (86 samples, 0.03%)</title><rect x="55.8249%" y="1045" width="0.0298%" height="15" fill="rgb(232,78,19)"/><text x="56.0749%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_lock (109 samples, 0.04%)</title><rect x="55.8179%" y="1093" width="0.0378%" height="15" fill="rgb(233,112,48)"/><text x="56.0679%" y="1103.50"></text></g><g><title>__lll_lock_wait (95 samples, 0.03%)</title><rect x="55.8228%" y="1077" width="0.0330%" height="15" fill="rgb(243,131,47)"/><text x="56.0728%" y="1087.50"></text></g><g><title>termcolor::IoStandardStream::lock (155 samples, 0.05%)</title><rect x="55.8054%" y="1157" width="0.0538%" height="15" fill="rgb(226,51,1)"/><text x="56.0554%" y="1167.50"></text></g><g><title>std::io::stdio::Stderr::lock (143 samples, 0.05%)</title><rect x="55.8096%" y="1141" width="0.0496%" height="15" fill="rgb(247,58,7)"/><text x="56.0596%" y="1151.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (119 samples, 0.04%)</title><rect x="55.8179%" y="1125" width="0.0413%" height="15" fill="rgb(209,7,32)"/><text x="56.0679%" y="1135.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (119 samples, 0.04%)</title><rect x="55.8179%" y="1109" width="0.0413%" height="15" fill="rgb(209,39,41)"/><text x="56.0679%" y="1119.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1765" width="0.5079%" height="15" fill="rgb(226,182,46)"/><text x="55.6027%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1749" width="0.5079%" height="15" fill="rgb(230,219,10)"/><text x="55.6027%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1733" width="0.5079%" height="15" fill="rgb(227,175,30)"/><text x="55.6027%" y="1743.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1717" width="0.5079%" height="15" fill="rgb(217,2,50)"/><text x="55.6027%" y="1727.50"></text></g><g><title>tokio::coop::budget (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1701" width="0.5079%" height="15" fill="rgb(229,160,0)"/><text x="55.6027%" y="1711.50"></text></g><g><title>tokio::coop::with_budget (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1685" width="0.5079%" height="15" fill="rgb(207,78,37)"/><text x="55.6027%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1669" width="0.5079%" height="15" fill="rgb(225,57,0)"/><text x="55.6027%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1653" width="0.5079%" height="15" fill="rgb(232,154,2)"/><text x="55.6027%" y="1663.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1637" width="0.5079%" height="15" fill="rgb(241,212,25)"/><text x="55.6027%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1621" width="0.5079%" height="15" fill="rgb(226,69,20)"/><text x="55.6027%" y="1631.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1605" width="0.5079%" height="15" fill="rgb(247,184,54)"/><text x="55.6027%" y="1615.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1589" width="0.5079%" height="15" fill="rgb(210,145,0)"/><text x="55.6027%" y="1599.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1573" width="0.5079%" height="15" fill="rgb(253,82,12)"/><text x="55.6027%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1557" width="0.5079%" height="15" fill="rgb(245,42,11)"/><text x="55.6027%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1541" width="0.5079%" height="15" fill="rgb(219,147,32)"/><text x="55.6027%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1525" width="0.5079%" height="15" fill="rgb(246,12,7)"/><text x="55.6027%" y="1535.50"></text></g><g><title>std::panic::catch_unwind (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1509" width="0.5079%" height="15" fill="rgb(243,50,9)"/><text x="55.6027%" y="1519.50"></text></g><g><title>std::panicking::try (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1493" width="0.5079%" height="15" fill="rgb(219,149,6)"/><text x="55.6027%" y="1503.50"></text></g><g><title>__rust_try (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1477" width="0.5079%" height="15" fill="rgb(241,51,42)"/><text x="55.6027%" y="1487.50"></text></g><g><title>std::panicking::try::do_call (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1461" width="0.5079%" height="15" fill="rgb(226,128,27)"/><text x="55.6027%" y="1471.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1445" width="0.5079%" height="15" fill="rgb(244,144,4)"/><text x="55.6027%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1429" width="0.5079%" height="15" fill="rgb(221,4,13)"/><text x="55.6027%" y="1439.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1413" width="0.5079%" height="15" fill="rgb(208,170,28)"/><text x="55.6027%" y="1423.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1397" width="0.5079%" height="15" fill="rgb(226,131,13)"/><text x="55.6027%" y="1407.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1381" width="0.5079%" height="15" fill="rgb(215,72,41)"/><text x="55.6027%" y="1391.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,464 samples, 0.51%)</title><rect x="55.3527%" y="1365" width="0.5079%" height="15" fill="rgb(243,108,20)"/><text x="55.6027%" y="1375.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (656 samples, 0.23%)</title><rect x="55.6330%" y="1349" width="0.2276%" height="15" fill="rgb(230,189,17)"/><text x="55.8830%" y="1359.50"></text></g><g><title>log::__private_api_log (656 samples, 0.23%)</title><rect x="55.6330%" y="1333" width="0.2276%" height="15" fill="rgb(220,50,17)"/><text x="55.8830%" y="1343.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (656 samples, 0.23%)</title><rect x="55.6330%" y="1317" width="0.2276%" height="15" fill="rgb(248,152,48)"/><text x="55.8830%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (656 samples, 0.23%)</title><rect x="55.6330%" y="1301" width="0.2276%" height="15" fill="rgb(244,91,11)"/><text x="55.8830%" y="1311.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (656 samples, 0.23%)</title><rect x="55.6330%" y="1285" width="0.2276%" height="15" fill="rgb(220,157,5)"/><text x="55.8830%" y="1295.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (656 samples, 0.23%)</title><rect x="55.6330%" y="1269" width="0.2276%" height="15" fill="rgb(253,137,8)"/><text x="55.8830%" y="1279.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (417 samples, 0.14%)</title><rect x="55.7159%" y="1253" width="0.1447%" height="15" fill="rgb(217,137,51)"/><text x="55.9659%" y="1263.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (417 samples, 0.14%)</title><rect x="55.7159%" y="1237" width="0.1447%" height="15" fill="rgb(218,209,53)"/><text x="55.9659%" y="1247.50"></text></g><g><title>env_logger::fmt::Formatter::print (417 samples, 0.14%)</title><rect x="55.7159%" y="1221" width="0.1447%" height="15" fill="rgb(249,137,25)"/><text x="55.9659%" y="1231.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (417 samples, 0.14%)</title><rect x="55.7159%" y="1205" width="0.1447%" height="15" fill="rgb(239,155,26)"/><text x="55.9659%" y="1215.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (417 samples, 0.14%)</title><rect x="55.7159%" y="1189" width="0.1447%" height="15" fill="rgb(227,85,46)"/><text x="55.9659%" y="1199.50"></text></g><g><title>termcolor::BufferWriter::print (417 samples, 0.14%)</title><rect x="55.7159%" y="1173" width="0.1447%" height="15" fill="rgb(251,107,43)"/><text x="55.9659%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (69 samples, 0.02%)</title><rect x="55.8606%" y="1413" width="0.0239%" height="15" fill="rgb(234,170,33)"/><text x="56.1106%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (69 samples, 0.02%)</title><rect x="55.8606%" y="1397" width="0.0239%" height="15" fill="rgb(206,29,35)"/><text x="56.1106%" y="1407.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (69 samples, 0.02%)</title><rect x="55.8606%" y="1381" width="0.0239%" height="15" fill="rgb(227,138,25)"/><text x="56.1106%" y="1391.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (69 samples, 0.02%)</title><rect x="55.8606%" y="1365" width="0.0239%" height="15" fill="rgb(249,131,35)"/><text x="56.1106%" y="1375.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (69 samples, 0.02%)</title><rect x="55.8606%" y="1349" width="0.0239%" height="15" fill="rgb(239,6,40)"/><text x="56.1106%" y="1359.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (69 samples, 0.02%)</title><rect x="55.8606%" y="1333" width="0.0239%" height="15" fill="rgb(246,136,47)"/><text x="56.1106%" y="1343.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (69 samples, 0.02%)</title><rect x="55.8606%" y="1317" width="0.0239%" height="15" fill="rgb(253,58,26)"/><text x="56.1106%" y="1327.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (53 samples, 0.02%)</title><rect x="55.8662%" y="1301" width="0.0184%" height="15" fill="rgb(237,141,10)"/><text x="56.1162%" y="1311.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (53 samples, 0.02%)</title><rect x="55.8662%" y="1285" width="0.0184%" height="15" fill="rgb(234,156,12)"/><text x="56.1162%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (39 samples, 0.01%)</title><rect x="55.8898%" y="1173" width="0.0135%" height="15" fill="rgb(243,224,36)"/><text x="56.1398%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (96 samples, 0.03%)</title><rect x="55.8845%" y="1189" width="0.0333%" height="15" fill="rgb(205,229,51)"/><text x="56.1345%" y="1199.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (42 samples, 0.01%)</title><rect x="55.9033%" y="1173" width="0.0146%" height="15" fill="rgb(223,189,4)"/><text x="56.1533%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (149 samples, 0.05%)</title><rect x="55.8845%" y="1205" width="0.0517%" height="15" fill="rgb(249,167,54)"/><text x="56.1345%" y="1215.50"></text></g><g><title>core::slice::raw::from_raw_parts (53 samples, 0.02%)</title><rect x="55.9179%" y="1189" width="0.0184%" height="15" fill="rgb(218,34,28)"/><text x="56.1679%" y="1199.50"></text></g><g><title>core::ptr::slice_from_raw_parts (36 samples, 0.01%)</title><rect x="55.9238%" y="1173" width="0.0125%" height="15" fill="rgb(232,109,42)"/><text x="56.1738%" y="1183.50"></text></g><g><title>core::ops::function::FnOnce::call_once (29 samples, 0.01%)</title><rect x="55.9536%" y="1189" width="0.0101%" height="15" fill="rgb(248,214,46)"/><text x="56.2036%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (81 samples, 0.03%)</title><rect x="55.9362%" y="1205" width="0.0281%" height="15" fill="rgb(244,216,40)"/><text x="56.1862%" y="1215.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (34 samples, 0.01%)</title><rect x="56.0004%" y="1157" width="0.0118%" height="15" fill="rgb(231,226,31)"/><text x="56.2504%" y="1167.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (79 samples, 0.03%)</title><rect x="55.9900%" y="1173" width="0.0274%" height="15" fill="rgb(238,38,43)"/><text x="56.2400%" y="1183.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (150 samples, 0.05%)</title><rect x="55.9748%" y="1189" width="0.0520%" height="15" fill="rgb(208,88,43)"/><text x="56.2248%" y="1199.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (411 samples, 0.14%)</title><rect x="55.8845%" y="1221" width="0.1426%" height="15" fill="rgb(205,136,37)"/><text x="56.1345%" y="1231.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (181 samples, 0.06%)</title><rect x="55.9643%" y="1205" width="0.0628%" height="15" fill="rgb(237,34,14)"/><text x="56.2143%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.01%)</title><rect x="56.0667%" y="1125" width="0.0121%" height="15" fill="rgb(236,193,44)"/><text x="56.3167%" y="1135.50"></text></g><g><title>core::ptr::read (66 samples, 0.02%)</title><rect x="56.0577%" y="1141" width="0.0229%" height="15" fill="rgb(231,48,10)"/><text x="56.3077%" y="1151.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (162 samples, 0.06%)</title><rect x="56.0271%" y="1221" width="0.0562%" height="15" fill="rgb(213,141,34)"/><text x="56.2771%" y="1231.50"></text></g><g><title>core::mem::take (162 samples, 0.06%)</title><rect x="56.0271%" y="1205" width="0.0562%" height="15" fill="rgb(249,130,34)"/><text x="56.2771%" y="1215.50"></text></g><g><title>core::mem::replace (162 samples, 0.06%)</title><rect x="56.0271%" y="1189" width="0.0562%" height="15" fill="rgb(219,42,41)"/><text x="56.2771%" y="1199.50"></text></g><g><title>core::mem::swap (135 samples, 0.05%)</title><rect x="56.0365%" y="1173" width="0.0468%" height="15" fill="rgb(224,100,54)"/><text x="56.2865%" y="1183.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (128 samples, 0.04%)</title><rect x="56.0389%" y="1157" width="0.0444%" height="15" fill="rgb(229,200,27)"/><text x="56.2889%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (29 samples, 0.01%)</title><rect x="56.1024%" y="1189" width="0.0101%" height="15" fill="rgb(217,118,10)"/><text x="56.3524%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (37 samples, 0.01%)</title><rect x="56.1399%" y="1141" width="0.0128%" height="15" fill="rgb(206,22,3)"/><text x="56.3899%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (79 samples, 0.03%)</title><rect x="56.1350%" y="1157" width="0.0274%" height="15" fill="rgb(232,163,46)"/><text x="56.3850%" y="1167.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (65 samples, 0.02%)</title><rect x="56.1625%" y="1157" width="0.0226%" height="15" fill="rgb(206,95,13)"/><text x="56.4125%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::clear (214 samples, 0.07%)</title><rect x="56.1156%" y="1189" width="0.0742%" height="15" fill="rgb(253,154,18)"/><text x="56.3656%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (197 samples, 0.07%)</title><rect x="56.1215%" y="1173" width="0.0684%" height="15" fill="rgb(219,32,23)"/><text x="56.3715%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (36 samples, 0.01%)</title><rect x="56.1899%" y="1189" width="0.0125%" height="15" fill="rgb(230,191,45)"/><text x="56.4399%" y="1199.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (79 samples, 0.03%)</title><rect x="56.2090%" y="1189" width="0.0274%" height="15" fill="rgb(229,64,36)"/><text x="56.4590%" y="1199.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (31 samples, 0.01%)</title><rect x="56.2256%" y="1173" width="0.0108%" height="15" fill="rgb(205,129,25)"/><text x="56.4756%" y="1183.50"></text></g><g><title>__fdget (45 samples, 0.02%)</title><rect x="56.3134%" y="1109" width="0.0156%" height="15" fill="rgb(254,112,7)"/><text x="56.5634%" y="1119.50"></text></g><g><title>__fget_light (44 samples, 0.02%)</title><rect x="56.3137%" y="1093" width="0.0153%" height="15" fill="rgb(226,53,48)"/><text x="56.5637%" y="1103.50"></text></g><g><title>__fget (43 samples, 0.01%)</title><rect x="56.3141%" y="1077" width="0.0149%" height="15" fill="rgb(214,153,38)"/><text x="56.5641%" y="1087.50"></text></g><g><title>tcp_poll (86 samples, 0.03%)</title><rect x="56.5458%" y="1029" width="0.0298%" height="15" fill="rgb(243,101,7)"/><text x="56.7958%" y="1039.50"></text></g><g><title>sock_poll (224 samples, 0.08%)</title><rect x="56.5056%" y="1045" width="0.0777%" height="15" fill="rgb(240,140,22)"/><text x="56.7556%" y="1055.50"></text></g><g><title>ep_item_poll.isra.0 (318 samples, 0.11%)</title><rect x="56.4775%" y="1061" width="0.1103%" height="15" fill="rgb(235,114,2)"/><text x="56.7275%" y="1071.50"></text></g><g><title>ep_send_events_proc (522 samples, 0.18%)</title><rect x="56.4105%" y="1077" width="0.1811%" height="15" fill="rgb(242,59,12)"/><text x="56.6605%" y="1087.50"></text></g><g><title>mutex_lock (51 samples, 0.02%)</title><rect x="56.5916%" y="1077" width="0.0177%" height="15" fill="rgb(252,134,9)"/><text x="56.8416%" y="1087.50"></text></g><g><title>ep_scan_ready_list.constprop.0 (664 samples, 0.23%)</title><rect x="56.3793%" y="1093" width="0.2304%" height="15" fill="rgb(236,4,44)"/><text x="56.6293%" y="1103.50"></text></g><g><title>native_write_msr (94 samples, 0.03%)</title><rect x="56.6891%" y="933" width="0.0326%" height="15" fill="rgb(254,172,41)"/><text x="56.9391%" y="943.50"></text></g><g><title>amd_pmu_disable_all (244 samples, 0.08%)</title><rect x="56.6721%" y="949" width="0.0847%" height="15" fill="rgb(244,63,20)"/><text x="56.9221%" y="959.50"></text></g><g><title>x86_pmu_disable_all (101 samples, 0.04%)</title><rect x="56.7218%" y="933" width="0.0350%" height="15" fill="rgb(250,73,31)"/><text x="56.9718%" y="943.50"></text></g><g><title>native_read_msr (60 samples, 0.02%)</title><rect x="56.7360%" y="917" width="0.0208%" height="15" fill="rgb(241,38,36)"/><text x="56.9860%" y="927.50"></text></g><g><title>perf_pmu_disable.part.0 (259 samples, 0.09%)</title><rect x="56.6687%" y="981" width="0.0899%" height="15" fill="rgb(245,211,2)"/><text x="56.9187%" y="991.50"></text></g><g><title>x86_pmu_disable (249 samples, 0.09%)</title><rect x="56.6721%" y="965" width="0.0864%" height="15" fill="rgb(206,120,28)"/><text x="56.9221%" y="975.50"></text></g><g><title>ctx_sched_out (293 samples, 0.10%)</title><rect x="56.6614%" y="997" width="0.1017%" height="15" fill="rgb(211,59,34)"/><text x="56.9114%" y="1007.50"></text></g><g><title>__perf_event_task_sched_out (313 samples, 0.11%)</title><rect x="56.6548%" y="1029" width="0.1086%" height="15" fill="rgb(233,168,5)"/><text x="56.9048%" y="1039.50"></text></g><g><title>task_ctx_sched_out (294 samples, 0.10%)</title><rect x="56.6614%" y="1013" width="0.1020%" height="15" fill="rgb(234,33,13)"/><text x="56.9114%" y="1023.50"></text></g><g><title>update_load_avg (51 samples, 0.02%)</title><rect x="56.8040%" y="981" width="0.0177%" height="15" fill="rgb(231,150,26)"/><text x="57.0540%" y="991.50"></text></g><g><title>dequeue_entity (128 samples, 0.04%)</title><rect x="56.7793%" y="997" width="0.0444%" height="15" fill="rgb(217,191,4)"/><text x="57.0293%" y="1007.50"></text></g><g><title>dequeue_task_fair (171 samples, 0.06%)</title><rect x="56.7700%" y="1013" width="0.0593%" height="15" fill="rgb(246,198,38)"/><text x="57.0200%" y="1023.50"></text></g><g><title>psi_task_change (160 samples, 0.06%)</title><rect x="56.8300%" y="1013" width="0.0555%" height="15" fill="rgb(245,64,37)"/><text x="57.0800%" y="1023.50"></text></g><g><title>deactivate_task (346 samples, 0.12%)</title><rect x="56.7658%" y="1029" width="0.1200%" height="15" fill="rgb(250,30,36)"/><text x="57.0158%" y="1039.50"></text></g><g><title>__perf_event_task_sched_in (142 samples, 0.05%)</title><rect x="56.9150%" y="1013" width="0.0493%" height="15" fill="rgb(217,86,53)"/><text x="57.1650%" y="1023.50"></text></g><g><title>perf_pmu_enable.part.0 (62 samples, 0.02%)</title><rect x="56.9428%" y="997" width="0.0215%" height="15" fill="rgb(228,157,16)"/><text x="57.1928%" y="1007.50"></text></g><g><title>x86_pmu_enable (62 samples, 0.02%)</title><rect x="56.9428%" y="981" width="0.0215%" height="15" fill="rgb(217,59,31)"/><text x="57.1928%" y="991.50"></text></g><g><title>finish_task_switch (311 samples, 0.11%)</title><rect x="56.8869%" y="1029" width="0.1079%" height="15" fill="rgb(237,138,41)"/><text x="57.1369%" y="1039.50"></text></g><g><title>perf_pmu_enable.part.0 (65 samples, 0.02%)</title><rect x="56.9723%" y="1013" width="0.0226%" height="15" fill="rgb(227,91,49)"/><text x="57.2223%" y="1023.50"></text></g><g><title>pick_next_task_fair (33 samples, 0.01%)</title><rect x="56.9965%" y="1029" width="0.0114%" height="15" fill="rgb(247,21,44)"/><text x="57.2465%" y="1039.50"></text></g><g><title>pick_next_task_idle (52 samples, 0.02%)</title><rect x="57.0080%" y="1029" width="0.0180%" height="15" fill="rgb(219,210,51)"/><text x="57.2580%" y="1039.50"></text></g><g><title>__sched_text_start (1,140 samples, 0.40%)</title><rect x="56.6361%" y="1045" width="0.3955%" height="15" fill="rgb(209,140,6)"/><text x="56.8861%" y="1055.50"></text></g><g><title>schedule_hrtimeout_range (1,192 samples, 0.41%)</title><rect x="56.6218%" y="1093" width="0.4136%" height="15" fill="rgb(221,188,24)"/><text x="56.8718%" y="1103.50"></text></g><g><title>schedule_hrtimeout_range_clock (1,188 samples, 0.41%)</title><rect x="56.6232%" y="1077" width="0.4122%" height="15" fill="rgb(232,154,20)"/><text x="56.8732%" y="1087.50"></text></g><g><title>schedule (1,175 samples, 0.41%)</title><rect x="56.6277%" y="1061" width="0.4077%" height="15" fill="rgb(244,137,50)"/><text x="56.8777%" y="1071.50"></text></g><g><title>ep_poll (2,015 samples, 0.70%)</title><rect x="56.3380%" y="1109" width="0.6991%" height="15" fill="rgb(225,185,43)"/><text x="56.5880%" y="1119.50"></text></g><g><title>do_epoll_wait (2,175 samples, 0.75%)</title><rect x="56.2936%" y="1125" width="0.7546%" height="15" fill="rgb(213,205,38)"/><text x="56.5436%" y="1135.50"></text></g><g><title>__x64_sys_epoll_wait (2,193 samples, 0.76%)</title><rect x="56.2919%" y="1141" width="0.7609%" height="15" fill="rgb(236,73,12)"/><text x="56.5419%" y="1151.50"></text></g><g><title>do_syscall_64 (2,268 samples, 0.79%)</title><rect x="56.2815%" y="1157" width="0.7869%" height="15" fill="rgb(235,219,13)"/><text x="56.5315%" y="1167.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2,305 samples, 0.80%)</title><rect x="56.2697%" y="1173" width="0.7997%" height="15" fill="rgb(218,59,36)"/><text x="56.5197%" y="1183.50"></text></g><g><title>mio::poll::Poll::poll (2,857 samples, 0.99%)</title><rect x="56.0834%" y="1221" width="0.9913%" height="15" fill="rgb(205,110,39)"/><text x="56.3334%" y="1231.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (2,857 samples, 0.99%)</title><rect x="56.0834%" y="1205" width="0.9913%" height="15" fill="rgb(218,206,42)"/><text x="56.3334%" y="1215.50"></text></g><g><title>epoll_wait (2,416 samples, 0.84%)</title><rect x="56.2364%" y="1189" width="0.8382%" height="15" fill="rgb(248,125,24)"/><text x="56.4864%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (38 samples, 0.01%)</title><rect x="57.1090%" y="1205" width="0.0132%" height="15" fill="rgb(242,28,27)"/><text x="57.3590%" y="1215.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (66 samples, 0.02%)</title><rect x="57.1315%" y="1205" width="0.0229%" height="15" fill="rgb(216,228,15)"/><text x="57.3815%" y="1215.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (33 samples, 0.01%)</title><rect x="57.1430%" y="1189" width="0.0114%" height="15" fill="rgb(235,116,46)"/><text x="57.3930%" y="1199.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (37 samples, 0.01%)</title><rect x="57.1846%" y="1189" width="0.0128%" height="15" fill="rgb(224,18,32)"/><text x="57.4346%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (83 samples, 0.03%)</title><rect x="57.1978%" y="1189" width="0.0288%" height="15" fill="rgb(252,5,12)"/><text x="57.4478%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.02%)</title><rect x="57.2047%" y="1173" width="0.0219%" height="15" fill="rgb(251,36,5)"/><text x="57.4547%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_load (55 samples, 0.02%)</title><rect x="57.2346%" y="1173" width="0.0191%" height="15" fill="rgb(217,53,14)"/><text x="57.4846%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (79 samples, 0.03%)</title><rect x="57.2266%" y="1189" width="0.0274%" height="15" fill="rgb(215,86,45)"/><text x="57.4766%" y="1199.50"></text></g><g><title>tokio::util::bit::Pack::pack (135 samples, 0.05%)</title><rect x="57.2668%" y="1189" width="0.0468%" height="15" fill="rgb(242,169,11)"/><text x="57.5168%" y="1199.50"></text></g><g><title>tokio::util::bit::Pack::max_value (104 samples, 0.04%)</title><rect x="57.2776%" y="1173" width="0.0361%" height="15" fill="rgb(211,213,45)"/><text x="57.5276%" y="1183.50"></text></g><g><title>tokio::util::bit::Pack::width (77 samples, 0.03%)</title><rect x="57.2869%" y="1157" width="0.0267%" height="15" fill="rgb(205,88,11)"/><text x="57.5369%" y="1167.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (482 samples, 0.17%)</title><rect x="57.1548%" y="1205" width="0.1672%" height="15" fill="rgb(252,69,26)"/><text x="57.4048%" y="1215.50"></text></g><g><title>tokio::util::bit::Pack::unpack (41 samples, 0.01%)</title><rect x="57.3296%" y="1205" width="0.0142%" height="15" fill="rgb(246,123,37)"/><text x="57.5796%" y="1215.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (75 samples, 0.03%)</title><rect x="57.3775%" y="1173" width="0.0260%" height="15" fill="rgb(212,205,5)"/><text x="57.6275%" y="1183.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (34 samples, 0.01%)</title><rect x="57.3917%" y="1157" width="0.0118%" height="15" fill="rgb(253,148,0)"/><text x="57.6417%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (110 samples, 0.04%)</title><rect x="57.3657%" y="1189" width="0.0382%" height="15" fill="rgb(239,22,4)"/><text x="57.6157%" y="1199.50"></text></g><g><title>tokio::util::slab::Address::page (54 samples, 0.02%)</title><rect x="57.4039%" y="1189" width="0.0187%" height="15" fill="rgb(226,26,53)"/><text x="57.6539%" y="1199.50"></text></g><g><title>tokio::util::slab::CachedPage&lt;T&gt;::get (58 samples, 0.02%)</title><rect x="57.4226%" y="1189" width="0.0201%" height="15" fill="rgb(225,229,45)"/><text x="57.6726%" y="1199.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (36 samples, 0.01%)</title><rect x="57.4302%" y="1173" width="0.0125%" height="15" fill="rgb(220,60,37)"/><text x="57.6802%" y="1183.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (1,086 samples, 0.38%)</title><rect x="57.0746%" y="1221" width="0.3768%" height="15" fill="rgb(217,180,35)"/><text x="57.3246%" y="1231.50"></text></g><g><title>tokio::util::slab::Slab&lt;T&gt;::get (301 samples, 0.10%)</title><rect x="57.3470%" y="1205" width="0.1044%" height="15" fill="rgb(229,7,53)"/><text x="57.5970%" y="1215.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (4,523 samples, 1.57%)</title><rect x="55.8845%" y="1269" width="1.5693%" height="15" fill="rgb(254,137,3)"/><text x="56.1345%" y="1279.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (4,523 samples, 1.57%)</title><rect x="55.8845%" y="1253" width="1.5693%" height="15" fill="rgb(215,140,41)"/><text x="56.1345%" y="1263.50"></text></g><g><title>tokio::io::driver::Driver::turn (4,523 samples, 1.57%)</title><rect x="55.8845%" y="1237" width="1.5693%" height="15" fill="rgb(250,80,15)"/><text x="56.1345%" y="1247.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.02%)</title><rect x="57.5093%" y="1237" width="0.0201%" height="15" fill="rgb(252,191,6)"/><text x="57.7593%" y="1247.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.01%)</title><rect x="57.5295%" y="1237" width="0.0125%" height="15" fill="rgb(246,217,18)"/><text x="57.7795%" y="1247.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (40 samples, 0.01%)</title><rect x="57.5420%" y="1237" width="0.0139%" height="15" fill="rgb(223,93,7)"/><text x="57.7920%" y="1247.50"></text></g><g><title>core::mem::drop (114 samples, 0.04%)</title><rect x="57.5562%" y="1237" width="0.0396%" height="15" fill="rgb(225,55,52)"/><text x="57.8062%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place (99 samples, 0.03%)</title><rect x="57.5614%" y="1221" width="0.0343%" height="15" fill="rgb(240,31,24)"/><text x="57.8114%" y="1231.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.03%)</title><rect x="57.5673%" y="1205" width="0.0285%" height="15" fill="rgb(205,56,52)"/><text x="57.8173%" y="1215.50"></text></g><g><title>std::sys_common::poison::Flag::done (48 samples, 0.02%)</title><rect x="57.5791%" y="1189" width="0.0167%" height="15" fill="rgb(246,146,12)"/><text x="57.8291%" y="1199.50"></text></g><g><title>std::thread::panicking (36 samples, 0.01%)</title><rect x="57.5832%" y="1173" width="0.0125%" height="15" fill="rgb(239,84,36)"/><text x="57.8332%" y="1183.50"></text></g><g><title>std::panicking::panicking (31 samples, 0.01%)</title><rect x="57.5850%" y="1157" width="0.0108%" height="15" fill="rgb(207,41,40)"/><text x="57.8350%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (148 samples, 0.05%)</title><rect x="57.6009%" y="1237" width="0.0513%" height="15" fill="rgb(241,179,25)"/><text x="57.8509%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place (69 samples, 0.02%)</title><rect x="57.6283%" y="1221" width="0.0239%" height="15" fill="rgb(210,0,34)"/><text x="57.8783%" y="1231.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (62 samples, 0.02%)</title><rect x="57.6523%" y="1237" width="0.0215%" height="15" fill="rgb(225,217,29)"/><text x="57.9023%" y="1247.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (53 samples, 0.02%)</title><rect x="57.6554%" y="1221" width="0.0184%" height="15" fill="rgb(216,191,38)"/><text x="57.9054%" y="1231.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (86 samples, 0.03%)</title><rect x="57.6981%" y="1205" width="0.0298%" height="15" fill="rgb(232,140,52)"/><text x="57.9481%" y="1215.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (169 samples, 0.06%)</title><rect x="57.6738%" y="1237" width="0.0586%" height="15" fill="rgb(223,158,51)"/><text x="57.9238%" y="1247.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (150 samples, 0.05%)</title><rect x="57.6804%" y="1221" width="0.0520%" height="15" fill="rgb(235,29,51)"/><text x="57.9304%" y="1231.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.01%)</title><rect x="57.7404%" y="1221" width="0.0118%" height="15" fill="rgb(215,181,18)"/><text x="57.9904%" y="1231.50"></text></g><g><title>std::sys_common::poison::Flag::get (30 samples, 0.01%)</title><rect x="57.7720%" y="1157" width="0.0104%" height="15" fill="rgb(227,125,34)"/><text x="58.0220%" y="1167.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (98 samples, 0.03%)</title><rect x="57.7678%" y="1173" width="0.0340%" height="15" fill="rgb(230,197,49)"/><text x="58.0178%" y="1183.50"></text></g><g><title>std::thread::panicking (56 samples, 0.02%)</title><rect x="57.7824%" y="1157" width="0.0194%" height="15" fill="rgb(239,141,16)"/><text x="58.0324%" y="1167.50"></text></g><g><title>std::panicking::panicking (44 samples, 0.02%)</title><rect x="57.7866%" y="1141" width="0.0153%" height="15" fill="rgb(225,105,43)"/><text x="58.0366%" y="1151.50"></text></g><g><title>std::panicking::panic_count::is_zero (39 samples, 0.01%)</title><rect x="57.7883%" y="1125" width="0.0135%" height="15" fill="rgb(214,131,14)"/><text x="58.0383%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.01%)</title><rect x="57.7897%" y="1109" width="0.0121%" height="15" fill="rgb(229,177,11)"/><text x="58.0397%" y="1119.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (145 samples, 0.05%)</title><rect x="57.7633%" y="1189" width="0.0503%" height="15" fill="rgb(231,180,14)"/><text x="58.0133%" y="1199.50"></text></g><g><title>std::sys_common::poison::map_result (34 samples, 0.01%)</title><rect x="57.8018%" y="1173" width="0.0118%" height="15" fill="rgb(232,88,2)"/><text x="58.0518%" y="1183.50"></text></g><g><title>tokio::time::driver::handle::Handle::lock (266 samples, 0.09%)</title><rect x="57.7335%" y="1237" width="0.0923%" height="15" fill="rgb(205,220,8)"/><text x="57.9835%" y="1247.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (211 samples, 0.07%)</title><rect x="57.7526%" y="1221" width="0.0732%" height="15" fill="rgb(225,23,53)"/><text x="58.0026%" y="1231.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (193 samples, 0.07%)</title><rect x="57.7588%" y="1205" width="0.0670%" height="15" fill="rgb(213,62,29)"/><text x="58.0088%" y="1215.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.01%)</title><rect x="57.8136%" y="1189" width="0.0121%" height="15" fill="rgb(227,75,7)"/><text x="58.0636%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (36 samples, 0.01%)</title><rect x="57.8556%" y="1221" width="0.0125%" height="15" fill="rgb(207,105,14)"/><text x="58.1056%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (63 samples, 0.02%)</title><rect x="57.9330%" y="1157" width="0.0219%" height="15" fill="rgb(245,62,29)"/><text x="58.1830%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (149 samples, 0.05%)</title><rect x="57.9222%" y="1173" width="0.0517%" height="15" fill="rgb(236,202,4)"/><text x="58.1722%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (54 samples, 0.02%)</title><rect x="57.9552%" y="1157" width="0.0187%" height="15" fill="rgb(250,67,1)"/><text x="58.2052%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (207 samples, 0.07%)</title><rect x="57.9125%" y="1189" width="0.0718%" height="15" fill="rgb(253,115,44)"/><text x="58.1625%" y="1199.50"></text></g><g><title>core::slice::raw::from_raw_parts (30 samples, 0.01%)</title><rect x="57.9739%" y="1173" width="0.0104%" height="15" fill="rgb(251,139,18)"/><text x="58.2239%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (302 samples, 0.10%)</title><rect x="57.8948%" y="1205" width="0.1048%" height="15" fill="rgb(218,22,32)"/><text x="58.1448%" y="1215.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.02%)</title><rect x="57.9843%" y="1189" width="0.0153%" height="15" fill="rgb(243,53,5)"/><text x="58.2343%" y="1199.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (55 samples, 0.02%)</title><rect x="58.0270%" y="1189" width="0.0191%" height="15" fill="rgb(227,56,16)"/><text x="58.2770%" y="1199.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (35 samples, 0.01%)</title><rect x="58.0339%" y="1173" width="0.0121%" height="15" fill="rgb(245,53,0)"/><text x="58.2839%" y="1183.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (210 samples, 0.07%)</title><rect x="57.9999%" y="1205" width="0.0729%" height="15" fill="rgb(216,170,35)"/><text x="58.2499%" y="1215.50"></text></g><g><title>core::mem::replace (58 samples, 0.02%)</title><rect x="58.0527%" y="1189" width="0.0201%" height="15" fill="rgb(211,200,8)"/><text x="58.3027%" y="1199.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (658 samples, 0.23%)</title><rect x="57.8684%" y="1221" width="0.2283%" height="15" fill="rgb(228,204,44)"/><text x="58.1184%" y="1231.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (53 samples, 0.02%)</title><rect x="58.0783%" y="1205" width="0.0184%" height="15" fill="rgb(214,121,17)"/><text x="58.3283%" y="1215.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (77 samples, 0.03%)</title><rect x="58.1300%" y="1205" width="0.0267%" height="15" fill="rgb(233,64,38)"/><text x="58.3800%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (40 samples, 0.01%)</title><rect x="58.1429%" y="1189" width="0.0139%" height="15" fill="rgb(253,54,19)"/><text x="58.3929%" y="1199.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (935 samples, 0.32%)</title><rect x="57.8327%" y="1237" width="0.3244%" height="15" fill="rgb(253,94,18)"/><text x="58.0827%" y="1247.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (167 samples, 0.06%)</title><rect x="58.0992%" y="1221" width="0.0579%" height="15" fill="rgb(227,57,52)"/><text x="58.3492%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (43 samples, 0.01%)</title><rect x="58.1658%" y="1221" width="0.0149%" height="15" fill="rgb(230,228,50)"/><text x="58.4158%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (110 samples, 0.04%)</title><rect x="58.2140%" y="1173" width="0.0382%" height="15" fill="rgb(217,205,27)"/><text x="58.4640%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (70 samples, 0.02%)</title><rect x="58.2279%" y="1157" width="0.0243%" height="15" fill="rgb(252,71,50)"/><text x="58.4779%" y="1167.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (29 samples, 0.01%)</title><rect x="58.2421%" y="1141" width="0.0101%" height="15" fill="rgb(209,86,4)"/><text x="58.4921%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (142 samples, 0.05%)</title><rect x="58.2085%" y="1189" width="0.0493%" height="15" fill="rgb(229,94,0)"/><text x="58.4585%" y="1199.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (53 samples, 0.02%)</title><rect x="58.2577%" y="1189" width="0.0184%" height="15" fill="rgb(252,223,21)"/><text x="58.5077%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (219 samples, 0.08%)</title><rect x="58.2005%" y="1205" width="0.0760%" height="15" fill="rgb(230,210,4)"/><text x="58.4505%" y="1215.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (44 samples, 0.02%)</title><rect x="58.3094%" y="1189" width="0.0153%" height="15" fill="rgb(240,149,38)"/><text x="58.5594%" y="1199.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (31 samples, 0.01%)</title><rect x="58.3139%" y="1173" width="0.0108%" height="15" fill="rgb(254,105,20)"/><text x="58.5639%" y="1183.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (196 samples, 0.07%)</title><rect x="58.2765%" y="1205" width="0.0680%" height="15" fill="rgb(253,87,46)"/><text x="58.5265%" y="1215.50"></text></g><g><title>core::mem::replace (44 samples, 0.02%)</title><rect x="58.3292%" y="1189" width="0.0153%" height="15" fill="rgb(253,116,33)"/><text x="58.5792%" y="1199.50"></text></g><g><title>core::mem::swap (31 samples, 0.01%)</title><rect x="58.3337%" y="1173" width="0.0108%" height="15" fill="rgb(229,198,5)"/><text x="58.5837%" y="1183.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (2,597 samples, 0.90%)</title><rect x="57.4538%" y="1269" width="0.9010%" height="15" fill="rgb(242,38,37)"/><text x="57.7038%" y="1279.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (2,597 samples, 0.90%)</title><rect x="57.4538%" y="1253" width="0.9010%" height="15" fill="rgb(242,69,53)"/><text x="57.7038%" y="1263.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll_at (570 samples, 0.20%)</title><rect x="58.1571%" y="1237" width="0.1978%" height="15" fill="rgb(249,80,16)"/><text x="58.4071%" y="1247.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (502 samples, 0.17%)</title><rect x="58.1807%" y="1221" width="0.1742%" height="15" fill="rgb(206,128,11)"/><text x="58.4307%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1413" width="2.5009%" height="15" fill="rgb(212,35,20)"/><text x="56.1345%" y="1423.50">to..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1397" width="2.5009%" height="15" fill="rgb(236,79,13)"/><text x="56.1345%" y="1407.50">to..</text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1381" width="2.5009%" height="15" fill="rgb(233,123,3)"/><text x="56.1345%" y="1391.50">&lt;t..</text></g><g><title>tokio::runtime::park::Inner::park (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1365" width="2.5009%" height="15" fill="rgb(214,93,52)"/><text x="56.1345%" y="1375.50">to..</text></g><g><title>tokio::runtime::park::Inner::park_driver (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1349" width="2.5009%" height="15" fill="rgb(251,37,40)"/><text x="56.1345%" y="1359.50">to..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1333" width="2.5009%" height="15" fill="rgb(227,80,54)"/><text x="56.1345%" y="1343.50">&lt;t..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1317" width="2.5009%" height="15" fill="rgb(254,48,11)"/><text x="56.1345%" y="1327.50">&lt;t..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1301" width="2.5009%" height="15" fill="rgb(235,193,26)"/><text x="56.1345%" y="1311.50">&lt;t..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (7,208 samples, 2.50%)</title><rect x="55.8845%" y="1285" width="2.5009%" height="15" fill="rgb(229,99,21)"/><text x="56.1345%" y="1295.50">to..</text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration_time (88 samples, 0.03%)</title><rect x="58.3549%" y="1269" width="0.0305%" height="15" fill="rgb(211,140,41)"/><text x="58.6049%" y="1279.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (88 samples, 0.03%)</title><rect x="58.3549%" y="1253" width="0.0305%" height="15" fill="rgb(240,227,30)"/><text x="58.6049%" y="1263.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (88 samples, 0.03%)</title><rect x="58.3549%" y="1237" width="0.0305%" height="15" fill="rgb(215,224,45)"/><text x="58.6049%" y="1247.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_occupied_slot (61 samples, 0.02%)</title><rect x="58.3642%" y="1221" width="0.0212%" height="15" fill="rgb(206,123,31)"/><text x="58.6142%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (36 samples, 0.01%)</title><rect x="58.4593%" y="997" width="0.0125%" height="15" fill="rgb(210,138,16)"/><text x="58.7093%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (82 samples, 0.03%)</title><rect x="58.4527%" y="1013" width="0.0285%" height="15" fill="rgb(228,57,28)"/><text x="58.7027%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (135 samples, 0.05%)</title><rect x="58.4451%" y="1029" width="0.0468%" height="15" fill="rgb(242,170,10)"/><text x="58.6951%" y="1039.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (30 samples, 0.01%)</title><rect x="58.4815%" y="1013" width="0.0104%" height="15" fill="rgb(228,214,39)"/><text x="58.7315%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::DerefMut&gt;::deref_mut (42 samples, 0.01%)</title><rect x="58.5370%" y="997" width="0.0146%" height="15" fill="rgb(218,179,33)"/><text x="58.7870%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.01%)</title><rect x="58.5592%" y="981" width="0.0139%" height="15" fill="rgb(235,193,39)"/><text x="58.8092%" y="991.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (36 samples, 0.01%)</title><rect x="58.5606%" y="965" width="0.0125%" height="15" fill="rgb(219,221,36)"/><text x="58.8106%" y="975.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.01%)</title><rect x="58.5731%" y="981" width="0.0125%" height="15" fill="rgb(248,218,19)"/><text x="58.8231%" y="991.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (126 samples, 0.04%)</title><rect x="58.5516%" y="997" width="0.0437%" height="15" fill="rgb(205,50,9)"/><text x="58.8016%" y="1007.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (204 samples, 0.07%)</title><rect x="58.5249%" y="1013" width="0.0708%" height="15" fill="rgb(238,81,28)"/><text x="58.7749%" y="1023.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (54 samples, 0.02%)</title><rect x="58.6043%" y="1013" width="0.0187%" height="15" fill="rgb(235,110,19)"/><text x="58.8543%" y="1023.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.02%)</title><rect x="58.6078%" y="997" width="0.0153%" height="15" fill="rgb(214,7,14)"/><text x="58.8578%" y="1007.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.01%)</title><rect x="58.6130%" y="981" width="0.0101%" height="15" fill="rgb(211,77,3)"/><text x="58.8630%" y="991.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::new (40 samples, 0.01%)</title><rect x="58.6231%" y="1013" width="0.0139%" height="15" fill="rgb(229,5,9)"/><text x="58.8731%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (32 samples, 0.01%)</title><rect x="58.6258%" y="997" width="0.0111%" height="15" fill="rgb(225,90,11)"/><text x="58.8758%" y="1007.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (452 samples, 0.16%)</title><rect x="58.4919%" y="1029" width="0.1568%" height="15" fill="rgb(242,56,8)"/><text x="58.7419%" y="1039.50"></text></g><g><title>tokio::io::util::read::_::&lt;impl tokio::io::util::read::Read&lt;R&gt;&gt;::project (34 samples, 0.01%)</title><rect x="58.6369%" y="1013" width="0.0118%" height="15" fill="rgb(249,212,39)"/><text x="58.8869%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (182 samples, 0.06%)</title><rect x="58.6789%" y="965" width="0.0631%" height="15" fill="rgb(236,90,9)"/><text x="58.9289%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (211 samples, 0.07%)</title><rect x="58.6692%" y="981" width="0.0732%" height="15" fill="rgb(206,88,35)"/><text x="58.9192%" y="991.50"></text></g><g><title>alloc::vec::from_elem (270 samples, 0.09%)</title><rect x="58.6491%" y="1029" width="0.0937%" height="15" fill="rgb(205,126,30)"/><text x="58.8991%" y="1039.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (262 samples, 0.09%)</title><rect x="58.6519%" y="1013" width="0.0909%" height="15" fill="rgb(230,176,12)"/><text x="58.9019%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (242 samples, 0.08%)</title><rect x="58.6588%" y="997" width="0.0840%" height="15" fill="rgb(243,19,9)"/><text x="58.9088%" y="1007.50"></text></g><g><title>core::future::get_context (40 samples, 0.01%)</title><rect x="58.7435%" y="1029" width="0.0139%" height="15" fill="rgb(245,171,17)"/><text x="58.9935%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (44 samples, 0.02%)</title><rect x="58.7691%" y="997" width="0.0153%" height="15" fill="rgb(227,52,21)"/><text x="59.0191%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.02%)</title><rect x="58.7671%" y="1013" width="0.0184%" height="15" fill="rgb(238,69,14)"/><text x="59.0171%" y="1023.50"></text></g><g><title>_int_free (55 samples, 0.02%)</title><rect x="58.8198%" y="949" width="0.0191%" height="15" fill="rgb(241,156,39)"/><text x="59.0698%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.03%)</title><rect x="58.8104%" y="965" width="0.0302%" height="15" fill="rgb(212,227,28)"/><text x="59.0604%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (109 samples, 0.04%)</title><rect x="58.8070%" y="981" width="0.0378%" height="15" fill="rgb(209,118,27)"/><text x="59.0570%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 0.06%)</title><rect x="58.8014%" y="997" width="0.0642%" height="15" fill="rgb(226,102,5)"/><text x="59.0514%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (60 samples, 0.02%)</title><rect x="58.8448%" y="981" width="0.0208%" height="15" fill="rgb(223,34,3)"/><text x="59.0948%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (49 samples, 0.02%)</title><rect x="58.9072%" y="901" width="0.0170%" height="15" fill="rgb(221,81,38)"/><text x="59.1572%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (64 samples, 0.02%)</title><rect x="58.9055%" y="917" width="0.0222%" height="15" fill="rgb(236,219,28)"/><text x="59.1555%" y="927.50"></text></g><g><title>core::alloc::layout::Layout::for_value (30 samples, 0.01%)</title><rect x="58.9332%" y="917" width="0.0104%" height="15" fill="rgb(213,200,14)"/><text x="59.1832%" y="927.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.06%)</title><rect x="58.8961%" y="933" width="0.0635%" height="15" fill="rgb(240,33,19)"/><text x="59.1461%" y="943.50"></text></g><g><title>core::mem::drop (194 samples, 0.07%)</title><rect x="58.8927%" y="965" width="0.0673%" height="15" fill="rgb(233,113,27)"/><text x="59.1427%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (192 samples, 0.07%)</title><rect x="58.8933%" y="949" width="0.0666%" height="15" fill="rgb(220,221,18)"/><text x="59.1433%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (46 samples, 0.02%)</title><rect x="58.9777%" y="917" width="0.0160%" height="15" fill="rgb(238,92,8)"/><text x="59.2277%" y="927.50"></text></g><g><title>core::mem::take (40 samples, 0.01%)</title><rect x="58.9797%" y="901" width="0.0139%" height="15" fill="rgb(222,164,16)"/><text x="59.2297%" y="911.50"></text></g><g><title>filp_close (37 samples, 0.01%)</title><rect x="59.0387%" y="741" width="0.0128%" height="15" fill="rgb(241,119,3)"/><text x="59.2887%" y="751.50"></text></g><g><title>__close_fd (50 samples, 0.02%)</title><rect x="59.0373%" y="757" width="0.0173%" height="15" fill="rgb(241,44,8)"/><text x="59.2873%" y="767.50"></text></g><g><title>__x64_sys_close (58 samples, 0.02%)</title><rect x="59.0366%" y="773" width="0.0201%" height="15" fill="rgb(230,36,40)"/><text x="59.2866%" y="783.50"></text></g><g><title>__fsnotify_parent (30 samples, 0.01%)</title><rect x="59.0870%" y="709" width="0.0104%" height="15" fill="rgb(243,16,36)"/><text x="59.3370%" y="719.50"></text></g><g><title>apparmor_file_free_security (30 samples, 0.01%)</title><rect x="59.1026%" y="709" width="0.0104%" height="15" fill="rgb(231,4,26)"/><text x="59.3526%" y="719.50"></text></g><g><title>dentry_free (47 samples, 0.02%)</title><rect x="59.1279%" y="677" width="0.0163%" height="15" fill="rgb(240,9,31)"/><text x="59.3779%" y="687.50"></text></g><g><title>kmem_cache_free (46 samples, 0.02%)</title><rect x="59.1282%" y="661" width="0.0160%" height="15" fill="rgb(207,173,15)"/><text x="59.3782%" y="671.50"></text></g><g><title>__destroy_inode (50 samples, 0.02%)</title><rect x="59.1737%" y="613" width="0.0173%" height="15" fill="rgb(224,192,53)"/><text x="59.4237%" y="623.50"></text></g><g><title>destroy_inode (71 samples, 0.02%)</title><rect x="59.1716%" y="629" width="0.0246%" height="15" fill="rgb(223,67,28)"/><text x="59.4216%" y="639.50"></text></g><g><title>evict (148 samples, 0.05%)</title><rect x="59.1619%" y="645" width="0.0513%" height="15" fill="rgb(211,20,47)"/><text x="59.4119%" y="655.50"></text></g><g><title>dentry_unlink_inode (208 samples, 0.07%)</title><rect x="59.1442%" y="677" width="0.0722%" height="15" fill="rgb(240,228,2)"/><text x="59.3942%" y="687.50"></text></g><g><title>iput (192 samples, 0.07%)</title><rect x="59.1497%" y="661" width="0.0666%" height="15" fill="rgb(248,151,12)"/><text x="59.3997%" y="671.50"></text></g><g><title>__dentry_kill (281 samples, 0.10%)</title><rect x="59.1210%" y="693" width="0.0975%" height="15" fill="rgb(244,8,39)"/><text x="59.3710%" y="703.50"></text></g><g><title>dput (310 samples, 0.11%)</title><rect x="59.1164%" y="709" width="0.1076%" height="15" fill="rgb(222,26,8)"/><text x="59.3664%" y="719.50"></text></g><g><title>security_file_free (36 samples, 0.01%)</title><rect x="59.2358%" y="709" width="0.0125%" height="15" fill="rgb(213,106,44)"/><text x="59.4858%" y="719.50"></text></g><g><title>tcp_v4_destroy_sock (135 samples, 0.05%)</title><rect x="59.3111%" y="629" width="0.0468%" height="15" fill="rgb(214,129,20)"/><text x="59.5611%" y="639.50"></text></g><g><title>inet_csk_destroy_sock (198 samples, 0.07%)</title><rect x="59.2903%" y="645" width="0.0687%" height="15" fill="rgb(212,32,13)"/><text x="59.5403%" y="655.50"></text></g><g><title>inet_sock_destruct (31 samples, 0.01%)</title><rect x="59.3975%" y="581" width="0.0108%" height="15" fill="rgb(208,168,33)"/><text x="59.6475%" y="591.50"></text></g><g><title>kmem_cache_free (58 samples, 0.02%)</title><rect x="59.4086%" y="581" width="0.0201%" height="15" fill="rgb(231,207,8)"/><text x="59.6586%" y="591.50"></text></g><g><title>apparmor_sk_free_security (45 samples, 0.02%)</title><rect x="59.4329%" y="565" width="0.0156%" height="15" fill="rgb(235,219,23)"/><text x="59.6829%" y="575.50"></text></g><g><title>__sk_destruct (233 samples, 0.08%)</title><rect x="59.3770%" y="597" width="0.0808%" height="15" fill="rgb(226,216,26)"/><text x="59.6270%" y="607.50"></text></g><g><title>security_sk_free (84 samples, 0.03%)</title><rect x="59.4287%" y="581" width="0.0291%" height="15" fill="rgb(239,137,16)"/><text x="59.6787%" y="591.50"></text></g><g><title>__sk_free (292 samples, 0.10%)</title><rect x="59.3642%" y="629" width="0.1013%" height="15" fill="rgb(207,12,36)"/><text x="59.6142%" y="639.50"></text></g><g><title>sk_destruct (259 samples, 0.09%)</title><rect x="59.3756%" y="613" width="0.0899%" height="15" fill="rgb(210,214,24)"/><text x="59.6256%" y="623.50"></text></g><g><title>sk_free (301 samples, 0.10%)</title><rect x="59.3642%" y="645" width="0.1044%" height="15" fill="rgb(206,56,30)"/><text x="59.6142%" y="655.50"></text></g><g><title>inet_release (627 samples, 0.22%)</title><rect x="59.2545%" y="677" width="0.2175%" height="15" fill="rgb(228,143,26)"/><text x="59.5045%" y="687.50"></text></g><g><title>tcp_close (592 samples, 0.21%)</title><rect x="59.2667%" y="661" width="0.2054%" height="15" fill="rgb(216,218,46)"/><text x="59.5167%" y="671.50"></text></g><g><title>__sock_release (650 samples, 0.23%)</title><rect x="59.2486%" y="693" width="0.2255%" height="15" fill="rgb(206,6,19)"/><text x="59.4986%" y="703.50"></text></g><g><title>__fput (1,139 samples, 0.40%)</title><rect x="59.0807%" y="725" width="0.3952%" height="15" fill="rgb(239,177,51)"/><text x="59.3307%" y="735.50"></text></g><g><title>sock_close (656 samples, 0.23%)</title><rect x="59.2483%" y="709" width="0.2276%" height="15" fill="rgb(216,55,25)"/><text x="59.4983%" y="719.50"></text></g><g><title>____fput (1,179 samples, 0.41%)</title><rect x="59.0807%" y="741" width="0.4091%" height="15" fill="rgb(231,163,29)"/><text x="59.3307%" y="751.50"></text></g><g><title>exit_to_usermode_loop (1,251 samples, 0.43%)</title><rect x="59.0592%" y="773" width="0.4340%" height="15" fill="rgb(232,149,50)"/><text x="59.3092%" y="783.50"></text></g><g><title>task_work_run (1,204 samples, 0.42%)</title><rect x="59.0755%" y="757" width="0.4177%" height="15" fill="rgb(223,142,48)"/><text x="59.3255%" y="767.50"></text></g><g><title>do_syscall_64 (1,345 samples, 0.47%)</title><rect x="59.0307%" y="789" width="0.4667%" height="15" fill="rgb(245,83,23)"/><text x="59.2807%" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,364 samples, 0.47%)</title><rect x="59.0262%" y="805" width="0.4732%" height="15" fill="rgb(224,63,2)"/><text x="59.2762%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1,463 samples, 0.51%)</title><rect x="58.9936%" y="917" width="0.5076%" height="15" fill="rgb(218,65,53)"/><text x="59.2436%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (1,447 samples, 0.50%)</title><rect x="58.9992%" y="901" width="0.5020%" height="15" fill="rgb(221,84,29)"/><text x="59.2492%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (1,437 samples, 0.50%)</title><rect x="59.0026%" y="885" width="0.4986%" height="15" fill="rgb(234,0,32)"/><text x="59.2526%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (1,426 samples, 0.49%)</title><rect x="59.0065%" y="869" width="0.4948%" height="15" fill="rgb(206,20,16)"/><text x="59.2565%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (1,415 samples, 0.49%)</title><rect x="59.0103%" y="853" width="0.4909%" height="15" fill="rgb(244,172,18)"/><text x="59.2603%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (1,405 samples, 0.49%)</title><rect x="59.0137%" y="837" width="0.4875%" height="15" fill="rgb(254,133,1)"/><text x="59.2637%" y="847.50"></text></g><g><title>__GI___close (1,393 samples, 0.48%)</title><rect x="59.0179%" y="821" width="0.4833%" height="15" fill="rgb(222,206,41)"/><text x="59.2679%" y="831.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (1,578 samples, 0.55%)</title><rect x="58.9690%" y="933" width="0.5475%" height="15" fill="rgb(212,3,42)"/><text x="59.2190%" y="943.50"></text></g><g><title>tokio::io::driver::registration::Registration::deregister (44 samples, 0.02%)</title><rect x="59.5012%" y="917" width="0.0153%" height="15" fill="rgb(241,11,4)"/><text x="59.7512%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.01%)</title><rect x="59.5311%" y="885" width="0.0146%" height="15" fill="rgb(205,19,26)"/><text x="59.7811%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="59.5342%" y="869" width="0.0114%" height="15" fill="rgb(210,179,32)"/><text x="59.7842%" y="879.50"></text></g><g><title>alloc::sync::data_offset (41 samples, 0.01%)</title><rect x="59.5710%" y="853" width="0.0142%" height="15" fill="rgb(227,116,49)"/><text x="59.8210%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (90 samples, 0.03%)</title><rect x="59.5592%" y="869" width="0.0312%" height="15" fill="rgb(211,146,6)"/><text x="59.8092%" y="879.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::drop::Drop&gt;::drop (278 samples, 0.10%)</title><rect x="59.5276%" y="901" width="0.0965%" height="15" fill="rgb(219,44,39)"/><text x="59.7776%" y="911.50"></text></g><g><title>tokio::util::slab::Value&lt;T&gt;::release (226 samples, 0.08%)</title><rect x="59.5456%" y="885" width="0.0784%" height="15" fill="rgb(234,128,11)"/><text x="59.7956%" y="895.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::release (95 samples, 0.03%)</title><rect x="59.5911%" y="869" width="0.0330%" height="15" fill="rgb(220,183,53)"/><text x="59.8411%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2,190 samples, 0.76%)</title><rect x="58.8795%" y="981" width="0.7598%" height="15" fill="rgb(213,219,32)"/><text x="59.1295%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (1,958 samples, 0.68%)</title><rect x="58.9600%" y="965" width="0.6793%" height="15" fill="rgb(232,156,16)"/><text x="59.2100%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (1,949 samples, 0.68%)</title><rect x="58.9631%" y="949" width="0.6762%" height="15" fill="rgb(246,135,34)"/><text x="59.2131%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (354 samples, 0.12%)</title><rect x="59.5165%" y="933" width="0.1228%" height="15" fill="rgb(241,99,0)"/><text x="59.7665%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (334 samples, 0.12%)</title><rect x="59.5234%" y="917" width="0.1159%" height="15" fill="rgb(222,103,45)"/><text x="59.7734%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.01%)</title><rect x="59.6247%" y="901" width="0.0146%" height="15" fill="rgb(212,57,4)"/><text x="59.8747%" y="911.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.01%)</title><rect x="59.6268%" y="885" width="0.0125%" height="15" fill="rgb(215,68,47)"/><text x="59.8768%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (49 samples, 0.02%)</title><rect x="59.6452%" y="981" width="0.0170%" height="15" fill="rgb(230,84,2)"/><text x="59.8952%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_sub (30 samples, 0.01%)</title><rect x="59.6518%" y="965" width="0.0104%" height="15" fill="rgb(220,102,14)"/><text x="59.9018%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,305 samples, 0.80%)</title><rect x="58.8656%" y="997" width="0.7997%" height="15" fill="rgb(240,10,32)"/><text x="59.1156%" y="1007.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.01%)</title><rect x="59.6653%" y="997" width="0.0139%" height="15" fill="rgb(215,47,27)"/><text x="59.9153%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (2,694 samples, 0.93%)</title><rect x="58.7573%" y="1029" width="0.9347%" height="15" fill="rgb(233,188,43)"/><text x="59.0073%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (2,613 samples, 0.91%)</title><rect x="58.7854%" y="1013" width="0.9066%" height="15" fill="rgb(253,190,1)"/><text x="59.0354%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.01%)</title><rect x="59.6792%" y="997" width="0.0128%" height="15" fill="rgb(206,114,52)"/><text x="59.9292%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (58 samples, 0.02%)</title><rect x="59.7184%" y="981" width="0.0201%" height="15" fill="rgb(233,120,37)"/><text x="59.9684%" y="991.50"></text></g><g><title>core::task::wake::Waker::wake (116 samples, 0.04%)</title><rect x="59.7486%" y="965" width="0.0402%" height="15" fill="rgb(214,52,39)"/><text x="59.9986%" y="975.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (100 samples, 0.03%)</title><rect x="59.7541%" y="949" width="0.0347%" height="15" fill="rgb(223,80,29)"/><text x="60.0041%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (48 samples, 0.02%)</title><rect x="59.7722%" y="933" width="0.0167%" height="15" fill="rgb(230,101,40)"/><text x="60.0222%" y="943.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (310 samples, 0.11%)</title><rect x="59.7090%" y="1013" width="0.1076%" height="15" fill="rgb(219,211,8)"/><text x="59.9590%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (300 samples, 0.10%)</title><rect x="59.7125%" y="997" width="0.1041%" height="15" fill="rgb(252,126,28)"/><text x="59.9625%" y="1007.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (225 samples, 0.08%)</title><rect x="59.7385%" y="981" width="0.0781%" height="15" fill="rgb(215,56,38)"/><text x="59.9885%" y="991.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (80 samples, 0.03%)</title><rect x="59.7888%" y="965" width="0.0278%" height="15" fill="rgb(249,55,44)"/><text x="60.0388%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (39 samples, 0.01%)</title><rect x="59.8239%" y="997" width="0.0135%" height="15" fill="rgb(220,221,32)"/><text x="60.0739%" y="1007.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.01%)</title><rect x="59.8249%" y="981" width="0.0125%" height="15" fill="rgb(212,216,41)"/><text x="60.0749%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (41 samples, 0.01%)</title><rect x="59.8374%" y="997" width="0.0142%" height="15" fill="rgb(228,213,43)"/><text x="60.0874%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (484 samples, 0.17%)</title><rect x="59.7018%" y="1029" width="0.1679%" height="15" fill="rgb(211,31,26)"/><text x="59.9518%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::inc_num_messages (153 samples, 0.05%)</title><rect x="59.8166%" y="1013" width="0.0531%" height="15" fill="rgb(229,202,19)"/><text x="60.0666%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::semaphore (52 samples, 0.02%)</title><rect x="59.8516%" y="997" width="0.0180%" height="15" fill="rgb(229,105,46)"/><text x="60.1016%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.01%)</title><rect x="59.8572%" y="981" width="0.0125%" height="15" fill="rgb(235,108,1)"/><text x="60.1072%" y="991.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (4,298 samples, 1.49%)</title><rect x="58.3854%" y="1045" width="1.4912%" height="15" fill="rgb(245,111,35)"/><text x="58.6354%" y="1055.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (40 samples, 0.01%)</title><rect x="59.9058%" y="1013" width="0.0139%" height="15" fill="rgb(219,185,31)"/><text x="60.1558%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (285 samples, 0.10%)</title><rect x="59.8766%" y="1029" width="0.0989%" height="15" fill="rgb(214,4,43)"/><text x="60.1266%" y="1039.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (144 samples, 0.05%)</title><rect x="59.9255%" y="1013" width="0.0500%" height="15" fill="rgb(235,227,40)"/><text x="60.1755%" y="1023.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (80 samples, 0.03%)</title><rect x="59.9970%" y="1013" width="0.0278%" height="15" fill="rgb(230,88,30)"/><text x="60.2470%" y="1023.50"></text></g><g><title>core::mem::replace (69 samples, 0.02%)</title><rect x="60.0272%" y="1013" width="0.0239%" height="15" fill="rgb(216,217,1)"/><text x="60.2772%" y="1023.50"></text></g><g><title>core::mem::swap (49 samples, 0.02%)</title><rect x="60.0341%" y="997" width="0.0170%" height="15" fill="rgb(248,139,50)"/><text x="60.2841%" y="1007.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (38 samples, 0.01%)</title><rect x="60.0380%" y="981" width="0.0132%" height="15" fill="rgb(233,1,21)"/><text x="60.2880%" y="991.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (56 samples, 0.02%)</title><rect x="60.0609%" y="1013" width="0.0194%" height="15" fill="rgb(215,183,12)"/><text x="60.3109%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (316 samples, 0.11%)</title><rect x="59.9755%" y="1029" width="0.1096%" height="15" fill="rgb(229,104,42)"/><text x="60.2255%" y="1039.50"></text></g><g><title>core::future::get_context (44 samples, 0.02%)</title><rect x="60.0914%" y="1029" width="0.0153%" height="15" fill="rgb(243,34,48)"/><text x="60.3414%" y="1039.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.01%)</title><rect x="60.1247%" y="997" width="0.0125%" height="15" fill="rgb(239,11,44)"/><text x="60.3747%" y="1007.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.01%)</title><rect x="60.1438%" y="981" width="0.0104%" height="15" fill="rgb(231,98,35)"/><text x="60.3938%" y="991.50"></text></g><g><title>release_sock (43 samples, 0.01%)</title><rect x="60.2038%" y="821" width="0.0149%" height="15" fill="rgb(233,28,25)"/><text x="60.4538%" y="831.50"></text></g><g><title>select_task_rq_fair (34 samples, 0.01%)</title><rect x="60.2538%" y="645" width="0.0118%" height="15" fill="rgb(234,123,11)"/><text x="60.5038%" y="655.50"></text></g><g><title>enqueue_entity (32 samples, 0.01%)</title><rect x="60.2683%" y="597" width="0.0111%" height="15" fill="rgb(220,69,3)"/><text x="60.5183%" y="607.50"></text></g><g><title>enqueue_task_fair (40 samples, 0.01%)</title><rect x="60.2669%" y="613" width="0.0139%" height="15" fill="rgb(214,64,36)"/><text x="60.5169%" y="623.50"></text></g><g><title>activate_task (71 samples, 0.02%)</title><rect x="60.2666%" y="629" width="0.0246%" height="15" fill="rgb(211,138,32)"/><text x="60.5166%" y="639.50"></text></g><g><title>psi_task_change (30 samples, 0.01%)</title><rect x="60.2808%" y="613" width="0.0104%" height="15" fill="rgb(213,118,47)"/><text x="60.5308%" y="623.50"></text></g><g><title>ttwu_do_activate (82 samples, 0.03%)</title><rect x="60.2663%" y="645" width="0.0285%" height="15" fill="rgb(243,124,49)"/><text x="60.5163%" y="655.50"></text></g><g><title>__wake_up_common (163 samples, 0.06%)</title><rect x="60.2420%" y="709" width="0.0566%" height="15" fill="rgb(221,30,28)"/><text x="60.4920%" y="719.50"></text></g><g><title>autoremove_wake_function (158 samples, 0.05%)</title><rect x="60.2437%" y="693" width="0.0548%" height="15" fill="rgb(246,37,13)"/><text x="60.4937%" y="703.50"></text></g><g><title>default_wake_function (154 samples, 0.05%)</title><rect x="60.2451%" y="677" width="0.0534%" height="15" fill="rgb(249,66,14)"/><text x="60.4951%" y="687.50"></text></g><g><title>try_to_wake_up (149 samples, 0.05%)</title><rect x="60.2468%" y="661" width="0.0517%" height="15" fill="rgb(213,166,5)"/><text x="60.4968%" y="671.50"></text></g><g><title>__wake_up (181 samples, 0.06%)</title><rect x="60.2416%" y="741" width="0.0628%" height="15" fill="rgb(221,66,24)"/><text x="60.4916%" y="751.50"></text></g><g><title>__wake_up_common_lock (181 samples, 0.06%)</title><rect x="60.2416%" y="725" width="0.0628%" height="15" fill="rgb(210,132,17)"/><text x="60.4916%" y="735.50"></text></g><g><title>__wake_up_common (254 samples, 0.09%)</title><rect x="60.2229%" y="773" width="0.0881%" height="15" fill="rgb(243,202,5)"/><text x="60.4729%" y="783.50"></text></g><g><title>ep_poll_callback (229 samples, 0.08%)</title><rect x="60.2316%" y="757" width="0.0795%" height="15" fill="rgb(233,70,48)"/><text x="60.4816%" y="767.50"></text></g><g><title>__wake_up (273 samples, 0.09%)</title><rect x="60.2187%" y="805" width="0.0947%" height="15" fill="rgb(238,41,26)"/><text x="60.4687%" y="815.50"></text></g><g><title>__wake_up_common_lock (273 samples, 0.09%)</title><rect x="60.2187%" y="789" width="0.0947%" height="15" fill="rgb(241,19,31)"/><text x="60.4687%" y="799.50"></text></g><g><title>sock_def_wakeup (274 samples, 0.10%)</title><rect x="60.2187%" y="821" width="0.0951%" height="15" fill="rgb(214,76,10)"/><text x="60.4687%" y="831.50"></text></g><g><title>__kmalloc_reserve.isra.0 (61 samples, 0.02%)</title><rect x="60.3415%" y="773" width="0.0212%" height="15" fill="rgb(254,202,22)"/><text x="60.5915%" y="783.50"></text></g><g><title>kmem_cache_alloc_node (34 samples, 0.01%)</title><rect x="60.3641%" y="773" width="0.0118%" height="15" fill="rgb(214,72,24)"/><text x="60.6141%" y="783.50"></text></g><g><title>__alloc_skb (148 samples, 0.05%)</title><rect x="60.3367%" y="789" width="0.0513%" height="15" fill="rgb(221,92,46)"/><text x="60.5867%" y="799.50"></text></g><g><title>nf_conntrack_tcp_packet (103 samples, 0.04%)</title><rect x="60.5122%" y="629" width="0.0357%" height="15" fill="rgb(246,13,50)"/><text x="60.7622%" y="639.50"></text></g><g><title>tcp_in_window (46 samples, 0.02%)</title><rect x="60.5320%" y="613" width="0.0160%" height="15" fill="rgb(240,165,38)"/><text x="60.7820%" y="623.50"></text></g><g><title>nf_conntrack_in (196 samples, 0.07%)</title><rect x="60.4862%" y="645" width="0.0680%" height="15" fill="rgb(241,24,51)"/><text x="60.7362%" y="655.50"></text></g><g><title>ipv4_conntrack_local (218 samples, 0.08%)</title><rect x="60.4817%" y="661" width="0.0756%" height="15" fill="rgb(227,51,44)"/><text x="60.7317%" y="671.50"></text></g><g><title>nf_hook_slow (310 samples, 0.11%)</title><rect x="60.4633%" y="677" width="0.1076%" height="15" fill="rgb(231,121,3)"/><text x="60.7133%" y="687.50"></text></g><g><title>nf_nat_ipv4_local_fn (33 samples, 0.01%)</title><rect x="60.5594%" y="661" width="0.0114%" height="15" fill="rgb(245,3,41)"/><text x="60.8094%" y="671.50"></text></g><g><title>__ip_local_out (353 samples, 0.12%)</title><rect x="60.4512%" y="693" width="0.1225%" height="15" fill="rgb(214,13,26)"/><text x="60.7012%" y="703.50"></text></g><g><title>__netif_receive_skb_core (29 samples, 0.01%)</title><rect x="60.6535%" y="501" width="0.0101%" height="15" fill="rgb(252,75,11)"/><text x="60.9035%" y="511.50"></text></g><g><title>mod_timer (76 samples, 0.03%)</title><rect x="60.7523%" y="325" width="0.0264%" height="15" fill="rgb(218,226,17)"/><text x="61.0023%" y="335.50"></text></g><g><title>__tcp_ack_snd_check (121 samples, 0.04%)</title><rect x="60.7374%" y="373" width="0.0420%" height="15" fill="rgb(248,89,38)"/><text x="60.9874%" y="383.50"></text></g><g><title>tcp_send_delayed_ack (108 samples, 0.04%)</title><rect x="60.7419%" y="357" width="0.0375%" height="15" fill="rgb(237,73,46)"/><text x="60.9919%" y="367.50"></text></g><g><title>sk_reset_timer (99 samples, 0.03%)</title><rect x="60.7451%" y="341" width="0.0343%" height="15" fill="rgb(242,78,33)"/><text x="60.9951%" y="351.50"></text></g><g><title>tcp_ack (30 samples, 0.01%)</title><rect x="60.7825%" y="373" width="0.0104%" height="15" fill="rgb(235,60,3)"/><text x="61.0325%" y="383.50"></text></g><g><title>tcp_data_ready (30 samples, 0.01%)</title><rect x="60.8124%" y="357" width="0.0104%" height="15" fill="rgb(216,172,19)"/><text x="61.0624%" y="367.50"></text></g><g><title>sock_def_readable (29 samples, 0.01%)</title><rect x="60.8127%" y="341" width="0.0101%" height="15" fill="rgb(227,6,42)"/><text x="61.0627%" y="351.50"></text></g><g><title>select_task_rq_fair (38 samples, 0.01%)</title><rect x="60.8724%" y="165" width="0.0132%" height="15" fill="rgb(223,207,42)"/><text x="61.1224%" y="175.50"></text></g><g><title>enqueue_entity (52 samples, 0.02%)</title><rect x="60.8932%" y="117" width="0.0180%" height="15" fill="rgb(246,138,30)"/><text x="61.1432%" y="127.50"></text></g><g><title>enqueue_task_fair (71 samples, 0.02%)</title><rect x="60.8897%" y="133" width="0.0246%" height="15" fill="rgb(251,199,47)"/><text x="61.1397%" y="143.50"></text></g><g><title>activate_task (124 samples, 0.04%)</title><rect x="60.8883%" y="149" width="0.0430%" height="15" fill="rgb(228,218,44)"/><text x="61.1383%" y="159.50"></text></g><g><title>psi_task_change (48 samples, 0.02%)</title><rect x="60.9147%" y="133" width="0.0167%" height="15" fill="rgb(220,68,6)"/><text x="61.1647%" y="143.50"></text></g><g><title>ttwu_do_activate (148 samples, 0.05%)</title><rect x="60.8877%" y="165" width="0.0513%" height="15" fill="rgb(240,60,26)"/><text x="61.1377%" y="175.50"></text></g><g><title>default_wake_function (243 samples, 0.08%)</title><rect x="60.8602%" y="197" width="0.0843%" height="15" fill="rgb(211,200,19)"/><text x="61.1102%" y="207.50"></text></g><g><title>try_to_wake_up (238 samples, 0.08%)</title><rect x="60.8620%" y="181" width="0.0826%" height="15" fill="rgb(242,145,30)"/><text x="61.1120%" y="191.50"></text></g><g><title>autoremove_wake_function (249 samples, 0.09%)</title><rect x="60.8585%" y="213" width="0.0864%" height="15" fill="rgb(225,64,13)"/><text x="61.1085%" y="223.50"></text></g><g><title>__wake_up_common (260 samples, 0.09%)</title><rect x="60.8564%" y="229" width="0.0902%" height="15" fill="rgb(218,103,35)"/><text x="61.1064%" y="239.50"></text></g><g><title>__wake_up (271 samples, 0.09%)</title><rect x="60.8554%" y="261" width="0.0940%" height="15" fill="rgb(216,93,46)"/><text x="61.1054%" y="271.50"></text></g><g><title>__wake_up_common_lock (271 samples, 0.09%)</title><rect x="60.8554%" y="245" width="0.0940%" height="15" fill="rgb(225,159,27)"/><text x="61.1054%" y="255.50"></text></g><g><title>__wake_up_common (321 samples, 0.11%)</title><rect x="60.8429%" y="293" width="0.1114%" height="15" fill="rgb(225,204,11)"/><text x="61.0929%" y="303.50"></text></g><g><title>ep_poll_callback (308 samples, 0.11%)</title><rect x="60.8474%" y="277" width="0.1069%" height="15" fill="rgb(205,56,4)"/><text x="61.0974%" y="287.50"></text></g><g><title>__wake_up (352 samples, 0.12%)</title><rect x="60.8363%" y="325" width="0.1221%" height="15" fill="rgb(206,6,35)"/><text x="61.0863%" y="335.50"></text></g><g><title>__wake_up_common_lock (351 samples, 0.12%)</title><rect x="60.8366%" y="309" width="0.1218%" height="15" fill="rgb(247,73,52)"/><text x="61.0866%" y="319.50"></text></g><g><title>sock_def_wakeup (353 samples, 0.12%)</title><rect x="60.8363%" y="341" width="0.1225%" height="15" fill="rgb(246,97,4)"/><text x="61.0863%" y="351.50"></text></g><g><title>tcp_fin (397 samples, 0.14%)</title><rect x="60.8228%" y="357" width="0.1377%" height="15" fill="rgb(212,37,15)"/><text x="61.0728%" y="367.50"></text></g><g><title>tcp_data_queue (494 samples, 0.17%)</title><rect x="60.7929%" y="373" width="0.1714%" height="15" fill="rgb(208,130,40)"/><text x="61.0429%" y="383.50"></text></g><g><title>tcp_rcv_established (702 samples, 0.24%)</title><rect x="60.7312%" y="389" width="0.2436%" height="15" fill="rgb(236,55,29)"/><text x="60.9812%" y="399.50"></text></g><g><title>tcp_v4_do_rcv (726 samples, 0.25%)</title><rect x="60.7235%" y="405" width="0.2519%" height="15" fill="rgb(209,156,45)"/><text x="60.9735%" y="415.50"></text></g><g><title>ip_protocol_deliver_rcu (856 samples, 0.30%)</title><rect x="60.6802%" y="437" width="0.2970%" height="15" fill="rgb(249,107,4)"/><text x="60.9302%" y="447.50"></text></g><g><title>tcp_v4_rcv (822 samples, 0.29%)</title><rect x="60.6920%" y="421" width="0.2852%" height="15" fill="rgb(227,7,13)"/><text x="60.9420%" y="431.50"></text></g><g><title>ip_local_deliver_finish (863 samples, 0.30%)</title><rect x="60.6798%" y="453" width="0.2994%" height="15" fill="rgb(250,129,14)"/><text x="60.9298%" y="463.50"></text></g><g><title>nf_hook_slow (33 samples, 0.01%)</title><rect x="60.9803%" y="453" width="0.0114%" height="15" fill="rgb(229,92,13)"/><text x="61.2303%" y="463.50"></text></g><g><title>ip_local_deliver (916 samples, 0.32%)</title><rect x="60.6743%" y="469" width="0.3178%" height="15" fill="rgb(245,98,39)"/><text x="60.9243%" y="479.50"></text></g><g><title>ip_rcv_finish (935 samples, 0.32%)</title><rect x="60.6718%" y="485" width="0.3244%" height="15" fill="rgb(234,135,48)"/><text x="60.9218%" y="495.50"></text></g><g><title>nf_hook_slow (34 samples, 0.01%)</title><rect x="61.0042%" y="485" width="0.0118%" height="15" fill="rgb(230,98,28)"/><text x="61.2542%" y="495.50"></text></g><g><title>ip_rcv (1,019 samples, 0.35%)</title><rect x="60.6635%" y="501" width="0.3535%" height="15" fill="rgb(223,121,0)"/><text x="60.9135%" y="511.50"></text></g><g><title>__netif_receive_skb_one_core (1,072 samples, 0.37%)</title><rect x="60.6489%" y="517" width="0.3719%" height="15" fill="rgb(234,173,33)"/><text x="60.8989%" y="527.50"></text></g><g><title>__netif_receive_skb (1,080 samples, 0.37%)</title><rect x="60.6483%" y="533" width="0.3747%" height="15" fill="rgb(245,47,8)"/><text x="60.8983%" y="543.50"></text></g><g><title>net_rx_action (1,131 samples, 0.39%)</title><rect x="60.6316%" y="565" width="0.3924%" height="15" fill="rgb(205,17,20)"/><text x="60.8816%" y="575.50"></text></g><g><title>process_backlog (1,102 samples, 0.38%)</title><rect x="60.6417%" y="549" width="0.3823%" height="15" fill="rgb(232,151,16)"/><text x="60.8917%" y="559.50"></text></g><g><title>__softirqentry_text_start (1,169 samples, 0.41%)</title><rect x="60.6212%" y="581" width="0.4056%" height="15" fill="rgb(208,30,32)"/><text x="60.8712%" y="591.50"></text></g><g><title>do_softirq.part.0 (1,185 samples, 0.41%)</title><rect x="60.6167%" y="613" width="0.4111%" height="15" fill="rgb(254,26,3)"/><text x="60.8667%" y="623.50"></text></g><g><title>do_softirq_own_stack (1,176 samples, 0.41%)</title><rect x="60.6198%" y="597" width="0.4080%" height="15" fill="rgb(240,177,30)"/><text x="60.8698%" y="607.50"></text></g><g><title>__local_bh_enable_ip (1,201 samples, 0.42%)</title><rect x="60.6156%" y="629" width="0.4167%" height="15" fill="rgb(248,76,44)"/><text x="60.8656%" y="639.50"></text></g><g><title>loopback_xmit (59 samples, 0.02%)</title><rect x="61.0490%" y="581" width="0.0205%" height="15" fill="rgb(241,186,54)"/><text x="61.2990%" y="591.50"></text></g><g><title>dev_hard_start_xmit (83 samples, 0.03%)</title><rect x="61.0434%" y="597" width="0.0288%" height="15" fill="rgb(249,171,29)"/><text x="61.2934%" y="607.50"></text></g><g><title>validate_xmit_skb (35 samples, 0.01%)</title><rect x="61.0764%" y="597" width="0.0121%" height="15" fill="rgb(237,151,44)"/><text x="61.3264%" y="607.50"></text></g><g><title>__dev_queue_xmit (168 samples, 0.06%)</title><rect x="61.0323%" y="613" width="0.0583%" height="15" fill="rgb(228,174,30)"/><text x="61.2823%" y="623.50"></text></g><g><title>dev_queue_xmit (173 samples, 0.06%)</title><rect x="61.0323%" y="629" width="0.0600%" height="15" fill="rgb(252,14,37)"/><text x="61.2823%" y="639.50"></text></g><g><title>__ip_finish_output (1,435 samples, 0.50%)</title><rect x="60.5948%" y="661" width="0.4979%" height="15" fill="rgb(207,111,40)"/><text x="60.8448%" y="671.50"></text></g><g><title>ip_finish_output2 (1,423 samples, 0.49%)</title><rect x="60.5990%" y="645" width="0.4937%" height="15" fill="rgb(248,171,54)"/><text x="60.8490%" y="655.50"></text></g><g><title>ip_finish_output (1,465 samples, 0.51%)</title><rect x="60.5855%" y="677" width="0.5083%" height="15" fill="rgb(211,127,2)"/><text x="60.8355%" y="687.50"></text></g><g><title>ctnetlink_conntrack_event (34 samples, 0.01%)</title><rect x="61.1024%" y="613" width="0.0118%" height="15" fill="rgb(236,87,47)"/><text x="61.3524%" y="623.50"></text></g><g><title>ipv4_confirm (71 samples, 0.02%)</title><rect x="61.0951%" y="661" width="0.0246%" height="15" fill="rgb(223,190,45)"/><text x="61.3451%" y="671.50"></text></g><g><title>nf_confirm (70 samples, 0.02%)</title><rect x="61.0955%" y="645" width="0.0243%" height="15" fill="rgb(215,5,16)"/><text x="61.3455%" y="655.50"></text></g><g><title>nf_ct_deliver_cached_events (56 samples, 0.02%)</title><rect x="61.1003%" y="629" width="0.0194%" height="15" fill="rgb(252,82,33)"/><text x="61.3503%" y="639.50"></text></g><g><title>nf_hook_slow (86 samples, 0.03%)</title><rect x="61.0944%" y="677" width="0.0298%" height="15" fill="rgb(247,213,44)"/><text x="61.3444%" y="687.50"></text></g><g><title>ip_output (1,590 samples, 0.55%)</title><rect x="60.5740%" y="693" width="0.5517%" height="15" fill="rgb(205,196,44)"/><text x="60.8240%" y="703.50"></text></g><g><title>ip_local_out (1,956 samples, 0.68%)</title><rect x="60.4501%" y="709" width="0.6786%" height="15" fill="rgb(237,96,54)"/><text x="60.7001%" y="719.50"></text></g><g><title>__ip_queue_xmit (1,999 samples, 0.69%)</title><rect x="60.4383%" y="725" width="0.6936%" height="15" fill="rgb(230,113,34)"/><text x="60.6883%" y="735.50"></text></g><g><title>ip_queue_xmit (2,013 samples, 0.70%)</title><rect x="60.4383%" y="741" width="0.6984%" height="15" fill="rgb(221,224,12)"/><text x="60.6883%" y="751.50"></text></g><g><title>__tcp_transmit_skb (2,095 samples, 0.73%)</title><rect x="60.4175%" y="757" width="0.7269%" height="15" fill="rgb(219,112,44)"/><text x="60.6675%" y="767.50"></text></g><g><title>tcp_event_new_data_sent (38 samples, 0.01%)</title><rect x="61.1576%" y="757" width="0.0132%" height="15" fill="rgb(210,31,13)"/><text x="61.4076%" y="767.50"></text></g><g><title>__tcp_push_pending_frames (2,307 samples, 0.80%)</title><rect x="60.3880%" y="789" width="0.8004%" height="15" fill="rgb(230,25,16)"/><text x="60.6380%" y="799.50"></text></g><g><title>tcp_write_xmit (2,287 samples, 0.79%)</title><rect x="60.3950%" y="773" width="0.7935%" height="15" fill="rgb(246,108,53)"/><text x="60.6450%" y="783.50"></text></g><g><title>tcp_send_fin (2,523 samples, 0.88%)</title><rect x="60.3273%" y="805" width="0.8754%" height="15" fill="rgb(241,172,50)"/><text x="60.5773%" y="815.50"></text></g><g><title>inet_shutdown (2,921 samples, 1.01%)</title><rect x="60.1924%" y="837" width="1.0135%" height="15" fill="rgb(235,141,10)"/><text x="60.4424%" y="847.50"></text></g><g><title>tcp_shutdown (2,560 samples, 0.89%)</title><rect x="60.3176%" y="821" width="0.8882%" height="15" fill="rgb(220,174,43)"/><text x="60.5676%" y="831.50"></text></g><g><title>__sys_shutdown (3,014 samples, 1.05%)</title><rect x="60.1823%" y="853" width="1.0457%" height="15" fill="rgb(215,181,40)"/><text x="60.4323%" y="863.50"></text></g><g><title>__x64_sys_shutdown (3,022 samples, 1.05%)</title><rect x="60.1823%" y="869" width="1.0485%" height="15" fill="rgb(230,97,2)"/><text x="60.4323%" y="879.50"></text></g><g><title>exit_to_usermode_loop (32 samples, 0.01%)</title><rect x="61.2308%" y="869" width="0.0111%" height="15" fill="rgb(211,25,27)"/><text x="61.4808%" y="879.50"></text></g><g><title>schedule (31 samples, 0.01%)</title><rect x="61.2311%" y="853" width="0.0108%" height="15" fill="rgb(230,87,26)"/><text x="61.4811%" y="863.50"></text></g><g><title>__sched_text_start (31 samples, 0.01%)</title><rect x="61.2311%" y="837" width="0.0108%" height="15" fill="rgb(227,160,17)"/><text x="61.4811%" y="847.50"></text></g><g><title>do_syscall_64 (3,076 samples, 1.07%)</title><rect x="60.1771%" y="885" width="1.0672%" height="15" fill="rgb(244,85,34)"/><text x="60.4271%" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,098 samples, 1.07%)</title><rect x="60.1701%" y="901" width="1.0749%" height="15" fill="rgb(207,70,0)"/><text x="60.4201%" y="911.50"></text></g><g><title>__shutdown (3,124 samples, 1.08%)</title><rect x="60.1639%" y="917" width="1.0839%" height="15" fill="rgb(223,129,7)"/><text x="60.4139%" y="927.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as core::ops::drop::Drop&gt;::drop (3,268 samples, 1.13%)</title><rect x="60.1188%" y="1013" width="1.1339%" height="15" fill="rgb(246,105,7)"/><text x="60.3688%" y="1023.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::shutdown_std (3,207 samples, 1.11%)</title><rect x="60.1400%" y="997" width="1.1127%" height="15" fill="rgb(215,154,42)"/><text x="60.3900%" y="1007.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::shutdown (3,166 samples, 1.10%)</title><rect x="60.1542%" y="981" width="1.0985%" height="15" fill="rgb(220,215,30)"/><text x="60.4042%" y="991.50"></text></g><g><title>std::net::tcp::TcpStream::shutdown (3,141 samples, 1.09%)</title><rect x="60.1629%" y="965" width="1.0898%" height="15" fill="rgb(228,81,51)"/><text x="60.4129%" y="975.50"></text></g><g><title>std::sys_common::net::TcpStream::shutdown (3,141 samples, 1.09%)</title><rect x="60.1629%" y="949" width="1.0898%" height="15" fill="rgb(247,71,54)"/><text x="60.4129%" y="959.50"></text></g><g><title>std::sys::unix::net::Socket::shutdown (3,141 samples, 1.09%)</title><rect x="60.1629%" y="933" width="1.0898%" height="15" fill="rgb(234,176,34)"/><text x="60.4129%" y="943.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.01%)</title><rect x="61.2860%" y="933" width="0.0104%" height="15" fill="rgb(241,103,54)"/><text x="61.5360%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (39 samples, 0.01%)</title><rect x="61.2860%" y="949" width="0.0135%" height="15" fill="rgb(228,22,34)"/><text x="61.5360%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (44 samples, 0.02%)</title><rect x="61.2846%" y="981" width="0.0153%" height="15" fill="rgb(241,179,48)"/><text x="61.5346%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.01%)</title><rect x="61.2856%" y="965" width="0.0142%" height="15" fill="rgb(235,167,37)"/><text x="61.5356%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.04%)</title><rect x="61.2790%" y="997" width="0.0364%" height="15" fill="rgb(213,109,30)"/><text x="61.5290%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (30 samples, 0.01%)</title><rect x="61.3050%" y="981" width="0.0104%" height="15" fill="rgb(222,172,16)"/><text x="61.5550%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (35 samples, 0.01%)</title><rect x="61.3307%" y="965" width="0.0121%" height="15" fill="rgb(233,192,5)"/><text x="61.5807%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (72 samples, 0.02%)</title><rect x="61.3182%" y="981" width="0.0250%" height="15" fill="rgb(247,189,41)"/><text x="61.5682%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.03%)</title><rect x="61.3154%" y="997" width="0.0323%" height="15" fill="rgb(218,134,47)"/><text x="61.5654%" y="1007.50"></text></g><g><title>__GI___libc_free (41 samples, 0.01%)</title><rect x="61.3734%" y="933" width="0.0142%" height="15" fill="rgb(216,29,3)"/><text x="61.6234%" y="943.50"></text></g><g><title>_int_free (64 samples, 0.02%)</title><rect x="61.3918%" y="933" width="0.0222%" height="15" fill="rgb(246,140,12)"/><text x="61.6418%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (144 samples, 0.05%)</title><rect x="61.3696%" y="949" width="0.0500%" height="15" fill="rgb(230,136,11)"/><text x="61.6196%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (174 samples, 0.06%)</title><rect x="61.3651%" y="965" width="0.0604%" height="15" fill="rgb(247,22,47)"/><text x="61.6151%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (294 samples, 0.10%)</title><rect x="61.3592%" y="981" width="0.1020%" height="15" fill="rgb(218,84,22)"/><text x="61.6092%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (103 samples, 0.04%)</title><rect x="61.4254%" y="965" width="0.0357%" height="15" fill="rgb(216,87,39)"/><text x="61.6754%" y="975.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (121 samples, 0.04%)</title><rect x="61.4750%" y="949" width="0.0420%" height="15" fill="rgb(221,178,8)"/><text x="61.7250%" y="959.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (74 samples, 0.03%)</title><rect x="61.4914%" y="933" width="0.0257%" height="15" fill="rgb(230,42,11)"/><text x="61.7414%" y="943.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (138 samples, 0.05%)</title><rect x="61.4702%" y="965" width="0.0479%" height="15" fill="rgb(237,229,4)"/><text x="61.7202%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.01%)</title><rect x="61.5274%" y="949" width="0.0132%" height="15" fill="rgb(222,31,33)"/><text x="61.7774%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (31 samples, 0.01%)</title><rect x="61.5299%" y="933" width="0.0108%" height="15" fill="rgb(210,17,39)"/><text x="61.7799%" y="943.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as tokio::sync::mpsc::chan::Semaphore&gt;::close (61 samples, 0.02%)</title><rect x="61.5406%" y="949" width="0.0212%" height="15" fill="rgb(244,93,20)"/><text x="61.7906%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (39 samples, 0.01%)</title><rect x="61.5483%" y="933" width="0.0135%" height="15" fill="rgb(210,40,47)"/><text x="61.7983%" y="943.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (311 samples, 0.11%)</title><rect x="61.4612%" y="981" width="0.1079%" height="15" fill="rgb(239,211,47)"/><text x="61.7112%" y="991.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::close (147 samples, 0.05%)</title><rect x="61.5181%" y="965" width="0.0510%" height="15" fill="rgb(251,223,49)"/><text x="61.7681%" y="975.50"></text></g><g><title>core::mem::drop (127 samples, 0.04%)</title><rect x="61.5861%" y="933" width="0.0441%" height="15" fill="rgb(221,149,5)"/><text x="61.8361%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (125 samples, 0.04%)</title><rect x="61.5868%" y="917" width="0.0434%" height="15" fill="rgb(219,224,51)"/><text x="61.8368%" y="927.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (111 samples, 0.04%)</title><rect x="61.5916%" y="901" width="0.0385%" height="15" fill="rgb(223,7,8)"/><text x="61.8416%" y="911.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (35 samples, 0.01%)</title><rect x="61.6433%" y="885" width="0.0121%" height="15" fill="rgb(241,217,22)"/><text x="61.8933%" y="895.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.02%)</title><rect x="61.6353%" y="917" width="0.0219%" height="15" fill="rgb(248,209,0)"/><text x="61.8853%" y="927.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (56 samples, 0.02%)</title><rect x="61.6378%" y="901" width="0.0194%" height="15" fill="rgb(217,205,4)"/><text x="61.8878%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (34 samples, 0.01%)</title><rect x="61.7044%" y="821" width="0.0118%" height="15" fill="rgb(228,124,39)"/><text x="61.9544%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (146 samples, 0.05%)</title><rect x="61.6839%" y="853" width="0.0507%" height="15" fill="rgb(250,116,42)"/><text x="61.9339%" y="863.50"></text></g><g><title>alloc::alloc::box_free (134 samples, 0.05%)</title><rect x="61.6881%" y="837" width="0.0465%" height="15" fill="rgb(223,202,9)"/><text x="61.9381%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (201 samples, 0.07%)</title><rect x="61.6711%" y="885" width="0.0697%" height="15" fill="rgb(242,222,40)"/><text x="61.9211%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (184 samples, 0.06%)</title><rect x="61.6770%" y="869" width="0.0638%" height="15" fill="rgb(229,99,46)"/><text x="61.9270%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (472 samples, 0.16%)</title><rect x="61.5774%" y="949" width="0.1638%" height="15" fill="rgb(225,56,46)"/><text x="61.8274%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (320 samples, 0.11%)</title><rect x="61.6301%" y="933" width="0.1110%" height="15" fill="rgb(227,94,5)"/><text x="61.8801%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (242 samples, 0.08%)</title><rect x="61.6572%" y="917" width="0.0840%" height="15" fill="rgb(205,112,38)"/><text x="61.9072%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (221 samples, 0.08%)</title><rect x="61.6645%" y="901" width="0.0767%" height="15" fill="rgb(231,133,46)"/><text x="61.9145%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (40 samples, 0.01%)</title><rect x="61.7422%" y="949" width="0.0139%" height="15" fill="rgb(217,16,9)"/><text x="61.9922%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.01%)</title><rect x="61.7446%" y="933" width="0.0114%" height="15" fill="rgb(249,173,9)"/><text x="61.9946%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (1,184 samples, 0.41%)</title><rect x="61.3477%" y="997" width="0.4108%" height="15" fill="rgb(205,163,53)"/><text x="61.5977%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (546 samples, 0.19%)</title><rect x="61.5691%" y="981" width="0.1894%" height="15" fill="rgb(217,54,41)"/><text x="61.8191%" y="991.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (537 samples, 0.19%)</title><rect x="61.5722%" y="965" width="0.1863%" height="15" fill="rgb(228,216,12)"/><text x="61.8222%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (4,762 samples, 1.65%)</title><rect x="60.1067%" y="1029" width="1.6522%" height="15" fill="rgb(244,228,15)"/><text x="60.3567%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (1,459 samples, 0.51%)</title><rect x="61.2526%" y="1013" width="0.5062%" height="15" fill="rgb(221,176,53)"/><text x="61.5026%" y="1023.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (54 samples, 0.02%)</title><rect x="61.7655%" y="1013" width="0.0187%" height="15" fill="rgb(205,94,34)"/><text x="62.0155%" y="1023.50"></text></g><g><title>log::RecordBuilder::module_path_static (32 samples, 0.01%)</title><rect x="61.7936%" y="1013" width="0.0111%" height="15" fill="rgb(213,110,48)"/><text x="62.0436%" y="1023.50"></text></g><g><title>log::__private_api_log (156 samples, 0.05%)</title><rect x="61.7589%" y="1029" width="0.0541%" height="15" fill="rgb(236,142,28)"/><text x="62.0089%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (54 samples, 0.02%)</title><rect x="61.8522%" y="965" width="0.0187%" height="15" fill="rgb(225,135,29)"/><text x="62.1022%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (103 samples, 0.04%)</title><rect x="61.8439%" y="981" width="0.0357%" height="15" fill="rgb(252,45,31)"/><text x="62.0939%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (160 samples, 0.06%)</title><rect x="61.8362%" y="997" width="0.0555%" height="15" fill="rgb(211,187,50)"/><text x="62.0862%" y="1007.50"></text></g><g><title>core::slice::raw::from_raw_parts (35 samples, 0.01%)</title><rect x="61.8796%" y="981" width="0.0121%" height="15" fill="rgb(229,109,7)"/><text x="62.1296%" y="991.50"></text></g><g><title>tunneler::message::message::Message::get_data (197 samples, 0.07%)</title><rect x="61.8237%" y="1029" width="0.0684%" height="15" fill="rgb(251,131,51)"/><text x="62.0737%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_slice (187 samples, 0.06%)</title><rect x="61.8272%" y="1013" width="0.0649%" height="15" fill="rgb(251,180,35)"/><text x="62.0772%" y="1023.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (5,864 samples, 2.03%)</title><rect x="59.8766%" y="1045" width="2.0345%" height="15" fill="rgb(211,46,32)"/><text x="60.1266%" y="1055.50">t..</text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv (55 samples, 0.02%)</title><rect x="61.8921%" y="1029" width="0.0191%" height="15" fill="rgb(248,123,17)"/><text x="62.1421%" y="1039.50"></text></g><g><title>core::future::from_generator (41 samples, 0.01%)</title><rect x="61.8969%" y="1013" width="0.0142%" height="15" fill="rgb(227,141,18)"/><text x="62.1469%" y="1023.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (120 samples, 0.04%)</title><rect x="61.9563%" y="997" width="0.0416%" height="15" fill="rgb(216,102,9)"/><text x="62.2063%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (77 samples, 0.03%)</title><rect x="61.9712%" y="981" width="0.0267%" height="15" fill="rgb(253,47,13)"/><text x="62.2212%" y="991.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (65 samples, 0.02%)</title><rect x="61.9754%" y="965" width="0.0226%" height="15" fill="rgb(226,93,23)"/><text x="62.2254%" y="975.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (55 samples, 0.02%)</title><rect x="61.9788%" y="949" width="0.0191%" height="15" fill="rgb(247,104,17)"/><text x="62.2288%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (251 samples, 0.09%)</title><rect x="61.9171%" y="1029" width="0.0871%" height="15" fill="rgb(233,203,26)"/><text x="62.1671%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (182 samples, 0.06%)</title><rect x="61.9410%" y="1013" width="0.0631%" height="15" fill="rgb(244,98,49)"/><text x="62.1910%" y="1023.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (56 samples, 0.02%)</title><rect x="62.0201%" y="1013" width="0.0194%" height="15" fill="rgb(235,134,22)"/><text x="62.2701%" y="1023.50"></text></g><g><title>core::mem::replace (65 samples, 0.02%)</title><rect x="62.0409%" y="1013" width="0.0226%" height="15" fill="rgb(221,70,32)"/><text x="62.2909%" y="1023.50"></text></g><g><title>core::mem::swap (47 samples, 0.02%)</title><rect x="62.0472%" y="997" width="0.0163%" height="15" fill="rgb(238,15,50)"/><text x="62.2972%" y="1007.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (38 samples, 0.01%)</title><rect x="62.0503%" y="981" width="0.0132%" height="15" fill="rgb(215,221,48)"/><text x="62.3003%" y="991.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (37 samples, 0.01%)</title><rect x="62.0673%" y="1013" width="0.0128%" height="15" fill="rgb(236,73,3)"/><text x="62.3173%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (233 samples, 0.08%)</title><rect x="62.0042%" y="1029" width="0.0808%" height="15" fill="rgb(250,107,11)"/><text x="62.2542%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (40 samples, 0.01%)</title><rect x="62.1030%" y="997" width="0.0139%" height="15" fill="rgb(242,39,14)"/><text x="62.3530%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.02%)</title><rect x="62.1010%" y="1013" width="0.0191%" height="15" fill="rgb(248,164,37)"/><text x="62.3510%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.02%)</title><rect x="62.1412%" y="965" width="0.0194%" height="15" fill="rgb(217,60,12)"/><text x="62.3912%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (80 samples, 0.03%)</title><rect x="62.1360%" y="981" width="0.0278%" height="15" fill="rgb(240,125,29)"/><text x="62.3860%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (171 samples, 0.06%)</title><rect x="62.1304%" y="997" width="0.0593%" height="15" fill="rgb(208,207,28)"/><text x="62.3804%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (75 samples, 0.03%)</title><rect x="62.1638%" y="981" width="0.0260%" height="15" fill="rgb(209,159,27)"/><text x="62.4138%" y="991.50"></text></g><g><title>_int_free (36 samples, 0.01%)</title><rect x="62.1974%" y="933" width="0.0125%" height="15" fill="rgb(251,176,53)"/><text x="62.4474%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.02%)</title><rect x="62.1950%" y="949" width="0.0153%" height="15" fill="rgb(211,85,7)"/><text x="62.4450%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (47 samples, 0.02%)</title><rect x="62.1943%" y="965" width="0.0163%" height="15" fill="rgb(216,64,54)"/><text x="62.4443%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (355 samples, 0.12%)</title><rect x="62.0937%" y="1029" width="0.1232%" height="15" fill="rgb(217,54,24)"/><text x="62.3437%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (278 samples, 0.10%)</title><rect x="62.1204%" y="1013" width="0.0965%" height="15" fill="rgb(208,206,53)"/><text x="62.3704%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (69 samples, 0.02%)</title><rect x="62.1929%" y="997" width="0.0239%" height="15" fill="rgb(251,74,39)"/><text x="62.4429%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.02%)</title><rect x="62.1929%" y="981" width="0.0239%" height="15" fill="rgb(226,47,5)"/><text x="62.4429%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (45 samples, 0.02%)</title><rect x="62.2554%" y="981" width="0.0156%" height="15" fill="rgb(234,111,33)"/><text x="62.5054%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (74 samples, 0.03%)</title><rect x="62.2501%" y="997" width="0.0257%" height="15" fill="rgb(251,14,10)"/><text x="62.5001%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (39 samples, 0.01%)</title><rect x="62.2831%" y="965" width="0.0135%" height="15" fill="rgb(232,43,0)"/><text x="62.5331%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (146 samples, 0.05%)</title><rect x="62.2470%" y="1013" width="0.0507%" height="15" fill="rgb(222,68,43)"/><text x="62.4970%" y="1023.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (62 samples, 0.02%)</title><rect x="62.2762%" y="997" width="0.0215%" height="15" fill="rgb(217,24,23)"/><text x="62.5262%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (57 samples, 0.02%)</title><rect x="62.2779%" y="981" width="0.0198%" height="15" fill="rgb(229,209,14)"/><text x="62.5279%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (32 samples, 0.01%)</title><rect x="62.3074%" y="981" width="0.0111%" height="15" fill="rgb(250,149,48)"/><text x="62.5574%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (46 samples, 0.02%)</title><rect x="62.3050%" y="997" width="0.0160%" height="15" fill="rgb(210,120,37)"/><text x="62.5550%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (71 samples, 0.02%)</title><rect x="62.3417%" y="965" width="0.0246%" height="15" fill="rgb(210,21,8)"/><text x="62.5917%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (209 samples, 0.07%)</title><rect x="62.2977%" y="1013" width="0.0725%" height="15" fill="rgb(243,145,7)"/><text x="62.5477%" y="1023.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (141 samples, 0.05%)</title><rect x="62.3213%" y="997" width="0.0489%" height="15" fill="rgb(238,178,32)"/><text x="62.5713%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (129 samples, 0.04%)</title><rect x="62.3254%" y="981" width="0.0448%" height="15" fill="rgb(222,4,10)"/><text x="62.5754%" y="991.50"></text></g><g><title>alloc::vec::from_elem (45 samples, 0.02%)</title><rect x="62.3702%" y="1013" width="0.0156%" height="15" fill="rgb(239,7,37)"/><text x="62.6202%" y="1023.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (35 samples, 0.01%)</title><rect x="62.3737%" y="997" width="0.0121%" height="15" fill="rgb(215,31,37)"/><text x="62.6237%" y="1007.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (91 samples, 0.03%)</title><rect x="62.3858%" y="1013" width="0.0316%" height="15" fill="rgb(224,83,33)"/><text x="62.6358%" y="1023.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1765" width="6.5831%" height="15" fill="rgb(239,55,3)"/><text x="56.1106%" y="1775.50">tokio::ru..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1749" width="6.5831%" height="15" fill="rgb(247,92,11)"/><text x="56.1106%" y="1759.50">tokio::ru..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1733" width="6.5831%" height="15" fill="rgb(239,200,7)"/><text x="56.1106%" y="1743.50">tokio::ru..</text></g><g><title>tokio::runtime::task::raw::poll (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1717" width="6.5831%" height="15" fill="rgb(227,115,8)"/><text x="56.1106%" y="1727.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1701" width="6.5831%" height="15" fill="rgb(215,189,27)"/><text x="56.1106%" y="1711.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1685" width="6.5831%" height="15" fill="rgb(251,216,39)"/><text x="56.1106%" y="1695.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::poll_future (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1669" width="6.5831%" height="15" fill="rgb(207,29,47)"/><text x="56.1106%" y="1679.50">tokio::ru..</text></g><g><title>std::panic::catch_unwind (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1653" width="6.5831%" height="15" fill="rgb(210,71,34)"/><text x="56.1106%" y="1663.50">std::pani..</text></g><g><title>std::panicking::try (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1637" width="6.5831%" height="15" fill="rgb(253,217,51)"/><text x="56.1106%" y="1647.50">std::pani..</text></g><g><title>__rust_try (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1621" width="6.5831%" height="15" fill="rgb(222,117,46)"/><text x="56.1106%" y="1631.50">__rust_try</text></g><g><title>std::panicking::try::do_call (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1605" width="6.5831%" height="15" fill="rgb(226,132,6)"/><text x="56.1106%" y="1615.50">std::pani..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1589" width="6.5831%" height="15" fill="rgb(254,145,51)"/><text x="56.1106%" y="1599.50">&lt;std::pan..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1573" width="6.5831%" height="15" fill="rgb(231,199,27)"/><text x="56.1106%" y="1583.50">tokio::ru..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1557" width="6.5831%" height="15" fill="rgb(245,158,14)"/><text x="56.1106%" y="1567.50">tokio::ru..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1541" width="6.5831%" height="15" fill="rgb(240,113,14)"/><text x="56.1106%" y="1551.50">tokio::lo..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1525" width="6.5831%" height="15" fill="rgb(210,20,13)"/><text x="56.1106%" y="1535.50">tokio::ru..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1509" width="6.5831%" height="15" fill="rgb(241,144,13)"/><text x="56.1106%" y="1519.50">&lt;tokio::r..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1493" width="6.5831%" height="15" fill="rgb(235,43,34)"/><text x="56.1106%" y="1503.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::run (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1477" width="6.5831%" height="15" fill="rgb(208,36,20)"/><text x="56.1106%" y="1487.50">tokio::ru..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1461" width="6.5831%" height="15" fill="rgb(239,204,10)"/><text x="56.1106%" y="1471.50">tokio::ma..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1445" width="6.5831%" height="15" fill="rgb(217,84,43)"/><text x="56.1106%" y="1455.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (18,974 samples, 6.58%)</title><rect x="55.8606%" y="1429" width="6.5831%" height="15" fill="rgb(241,170,50)"/><text x="56.1106%" y="1439.50">tokio::ru..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1413" width="4.0583%" height="15" fill="rgb(226,205,29)"/><text x="58.6354%" y="1423.50">toki..</text></g><g><title>tokio::coop::budget (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1397" width="4.0583%" height="15" fill="rgb(233,113,1)"/><text x="58.6354%" y="1407.50">toki..</text></g><g><title>tokio::coop::with_budget (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1381" width="4.0583%" height="15" fill="rgb(253,98,13)"/><text x="58.6354%" y="1391.50">toki..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1365" width="4.0583%" height="15" fill="rgb(211,115,12)"/><text x="58.6354%" y="1375.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1349" width="4.0583%" height="15" fill="rgb(208,12,16)"/><text x="58.6354%" y="1359.50">std:..</text></g><g><title>tokio::coop::with_budget::{{closure}} (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1333" width="4.0583%" height="15" fill="rgb(237,193,54)"/><text x="58.6354%" y="1343.50">toki..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1317" width="4.0583%" height="15" fill="rgb(243,22,42)"/><text x="58.6354%" y="1327.50">toki..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1301" width="4.0583%" height="15" fill="rgb(233,151,36)"/><text x="58.6354%" y="1311.50">toki..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1285" width="4.0583%" height="15" fill="rgb(237,57,45)"/><text x="58.6354%" y="1295.50">toki..</text></g><g><title>tokio::runtime::task::raw::poll (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1269" width="4.0583%" height="15" fill="rgb(221,88,17)"/><text x="58.6354%" y="1279.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1253" width="4.0583%" height="15" fill="rgb(230,79,15)"/><text x="58.6354%" y="1263.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1237" width="4.0583%" height="15" fill="rgb(213,57,13)"/><text x="58.6354%" y="1247.50">toki..</text></g><g><title>tokio::runtime::task::harness::poll_future (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1221" width="4.0583%" height="15" fill="rgb(222,116,39)"/><text x="58.6354%" y="1231.50">toki..</text></g><g><title>std::panic::catch_unwind (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1205" width="4.0583%" height="15" fill="rgb(245,107,2)"/><text x="58.6354%" y="1215.50">std:..</text></g><g><title>std::panicking::try (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1189" width="4.0583%" height="15" fill="rgb(238,1,10)"/><text x="58.6354%" y="1199.50">std:..</text></g><g><title>__rust_try (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1173" width="4.0583%" height="15" fill="rgb(249,4,48)"/><text x="58.6354%" y="1183.50">__ru..</text></g><g><title>std::panicking::try::do_call (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1157" width="4.0583%" height="15" fill="rgb(223,151,18)"/><text x="58.6354%" y="1167.50">std:..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1141" width="4.0583%" height="15" fill="rgb(227,65,43)"/><text x="58.6354%" y="1151.50">&lt;std..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1125" width="4.0583%" height="15" fill="rgb(218,40,45)"/><text x="58.6354%" y="1135.50">toki..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1109" width="4.0583%" height="15" fill="rgb(252,121,31)"/><text x="58.6354%" y="1119.50">toki..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1093" width="4.0583%" height="15" fill="rgb(219,158,43)"/><text x="58.6354%" y="1103.50">toki..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1077" width="4.0583%" height="15" fill="rgb(231,162,42)"/><text x="58.6354%" y="1087.50">toki..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,697 samples, 4.06%)</title><rect x="58.3854%" y="1061" width="4.0583%" height="15" fill="rgb(217,179,25)"/><text x="58.6354%" y="1071.50">&lt;cor..</text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (1,535 samples, 0.53%)</title><rect x="61.9112%" y="1045" width="0.5326%" height="15" fill="rgb(206,212,31)"/><text x="62.1612%" y="1055.50"></text></g><g><title>tunneler::message::message::Message::serialize (598 samples, 0.21%)</title><rect x="62.2363%" y="1029" width="0.2075%" height="15" fill="rgb(235,144,12)"/><text x="62.4863%" y="1039.50"></text></g><g><title>tunneler::message::header::MessageHeader::serialize (68 samples, 0.02%)</title><rect x="62.4202%" y="1013" width="0.0236%" height="15" fill="rgb(213,51,10)"/><text x="62.6702%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (34 samples, 0.01%)</title><rect x="62.4437%" y="1397" width="0.0118%" height="15" fill="rgb(231,145,14)"/><text x="62.6937%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (34 samples, 0.01%)</title><rect x="62.4437%" y="1381" width="0.0118%" height="15" fill="rgb(235,15,28)"/><text x="62.6937%" y="1391.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (34 samples, 0.01%)</title><rect x="62.4437%" y="1365" width="0.0118%" height="15" fill="rgb(237,206,10)"/><text x="62.6937%" y="1375.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (34 samples, 0.01%)</title><rect x="62.4437%" y="1349" width="0.0118%" height="15" fill="rgb(236,227,27)"/><text x="62.6937%" y="1359.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (34 samples, 0.01%)</title><rect x="62.4437%" y="1333" width="0.0118%" height="15" fill="rgb(246,83,35)"/><text x="62.6937%" y="1343.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (34 samples, 0.01%)</title><rect x="62.4437%" y="1317" width="0.0118%" height="15" fill="rgb(220,136,24)"/><text x="62.6937%" y="1327.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (34 samples, 0.01%)</title><rect x="62.4437%" y="1301" width="0.0118%" height="15" fill="rgb(217,3,25)"/><text x="62.6937%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.02%)</title><rect x="62.5693%" y="1189" width="0.0226%" height="15" fill="rgb(239,24,14)"/><text x="62.8193%" y="1199.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 0.04%)</title><rect x="62.5513%" y="1205" width="0.0427%" height="15" fill="rgb(244,16,53)"/><text x="62.8013%" y="1215.50"></text></g><g><title>&lt;mio::token::Token as core::cmp::PartialEq&gt;::ne (34 samples, 0.01%)</title><rect x="62.5940%" y="1205" width="0.0118%" height="15" fill="rgb(208,175,44)"/><text x="62.8440%" y="1215.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (29 samples, 0.01%)</title><rect x="62.6394%" y="1173" width="0.0101%" height="15" fill="rgb(252,18,48)"/><text x="62.8894%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (91 samples, 0.03%)</title><rect x="62.6186%" y="1205" width="0.0316%" height="15" fill="rgb(234,199,32)"/><text x="62.8686%" y="1215.50"></text></g><g><title>core::mem::take (52 samples, 0.02%)</title><rect x="62.6321%" y="1189" width="0.0180%" height="15" fill="rgb(225,77,54)"/><text x="62.8821%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.01%)</title><rect x="62.6505%" y="1205" width="0.0125%" height="15" fill="rgb(225,42,25)"/><text x="62.9005%" y="1215.50"></text></g><g><title>mio::event::event::Event::token (33 samples, 0.01%)</title><rect x="62.6630%" y="1205" width="0.0114%" height="15" fill="rgb(242,227,46)"/><text x="62.9130%" y="1215.50"></text></g><g><title>mio::poll::Poll::poll (41 samples, 0.01%)</title><rect x="62.6790%" y="1205" width="0.0142%" height="15" fill="rgb(246,197,35)"/><text x="62.9290%" y="1215.50"></text></g><g><title>mio::event::event::Event::is_read_closed (43 samples, 0.01%)</title><rect x="62.7303%" y="1189" width="0.0149%" height="15" fill="rgb(215,159,26)"/><text x="62.9803%" y="1199.50"></text></g><g><title>mio::event::event::Event::is_readable (44 samples, 0.02%)</title><rect x="62.7453%" y="1189" width="0.0153%" height="15" fill="rgb(212,194,50)"/><text x="62.9953%" y="1199.50"></text></g><g><title>mio::event::event::Event::is_write_closed (73 samples, 0.03%)</title><rect x="62.7692%" y="1189" width="0.0253%" height="15" fill="rgb(246,132,1)"/><text x="63.0192%" y="1199.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::is_write_closed (51 samples, 0.02%)</title><rect x="62.7768%" y="1173" width="0.0177%" height="15" fill="rgb(217,71,7)"/><text x="63.0268%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1397" width="0.3397%" height="15" fill="rgb(252,59,32)"/><text x="62.7055%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (979 samples, 0.34%)</title><rect x="62.4555%" y="1381" width="0.3397%" height="15" fill="rgb(253,204,25)"/><text x="62.7055%" y="1391.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1365" width="0.3397%" height="15" fill="rgb(232,21,16)"/><text x="62.7055%" y="1375.50"></text></g><g><title>tokio::runtime::park::Inner::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1349" width="0.3397%" height="15" fill="rgb(248,90,29)"/><text x="62.7055%" y="1359.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (979 samples, 0.34%)</title><rect x="62.4555%" y="1333" width="0.3397%" height="15" fill="rgb(249,223,7)"/><text x="62.7055%" y="1343.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1317" width="0.3397%" height="15" fill="rgb(231,119,42)"/><text x="62.7055%" y="1327.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1301" width="0.3397%" height="15" fill="rgb(215,41,35)"/><text x="62.7055%" y="1311.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1285" width="0.3397%" height="15" fill="rgb(220,44,45)"/><text x="62.7055%" y="1295.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (979 samples, 0.34%)</title><rect x="62.4555%" y="1269" width="0.3397%" height="15" fill="rgb(253,197,36)"/><text x="62.7055%" y="1279.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1253" width="0.3397%" height="15" fill="rgb(245,225,54)"/><text x="62.7055%" y="1263.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (979 samples, 0.34%)</title><rect x="62.4555%" y="1237" width="0.3397%" height="15" fill="rgb(239,94,37)"/><text x="62.7055%" y="1247.50"></text></g><g><title>tokio::io::driver::Driver::turn (979 samples, 0.34%)</title><rect x="62.4555%" y="1221" width="0.3397%" height="15" fill="rgb(242,217,10)"/><text x="62.7055%" y="1231.50"></text></g><g><title>tokio::io::driver::ready::Ready::from_mio (283 samples, 0.10%)</title><rect x="62.6970%" y="1205" width="0.0982%" height="15" fill="rgb(250,193,7)"/><text x="62.9470%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (264 samples, 0.09%)</title><rect x="62.7952%" y="1029" width="0.0916%" height="15" fill="rgb(230,104,19)"/><text x="63.0452%" y="1039.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1765" width="0.4909%" height="15" fill="rgb(230,181,4)"/><text x="62.6937%" y="1775.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1749" width="0.4909%" height="15" fill="rgb(216,219,49)"/><text x="62.6937%" y="1759.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1733" width="0.4909%" height="15" fill="rgb(254,144,0)"/><text x="62.6937%" y="1743.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1717" width="0.4909%" height="15" fill="rgb(205,209,38)"/><text x="62.6937%" y="1727.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1701" width="0.4909%" height="15" fill="rgb(240,21,42)"/><text x="62.6937%" y="1711.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1685" width="0.4909%" height="15" fill="rgb(241,132,3)"/><text x="62.6937%" y="1695.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1669" width="0.4909%" height="15" fill="rgb(225,14,2)"/><text x="62.6937%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1653" width="0.4909%" height="15" fill="rgb(210,141,35)"/><text x="62.6937%" y="1663.50"></text></g><g><title>std::panic::catch_unwind (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1637" width="0.4909%" height="15" fill="rgb(251,14,44)"/><text x="62.6937%" y="1647.50"></text></g><g><title>std::panicking::try (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1621" width="0.4909%" height="15" fill="rgb(247,48,18)"/><text x="62.6937%" y="1631.50"></text></g><g><title>__rust_try (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1605" width="0.4909%" height="15" fill="rgb(225,0,40)"/><text x="62.6937%" y="1615.50"></text></g><g><title>std::panicking::try::do_call (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1589" width="0.4909%" height="15" fill="rgb(221,31,33)"/><text x="62.6937%" y="1599.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1573" width="0.4909%" height="15" fill="rgb(237,42,40)"/><text x="62.6937%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1557" width="0.4909%" height="15" fill="rgb(233,51,29)"/><text x="62.6937%" y="1567.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1541" width="0.4909%" height="15" fill="rgb(226,58,20)"/><text x="62.6937%" y="1551.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1525" width="0.4909%" height="15" fill="rgb(208,98,7)"/><text x="62.6937%" y="1535.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1509" width="0.4909%" height="15" fill="rgb(228,143,44)"/><text x="62.6937%" y="1519.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1493" width="0.4909%" height="15" fill="rgb(246,55,38)"/><text x="62.6937%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1477" width="0.4909%" height="15" fill="rgb(247,87,16)"/><text x="62.6937%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1461" width="0.4909%" height="15" fill="rgb(234,129,42)"/><text x="62.6937%" y="1471.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1445" width="0.4909%" height="15" fill="rgb(220,82,16)"/><text x="62.6937%" y="1455.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1429" width="0.4909%" height="15" fill="rgb(211,88,4)"/><text x="62.6937%" y="1439.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,415 samples, 0.49%)</title><rect x="62.4437%" y="1413" width="0.4909%" height="15" fill="rgb(248,151,21)"/><text x="62.6937%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (402 samples, 0.14%)</title><rect x="62.7952%" y="1397" width="0.1395%" height="15" fill="rgb(238,163,6)"/><text x="63.0452%" y="1407.50"></text></g><g><title>tokio::coop::budget (402 samples, 0.14%)</title><rect x="62.7952%" y="1381" width="0.1395%" height="15" fill="rgb(209,183,11)"/><text x="63.0452%" y="1391.50"></text></g><g><title>tokio::coop::with_budget (402 samples, 0.14%)</title><rect x="62.7952%" y="1365" width="0.1395%" height="15" fill="rgb(219,37,20)"/><text x="63.0452%" y="1375.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (402 samples, 0.14%)</title><rect x="62.7952%" y="1349" width="0.1395%" height="15" fill="rgb(210,158,4)"/><text x="63.0452%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (402 samples, 0.14%)</title><rect x="62.7952%" y="1333" width="0.1395%" height="15" fill="rgb(221,167,53)"/><text x="63.0452%" y="1343.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (402 samples, 0.14%)</title><rect x="62.7952%" y="1317" width="0.1395%" height="15" fill="rgb(237,151,45)"/><text x="63.0452%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (402 samples, 0.14%)</title><rect x="62.7952%" y="1301" width="0.1395%" height="15" fill="rgb(231,39,3)"/><text x="63.0452%" y="1311.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (402 samples, 0.14%)</title><rect x="62.7952%" y="1285" width="0.1395%" height="15" fill="rgb(212,167,28)"/><text x="63.0452%" y="1295.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (402 samples, 0.14%)</title><rect x="62.7952%" y="1269" width="0.1395%" height="15" fill="rgb(232,178,8)"/><text x="63.0452%" y="1279.50"></text></g><g><title>tokio::runtime::task::raw::poll (402 samples, 0.14%)</title><rect x="62.7952%" y="1253" width="0.1395%" height="15" fill="rgb(225,151,20)"/><text x="63.0452%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (402 samples, 0.14%)</title><rect x="62.7952%" y="1237" width="0.1395%" height="15" fill="rgb(238,3,37)"/><text x="63.0452%" y="1247.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (402 samples, 0.14%)</title><rect x="62.7952%" y="1221" width="0.1395%" height="15" fill="rgb(251,147,42)"/><text x="63.0452%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (402 samples, 0.14%)</title><rect x="62.7952%" y="1205" width="0.1395%" height="15" fill="rgb(208,173,10)"/><text x="63.0452%" y="1215.50"></text></g><g><title>std::panic::catch_unwind (402 samples, 0.14%)</title><rect x="62.7952%" y="1189" width="0.1395%" height="15" fill="rgb(246,225,4)"/><text x="63.0452%" y="1199.50"></text></g><g><title>std::panicking::try (402 samples, 0.14%)</title><rect x="62.7952%" y="1173" width="0.1395%" height="15" fill="rgb(248,102,6)"/><text x="63.0452%" y="1183.50"></text></g><g><title>__rust_try (402 samples, 0.14%)</title><rect x="62.7952%" y="1157" width="0.1395%" height="15" fill="rgb(232,6,21)"/><text x="63.0452%" y="1167.50"></text></g><g><title>std::panicking::try::do_call (402 samples, 0.14%)</title><rect x="62.7952%" y="1141" width="0.1395%" height="15" fill="rgb(221,179,22)"/><text x="63.0452%" y="1151.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (402 samples, 0.14%)</title><rect x="62.7952%" y="1125" width="0.1395%" height="15" fill="rgb(252,50,20)"/><text x="63.0452%" y="1135.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (402 samples, 0.14%)</title><rect x="62.7952%" y="1109" width="0.1395%" height="15" fill="rgb(222,56,38)"/><text x="63.0452%" y="1119.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (402 samples, 0.14%)</title><rect x="62.7952%" y="1093" width="0.1395%" height="15" fill="rgb(206,193,29)"/><text x="63.0452%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (402 samples, 0.14%)</title><rect x="62.7952%" y="1077" width="0.1395%" height="15" fill="rgb(239,192,45)"/><text x="63.0452%" y="1087.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (402 samples, 0.14%)</title><rect x="62.7952%" y="1061" width="0.1395%" height="15" fill="rgb(254,18,36)"/><text x="63.0452%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (402 samples, 0.14%)</title><rect x="62.7952%" y="1045" width="0.1395%" height="15" fill="rgb(221,127,11)"/><text x="63.0452%" y="1055.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (138 samples, 0.05%)</title><rect x="62.8868%" y="1029" width="0.0479%" height="15" fill="rgb(234,146,35)"/><text x="63.1368%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.01%)</title><rect x="62.9652%" y="1349" width="0.0104%" height="15" fill="rgb(254,201,37)"/><text x="63.2152%" y="1359.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (212 samples, 0.07%)</title><rect x="62.9371%" y="1493" width="0.0736%" height="15" fill="rgb(211,202,23)"/><text x="63.1871%" y="1503.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (212 samples, 0.07%)</title><rect x="62.9371%" y="1477" width="0.0736%" height="15" fill="rgb(237,91,2)"/><text x="63.1871%" y="1487.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (212 samples, 0.07%)</title><rect x="62.9371%" y="1461" width="0.0736%" height="15" fill="rgb(226,228,36)"/><text x="63.1871%" y="1471.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (212 samples, 0.07%)</title><rect x="62.9371%" y="1445" width="0.0736%" height="15" fill="rgb(213,63,50)"/><text x="63.1871%" y="1455.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (212 samples, 0.07%)</title><rect x="62.9371%" y="1429" width="0.0736%" height="15" fill="rgb(235,194,19)"/><text x="63.1871%" y="1439.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (212 samples, 0.07%)</title><rect x="62.9371%" y="1413" width="0.0736%" height="15" fill="rgb(207,204,18)"/><text x="63.1871%" y="1423.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (212 samples, 0.07%)</title><rect x="62.9371%" y="1397" width="0.0736%" height="15" fill="rgb(248,8,7)"/><text x="63.1871%" y="1407.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (212 samples, 0.07%)</title><rect x="62.9371%" y="1381" width="0.0736%" height="15" fill="rgb(223,145,47)"/><text x="63.1871%" y="1391.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (191 samples, 0.07%)</title><rect x="62.9444%" y="1365" width="0.0663%" height="15" fill="rgb(228,84,11)"/><text x="63.1944%" y="1375.50"></text></g><g><title>tokio::util::bit::Pack::unpack (33 samples, 0.01%)</title><rect x="62.9992%" y="1349" width="0.0114%" height="15" fill="rgb(218,76,45)"/><text x="63.2492%" y="1359.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (239 samples, 0.08%)</title><rect x="62.9357%" y="1509" width="0.0829%" height="15" fill="rgb(223,80,15)"/><text x="63.1857%" y="1519.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (305 samples, 0.11%)</title><rect x="62.9357%" y="1525" width="0.1058%" height="15" fill="rgb(219,218,33)"/><text x="63.1857%" y="1535.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (66 samples, 0.02%)</title><rect x="63.0187%" y="1509" width="0.0229%" height="15" fill="rgb(208,51,11)"/><text x="63.2687%" y="1519.50"></text></g><g><title>log::__private_api_log (66 samples, 0.02%)</title><rect x="63.0187%" y="1493" width="0.0229%" height="15" fill="rgb(229,165,39)"/><text x="63.2687%" y="1503.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (66 samples, 0.02%)</title><rect x="63.0187%" y="1477" width="0.0229%" height="15" fill="rgb(241,100,24)"/><text x="63.2687%" y="1487.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (66 samples, 0.02%)</title><rect x="63.0187%" y="1461" width="0.0229%" height="15" fill="rgb(228,14,23)"/><text x="63.2687%" y="1471.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (66 samples, 0.02%)</title><rect x="63.0187%" y="1445" width="0.0229%" height="15" fill="rgb(247,116,52)"/><text x="63.2687%" y="1455.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (66 samples, 0.02%)</title><rect x="63.0187%" y="1429" width="0.0229%" height="15" fill="rgb(216,149,33)"/><text x="63.2687%" y="1439.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (66 samples, 0.02%)</title><rect x="63.0187%" y="1413" width="0.0229%" height="15" fill="rgb(238,142,29)"/><text x="63.2687%" y="1423.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (66 samples, 0.02%)</title><rect x="63.0187%" y="1397" width="0.0229%" height="15" fill="rgb(224,83,40)"/><text x="63.2687%" y="1407.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (66 samples, 0.02%)</title><rect x="63.0187%" y="1381" width="0.0229%" height="15" fill="rgb(234,165,11)"/><text x="63.2687%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (38 samples, 0.01%)</title><rect x="63.0429%" y="1189" width="0.0132%" height="15" fill="rgb(215,96,23)"/><text x="63.2929%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (66 samples, 0.02%)</title><rect x="63.0429%" y="1205" width="0.0229%" height="15" fill="rgb(233,179,26)"/><text x="63.2929%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (86 samples, 0.03%)</title><rect x="63.0429%" y="1221" width="0.0298%" height="15" fill="rgb(225,129,33)"/><text x="63.2929%" y="1231.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (138 samples, 0.05%)</title><rect x="63.0429%" y="1253" width="0.0479%" height="15" fill="rgb(237,49,13)"/><text x="63.2929%" y="1263.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (138 samples, 0.05%)</title><rect x="63.0429%" y="1237" width="0.0479%" height="15" fill="rgb(211,3,31)"/><text x="63.2929%" y="1247.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (52 samples, 0.02%)</title><rect x="63.0728%" y="1221" width="0.0180%" height="15" fill="rgb(216,152,19)"/><text x="63.3228%" y="1231.50"></text></g><g><title>core::mem::replace (52 samples, 0.02%)</title><rect x="63.0728%" y="1205" width="0.0180%" height="15" fill="rgb(251,121,35)"/><text x="63.3228%" y="1215.50"></text></g><g><title>core::mem::swap (52 samples, 0.02%)</title><rect x="63.0728%" y="1189" width="0.0180%" height="15" fill="rgb(210,217,47)"/><text x="63.3228%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (52 samples, 0.02%)</title><rect x="63.0728%" y="1173" width="0.0180%" height="15" fill="rgb(244,116,22)"/><text x="63.3228%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (213 samples, 0.07%)</title><rect x="63.0416%" y="1429" width="0.0739%" height="15" fill="rgb(228,17,21)"/><text x="63.2916%" y="1439.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (213 samples, 0.07%)</title><rect x="63.0416%" y="1413" width="0.0739%" height="15" fill="rgb(240,149,34)"/><text x="63.2916%" y="1423.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (213 samples, 0.07%)</title><rect x="63.0416%" y="1397" width="0.0739%" height="15" fill="rgb(208,125,47)"/><text x="63.2916%" y="1407.50"></text></g><g><title>tokio::runtime::park::Inner::park (213 samples, 0.07%)</title><rect x="63.0416%" y="1381" width="0.0739%" height="15" fill="rgb(249,186,39)"/><text x="63.2916%" y="1391.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (213 samples, 0.07%)</title><rect x="63.0416%" y="1365" width="0.0739%" height="15" fill="rgb(240,220,33)"/><text x="63.2916%" y="1375.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (213 samples, 0.07%)</title><rect x="63.0416%" y="1349" width="0.0739%" height="15" fill="rgb(243,110,23)"/><text x="63.2916%" y="1359.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (213 samples, 0.07%)</title><rect x="63.0416%" y="1333" width="0.0739%" height="15" fill="rgb(219,163,46)"/><text x="63.2916%" y="1343.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (213 samples, 0.07%)</title><rect x="63.0416%" y="1317" width="0.0739%" height="15" fill="rgb(216,126,30)"/><text x="63.2916%" y="1327.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (213 samples, 0.07%)</title><rect x="63.0416%" y="1301" width="0.0739%" height="15" fill="rgb(208,139,11)"/><text x="63.2916%" y="1311.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (209 samples, 0.07%)</title><rect x="63.0429%" y="1285" width="0.0725%" height="15" fill="rgb(213,118,36)"/><text x="63.2929%" y="1295.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (209 samples, 0.07%)</title><rect x="63.0429%" y="1269" width="0.0725%" height="15" fill="rgb(226,43,17)"/><text x="63.2929%" y="1279.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll_at (71 samples, 0.02%)</title><rect x="63.0908%" y="1253" width="0.0246%" height="15" fill="rgb(254,217,4)"/><text x="63.3408%" y="1263.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (71 samples, 0.02%)</title><rect x="63.0908%" y="1237" width="0.0246%" height="15" fill="rgb(210,134,47)"/><text x="63.3408%" y="1247.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (71 samples, 0.02%)</title><rect x="63.0908%" y="1221" width="0.0246%" height="15" fill="rgb(237,24,49)"/><text x="63.3408%" y="1231.50"></text></g><g><title>core::mem::replace (71 samples, 0.02%)</title><rect x="63.0908%" y="1205" width="0.0246%" height="15" fill="rgb(251,39,46)"/><text x="63.3408%" y="1215.50"></text></g><g><title>core::mem::swap (71 samples, 0.02%)</title><rect x="63.0908%" y="1189" width="0.0246%" height="15" fill="rgb(251,220,3)"/><text x="63.3408%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (71 samples, 0.02%)</title><rect x="63.0908%" y="1173" width="0.0246%" height="15" fill="rgb(228,105,12)"/><text x="63.3408%" y="1183.50"></text></g><g><title>core::ptr::read (50 samples, 0.02%)</title><rect x="63.0981%" y="1157" width="0.0173%" height="15" fill="rgb(215,196,1)"/><text x="63.3481%" y="1167.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (30 samples, 0.01%)</title><rect x="63.1155%" y="1045" width="0.0104%" height="15" fill="rgb(214,33,39)"/><text x="63.3655%" y="1055.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (30 samples, 0.01%)</title><rect x="63.1155%" y="1029" width="0.0104%" height="15" fill="rgb(220,19,52)"/><text x="63.3655%" y="1039.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (30 samples, 0.01%)</title><rect x="63.1155%" y="1013" width="0.0104%" height="15" fill="rgb(221,78,38)"/><text x="63.3655%" y="1023.50"></text></g><g><title>__GI___pthread_mutex_unlock (33 samples, 0.01%)</title><rect x="63.1449%" y="805" width="0.0114%" height="15" fill="rgb(253,30,16)"/><text x="63.3949%" y="815.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (33 samples, 0.01%)</title><rect x="63.1449%" y="789" width="0.0114%" height="15" fill="rgb(242,65,0)"/><text x="63.3949%" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (29 samples, 0.01%)</title><rect x="63.1463%" y="773" width="0.0101%" height="15" fill="rgb(235,201,12)"/><text x="63.3963%" y="783.50"></text></g><g><title>do_syscall_64 (29 samples, 0.01%)</title><rect x="63.1463%" y="757" width="0.0101%" height="15" fill="rgb(233,161,9)"/><text x="63.3963%" y="767.50"></text></g><g><title>__x64_sys_futex (29 samples, 0.01%)</title><rect x="63.1463%" y="741" width="0.0101%" height="15" fill="rgb(241,207,41)"/><text x="63.3963%" y="751.50"></text></g><g><title>do_futex (29 samples, 0.01%)</title><rect x="63.1463%" y="725" width="0.0101%" height="15" fill="rgb(212,69,46)"/><text x="63.3963%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (48 samples, 0.02%)</title><rect x="63.1439%" y="837" width="0.0167%" height="15" fill="rgb(239,69,45)"/><text x="63.3939%" y="847.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (48 samples, 0.02%)</title><rect x="63.1439%" y="821" width="0.0167%" height="15" fill="rgb(242,117,48)"/><text x="63.3939%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (53 samples, 0.02%)</title><rect x="63.1439%" y="869" width="0.0184%" height="15" fill="rgb(228,41,36)"/><text x="63.3939%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.02%)</title><rect x="63.1439%" y="853" width="0.0184%" height="15" fill="rgb(212,3,32)"/><text x="63.3939%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (157 samples, 0.05%)</title><rect x="63.1259%" y="1045" width="0.0545%" height="15" fill="rgb(233,41,49)"/><text x="63.3759%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (157 samples, 0.05%)</title><rect x="63.1259%" y="1029" width="0.0545%" height="15" fill="rgb(252,170,49)"/><text x="63.3759%" y="1039.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.05%)</title><rect x="63.1259%" y="1013" width="0.0545%" height="15" fill="rgb(229,53,26)"/><text x="63.3759%" y="1023.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (157 samples, 0.05%)</title><rect x="63.1259%" y="997" width="0.0545%" height="15" fill="rgb(217,157,12)"/><text x="63.3759%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (157 samples, 0.05%)</title><rect x="63.1259%" y="981" width="0.0545%" height="15" fill="rgb(227,17,9)"/><text x="63.3759%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (157 samples, 0.05%)</title><rect x="63.1259%" y="965" width="0.0545%" height="15" fill="rgb(218,84,12)"/><text x="63.3759%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (144 samples, 0.05%)</title><rect x="63.1304%" y="949" width="0.0500%" height="15" fill="rgb(212,79,24)"/><text x="63.3804%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (144 samples, 0.05%)</title><rect x="63.1304%" y="933" width="0.0500%" height="15" fill="rgb(217,222,37)"/><text x="63.3804%" y="943.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.05%)</title><rect x="63.1304%" y="917" width="0.0500%" height="15" fill="rgb(246,208,8)"/><text x="63.3804%" y="927.50"></text></g><g><title>tokio::util::slab::Value&lt;T&gt;::release (144 samples, 0.05%)</title><rect x="63.1304%" y="901" width="0.0500%" height="15" fill="rgb(244,133,10)"/><text x="63.3804%" y="911.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::release (119 samples, 0.04%)</title><rect x="63.1390%" y="885" width="0.0413%" height="15" fill="rgb(209,219,41)"/><text x="63.3890%" y="895.50"></text></g><g><title>tokio::util::slab::Slots&lt;T&gt;::index_for (31 samples, 0.01%)</title><rect x="63.1696%" y="869" width="0.0108%" height="15" fill="rgb(253,175,45)"/><text x="63.4196%" y="879.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (30 samples, 0.01%)</title><rect x="63.1803%" y="997" width="0.0104%" height="15" fill="rgb(235,100,37)"/><text x="63.4303%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (30 samples, 0.01%)</title><rect x="63.1803%" y="981" width="0.0104%" height="15" fill="rgb(225,87,19)"/><text x="63.4303%" y="991.50"></text></g><g><title>core::task::wake::Waker::wake (41 samples, 0.01%)</title><rect x="63.1907%" y="981" width="0.0142%" height="15" fill="rgb(217,152,17)"/><text x="63.4407%" y="991.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (41 samples, 0.01%)</title><rect x="63.1907%" y="965" width="0.0142%" height="15" fill="rgb(235,72,13)"/><text x="63.4407%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (41 samples, 0.01%)</title><rect x="63.1907%" y="949" width="0.0142%" height="15" fill="rgb(233,140,18)"/><text x="63.4407%" y="959.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (273 samples, 0.09%)</title><rect x="63.1155%" y="1061" width="0.0947%" height="15" fill="rgb(207,212,28)"/><text x="63.3655%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (86 samples, 0.03%)</title><rect x="63.1803%" y="1045" width="0.0298%" height="15" fill="rgb(220,130,25)"/><text x="63.4303%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (86 samples, 0.03%)</title><rect x="63.1803%" y="1029" width="0.0298%" height="15" fill="rgb(205,55,34)"/><text x="63.4303%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (86 samples, 0.03%)</title><rect x="63.1803%" y="1013" width="0.0298%" height="15" fill="rgb(237,54,35)"/><text x="63.4303%" y="1023.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (56 samples, 0.02%)</title><rect x="63.1907%" y="997" width="0.0194%" height="15" fill="rgb(208,67,23)"/><text x="63.4407%" y="1007.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (52 samples, 0.02%)</title><rect x="63.2130%" y="1029" width="0.0180%" height="15" fill="rgb(206,207,50)"/><text x="63.4630%" y="1039.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (52 samples, 0.02%)</title><rect x="63.2130%" y="1013" width="0.0180%" height="15" fill="rgb(213,211,42)"/><text x="63.4630%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (73 samples, 0.03%)</title><rect x="63.2130%" y="1045" width="0.0253%" height="15" fill="rgb(252,197,50)"/><text x="63.4630%" y="1055.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (116 samples, 0.04%)</title><rect x="63.2102%" y="1061" width="0.0402%" height="15" fill="rgb(251,211,41)"/><text x="63.4602%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.02%)</title><rect x="63.2504%" y="1045" width="0.0184%" height="15" fill="rgb(229,211,5)"/><text x="63.5004%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (53 samples, 0.02%)</title><rect x="63.2504%" y="1029" width="0.0184%" height="15" fill="rgb(239,36,31)"/><text x="63.5004%" y="1039.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (53 samples, 0.02%)</title><rect x="63.2504%" y="1013" width="0.0184%" height="15" fill="rgb(248,67,31)"/><text x="63.5004%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (53 samples, 0.02%)</title><rect x="63.2504%" y="997" width="0.0184%" height="15" fill="rgb(249,55,44)"/><text x="63.5004%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (53 samples, 0.02%)</title><rect x="63.2504%" y="981" width="0.0184%" height="15" fill="rgb(216,82,12)"/><text x="63.5004%" y="991.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (53 samples, 0.02%)</title><rect x="63.2504%" y="965" width="0.0184%" height="15" fill="rgb(242,174,1)"/><text x="63.5004%" y="975.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (34 samples, 0.01%)</title><rect x="63.2688%" y="1029" width="0.0118%" height="15" fill="rgb(208,120,29)"/><text x="63.5188%" y="1039.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (34 samples, 0.01%)</title><rect x="63.2688%" y="1013" width="0.0118%" height="15" fill="rgb(221,105,43)"/><text x="63.5188%" y="1023.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1765" width="0.3501%" height="15" fill="rgb(234,124,22)"/><text x="63.1857%" y="1775.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1749" width="0.3501%" height="15" fill="rgb(212,23,30)"/><text x="63.1857%" y="1759.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1733" width="0.3501%" height="15" fill="rgb(219,122,53)"/><text x="63.1857%" y="1743.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1717" width="0.3501%" height="15" fill="rgb(248,84,24)"/><text x="63.1857%" y="1727.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1701" width="0.3501%" height="15" fill="rgb(245,115,18)"/><text x="63.1857%" y="1711.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1685" width="0.3501%" height="15" fill="rgb(227,176,51)"/><text x="63.1857%" y="1695.50"></text></g><g><title>std::panic::catch_unwind (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1669" width="0.3501%" height="15" fill="rgb(229,63,42)"/><text x="63.1857%" y="1679.50"></text></g><g><title>std::panicking::try (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1653" width="0.3501%" height="15" fill="rgb(247,202,24)"/><text x="63.1857%" y="1663.50"></text></g><g><title>__rust_try (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1637" width="0.3501%" height="15" fill="rgb(244,173,20)"/><text x="63.1857%" y="1647.50"></text></g><g><title>std::panicking::try::do_call (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1621" width="0.3501%" height="15" fill="rgb(242,81,47)"/><text x="63.1857%" y="1631.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1605" width="0.3501%" height="15" fill="rgb(231,185,54)"/><text x="63.1857%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1589" width="0.3501%" height="15" fill="rgb(243,55,32)"/><text x="63.1857%" y="1599.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1573" width="0.3501%" height="15" fill="rgb(208,167,19)"/><text x="63.1857%" y="1583.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1557" width="0.3501%" height="15" fill="rgb(231,72,35)"/><text x="63.1857%" y="1567.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,009 samples, 0.35%)</title><rect x="62.9357%" y="1541" width="0.3501%" height="15" fill="rgb(250,173,51)"/><text x="63.1857%" y="1551.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (704 samples, 0.24%)</title><rect x="63.0416%" y="1525" width="0.2443%" height="15" fill="rgb(209,5,22)"/><text x="63.2916%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (704 samples, 0.24%)</title><rect x="63.0416%" y="1509" width="0.2443%" height="15" fill="rgb(250,174,19)"/><text x="63.2916%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (704 samples, 0.24%)</title><rect x="63.0416%" y="1493" width="0.2443%" height="15" fill="rgb(217,3,49)"/><text x="63.2916%" y="1503.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (704 samples, 0.24%)</title><rect x="63.0416%" y="1477" width="0.2443%" height="15" fill="rgb(218,225,5)"/><text x="63.2916%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (704 samples, 0.24%)</title><rect x="63.0416%" y="1461" width="0.2443%" height="15" fill="rgb(236,89,11)"/><text x="63.2916%" y="1471.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (704 samples, 0.24%)</title><rect x="63.0416%" y="1445" width="0.2443%" height="15" fill="rgb(206,33,28)"/><text x="63.2916%" y="1455.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (491 samples, 0.17%)</title><rect x="63.1155%" y="1429" width="0.1704%" height="15" fill="rgb(241,56,42)"/><text x="63.3655%" y="1439.50"></text></g><g><title>tokio::coop::budget (491 samples, 0.17%)</title><rect x="63.1155%" y="1413" width="0.1704%" height="15" fill="rgb(222,44,11)"/><text x="63.3655%" y="1423.50"></text></g><g><title>tokio::coop::with_budget (491 samples, 0.17%)</title><rect x="63.1155%" y="1397" width="0.1704%" height="15" fill="rgb(234,111,20)"/><text x="63.3655%" y="1407.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (491 samples, 0.17%)</title><rect x="63.1155%" y="1381" width="0.1704%" height="15" fill="rgb(237,77,6)"/><text x="63.3655%" y="1391.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (491 samples, 0.17%)</title><rect x="63.1155%" y="1365" width="0.1704%" height="15" fill="rgb(235,111,23)"/><text x="63.3655%" y="1375.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (491 samples, 0.17%)</title><rect x="63.1155%" y="1349" width="0.1704%" height="15" fill="rgb(251,135,29)"/><text x="63.3655%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (491 samples, 0.17%)</title><rect x="63.1155%" y="1333" width="0.1704%" height="15" fill="rgb(217,57,1)"/><text x="63.3655%" y="1343.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (491 samples, 0.17%)</title><rect x="63.1155%" y="1317" width="0.1704%" height="15" fill="rgb(249,119,31)"/><text x="63.3655%" y="1327.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (491 samples, 0.17%)</title><rect x="63.1155%" y="1301" width="0.1704%" height="15" fill="rgb(233,164,33)"/><text x="63.3655%" y="1311.50"></text></g><g><title>tokio::runtime::task::raw::poll (491 samples, 0.17%)</title><rect x="63.1155%" y="1285" width="0.1704%" height="15" fill="rgb(250,217,43)"/><text x="63.3655%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (491 samples, 0.17%)</title><rect x="63.1155%" y="1269" width="0.1704%" height="15" fill="rgb(232,154,50)"/><text x="63.3655%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (491 samples, 0.17%)</title><rect x="63.1155%" y="1253" width="0.1704%" height="15" fill="rgb(227,190,8)"/><text x="63.3655%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (491 samples, 0.17%)</title><rect x="63.1155%" y="1237" width="0.1704%" height="15" fill="rgb(209,217,32)"/><text x="63.3655%" y="1247.50"></text></g><g><title>std::panic::catch_unwind (491 samples, 0.17%)</title><rect x="63.1155%" y="1221" width="0.1704%" height="15" fill="rgb(243,203,50)"/><text x="63.3655%" y="1231.50"></text></g><g><title>std::panicking::try (491 samples, 0.17%)</title><rect x="63.1155%" y="1205" width="0.1704%" height="15" fill="rgb(232,152,27)"/><text x="63.3655%" y="1215.50"></text></g><g><title>__rust_try (491 samples, 0.17%)</title><rect x="63.1155%" y="1189" width="0.1704%" height="15" fill="rgb(240,34,29)"/><text x="63.3655%" y="1199.50"></text></g><g><title>std::panicking::try::do_call (491 samples, 0.17%)</title><rect x="63.1155%" y="1173" width="0.1704%" height="15" fill="rgb(215,185,52)"/><text x="63.3655%" y="1183.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (491 samples, 0.17%)</title><rect x="63.1155%" y="1157" width="0.1704%" height="15" fill="rgb(240,89,49)"/><text x="63.3655%" y="1167.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (491 samples, 0.17%)</title><rect x="63.1155%" y="1141" width="0.1704%" height="15" fill="rgb(225,12,52)"/><text x="63.3655%" y="1151.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (491 samples, 0.17%)</title><rect x="63.1155%" y="1125" width="0.1704%" height="15" fill="rgb(239,128,45)"/><text x="63.3655%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (491 samples, 0.17%)</title><rect x="63.1155%" y="1109" width="0.1704%" height="15" fill="rgb(211,78,47)"/><text x="63.3655%" y="1119.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (491 samples, 0.17%)</title><rect x="63.1155%" y="1093" width="0.1704%" height="15" fill="rgb(232,31,21)"/><text x="63.3655%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (491 samples, 0.17%)</title><rect x="63.1155%" y="1077" width="0.1704%" height="15" fill="rgb(222,168,14)"/><text x="63.3655%" y="1087.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (102 samples, 0.04%)</title><rect x="63.2504%" y="1061" width="0.0354%" height="15" fill="rgb(209,128,24)"/><text x="63.5004%" y="1071.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (49 samples, 0.02%)</title><rect x="63.2688%" y="1045" width="0.0170%" height="15" fill="rgb(249,35,13)"/><text x="63.5188%" y="1055.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (29 samples, 0.01%)</title><rect x="63.2858%" y="1589" width="0.0101%" height="15" fill="rgb(218,7,2)"/><text x="63.5358%" y="1599.50"></text></g><g><title>std::io::Write::write_fmt (29 samples, 0.01%)</title><rect x="63.2858%" y="1573" width="0.0101%" height="15" fill="rgb(238,107,27)"/><text x="63.5358%" y="1583.50"></text></g><g><title>core::fmt::write (29 samples, 0.01%)</title><rect x="63.2858%" y="1557" width="0.0101%" height="15" fill="rgb(217,88,38)"/><text x="63.5358%" y="1567.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (29 samples, 0.01%)</title><rect x="63.2858%" y="1541" width="0.0101%" height="15" fill="rgb(230,207,0)"/><text x="63.5358%" y="1551.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (29 samples, 0.01%)</title><rect x="63.2858%" y="1525" width="0.0101%" height="15" fill="rgb(249,64,54)"/><text x="63.5358%" y="1535.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (29 samples, 0.01%)</title><rect x="63.2959%" y="1541" width="0.0101%" height="15" fill="rgb(231,7,11)"/><text x="63.5459%" y="1551.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (29 samples, 0.01%)</title><rect x="63.2959%" y="1525" width="0.0101%" height="15" fill="rgb(205,149,21)"/><text x="63.5459%" y="1535.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (29 samples, 0.01%)</title><rect x="63.2959%" y="1509" width="0.0101%" height="15" fill="rgb(215,126,34)"/><text x="63.5459%" y="1519.50"></text></g><g><title>core::fmt::write (29 samples, 0.01%)</title><rect x="63.2959%" y="1493" width="0.0101%" height="15" fill="rgb(241,132,45)"/><text x="63.5459%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (59 samples, 0.02%)</title><rect x="63.2959%" y="1589" width="0.0205%" height="15" fill="rgb(252,69,32)"/><text x="63.5459%" y="1599.50"></text></g><g><title>std::io::Write::write_fmt (59 samples, 0.02%)</title><rect x="63.2959%" y="1573" width="0.0205%" height="15" fill="rgb(232,204,19)"/><text x="63.5459%" y="1583.50"></text></g><g><title>core::fmt::write (59 samples, 0.02%)</title><rect x="63.2959%" y="1557" width="0.0205%" height="15" fill="rgb(249,15,47)"/><text x="63.5459%" y="1567.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.01%)</title><rect x="63.3059%" y="1541" width="0.0104%" height="15" fill="rgb(209,227,23)"/><text x="63.5559%" y="1551.50"></text></g><g><title>std::io::Write::write_all (30 samples, 0.01%)</title><rect x="63.3059%" y="1525" width="0.0104%" height="15" fill="rgb(248,92,24)"/><text x="63.5559%" y="1535.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (30 samples, 0.01%)</title><rect x="63.3059%" y="1509" width="0.0104%" height="15" fill="rgb(247,59,2)"/><text x="63.5559%" y="1519.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (34 samples, 0.01%)</title><rect x="63.3163%" y="1525" width="0.0118%" height="15" fill="rgb(221,30,5)"/><text x="63.5663%" y="1535.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (34 samples, 0.01%)</title><rect x="63.3163%" y="1509" width="0.0118%" height="15" fill="rgb(208,108,53)"/><text x="63.5663%" y="1519.50"></text></g><g><title>core::fmt::write (34 samples, 0.01%)</title><rect x="63.3163%" y="1493" width="0.0118%" height="15" fill="rgb(211,183,26)"/><text x="63.5663%" y="1503.50"></text></g><g><title>core::fmt::run (34 samples, 0.01%)</title><rect x="63.3163%" y="1477" width="0.0118%" height="15" fill="rgb(232,132,4)"/><text x="63.5663%" y="1487.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (34 samples, 0.01%)</title><rect x="63.3163%" y="1461" width="0.0118%" height="15" fill="rgb(253,128,37)"/><text x="63.5663%" y="1471.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (34 samples, 0.01%)</title><rect x="63.3163%" y="1445" width="0.0118%" height="15" fill="rgb(221,58,24)"/><text x="63.5663%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (64 samples, 0.02%)</title><rect x="63.3163%" y="1589" width="0.0222%" height="15" fill="rgb(230,54,45)"/><text x="63.5663%" y="1599.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (64 samples, 0.02%)</title><rect x="63.3163%" y="1573" width="0.0222%" height="15" fill="rgb(254,21,18)"/><text x="63.5663%" y="1583.50"></text></g><g><title>std::io::Write::write_fmt (64 samples, 0.02%)</title><rect x="63.3163%" y="1557" width="0.0222%" height="15" fill="rgb(221,108,0)"/><text x="63.5663%" y="1567.50"></text></g><g><title>core::fmt::write (64 samples, 0.02%)</title><rect x="63.3163%" y="1541" width="0.0222%" height="15" fill="rgb(206,95,1)"/><text x="63.5663%" y="1551.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.01%)</title><rect x="63.3281%" y="1525" width="0.0104%" height="15" fill="rgb(237,52,5)"/><text x="63.5781%" y="1535.50"></text></g><g><title>std::io::Write::write_all (30 samples, 0.01%)</title><rect x="63.3281%" y="1509" width="0.0104%" height="15" fill="rgb(218,150,34)"/><text x="63.5781%" y="1519.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (30 samples, 0.01%)</title><rect x="63.3281%" y="1493" width="0.0104%" height="15" fill="rgb(235,194,28)"/><text x="63.5781%" y="1503.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (46 samples, 0.02%)</title><rect x="63.3385%" y="1589" width="0.0160%" height="15" fill="rgb(245,92,18)"/><text x="63.5885%" y="1599.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (46 samples, 0.02%)</title><rect x="63.3385%" y="1573" width="0.0160%" height="15" fill="rgb(253,203,53)"/><text x="63.5885%" y="1583.50"></text></g><g><title>std::io::Write::write_fmt (46 samples, 0.02%)</title><rect x="63.3385%" y="1557" width="0.0160%" height="15" fill="rgb(249,185,47)"/><text x="63.5885%" y="1567.50"></text></g><g><title>core::fmt::write (46 samples, 0.02%)</title><rect x="63.3385%" y="1541" width="0.0160%" height="15" fill="rgb(252,194,52)"/><text x="63.5885%" y="1551.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (59 samples, 0.02%)</title><rect x="63.3545%" y="1525" width="0.0205%" height="15" fill="rgb(210,53,36)"/><text x="63.6045%" y="1535.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (59 samples, 0.02%)</title><rect x="63.3545%" y="1509" width="0.0205%" height="15" fill="rgb(237,37,25)"/><text x="63.6045%" y="1519.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (43 samples, 0.01%)</title><rect x="63.3601%" y="1493" width="0.0149%" height="15" fill="rgb(242,116,27)"/><text x="63.6101%" y="1503.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (43 samples, 0.01%)</title><rect x="63.3601%" y="1477" width="0.0149%" height="15" fill="rgb(213,185,26)"/><text x="63.6101%" y="1487.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (43 samples, 0.01%)</title><rect x="63.3601%" y="1461" width="0.0149%" height="15" fill="rgb(225,204,8)"/><text x="63.6101%" y="1471.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (46 samples, 0.02%)</title><rect x="63.3750%" y="1429" width="0.0160%" height="15" fill="rgb(254,111,37)"/><text x="63.6250%" y="1439.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (52 samples, 0.02%)</title><rect x="63.3750%" y="1493" width="0.0180%" height="15" fill="rgb(242,35,9)"/><text x="63.6250%" y="1503.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (52 samples, 0.02%)</title><rect x="63.3750%" y="1477" width="0.0180%" height="15" fill="rgb(232,138,49)"/><text x="63.6250%" y="1487.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (52 samples, 0.02%)</title><rect x="63.3750%" y="1461" width="0.0180%" height="15" fill="rgb(247,56,4)"/><text x="63.6250%" y="1471.50"></text></g><g><title>std::io::Write::write_all (52 samples, 0.02%)</title><rect x="63.3750%" y="1445" width="0.0180%" height="15" fill="rgb(226,179,17)"/><text x="63.6250%" y="1455.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (321 samples, 0.11%)</title><rect x="63.2858%" y="1733" width="0.1114%" height="15" fill="rgb(216,163,45)"/><text x="63.5358%" y="1743.50"></text></g><g><title>log::__private_api_log (321 samples, 0.11%)</title><rect x="63.2858%" y="1717" width="0.1114%" height="15" fill="rgb(211,157,3)"/><text x="63.5358%" y="1727.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (321 samples, 0.11%)</title><rect x="63.2858%" y="1701" width="0.1114%" height="15" fill="rgb(234,44,20)"/><text x="63.5358%" y="1711.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (321 samples, 0.11%)</title><rect x="63.2858%" y="1685" width="0.1114%" height="15" fill="rgb(254,138,23)"/><text x="63.5358%" y="1695.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (321 samples, 0.11%)</title><rect x="63.2858%" y="1669" width="0.1114%" height="15" fill="rgb(206,119,39)"/><text x="63.5358%" y="1679.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (321 samples, 0.11%)</title><rect x="63.2858%" y="1653" width="0.1114%" height="15" fill="rgb(231,105,52)"/><text x="63.5358%" y="1663.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (321 samples, 0.11%)</title><rect x="63.2858%" y="1637" width="0.1114%" height="15" fill="rgb(250,20,5)"/><text x="63.5358%" y="1647.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (321 samples, 0.11%)</title><rect x="63.2858%" y="1621" width="0.1114%" height="15" fill="rgb(215,198,30)"/><text x="63.5358%" y="1631.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (321 samples, 0.11%)</title><rect x="63.2858%" y="1605" width="0.1114%" height="15" fill="rgb(246,142,8)"/><text x="63.5358%" y="1615.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (123 samples, 0.04%)</title><rect x="63.3545%" y="1589" width="0.0427%" height="15" fill="rgb(243,26,38)"/><text x="63.6045%" y="1599.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (123 samples, 0.04%)</title><rect x="63.3545%" y="1573" width="0.0427%" height="15" fill="rgb(205,133,28)"/><text x="63.6045%" y="1583.50"></text></g><g><title>std::io::Write::write_fmt (123 samples, 0.04%)</title><rect x="63.3545%" y="1557" width="0.0427%" height="15" fill="rgb(212,34,0)"/><text x="63.6045%" y="1567.50"></text></g><g><title>core::fmt::write (123 samples, 0.04%)</title><rect x="63.3545%" y="1541" width="0.0427%" height="15" fill="rgb(251,226,22)"/><text x="63.6045%" y="1551.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (64 samples, 0.02%)</title><rect x="63.3750%" y="1525" width="0.0222%" height="15" fill="rgb(252,119,9)"/><text x="63.6250%" y="1535.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (64 samples, 0.02%)</title><rect x="63.3750%" y="1509" width="0.0222%" height="15" fill="rgb(213,150,50)"/><text x="63.6250%" y="1519.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (339 samples, 0.12%)</title><rect x="63.2858%" y="1749" width="0.1176%" height="15" fill="rgb(212,24,39)"/><text x="63.5358%" y="1759.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (40 samples, 0.01%)</title><rect x="63.4034%" y="1237" width="0.0139%" height="15" fill="rgb(213,46,39)"/><text x="63.6534%" y="1247.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (40 samples, 0.01%)</title><rect x="63.4034%" y="1221" width="0.0139%" height="15" fill="rgb(239,106,12)"/><text x="63.6534%" y="1231.50"></text></g><g><title>core::cell::BorrowRefMut::new (40 samples, 0.01%)</title><rect x="63.4034%" y="1205" width="0.0139%" height="15" fill="rgb(249,229,21)"/><text x="63.6534%" y="1215.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (40 samples, 0.01%)</title><rect x="63.4034%" y="1189" width="0.0139%" height="15" fill="rgb(212,158,3)"/><text x="63.6534%" y="1199.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (40 samples, 0.01%)</title><rect x="63.4034%" y="1173" width="0.0139%" height="15" fill="rgb(253,26,48)"/><text x="63.6534%" y="1183.50"></text></g><g><title>core::mem::replace (40 samples, 0.01%)</title><rect x="63.4034%" y="1157" width="0.0139%" height="15" fill="rgb(238,178,20)"/><text x="63.6534%" y="1167.50"></text></g><g><title>core::mem::swap (40 samples, 0.01%)</title><rect x="63.4034%" y="1141" width="0.0139%" height="15" fill="rgb(208,86,15)"/><text x="63.6534%" y="1151.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (40 samples, 0.01%)</title><rect x="63.4034%" y="1125" width="0.0139%" height="15" fill="rgb(239,42,53)"/><text x="63.6534%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1653" width="0.0340%" height="15" fill="rgb(245,226,8)"/><text x="63.6534%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (98 samples, 0.03%)</title><rect x="63.4034%" y="1637" width="0.0340%" height="15" fill="rgb(216,176,32)"/><text x="63.6534%" y="1647.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1621" width="0.0340%" height="15" fill="rgb(231,186,21)"/><text x="63.6534%" y="1631.50"></text></g><g><title>tokio::runtime::park::Inner::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1605" width="0.0340%" height="15" fill="rgb(205,95,49)"/><text x="63.6534%" y="1615.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (98 samples, 0.03%)</title><rect x="63.4034%" y="1589" width="0.0340%" height="15" fill="rgb(217,145,8)"/><text x="63.6534%" y="1599.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1573" width="0.0340%" height="15" fill="rgb(239,144,48)"/><text x="63.6534%" y="1583.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1557" width="0.0340%" height="15" fill="rgb(214,189,23)"/><text x="63.6534%" y="1567.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1541" width="0.0340%" height="15" fill="rgb(229,157,17)"/><text x="63.6534%" y="1551.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (98 samples, 0.03%)</title><rect x="63.4034%" y="1525" width="0.0340%" height="15" fill="rgb(230,5,48)"/><text x="63.6534%" y="1535.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1509" width="0.0340%" height="15" fill="rgb(224,156,48)"/><text x="63.6534%" y="1519.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (98 samples, 0.03%)</title><rect x="63.4034%" y="1493" width="0.0340%" height="15" fill="rgb(223,14,29)"/><text x="63.6534%" y="1503.50"></text></g><g><title>tokio::io::driver::Driver::turn (98 samples, 0.03%)</title><rect x="63.4034%" y="1477" width="0.0340%" height="15" fill="rgb(229,96,36)"/><text x="63.6534%" y="1487.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (98 samples, 0.03%)</title><rect x="63.4034%" y="1461" width="0.0340%" height="15" fill="rgb(231,102,53)"/><text x="63.6534%" y="1471.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (98 samples, 0.03%)</title><rect x="63.4034%" y="1445" width="0.0340%" height="15" fill="rgb(210,77,38)"/><text x="63.6534%" y="1455.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (98 samples, 0.03%)</title><rect x="63.4034%" y="1429" width="0.0340%" height="15" fill="rgb(235,131,6)"/><text x="63.6534%" y="1439.50"></text></g><g><title>core::task::wake::Waker::wake (98 samples, 0.03%)</title><rect x="63.4034%" y="1413" width="0.0340%" height="15" fill="rgb(252,55,38)"/><text x="63.6534%" y="1423.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (98 samples, 0.03%)</title><rect x="63.4034%" y="1397" width="0.0340%" height="15" fill="rgb(246,38,14)"/><text x="63.6534%" y="1407.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (98 samples, 0.03%)</title><rect x="63.4034%" y="1381" width="0.0340%" height="15" fill="rgb(242,27,5)"/><text x="63.6534%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (98 samples, 0.03%)</title><rect x="63.4034%" y="1365" width="0.0340%" height="15" fill="rgb(228,65,35)"/><text x="63.6534%" y="1375.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (98 samples, 0.03%)</title><rect x="63.4034%" y="1349" width="0.0340%" height="15" fill="rgb(245,93,11)"/><text x="63.6534%" y="1359.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (98 samples, 0.03%)</title><rect x="63.4034%" y="1333" width="0.0340%" height="15" fill="rgb(213,1,31)"/><text x="63.6534%" y="1343.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (98 samples, 0.03%)</title><rect x="63.4034%" y="1317" width="0.0340%" height="15" fill="rgb(237,205,14)"/><text x="63.6534%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (98 samples, 0.03%)</title><rect x="63.4034%" y="1301" width="0.0340%" height="15" fill="rgb(232,118,45)"/><text x="63.6534%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (98 samples, 0.03%)</title><rect x="63.4034%" y="1285" width="0.0340%" height="15" fill="rgb(218,5,6)"/><text x="63.6534%" y="1295.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (98 samples, 0.03%)</title><rect x="63.4034%" y="1269" width="0.0340%" height="15" fill="rgb(251,87,51)"/><text x="63.6534%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (98 samples, 0.03%)</title><rect x="63.4034%" y="1253" width="0.0340%" height="15" fill="rgb(207,225,20)"/><text x="63.6534%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (46 samples, 0.02%)</title><rect x="63.4215%" y="1237" width="0.0160%" height="15" fill="rgb(222,78,54)"/><text x="63.6715%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (33 samples, 0.01%)</title><rect x="63.4374%" y="1237" width="0.0114%" height="15" fill="rgb(232,85,16)"/><text x="63.6874%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (34 samples, 0.01%)</title><rect x="63.4607%" y="1205" width="0.0118%" height="15" fill="rgb(244,25,33)"/><text x="63.7107%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.01%)</title><rect x="63.4596%" y="1221" width="0.0132%" height="15" fill="rgb(233,24,36)"/><text x="63.7096%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place (56 samples, 0.02%)</title><rect x="63.4576%" y="1237" width="0.0194%" height="15" fill="rgb(253,49,54)"/><text x="63.7076%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (118 samples, 0.04%)</title><rect x="63.4374%" y="1269" width="0.0409%" height="15" fill="rgb(245,12,22)"/><text x="63.6874%" y="1279.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (118 samples, 0.04%)</title><rect x="63.4374%" y="1253" width="0.0409%" height="15" fill="rgb(253,141,28)"/><text x="63.6874%" y="1263.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::DerefMut&gt;::deref_mut (32 samples, 0.01%)</title><rect x="63.4784%" y="1237" width="0.0111%" height="15" fill="rgb(225,207,27)"/><text x="63.7284%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.02%)</title><rect x="63.4995%" y="1221" width="0.0208%" height="15" fill="rgb(220,84,2)"/><text x="63.7495%" y="1231.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (49 samples, 0.02%)</title><rect x="63.5034%" y="1205" width="0.0170%" height="15" fill="rgb(224,37,37)"/><text x="63.7534%" y="1215.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.01%)</title><rect x="63.5204%" y="1221" width="0.0121%" height="15" fill="rgb(220,143,18)"/><text x="63.7704%" y="1231.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (185 samples, 0.06%)</title><rect x="63.4784%" y="1269" width="0.0642%" height="15" fill="rgb(210,88,33)"/><text x="63.7284%" y="1279.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (185 samples, 0.06%)</title><rect x="63.4784%" y="1253" width="0.0642%" height="15" fill="rgb(219,87,51)"/><text x="63.7284%" y="1263.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (153 samples, 0.05%)</title><rect x="63.4895%" y="1237" width="0.0531%" height="15" fill="rgb(211,7,35)"/><text x="63.7395%" y="1247.50"></text></g><g><title>alloc::vec::from_elem (94 samples, 0.03%)</title><rect x="63.5426%" y="1269" width="0.0326%" height="15" fill="rgb(232,77,2)"/><text x="63.7926%" y="1279.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (94 samples, 0.03%)</title><rect x="63.5426%" y="1253" width="0.0326%" height="15" fill="rgb(249,94,25)"/><text x="63.7926%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (94 samples, 0.03%)</title><rect x="63.5426%" y="1237" width="0.0326%" height="15" fill="rgb(215,112,2)"/><text x="63.7926%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (94 samples, 0.03%)</title><rect x="63.5426%" y="1221" width="0.0326%" height="15" fill="rgb(226,115,48)"/><text x="63.7926%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (94 samples, 0.03%)</title><rect x="63.5426%" y="1205" width="0.0326%" height="15" fill="rgb(249,196,10)"/><text x="63.7926%" y="1215.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::wake_rx (30 samples, 0.01%)</title><rect x="63.5752%" y="1173" width="0.0104%" height="15" fill="rgb(237,109,14)"/><text x="63.8252%" y="1183.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (30 samples, 0.01%)</title><rect x="63.5752%" y="1157" width="0.0104%" height="15" fill="rgb(217,103,53)"/><text x="63.8252%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="63.5752%" y="1269" width="0.0229%" height="15" fill="rgb(244,137,9)"/><text x="63.8252%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="63.5752%" y="1253" width="0.0229%" height="15" fill="rgb(227,201,3)"/><text x="63.8252%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="63.5752%" y="1237" width="0.0229%" height="15" fill="rgb(243,94,6)"/><text x="63.8252%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="63.5752%" y="1221" width="0.0229%" height="15" fill="rgb(235,118,5)"/><text x="63.8252%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="63.5752%" y="1205" width="0.0229%" height="15" fill="rgb(247,10,30)"/><text x="63.8252%" y="1215.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.02%)</title><rect x="63.5752%" y="1189" width="0.0229%" height="15" fill="rgb(205,26,28)"/><text x="63.8252%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::close (36 samples, 0.01%)</title><rect x="63.5856%" y="1173" width="0.0125%" height="15" fill="rgb(206,99,35)"/><text x="63.8356%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (36 samples, 0.01%)</title><rect x="63.5856%" y="1157" width="0.0125%" height="15" fill="rgb(238,130,40)"/><text x="63.8356%" y="1167.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (31 samples, 0.01%)</title><rect x="63.5981%" y="1253" width="0.0108%" height="15" fill="rgb(224,126,31)"/><text x="63.8481%" y="1263.50"></text></g><g><title>log::__private_api_log (84 samples, 0.03%)</title><rect x="63.5981%" y="1269" width="0.0291%" height="15" fill="rgb(254,105,17)"/><text x="63.8481%" y="1279.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (66 samples, 0.02%)</title><rect x="63.6345%" y="1173" width="0.0229%" height="15" fill="rgb(216,87,36)"/><text x="63.8845%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_add (39 samples, 0.01%)</title><rect x="63.6439%" y="1157" width="0.0135%" height="15" fill="rgb(240,21,12)"/><text x="63.8939%" y="1167.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (90 samples, 0.03%)</title><rect x="63.6272%" y="1221" width="0.0312%" height="15" fill="rgb(245,192,34)"/><text x="63.8772%" y="1231.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::read (89 samples, 0.03%)</title><rect x="63.6276%" y="1205" width="0.0309%" height="15" fill="rgb(226,100,49)"/><text x="63.8776%" y="1215.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::try_read (89 samples, 0.03%)</title><rect x="63.6276%" y="1189" width="0.0309%" height="15" fill="rgb(245,188,27)"/><text x="63.8776%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (64 samples, 0.02%)</title><rect x="63.6661%" y="1157" width="0.0222%" height="15" fill="rgb(212,170,8)"/><text x="63.9161%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (88 samples, 0.03%)</title><rect x="63.6584%" y="1205" width="0.0305%" height="15" fill="rgb(217,113,29)"/><text x="63.9084%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (88 samples, 0.03%)</title><rect x="63.6584%" y="1189" width="0.0305%" height="15" fill="rgb(237,30,3)"/><text x="63.9084%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (88 samples, 0.03%)</title><rect x="63.6584%" y="1173" width="0.0305%" height="15" fill="rgb(227,19,28)"/><text x="63.9084%" y="1183.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (68 samples, 0.02%)</title><rect x="63.6890%" y="1205" width="0.0236%" height="15" fill="rgb(239,172,45)"/><text x="63.9390%" y="1215.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (68 samples, 0.02%)</title><rect x="63.6890%" y="1189" width="0.0236%" height="15" fill="rgb(254,55,39)"/><text x="63.9390%" y="1199.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (43 samples, 0.01%)</title><rect x="63.6976%" y="1173" width="0.0149%" height="15" fill="rgb(249,208,12)"/><text x="63.9476%" y="1183.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (191 samples, 0.07%)</title><rect x="63.6584%" y="1221" width="0.0663%" height="15" fill="rgb(240,52,13)"/><text x="63.9084%" y="1231.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (35 samples, 0.01%)</title><rect x="63.7126%" y="1205" width="0.0121%" height="15" fill="rgb(252,149,13)"/><text x="63.9626%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (35 samples, 0.01%)</title><rect x="63.7126%" y="1189" width="0.0121%" height="15" fill="rgb(232,81,48)"/><text x="63.9626%" y="1199.50"></text></g><g><title>core::hash::Hasher::write_u32 (35 samples, 0.01%)</title><rect x="63.7126%" y="1173" width="0.0121%" height="15" fill="rgb(222,144,2)"/><text x="63.9626%" y="1183.50"></text></g><g><title>hashbrown::map::make_hash (57 samples, 0.02%)</title><rect x="63.7247%" y="1189" width="0.0198%" height="15" fill="rgb(216,81,32)"/><text x="63.9747%" y="1199.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (352 samples, 0.12%)</title><rect x="63.6272%" y="1269" width="0.1221%" height="15" fill="rgb(244,78,51)"/><text x="63.8772%" y="1279.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (352 samples, 0.12%)</title><rect x="63.6272%" y="1253" width="0.1221%" height="15" fill="rgb(217,66,21)"/><text x="63.8772%" y="1263.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (352 samples, 0.12%)</title><rect x="63.6272%" y="1237" width="0.1221%" height="15" fill="rgb(247,101,42)"/><text x="63.8772%" y="1247.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (71 samples, 0.02%)</title><rect x="63.7247%" y="1221" width="0.0246%" height="15" fill="rgb(227,81,39)"/><text x="63.9747%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (71 samples, 0.02%)</title><rect x="63.7247%" y="1205" width="0.0246%" height="15" fill="rgb(220,223,44)"/><text x="63.9747%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (29 samples, 0.01%)</title><rect x="63.7643%" y="1157" width="0.0101%" height="15" fill="rgb(205,218,2)"/><text x="64.0143%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (82 samples, 0.03%)</title><rect x="63.7643%" y="1205" width="0.0285%" height="15" fill="rgb(212,207,28)"/><text x="64.0143%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (82 samples, 0.03%)</title><rect x="63.7643%" y="1189" width="0.0285%" height="15" fill="rgb(224,12,41)"/><text x="64.0143%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (82 samples, 0.03%)</title><rect x="63.7643%" y="1173" width="0.0285%" height="15" fill="rgb(216,118,12)"/><text x="64.0143%" y="1183.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (53 samples, 0.02%)</title><rect x="63.7743%" y="1157" width="0.0184%" height="15" fill="rgb(252,97,46)"/><text x="64.0243%" y="1167.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (104 samples, 0.04%)</title><rect x="63.7643%" y="1221" width="0.0361%" height="15" fill="rgb(244,206,19)"/><text x="64.0143%" y="1231.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.01%)</title><rect x="63.8003%" y="1189" width="0.0142%" height="15" fill="rgb(231,84,31)"/><text x="64.0503%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (65 samples, 0.02%)</title><rect x="63.8146%" y="1189" width="0.0226%" height="15" fill="rgb(244,133,0)"/><text x="64.0646%" y="1199.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (328 samples, 0.11%)</title><rect x="63.7493%" y="1269" width="0.1138%" height="15" fill="rgb(223,15,50)"/><text x="63.9993%" y="1279.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (328 samples, 0.11%)</title><rect x="63.7493%" y="1253" width="0.1138%" height="15" fill="rgb(250,118,49)"/><text x="63.9993%" y="1263.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (328 samples, 0.11%)</title><rect x="63.7493%" y="1237" width="0.1138%" height="15" fill="rgb(248,25,38)"/><text x="63.9993%" y="1247.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (181 samples, 0.06%)</title><rect x="63.8003%" y="1221" width="0.0628%" height="15" fill="rgb(215,70,14)"/><text x="64.0503%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (181 samples, 0.06%)</title><rect x="63.8003%" y="1205" width="0.0628%" height="15" fill="rgb(215,28,15)"/><text x="64.0503%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::remove (75 samples, 0.03%)</title><rect x="63.8371%" y="1189" width="0.0260%" height="15" fill="rgb(243,6,28)"/><text x="64.0871%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::erase_no_drop (60 samples, 0.02%)</title><rect x="63.8423%" y="1173" width="0.0208%" height="15" fill="rgb(222,130,1)"/><text x="64.0923%" y="1183.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (30 samples, 0.01%)</title><rect x="63.8739%" y="1205" width="0.0104%" height="15" fill="rgb(236,166,44)"/><text x="64.1239%" y="1215.50"></text></g><g><title>tunneler::message::header::MessageHeader::deserialize (102 samples, 0.04%)</title><rect x="63.8631%" y="1269" width="0.0354%" height="15" fill="rgb(221,108,14)"/><text x="64.1131%" y="1279.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (95 samples, 0.03%)</title><rect x="63.8656%" y="1253" width="0.0330%" height="15" fill="rgb(252,3,45)"/><text x="64.1156%" y="1263.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (95 samples, 0.03%)</title><rect x="63.8656%" y="1237" width="0.0330%" height="15" fill="rgb(237,68,30)"/><text x="64.1156%" y="1247.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (95 samples, 0.03%)</title><rect x="63.8656%" y="1221" width="0.0330%" height="15" fill="rgb(211,79,22)"/><text x="64.1156%" y="1231.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (79 samples, 0.03%)</title><rect x="63.8985%" y="1237" width="0.0274%" height="15" fill="rgb(252,185,21)"/><text x="64.1485%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (74 samples, 0.03%)</title><rect x="63.9003%" y="1221" width="0.0257%" height="15" fill="rgb(225,189,26)"/><text x="64.1503%" y="1231.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (41 samples, 0.01%)</title><rect x="63.9117%" y="1205" width="0.0142%" height="15" fill="rgb(241,30,40)"/><text x="64.1617%" y="1215.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (46 samples, 0.02%)</title><rect x="63.9357%" y="1221" width="0.0160%" height="15" fill="rgb(235,215,44)"/><text x="64.1857%" y="1231.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.01%)</title><rect x="63.9402%" y="1205" width="0.0114%" height="15" fill="rgb(205,8,29)"/><text x="64.1902%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (1,519 samples, 0.53%)</title><rect x="63.4374%" y="1285" width="0.5270%" height="15" fill="rgb(241,137,42)"/><text x="63.6874%" y="1295.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (190 samples, 0.07%)</title><rect x="63.8985%" y="1269" width="0.0659%" height="15" fill="rgb(237,155,2)"/><text x="64.1485%" y="1279.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (190 samples, 0.07%)</title><rect x="63.8985%" y="1253" width="0.0659%" height="15" fill="rgb(245,29,42)"/><text x="64.1485%" y="1263.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::inc_num_messages (111 samples, 0.04%)</title><rect x="63.9259%" y="1237" width="0.0385%" height="15" fill="rgb(234,101,35)"/><text x="64.1759%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::semaphore (37 samples, 0.01%)</title><rect x="63.9516%" y="1221" width="0.0128%" height="15" fill="rgb(228,64,37)"/><text x="64.2016%" y="1231.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (40 samples, 0.01%)</title><rect x="63.9690%" y="1077" width="0.0139%" height="15" fill="rgb(217,214,36)"/><text x="64.2190%" y="1087.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (65 samples, 0.02%)</title><rect x="63.9645%" y="1285" width="0.0226%" height="15" fill="rgb(243,70,3)"/><text x="64.2145%" y="1295.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (65 samples, 0.02%)</title><rect x="63.9645%" y="1269" width="0.0226%" height="15" fill="rgb(253,158,52)"/><text x="64.2145%" y="1279.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (65 samples, 0.02%)</title><rect x="63.9645%" y="1253" width="0.0226%" height="15" fill="rgb(234,111,54)"/><text x="64.2145%" y="1263.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (65 samples, 0.02%)</title><rect x="63.9645%" y="1237" width="0.0226%" height="15" fill="rgb(217,70,32)"/><text x="64.2145%" y="1247.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (65 samples, 0.02%)</title><rect x="63.9645%" y="1221" width="0.0226%" height="15" fill="rgb(234,18,33)"/><text x="64.2145%" y="1231.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (65 samples, 0.02%)</title><rect x="63.9645%" y="1205" width="0.0226%" height="15" fill="rgb(234,12,49)"/><text x="64.2145%" y="1215.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (65 samples, 0.02%)</title><rect x="63.9645%" y="1189" width="0.0226%" height="15" fill="rgb(236,10,21)"/><text x="64.2145%" y="1199.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (65 samples, 0.02%)</title><rect x="63.9645%" y="1173" width="0.0226%" height="15" fill="rgb(248,182,45)"/><text x="64.2145%" y="1183.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (65 samples, 0.02%)</title><rect x="63.9645%" y="1157" width="0.0226%" height="15" fill="rgb(217,95,36)"/><text x="64.2145%" y="1167.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (52 samples, 0.02%)</title><rect x="63.9690%" y="1141" width="0.0180%" height="15" fill="rgb(212,110,31)"/><text x="64.2190%" y="1151.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.02%)</title><rect x="63.9690%" y="1125" width="0.0180%" height="15" fill="rgb(206,32,53)"/><text x="64.2190%" y="1135.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.02%)</title><rect x="63.9690%" y="1109" width="0.0180%" height="15" fill="rgb(246,141,37)"/><text x="64.2190%" y="1119.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (52 samples, 0.02%)</title><rect x="63.9690%" y="1093" width="0.0180%" height="15" fill="rgb(219,16,7)"/><text x="64.2190%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (70 samples, 0.02%)</title><rect x="64.0338%" y="1077" width="0.0243%" height="15" fill="rgb(230,205,45)"/><text x="64.2838%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_load (41 samples, 0.01%)</title><rect x="64.0439%" y="1061" width="0.0142%" height="15" fill="rgb(231,43,49)"/><text x="64.2939%" y="1071.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (34 samples, 0.01%)</title><rect x="64.0585%" y="1077" width="0.0118%" height="15" fill="rgb(212,106,34)"/><text x="64.3085%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (268 samples, 0.09%)</title><rect x="63.9870%" y="1109" width="0.0930%" height="15" fill="rgb(206,83,17)"/><text x="64.2370%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (268 samples, 0.09%)</title><rect x="63.9870%" y="1093" width="0.0930%" height="15" fill="rgb(244,154,49)"/><text x="64.2370%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (332 samples, 0.12%)</title><rect x="63.9870%" y="1269" width="0.1152%" height="15" fill="rgb(244,149,49)"/><text x="64.2370%" y="1279.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (332 samples, 0.12%)</title><rect x="63.9870%" y="1253" width="0.1152%" height="15" fill="rgb(227,134,18)"/><text x="64.2370%" y="1263.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (332 samples, 0.12%)</title><rect x="63.9870%" y="1237" width="0.1152%" height="15" fill="rgb(237,116,36)"/><text x="64.2370%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (332 samples, 0.12%)</title><rect x="63.9870%" y="1221" width="0.1152%" height="15" fill="rgb(205,129,40)"/><text x="64.2370%" y="1231.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (332 samples, 0.12%)</title><rect x="63.9870%" y="1205" width="0.1152%" height="15" fill="rgb(236,178,4)"/><text x="64.2370%" y="1215.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (332 samples, 0.12%)</title><rect x="63.9870%" y="1189" width="0.1152%" height="15" fill="rgb(251,76,53)"/><text x="64.2370%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (332 samples, 0.12%)</title><rect x="63.9870%" y="1173" width="0.1152%" height="15" fill="rgb(242,92,40)"/><text x="64.2370%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (332 samples, 0.12%)</title><rect x="63.9870%" y="1157" width="0.1152%" height="15" fill="rgb(209,45,30)"/><text x="64.2370%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (332 samples, 0.12%)</title><rect x="63.9870%" y="1141" width="0.1152%" height="15" fill="rgb(218,157,36)"/><text x="64.2370%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (332 samples, 0.12%)</title><rect x="63.9870%" y="1125" width="0.1152%" height="15" fill="rgb(222,186,16)"/><text x="64.2370%" y="1135.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (64 samples, 0.02%)</title><rect x="64.0800%" y="1109" width="0.0222%" height="15" fill="rgb(254,72,35)"/><text x="64.3300%" y="1119.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (64 samples, 0.02%)</title><rect x="64.0800%" y="1093" width="0.0222%" height="15" fill="rgb(224,25,35)"/><text x="64.3300%" y="1103.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (30 samples, 0.01%)</title><rect x="64.0918%" y="1077" width="0.0104%" height="15" fill="rgb(206,135,52)"/><text x="64.3418%" y="1087.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (53 samples, 0.02%)</title><rect x="64.1088%" y="1125" width="0.0184%" height="15" fill="rgb(229,174,47)"/><text x="64.3588%" y="1135.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (83 samples, 0.03%)</title><rect x="64.1022%" y="1141" width="0.0288%" height="15" fill="rgb(242,184,21)"/><text x="64.3522%" y="1151.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (57 samples, 0.02%)</title><rect x="64.1310%" y="1141" width="0.0198%" height="15" fill="rgb(213,22,45)"/><text x="64.3810%" y="1151.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::default_styled_level (41 samples, 0.01%)</title><rect x="64.1365%" y="1125" width="0.0142%" height="15" fill="rgb(237,81,54)"/><text x="64.3865%" y="1135.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::default_level_style (41 samples, 0.01%)</title><rect x="64.1365%" y="1109" width="0.0142%" height="15" fill="rgb(248,177,18)"/><text x="64.3865%" y="1119.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2,585 samples, 0.90%)</title><rect x="63.2858%" y="1765" width="0.8969%" height="15" fill="rgb(254,31,16)"/><text x="63.5358%" y="1775.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,246 samples, 0.78%)</title><rect x="63.4034%" y="1749" width="0.7793%" height="15" fill="rgb(235,20,31)"/><text x="63.6534%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2,246 samples, 0.78%)</title><rect x="63.4034%" y="1733" width="0.7793%" height="15" fill="rgb(240,56,43)"/><text x="63.6534%" y="1743.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2,246 samples, 0.78%)</title><rect x="63.4034%" y="1717" width="0.7793%" height="15" fill="rgb(237,197,51)"/><text x="63.6534%" y="1727.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2,246 samples, 0.78%)</title><rect x="63.4034%" y="1701" width="0.7793%" height="15" fill="rgb(241,162,44)"/><text x="63.6534%" y="1711.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2,246 samples, 0.78%)</title><rect x="63.4034%" y="1685" width="0.7793%" height="15" fill="rgb(224,23,20)"/><text x="63.6534%" y="1695.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2,246 samples, 0.78%)</title><rect x="63.4034%" y="1669" width="0.7793%" height="15" fill="rgb(250,109,34)"/><text x="63.6534%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1653" width="0.7453%" height="15" fill="rgb(214,175,50)"/><text x="63.6874%" y="1663.50"></text></g><g><title>tokio::coop::budget (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1637" width="0.7453%" height="15" fill="rgb(213,182,5)"/><text x="63.6874%" y="1647.50"></text></g><g><title>tokio::coop::with_budget (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1621" width="0.7453%" height="15" fill="rgb(209,199,19)"/><text x="63.6874%" y="1631.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1605" width="0.7453%" height="15" fill="rgb(236,224,42)"/><text x="63.6874%" y="1615.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1589" width="0.7453%" height="15" fill="rgb(246,226,29)"/><text x="63.6874%" y="1599.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1573" width="0.7453%" height="15" fill="rgb(227,223,11)"/><text x="63.6874%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1557" width="0.7453%" height="15" fill="rgb(219,7,51)"/><text x="63.6874%" y="1567.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1541" width="0.7453%" height="15" fill="rgb(245,167,10)"/><text x="63.6874%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1525" width="0.7453%" height="15" fill="rgb(237,224,16)"/><text x="63.6874%" y="1535.50"></text></g><g><title>tokio::runtime::task::raw::poll (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1509" width="0.7453%" height="15" fill="rgb(226,132,13)"/><text x="63.6874%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1493" width="0.7453%" height="15" fill="rgb(214,140,3)"/><text x="63.6874%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1477" width="0.7453%" height="15" fill="rgb(221,177,4)"/><text x="63.6874%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1461" width="0.7453%" height="15" fill="rgb(238,139,3)"/><text x="63.6874%" y="1471.50"></text></g><g><title>std::panic::catch_unwind (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1445" width="0.7453%" height="15" fill="rgb(216,17,39)"/><text x="63.6874%" y="1455.50"></text></g><g><title>std::panicking::try (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1429" width="0.7453%" height="15" fill="rgb(238,120,9)"/><text x="63.6874%" y="1439.50"></text></g><g><title>__rust_try (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1413" width="0.7453%" height="15" fill="rgb(244,92,53)"/><text x="63.6874%" y="1423.50"></text></g><g><title>std::panicking::try::do_call (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1397" width="0.7453%" height="15" fill="rgb(224,148,33)"/><text x="63.6874%" y="1407.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1381" width="0.7453%" height="15" fill="rgb(243,6,36)"/><text x="63.6874%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1365" width="0.7453%" height="15" fill="rgb(230,102,11)"/><text x="63.6874%" y="1375.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1349" width="0.7453%" height="15" fill="rgb(234,148,36)"/><text x="63.6874%" y="1359.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1333" width="0.7453%" height="15" fill="rgb(251,153,25)"/><text x="63.6874%" y="1343.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1317" width="0.7453%" height="15" fill="rgb(215,129,8)"/><text x="63.6874%" y="1327.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,148 samples, 0.75%)</title><rect x="63.4374%" y="1301" width="0.7453%" height="15" fill="rgb(224,128,35)"/><text x="63.6874%" y="1311.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (564 samples, 0.20%)</title><rect x="63.9870%" y="1285" width="0.1957%" height="15" fill="rgb(237,56,52)"/><text x="64.2370%" y="1295.50"></text></g><g><title>log::__private_api_log (232 samples, 0.08%)</title><rect x="64.1022%" y="1269" width="0.0805%" height="15" fill="rgb(234,213,19)"/><text x="64.3522%" y="1279.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (232 samples, 0.08%)</title><rect x="64.1022%" y="1253" width="0.0805%" height="15" fill="rgb(252,82,23)"/><text x="64.3522%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (232 samples, 0.08%)</title><rect x="64.1022%" y="1237" width="0.0805%" height="15" fill="rgb(254,201,21)"/><text x="64.3522%" y="1247.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (232 samples, 0.08%)</title><rect x="64.1022%" y="1221" width="0.0805%" height="15" fill="rgb(250,186,11)"/><text x="64.3522%" y="1231.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (232 samples, 0.08%)</title><rect x="64.1022%" y="1205" width="0.0805%" height="15" fill="rgb(211,174,5)"/><text x="64.3522%" y="1215.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (232 samples, 0.08%)</title><rect x="64.1022%" y="1189" width="0.0805%" height="15" fill="rgb(214,121,10)"/><text x="64.3522%" y="1199.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (232 samples, 0.08%)</title><rect x="64.1022%" y="1173" width="0.0805%" height="15" fill="rgb(241,66,2)"/><text x="64.3522%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (232 samples, 0.08%)</title><rect x="64.1022%" y="1157" width="0.0805%" height="15" fill="rgb(220,167,19)"/><text x="64.3522%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (69 samples, 0.02%)</title><rect x="64.1588%" y="1141" width="0.0239%" height="15" fill="rgb(231,54,50)"/><text x="64.4088%" y="1151.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (69 samples, 0.02%)</title><rect x="64.1588%" y="1125" width="0.0239%" height="15" fill="rgb(239,217,53)"/><text x="64.4088%" y="1135.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (30 samples, 0.01%)</title><rect x="64.1921%" y="1557" width="0.0104%" height="15" fill="rgb(248,8,0)"/><text x="64.4421%" y="1567.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (30 samples, 0.01%)</title><rect x="64.1921%" y="1541" width="0.0104%" height="15" fill="rgb(229,118,37)"/><text x="64.4421%" y="1551.50"></text></g><g><title>std::io::Write::write_fmt (30 samples, 0.01%)</title><rect x="64.1921%" y="1525" width="0.0104%" height="15" fill="rgb(253,223,43)"/><text x="64.4421%" y="1535.50"></text></g><g><title>core::fmt::write (30 samples, 0.01%)</title><rect x="64.1921%" y="1509" width="0.0104%" height="15" fill="rgb(211,77,36)"/><text x="64.4421%" y="1519.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.02%)</title><rect x="64.2052%" y="1461" width="0.0167%" height="15" fill="rgb(219,3,53)"/><text x="64.4552%" y="1471.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (65 samples, 0.02%)</title><rect x="64.2052%" y="1493" width="0.0226%" height="15" fill="rgb(244,45,42)"/><text x="64.4552%" y="1503.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (65 samples, 0.02%)</title><rect x="64.2052%" y="1477" width="0.0226%" height="15" fill="rgb(225,95,27)"/><text x="64.4552%" y="1487.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (168 samples, 0.06%)</title><rect x="64.1827%" y="1701" width="0.0583%" height="15" fill="rgb(207,74,8)"/><text x="64.4327%" y="1711.50"></text></g><g><title>log::__private_api_log (168 samples, 0.06%)</title><rect x="64.1827%" y="1685" width="0.0583%" height="15" fill="rgb(243,63,36)"/><text x="64.4327%" y="1695.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (168 samples, 0.06%)</title><rect x="64.1827%" y="1669" width="0.0583%" height="15" fill="rgb(211,180,12)"/><text x="64.4327%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (168 samples, 0.06%)</title><rect x="64.1827%" y="1653" width="0.0583%" height="15" fill="rgb(254,166,49)"/><text x="64.4327%" y="1663.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (168 samples, 0.06%)</title><rect x="64.1827%" y="1637" width="0.0583%" height="15" fill="rgb(205,19,0)"/><text x="64.4327%" y="1647.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (168 samples, 0.06%)</title><rect x="64.1827%" y="1621" width="0.0583%" height="15" fill="rgb(224,172,32)"/><text x="64.4327%" y="1631.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (168 samples, 0.06%)</title><rect x="64.1827%" y="1605" width="0.0583%" height="15" fill="rgb(254,136,30)"/><text x="64.4327%" y="1615.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (168 samples, 0.06%)</title><rect x="64.1827%" y="1589" width="0.0583%" height="15" fill="rgb(246,19,35)"/><text x="64.4327%" y="1599.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (168 samples, 0.06%)</title><rect x="64.1827%" y="1573" width="0.0583%" height="15" fill="rgb(219,24,36)"/><text x="64.4327%" y="1583.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (103 samples, 0.04%)</title><rect x="64.2052%" y="1557" width="0.0357%" height="15" fill="rgb(251,55,1)"/><text x="64.4552%" y="1567.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (103 samples, 0.04%)</title><rect x="64.2052%" y="1541" width="0.0357%" height="15" fill="rgb(218,117,39)"/><text x="64.4552%" y="1551.50"></text></g><g><title>std::io::Write::write_fmt (103 samples, 0.04%)</title><rect x="64.2052%" y="1525" width="0.0357%" height="15" fill="rgb(248,169,11)"/><text x="64.4552%" y="1535.50"></text></g><g><title>core::fmt::write (103 samples, 0.04%)</title><rect x="64.2052%" y="1509" width="0.0357%" height="15" fill="rgb(244,40,44)"/><text x="64.4552%" y="1519.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (38 samples, 0.01%)</title><rect x="64.2278%" y="1493" width="0.0132%" height="15" fill="rgb(234,62,37)"/><text x="64.4778%" y="1503.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (38 samples, 0.01%)</title><rect x="64.2278%" y="1477" width="0.0132%" height="15" fill="rgb(207,117,42)"/><text x="64.4778%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (31 samples, 0.01%)</title><rect x="64.2410%" y="1557" width="0.0108%" height="15" fill="rgb(213,43,2)"/><text x="64.4910%" y="1567.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (31 samples, 0.01%)</title><rect x="64.2410%" y="1541" width="0.0108%" height="15" fill="rgb(244,202,51)"/><text x="64.4910%" y="1551.50"></text></g><g><title>std::io::Write::write_fmt (31 samples, 0.01%)</title><rect x="64.2410%" y="1525" width="0.0108%" height="15" fill="rgb(253,174,46)"/><text x="64.4910%" y="1535.50"></text></g><g><title>core::fmt::write (31 samples, 0.01%)</title><rect x="64.2410%" y="1509" width="0.0108%" height="15" fill="rgb(251,23,1)"/><text x="64.4910%" y="1519.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (31 samples, 0.01%)</title><rect x="64.2410%" y="1493" width="0.0108%" height="15" fill="rgb(253,26,1)"/><text x="64.4910%" y="1503.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (31 samples, 0.01%)</title><rect x="64.2410%" y="1477" width="0.0108%" height="15" fill="rgb(216,89,31)"/><text x="64.4910%" y="1487.50"></text></g><g><title>core::fmt::write (31 samples, 0.01%)</title><rect x="64.2410%" y="1461" width="0.0108%" height="15" fill="rgb(209,109,5)"/><text x="64.4910%" y="1471.50"></text></g><g><title>core::fmt::run (31 samples, 0.01%)</title><rect x="64.2410%" y="1445" width="0.0108%" height="15" fill="rgb(229,63,13)"/><text x="64.4910%" y="1455.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (31 samples, 0.01%)</title><rect x="64.2410%" y="1429" width="0.0108%" height="15" fill="rgb(238,137,54)"/><text x="64.4910%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (31 samples, 0.01%)</title><rect x="64.2410%" y="1413" width="0.0108%" height="15" fill="rgb(228,1,9)"/><text x="64.4910%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (31 samples, 0.01%)</title><rect x="64.2410%" y="1397" width="0.0108%" height="15" fill="rgb(249,120,48)"/><text x="64.4910%" y="1407.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (31 samples, 0.01%)</title><rect x="64.2410%" y="1381" width="0.0108%" height="15" fill="rgb(209,72,36)"/><text x="64.4910%" y="1391.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (31 samples, 0.01%)</title><rect x="64.2410%" y="1365" width="0.0108%" height="15" fill="rgb(247,98,49)"/><text x="64.4910%" y="1375.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (212 samples, 0.07%)</title><rect x="64.1827%" y="1717" width="0.0736%" height="15" fill="rgb(233,75,36)"/><text x="64.4327%" y="1727.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (44 samples, 0.02%)</title><rect x="64.2410%" y="1701" width="0.0153%" height="15" fill="rgb(225,14,24)"/><text x="64.4910%" y="1711.50"></text></g><g><title>log::__private_api_log (44 samples, 0.02%)</title><rect x="64.2410%" y="1685" width="0.0153%" height="15" fill="rgb(237,193,20)"/><text x="64.4910%" y="1695.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (44 samples, 0.02%)</title><rect x="64.2410%" y="1669" width="0.0153%" height="15" fill="rgb(239,122,19)"/><text x="64.4910%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (44 samples, 0.02%)</title><rect x="64.2410%" y="1653" width="0.0153%" height="15" fill="rgb(231,220,10)"/><text x="64.4910%" y="1663.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (44 samples, 0.02%)</title><rect x="64.2410%" y="1637" width="0.0153%" height="15" fill="rgb(220,66,15)"/><text x="64.4910%" y="1647.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (44 samples, 0.02%)</title><rect x="64.2410%" y="1621" width="0.0153%" height="15" fill="rgb(215,171,52)"/><text x="64.4910%" y="1631.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (44 samples, 0.02%)</title><rect x="64.2410%" y="1605" width="0.0153%" height="15" fill="rgb(241,169,50)"/><text x="64.4910%" y="1615.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (44 samples, 0.02%)</title><rect x="64.2410%" y="1589" width="0.0153%" height="15" fill="rgb(236,189,0)"/><text x="64.4910%" y="1599.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (44 samples, 0.02%)</title><rect x="64.2410%" y="1573" width="0.0153%" height="15" fill="rgb(217,147,20)"/><text x="64.4910%" y="1583.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (73 samples, 0.03%)</title><rect x="64.2608%" y="1237" width="0.0253%" height="15" fill="rgb(206,188,39)"/><text x="64.5108%" y="1247.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::remaining (56 samples, 0.02%)</title><rect x="64.2667%" y="1221" width="0.0194%" height="15" fill="rgb(227,118,25)"/><text x="64.5167%" y="1231.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_read_shard (37 samples, 0.01%)</title><rect x="64.2885%" y="1189" width="0.0128%" height="15" fill="rgb(248,171,40)"/><text x="64.5385%" y="1199.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (71 samples, 0.02%)</title><rect x="64.3048%" y="1189" width="0.0246%" height="15" fill="rgb(251,90,54)"/><text x="64.5548%" y="1199.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (159 samples, 0.06%)</title><rect x="64.2885%" y="1237" width="0.0552%" height="15" fill="rgb(234,11,46)"/><text x="64.5385%" y="1247.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (159 samples, 0.06%)</title><rect x="64.2885%" y="1221" width="0.0552%" height="15" fill="rgb(229,134,13)"/><text x="64.5385%" y="1231.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (159 samples, 0.06%)</title><rect x="64.2885%" y="1205" width="0.0552%" height="15" fill="rgb(223,129,3)"/><text x="64.5385%" y="1215.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (41 samples, 0.01%)</title><rect x="64.3295%" y="1189" width="0.0142%" height="15" fill="rgb(221,124,13)"/><text x="64.5795%" y="1199.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (41 samples, 0.01%)</title><rect x="64.3295%" y="1173" width="0.0142%" height="15" fill="rgb(234,3,18)"/><text x="64.5795%" y="1183.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (32 samples, 0.01%)</title><rect x="64.3482%" y="1189" width="0.0111%" height="15" fill="rgb(249,199,20)"/><text x="64.5982%" y="1199.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (66 samples, 0.02%)</title><rect x="64.3437%" y="1237" width="0.0229%" height="15" fill="rgb(224,134,6)"/><text x="64.5937%" y="1247.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (66 samples, 0.02%)</title><rect x="64.3437%" y="1221" width="0.0229%" height="15" fill="rgb(254,83,26)"/><text x="64.5937%" y="1231.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (66 samples, 0.02%)</title><rect x="64.3437%" y="1205" width="0.0229%" height="15" fill="rgb(217,88,9)"/><text x="64.5937%" y="1215.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (50 samples, 0.02%)</title><rect x="64.3666%" y="1221" width="0.0173%" height="15" fill="rgb(225,73,2)"/><text x="64.6166%" y="1231.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (50 samples, 0.02%)</title><rect x="64.3666%" y="1205" width="0.0173%" height="15" fill="rgb(226,44,39)"/><text x="64.6166%" y="1215.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (37 samples, 0.01%)</title><rect x="64.3711%" y="1189" width="0.0128%" height="15" fill="rgb(228,53,17)"/><text x="64.6211%" y="1199.50"></text></g><g><title>tunneler::message::header::MessageHeader::deserialize (99 samples, 0.03%)</title><rect x="64.3666%" y="1237" width="0.0343%" height="15" fill="rgb(212,27,27)"/><text x="64.6166%" y="1247.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (49 samples, 0.02%)</title><rect x="64.3839%" y="1221" width="0.0170%" height="15" fill="rgb(241,50,6)"/><text x="64.6339%" y="1231.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (49 samples, 0.02%)</title><rect x="64.3839%" y="1205" width="0.0170%" height="15" fill="rgb(225,28,51)"/><text x="64.6339%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (429 samples, 0.15%)</title><rect x="64.2608%" y="1253" width="0.1488%" height="15" fill="rgb(215,33,16)"/><text x="64.5108%" y="1263.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (97 samples, 0.03%)</title><rect x="64.4096%" y="1253" width="0.0337%" height="15" fill="rgb(243,40,39)"/><text x="64.6596%" y="1263.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (97 samples, 0.03%)</title><rect x="64.4096%" y="1237" width="0.0337%" height="15" fill="rgb(225,11,42)"/><text x="64.6596%" y="1247.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (97 samples, 0.03%)</title><rect x="64.4096%" y="1221" width="0.0337%" height="15" fill="rgb(241,220,38)"/><text x="64.6596%" y="1231.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (97 samples, 0.03%)</title><rect x="64.4096%" y="1205" width="0.0337%" height="15" fill="rgb(244,52,35)"/><text x="64.6596%" y="1215.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (97 samples, 0.03%)</title><rect x="64.4096%" y="1189" width="0.0337%" height="15" fill="rgb(246,42,46)"/><text x="64.6596%" y="1199.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (97 samples, 0.03%)</title><rect x="64.4096%" y="1173" width="0.0337%" height="15" fill="rgb(205,184,13)"/><text x="64.6596%" y="1183.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (97 samples, 0.03%)</title><rect x="64.4096%" y="1157" width="0.0337%" height="15" fill="rgb(209,48,36)"/><text x="64.6596%" y="1167.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (97 samples, 0.03%)</title><rect x="64.4096%" y="1141" width="0.0337%" height="15" fill="rgb(244,34,51)"/><text x="64.6596%" y="1151.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (97 samples, 0.03%)</title><rect x="64.4096%" y="1125" width="0.0337%" height="15" fill="rgb(221,107,33)"/><text x="64.6596%" y="1135.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (68 samples, 0.02%)</title><rect x="64.4197%" y="1109" width="0.0236%" height="15" fill="rgb(224,203,12)"/><text x="64.6697%" y="1119.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (37 samples, 0.01%)</title><rect x="64.4304%" y="1093" width="0.0128%" height="15" fill="rgb(230,215,18)"/><text x="64.6804%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.01%)</title><rect x="64.4433%" y="1237" width="0.0118%" height="15" fill="rgb(206,185,35)"/><text x="64.6933%" y="1247.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (34 samples, 0.01%)</title><rect x="64.4433%" y="1221" width="0.0118%" height="15" fill="rgb(228,140,34)"/><text x="64.6933%" y="1231.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.01%)</title><rect x="64.4433%" y="1205" width="0.0118%" height="15" fill="rgb(208,93,13)"/><text x="64.6933%" y="1215.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (34 samples, 0.01%)</title><rect x="64.4433%" y="1189" width="0.0118%" height="15" fill="rgb(221,193,39)"/><text x="64.6933%" y="1199.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (34 samples, 0.01%)</title><rect x="64.4433%" y="1173" width="0.0118%" height="15" fill="rgb(241,132,34)"/><text x="64.6933%" y="1183.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (34 samples, 0.01%)</title><rect x="64.4433%" y="1157" width="0.0118%" height="15" fill="rgb(221,141,10)"/><text x="64.6933%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (34 samples, 0.01%)</title><rect x="64.4433%" y="1141" width="0.0118%" height="15" fill="rgb(226,90,31)"/><text x="64.6933%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (34 samples, 0.01%)</title><rect x="64.4433%" y="1125" width="0.0118%" height="15" fill="rgb(243,75,5)"/><text x="64.6933%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (34 samples, 0.01%)</title><rect x="64.4433%" y="1109" width="0.0118%" height="15" fill="rgb(227,156,21)"/><text x="64.6933%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (34 samples, 0.01%)</title><rect x="64.4433%" y="1093" width="0.0118%" height="15" fill="rgb(250,195,8)"/><text x="64.6933%" y="1103.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (38 samples, 0.01%)</title><rect x="64.4585%" y="1109" width="0.0132%" height="15" fill="rgb(220,134,5)"/><text x="64.7085%" y="1119.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (128 samples, 0.04%)</title><rect x="64.4433%" y="1253" width="0.0444%" height="15" fill="rgb(246,106,34)"/><text x="64.6933%" y="1263.50"></text></g><g><title>log::__private_api_log (94 samples, 0.03%)</title><rect x="64.4551%" y="1237" width="0.0326%" height="15" fill="rgb(205,1,4)"/><text x="64.7051%" y="1247.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (94 samples, 0.03%)</title><rect x="64.4551%" y="1221" width="0.0326%" height="15" fill="rgb(224,151,29)"/><text x="64.7051%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (94 samples, 0.03%)</title><rect x="64.4551%" y="1205" width="0.0326%" height="15" fill="rgb(251,196,0)"/><text x="64.7051%" y="1215.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (94 samples, 0.03%)</title><rect x="64.4551%" y="1189" width="0.0326%" height="15" fill="rgb(212,127,0)"/><text x="64.7051%" y="1199.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (94 samples, 0.03%)</title><rect x="64.4551%" y="1173" width="0.0326%" height="15" fill="rgb(236,71,53)"/><text x="64.7051%" y="1183.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (94 samples, 0.03%)</title><rect x="64.4551%" y="1157" width="0.0326%" height="15" fill="rgb(227,99,0)"/><text x="64.7051%" y="1167.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (94 samples, 0.03%)</title><rect x="64.4551%" y="1141" width="0.0326%" height="15" fill="rgb(239,89,21)"/><text x="64.7051%" y="1151.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (94 samples, 0.03%)</title><rect x="64.4551%" y="1125" width="0.0326%" height="15" fill="rgb(243,122,19)"/><text x="64.7051%" y="1135.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (880 samples, 0.31%)</title><rect x="64.1827%" y="1765" width="0.3053%" height="15" fill="rgb(229,192,45)"/><text x="64.4327%" y="1775.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (880 samples, 0.31%)</title><rect x="64.1827%" y="1749" width="0.3053%" height="15" fill="rgb(235,165,35)"/><text x="64.4327%" y="1759.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (880 samples, 0.31%)</title><rect x="64.1827%" y="1733" width="0.3053%" height="15" fill="rgb(253,202,0)"/><text x="64.4327%" y="1743.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (668 samples, 0.23%)</title><rect x="64.2562%" y="1717" width="0.2318%" height="15" fill="rgb(235,51,20)"/><text x="64.5062%" y="1727.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (668 samples, 0.23%)</title><rect x="64.2562%" y="1701" width="0.2318%" height="15" fill="rgb(218,95,46)"/><text x="64.5062%" y="1711.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (668 samples, 0.23%)</title><rect x="64.2562%" y="1685" width="0.2318%" height="15" fill="rgb(212,81,10)"/><text x="64.5062%" y="1695.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (668 samples, 0.23%)</title><rect x="64.2562%" y="1669" width="0.2318%" height="15" fill="rgb(240,59,0)"/><text x="64.5062%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (668 samples, 0.23%)</title><rect x="64.2562%" y="1653" width="0.2318%" height="15" fill="rgb(212,191,42)"/><text x="64.5062%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (668 samples, 0.23%)</title><rect x="64.2562%" y="1637" width="0.2318%" height="15" fill="rgb(233,140,3)"/><text x="64.5062%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (655 samples, 0.23%)</title><rect x="64.2608%" y="1621" width="0.2273%" height="15" fill="rgb(215,69,23)"/><text x="64.5108%" y="1631.50"></text></g><g><title>tokio::coop::budget (655 samples, 0.23%)</title><rect x="64.2608%" y="1605" width="0.2273%" height="15" fill="rgb(240,202,20)"/><text x="64.5108%" y="1615.50"></text></g><g><title>tokio::coop::with_budget (655 samples, 0.23%)</title><rect x="64.2608%" y="1589" width="0.2273%" height="15" fill="rgb(209,146,50)"/><text x="64.5108%" y="1599.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (655 samples, 0.23%)</title><rect x="64.2608%" y="1573" width="0.2273%" height="15" fill="rgb(253,102,54)"/><text x="64.5108%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (655 samples, 0.23%)</title><rect x="64.2608%" y="1557" width="0.2273%" height="15" fill="rgb(250,173,47)"/><text x="64.5108%" y="1567.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (655 samples, 0.23%)</title><rect x="64.2608%" y="1541" width="0.2273%" height="15" fill="rgb(232,142,7)"/><text x="64.5108%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (655 samples, 0.23%)</title><rect x="64.2608%" y="1525" width="0.2273%" height="15" fill="rgb(230,157,47)"/><text x="64.5108%" y="1535.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (655 samples, 0.23%)</title><rect x="64.2608%" y="1509" width="0.2273%" height="15" fill="rgb(214,177,35)"/><text x="64.5108%" y="1519.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (655 samples, 0.23%)</title><rect x="64.2608%" y="1493" width="0.2273%" height="15" fill="rgb(234,119,46)"/><text x="64.5108%" y="1503.50"></text></g><g><title>tokio::runtime::task::raw::poll (655 samples, 0.23%)</title><rect x="64.2608%" y="1477" width="0.2273%" height="15" fill="rgb(241,180,50)"/><text x="64.5108%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (655 samples, 0.23%)</title><rect x="64.2608%" y="1461" width="0.2273%" height="15" fill="rgb(221,54,25)"/><text x="64.5108%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (655 samples, 0.23%)</title><rect x="64.2608%" y="1445" width="0.2273%" height="15" fill="rgb(209,157,44)"/><text x="64.5108%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (655 samples, 0.23%)</title><rect x="64.2608%" y="1429" width="0.2273%" height="15" fill="rgb(246,115,41)"/><text x="64.5108%" y="1439.50"></text></g><g><title>std::panic::catch_unwind (655 samples, 0.23%)</title><rect x="64.2608%" y="1413" width="0.2273%" height="15" fill="rgb(229,86,1)"/><text x="64.5108%" y="1423.50"></text></g><g><title>std::panicking::try (655 samples, 0.23%)</title><rect x="64.2608%" y="1397" width="0.2273%" height="15" fill="rgb(240,108,53)"/><text x="64.5108%" y="1407.50"></text></g><g><title>__rust_try (655 samples, 0.23%)</title><rect x="64.2608%" y="1381" width="0.2273%" height="15" fill="rgb(227,134,2)"/><text x="64.5108%" y="1391.50"></text></g><g><title>std::panicking::try::do_call (655 samples, 0.23%)</title><rect x="64.2608%" y="1365" width="0.2273%" height="15" fill="rgb(213,129,25)"/><text x="64.5108%" y="1375.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (655 samples, 0.23%)</title><rect x="64.2608%" y="1349" width="0.2273%" height="15" fill="rgb(226,35,21)"/><text x="64.5108%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (655 samples, 0.23%)</title><rect x="64.2608%" y="1333" width="0.2273%" height="15" fill="rgb(208,129,26)"/><text x="64.5108%" y="1343.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (655 samples, 0.23%)</title><rect x="64.2608%" y="1317" width="0.2273%" height="15" fill="rgb(224,83,6)"/><text x="64.5108%" y="1327.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (655 samples, 0.23%)</title><rect x="64.2608%" y="1301" width="0.2273%" height="15" fill="rgb(227,52,39)"/><text x="64.5108%" y="1311.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (655 samples, 0.23%)</title><rect x="64.2608%" y="1285" width="0.2273%" height="15" fill="rgb(241,30,17)"/><text x="64.5108%" y="1295.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (655 samples, 0.23%)</title><rect x="64.2608%" y="1269" width="0.2273%" height="15" fill="rgb(246,186,42)"/><text x="64.5108%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place (63 samples, 0.02%)</title><rect x="64.4925%" y="1381" width="0.0219%" height="15" fill="rgb(221,169,15)"/><text x="64.7425%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 0.01%)</title><rect x="64.5022%" y="1365" width="0.0121%" height="15" fill="rgb(235,108,21)"/><text x="64.7522%" y="1375.50"></text></g><g><title>tokio::coop::poll_proceed (37 samples, 0.01%)</title><rect x="64.5182%" y="1381" width="0.0128%" height="15" fill="rgb(219,148,30)"/><text x="64.7682%" y="1391.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (36 samples, 0.01%)</title><rect x="64.5185%" y="1365" width="0.0125%" height="15" fill="rgb(220,109,5)"/><text x="64.7685%" y="1375.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (149 samples, 0.05%)</title><rect x="64.4884%" y="1397" width="0.0517%" height="15" fill="rgb(213,203,48)"/><text x="64.7384%" y="1407.50"></text></g><g><title>lock_sock_nested (29 samples, 0.01%)</title><rect x="64.5810%" y="1109" width="0.0101%" height="15" fill="rgb(244,71,33)"/><text x="64.8310%" y="1119.50"></text></g><g><title>_copy_to_iter (47 samples, 0.02%)</title><rect x="64.6042%" y="1061" width="0.0163%" height="15" fill="rgb(209,23,2)"/><text x="64.8542%" y="1071.50"></text></g><g><title>copy_user_generic_string (44 samples, 0.02%)</title><rect x="64.6053%" y="1045" width="0.0153%" height="15" fill="rgb(219,97,7)"/><text x="64.8553%" y="1055.50"></text></g><g><title>__skb_datagram_iter (75 samples, 0.03%)</title><rect x="64.5963%" y="1093" width="0.0260%" height="15" fill="rgb(216,161,23)"/><text x="64.8463%" y="1103.50"></text></g><g><title>simple_copy_to_iter (62 samples, 0.02%)</title><rect x="64.6008%" y="1077" width="0.0215%" height="15" fill="rgb(207,45,42)"/><text x="64.8508%" y="1087.50"></text></g><g><title>skb_copy_datagram_iter (81 samples, 0.03%)</title><rect x="64.5949%" y="1109" width="0.0281%" height="15" fill="rgb(241,61,4)"/><text x="64.8449%" y="1119.50"></text></g><g><title>inet_recvmsg (213 samples, 0.07%)</title><rect x="64.5609%" y="1141" width="0.0739%" height="15" fill="rgb(236,170,1)"/><text x="64.8109%" y="1151.50"></text></g><g><title>tcp_recvmsg (205 samples, 0.07%)</title><rect x="64.5637%" y="1125" width="0.0711%" height="15" fill="rgb(239,72,5)"/><text x="64.8137%" y="1135.50"></text></g><g><title>sock_recvmsg (237 samples, 0.08%)</title><rect x="64.5564%" y="1157" width="0.0822%" height="15" fill="rgb(214,13,50)"/><text x="64.8064%" y="1167.50"></text></g><g><title>__sys_recvfrom (270 samples, 0.09%)</title><rect x="64.5487%" y="1173" width="0.0937%" height="15" fill="rgb(224,88,9)"/><text x="64.7987%" y="1183.50"></text></g><g><title>__x64_sys_recvfrom (276 samples, 0.10%)</title><rect x="64.5487%" y="1189" width="0.0958%" height="15" fill="rgb(238,192,34)"/><text x="64.7987%" y="1199.50"></text></g><g><title>do_syscall_64 (285 samples, 0.10%)</title><rect x="64.5460%" y="1205" width="0.0989%" height="15" fill="rgb(217,203,50)"/><text x="64.7960%" y="1215.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (294 samples, 0.10%)</title><rect x="64.5432%" y="1221" width="0.1020%" height="15" fill="rgb(241,123,32)"/><text x="64.7932%" y="1231.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (307 samples, 0.11%)</title><rect x="64.5401%" y="1381" width="0.1065%" height="15" fill="rgb(248,151,39)"/><text x="64.7901%" y="1391.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (307 samples, 0.11%)</title><rect x="64.5401%" y="1365" width="0.1065%" height="15" fill="rgb(208,89,6)"/><text x="64.7901%" y="1375.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (307 samples, 0.11%)</title><rect x="64.5401%" y="1349" width="0.1065%" height="15" fill="rgb(254,43,26)"/><text x="64.7901%" y="1359.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (307 samples, 0.11%)</title><rect x="64.5401%" y="1333" width="0.1065%" height="15" fill="rgb(216,158,13)"/><text x="64.7901%" y="1343.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (307 samples, 0.11%)</title><rect x="64.5401%" y="1317" width="0.1065%" height="15" fill="rgb(212,47,37)"/><text x="64.7901%" y="1327.50"></text></g><g><title>std::sys_common::net::TcpStream::read (307 samples, 0.11%)</title><rect x="64.5401%" y="1301" width="0.1065%" height="15" fill="rgb(254,16,10)"/><text x="64.7901%" y="1311.50"></text></g><g><title>std::sys::unix::net::Socket::read (307 samples, 0.11%)</title><rect x="64.5401%" y="1285" width="0.1065%" height="15" fill="rgb(223,228,16)"/><text x="64.7901%" y="1295.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (307 samples, 0.11%)</title><rect x="64.5401%" y="1269" width="0.1065%" height="15" fill="rgb(249,108,50)"/><text x="64.7901%" y="1279.50"></text></g><g><title>__libc_recv (307 samples, 0.11%)</title><rect x="64.5401%" y="1253" width="0.1065%" height="15" fill="rgb(208,220,5)"/><text x="64.7901%" y="1263.50"></text></g><g><title>__libc_recv (306 samples, 0.11%)</title><rect x="64.5404%" y="1237" width="0.1062%" height="15" fill="rgb(217,89,48)"/><text x="64.7904%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (474 samples, 0.16%)</title><rect x="64.4884%" y="1541" width="0.1645%" height="15" fill="rgb(212,113,41)"/><text x="64.7384%" y="1551.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (474 samples, 0.16%)</title><rect x="64.4884%" y="1525" width="0.1645%" height="15" fill="rgb(231,127,5)"/><text x="64.7384%" y="1535.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (474 samples, 0.16%)</title><rect x="64.4884%" y="1509" width="0.1645%" height="15" fill="rgb(217,141,17)"/><text x="64.7384%" y="1519.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (474 samples, 0.16%)</title><rect x="64.4884%" y="1493" width="0.1645%" height="15" fill="rgb(245,125,54)"/><text x="64.7384%" y="1503.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (474 samples, 0.16%)</title><rect x="64.4884%" y="1477" width="0.1645%" height="15" fill="rgb(248,125,3)"/><text x="64.7384%" y="1487.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (474 samples, 0.16%)</title><rect x="64.4884%" y="1461" width="0.1645%" height="15" fill="rgb(236,119,51)"/><text x="64.7384%" y="1471.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (474 samples, 0.16%)</title><rect x="64.4884%" y="1445" width="0.1645%" height="15" fill="rgb(239,99,8)"/><text x="64.7384%" y="1455.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (474 samples, 0.16%)</title><rect x="64.4884%" y="1429" width="0.1645%" height="15" fill="rgb(224,228,4)"/><text x="64.7384%" y="1439.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (474 samples, 0.16%)</title><rect x="64.4884%" y="1413" width="0.1645%" height="15" fill="rgb(220,131,45)"/><text x="64.7384%" y="1423.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (325 samples, 0.11%)</title><rect x="64.5401%" y="1397" width="0.1128%" height="15" fill="rgb(215,62,5)"/><text x="64.7901%" y="1407.50"></text></g><g><title>core::ptr::read (54 samples, 0.02%)</title><rect x="64.6670%" y="1269" width="0.0187%" height="15" fill="rgb(253,12,24)"/><text x="64.9170%" y="1279.50"></text></g><g><title>tokio::coop::poll_proceed (95 samples, 0.03%)</title><rect x="64.6546%" y="1413" width="0.0330%" height="15" fill="rgb(248,120,50)"/><text x="64.9046%" y="1423.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (95 samples, 0.03%)</title><rect x="64.6546%" y="1397" width="0.0330%" height="15" fill="rgb(245,194,10)"/><text x="64.9046%" y="1407.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (95 samples, 0.03%)</title><rect x="64.6546%" y="1381" width="0.0330%" height="15" fill="rgb(241,149,38)"/><text x="64.9046%" y="1391.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (95 samples, 0.03%)</title><rect x="64.6546%" y="1365" width="0.0330%" height="15" fill="rgb(219,215,7)"/><text x="64.9046%" y="1375.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (95 samples, 0.03%)</title><rect x="64.6546%" y="1349" width="0.0330%" height="15" fill="rgb(208,120,31)"/><text x="64.9046%" y="1359.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (95 samples, 0.03%)</title><rect x="64.6546%" y="1333" width="0.0330%" height="15" fill="rgb(244,30,8)"/><text x="64.9046%" y="1343.50"></text></g><g><title>core::mem::replace (95 samples, 0.03%)</title><rect x="64.6546%" y="1317" width="0.0330%" height="15" fill="rgb(238,35,44)"/><text x="64.9046%" y="1327.50"></text></g><g><title>core::mem::swap (95 samples, 0.03%)</title><rect x="64.6546%" y="1301" width="0.0330%" height="15" fill="rgb(243,218,37)"/><text x="64.9046%" y="1311.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (95 samples, 0.03%)</title><rect x="64.6546%" y="1285" width="0.0330%" height="15" fill="rgb(218,169,10)"/><text x="64.9046%" y="1295.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (186 samples, 0.06%)</title><rect x="64.6528%" y="1541" width="0.0645%" height="15" fill="rgb(221,144,10)"/><text x="64.9028%" y="1551.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (186 samples, 0.06%)</title><rect x="64.6528%" y="1525" width="0.0645%" height="15" fill="rgb(226,41,38)"/><text x="64.9028%" y="1535.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (186 samples, 0.06%)</title><rect x="64.6528%" y="1509" width="0.0645%" height="15" fill="rgb(228,3,1)"/><text x="64.9028%" y="1519.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (186 samples, 0.06%)</title><rect x="64.6528%" y="1493" width="0.0645%" height="15" fill="rgb(209,129,12)"/><text x="64.9028%" y="1503.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (186 samples, 0.06%)</title><rect x="64.6528%" y="1477" width="0.0645%" height="15" fill="rgb(213,136,33)"/><text x="64.9028%" y="1487.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (186 samples, 0.06%)</title><rect x="64.6528%" y="1461" width="0.0645%" height="15" fill="rgb(209,181,29)"/><text x="64.9028%" y="1471.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (186 samples, 0.06%)</title><rect x="64.6528%" y="1445" width="0.0645%" height="15" fill="rgb(234,173,18)"/><text x="64.9028%" y="1455.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (186 samples, 0.06%)</title><rect x="64.6528%" y="1429" width="0.0645%" height="15" fill="rgb(227,73,47)"/><text x="64.9028%" y="1439.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (86 samples, 0.03%)</title><rect x="64.6875%" y="1413" width="0.0298%" height="15" fill="rgb(234,9,34)"/><text x="64.9375%" y="1423.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.02%)</title><rect x="64.6972%" y="1397" width="0.0201%" height="15" fill="rgb(235,172,15)"/><text x="64.9472%" y="1407.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.02%)</title><rect x="64.7000%" y="1381" width="0.0173%" height="15" fill="rgb(245,61,2)"/><text x="64.9500%" y="1391.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (58 samples, 0.02%)</title><rect x="64.7174%" y="1413" width="0.0201%" height="15" fill="rgb(238,39,47)"/><text x="64.9674%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (57 samples, 0.02%)</title><rect x="64.7375%" y="1413" width="0.0198%" height="15" fill="rgb(234,37,24)"/><text x="64.9875%" y="1423.50"></text></g><g><title>__GI___clock_gettime (32 samples, 0.01%)</title><rect x="64.7638%" y="1333" width="0.0111%" height="15" fill="rgb(248,223,24)"/><text x="65.0138%" y="1343.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (827 samples, 0.29%)</title><rect x="64.4884%" y="1557" width="0.2869%" height="15" fill="rgb(223,12,15)"/><text x="64.7384%" y="1567.50"></text></g><g><title>log::__private_api_log (167 samples, 0.06%)</title><rect x="64.7174%" y="1541" width="0.0579%" height="15" fill="rgb(249,6,3)"/><text x="64.9674%" y="1551.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (167 samples, 0.06%)</title><rect x="64.7174%" y="1525" width="0.0579%" height="15" fill="rgb(237,105,33)"/><text x="64.9674%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (167 samples, 0.06%)</title><rect x="64.7174%" y="1509" width="0.0579%" height="15" fill="rgb(252,208,35)"/><text x="64.9674%" y="1519.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (167 samples, 0.06%)</title><rect x="64.7174%" y="1493" width="0.0579%" height="15" fill="rgb(215,181,35)"/><text x="64.9674%" y="1503.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (167 samples, 0.06%)</title><rect x="64.7174%" y="1477" width="0.0579%" height="15" fill="rgb(246,212,3)"/><text x="64.9674%" y="1487.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (167 samples, 0.06%)</title><rect x="64.7174%" y="1461" width="0.0579%" height="15" fill="rgb(247,156,24)"/><text x="64.9674%" y="1471.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (167 samples, 0.06%)</title><rect x="64.7174%" y="1445" width="0.0579%" height="15" fill="rgb(248,9,31)"/><text x="64.9674%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (167 samples, 0.06%)</title><rect x="64.7174%" y="1429" width="0.0579%" height="15" fill="rgb(234,26,45)"/><text x="64.9674%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (33 samples, 0.01%)</title><rect x="64.7638%" y="1413" width="0.0114%" height="15" fill="rgb(249,11,32)"/><text x="65.0138%" y="1423.50"></text></g><g><title>env_logger::fmt::humantime::imp::&lt;impl env_logger::fmt::Formatter&gt;::timestamp_seconds (33 samples, 0.01%)</title><rect x="64.7638%" y="1397" width="0.0114%" height="15" fill="rgb(249,162,33)"/><text x="65.0138%" y="1407.50"></text></g><g><title>std::time::SystemTime::now (33 samples, 0.01%)</title><rect x="64.7638%" y="1381" width="0.0114%" height="15" fill="rgb(232,4,32)"/><text x="65.0138%" y="1391.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (33 samples, 0.01%)</title><rect x="64.7638%" y="1365" width="0.0114%" height="15" fill="rgb(212,5,45)"/><text x="65.0138%" y="1375.50"></text></g><g><title>std::sys::unix::time::inner::now (33 samples, 0.01%)</title><rect x="64.7638%" y="1349" width="0.0114%" height="15" fill="rgb(227,95,13)"/><text x="65.0138%" y="1359.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (82 samples, 0.03%)</title><rect x="64.7777%" y="1301" width="0.0285%" height="15" fill="rgb(223,205,10)"/><text x="65.0277%" y="1311.50"></text></g><g><title>std::io::Write::write_all (82 samples, 0.03%)</title><rect x="64.7777%" y="1285" width="0.0285%" height="15" fill="rgb(222,178,8)"/><text x="65.0277%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (82 samples, 0.03%)</title><rect x="64.7777%" y="1269" width="0.0285%" height="15" fill="rgb(216,13,22)"/><text x="65.0277%" y="1279.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (120 samples, 0.04%)</title><rect x="64.7777%" y="1365" width="0.0416%" height="15" fill="rgb(240,167,12)"/><text x="65.0277%" y="1375.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (120 samples, 0.04%)</title><rect x="64.7777%" y="1349" width="0.0416%" height="15" fill="rgb(235,68,35)"/><text x="65.0277%" y="1359.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (120 samples, 0.04%)</title><rect x="64.7777%" y="1333" width="0.0416%" height="15" fill="rgb(253,40,27)"/><text x="65.0277%" y="1343.50"></text></g><g><title>core::fmt::write (120 samples, 0.04%)</title><rect x="64.7777%" y="1317" width="0.0416%" height="15" fill="rgb(214,19,28)"/><text x="65.0277%" y="1327.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (32 samples, 0.01%)</title><rect x="64.8083%" y="1301" width="0.0111%" height="15" fill="rgb(210,167,45)"/><text x="65.0583%" y="1311.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (32 samples, 0.01%)</title><rect x="64.8083%" y="1285" width="0.0111%" height="15" fill="rgb(232,97,40)"/><text x="65.0583%" y="1295.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (32 samples, 0.01%)</title><rect x="64.8083%" y="1269" width="0.0111%" height="15" fill="rgb(250,35,23)"/><text x="65.0583%" y="1279.50"></text></g><g><title>std::io::Write::write_all (32 samples, 0.01%)</title><rect x="64.8083%" y="1253" width="0.0111%" height="15" fill="rgb(248,47,53)"/><text x="65.0583%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (32 samples, 0.01%)</title><rect x="64.8083%" y="1237" width="0.0111%" height="15" fill="rgb(226,58,50)"/><text x="65.0583%" y="1247.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (125 samples, 0.04%)</title><rect x="64.7777%" y="1413" width="0.0434%" height="15" fill="rgb(217,105,26)"/><text x="65.0277%" y="1423.50"></text></g><g><title>std::io::Write::write_fmt (125 samples, 0.04%)</title><rect x="64.7777%" y="1397" width="0.0434%" height="15" fill="rgb(208,64,1)"/><text x="65.0277%" y="1407.50"></text></g><g><title>core::fmt::write (125 samples, 0.04%)</title><rect x="64.7777%" y="1381" width="0.0434%" height="15" fill="rgb(214,80,1)"/><text x="65.0277%" y="1391.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (35 samples, 0.01%)</title><rect x="64.8211%" y="1253" width="0.0121%" height="15" fill="rgb(206,175,26)"/><text x="65.0711%" y="1263.50"></text></g><g><title>&lt;log::Level as core::fmt::Display&gt;::fmt (35 samples, 0.01%)</title><rect x="64.8211%" y="1237" width="0.0121%" height="15" fill="rgb(235,156,37)"/><text x="65.0711%" y="1247.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (35 samples, 0.01%)</title><rect x="64.8211%" y="1221" width="0.0121%" height="15" fill="rgb(213,100,9)"/><text x="65.0711%" y="1231.50"></text></g><g><title>std::io::Write::write_all (35 samples, 0.01%)</title><rect x="64.8211%" y="1205" width="0.0121%" height="15" fill="rgb(241,15,13)"/><text x="65.0711%" y="1215.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (54 samples, 0.02%)</title><rect x="64.8211%" y="1349" width="0.0187%" height="15" fill="rgb(205,97,43)"/><text x="65.0711%" y="1359.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (54 samples, 0.02%)</title><rect x="64.8211%" y="1333" width="0.0187%" height="15" fill="rgb(216,106,32)"/><text x="65.0711%" y="1343.50"></text></g><g><title>core::fmt::write (54 samples, 0.02%)</title><rect x="64.8211%" y="1317" width="0.0187%" height="15" fill="rgb(226,200,8)"/><text x="65.0711%" y="1327.50"></text></g><g><title>core::fmt::run (54 samples, 0.02%)</title><rect x="64.8211%" y="1301" width="0.0187%" height="15" fill="rgb(244,54,29)"/><text x="65.0711%" y="1311.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (54 samples, 0.02%)</title><rect x="64.8211%" y="1285" width="0.0187%" height="15" fill="rgb(252,169,12)"/><text x="65.0711%" y="1295.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (54 samples, 0.02%)</title><rect x="64.8211%" y="1269" width="0.0187%" height="15" fill="rgb(231,199,11)"/><text x="65.0711%" y="1279.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (60 samples, 0.02%)</title><rect x="64.8211%" y="1413" width="0.0208%" height="15" fill="rgb(233,191,18)"/><text x="65.0711%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (60 samples, 0.02%)</title><rect x="64.8211%" y="1397" width="0.0208%" height="15" fill="rgb(215,83,47)"/><text x="65.0711%" y="1407.50"></text></g><g><title>std::io::Write::write_fmt (60 samples, 0.02%)</title><rect x="64.8211%" y="1381" width="0.0208%" height="15" fill="rgb(251,67,19)"/><text x="65.0711%" y="1391.50"></text></g><g><title>core::fmt::write (60 samples, 0.02%)</title><rect x="64.8211%" y="1365" width="0.0208%" height="15" fill="rgb(240,7,20)"/><text x="65.0711%" y="1375.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.01%)</title><rect x="64.8433%" y="1317" width="0.0104%" height="15" fill="rgb(210,150,26)"/><text x="65.0933%" y="1327.50"></text></g><g><title>std::io::Write::write_all (30 samples, 0.01%)</title><rect x="64.8433%" y="1301" width="0.0104%" height="15" fill="rgb(228,75,42)"/><text x="65.0933%" y="1311.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (46 samples, 0.02%)</title><rect x="64.8433%" y="1349" width="0.0160%" height="15" fill="rgb(237,134,48)"/><text x="65.0933%" y="1359.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (46 samples, 0.02%)</title><rect x="64.8433%" y="1333" width="0.0160%" height="15" fill="rgb(205,80,50)"/><text x="65.0933%" y="1343.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (32 samples, 0.01%)</title><rect x="64.8672%" y="1237" width="0.0111%" height="15" fill="rgb(217,74,48)"/><text x="65.1172%" y="1247.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (32 samples, 0.01%)</title><rect x="64.8672%" y="1221" width="0.0111%" height="15" fill="rgb(205,82,50)"/><text x="65.1172%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (32 samples, 0.01%)</title><rect x="64.8672%" y="1205" width="0.0111%" height="15" fill="rgb(228,1,33)"/><text x="65.1172%" y="1215.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,126 samples, 0.39%)</title><rect x="64.4884%" y="1573" width="0.3907%" height="15" fill="rgb(214,50,23)"/><text x="64.7384%" y="1583.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (299 samples, 0.10%)</title><rect x="64.7753%" y="1557" width="0.1037%" height="15" fill="rgb(210,62,9)"/><text x="65.0253%" y="1567.50"></text></g><g><title>log::__private_api_log (299 samples, 0.10%)</title><rect x="64.7753%" y="1541" width="0.1037%" height="15" fill="rgb(210,104,37)"/><text x="65.0253%" y="1551.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (299 samples, 0.10%)</title><rect x="64.7753%" y="1525" width="0.1037%" height="15" fill="rgb(232,104,43)"/><text x="65.0253%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (299 samples, 0.10%)</title><rect x="64.7753%" y="1509" width="0.1037%" height="15" fill="rgb(244,52,6)"/><text x="65.0253%" y="1519.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (299 samples, 0.10%)</title><rect x="64.7753%" y="1493" width="0.1037%" height="15" fill="rgb(211,174,52)"/><text x="65.0253%" y="1503.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (299 samples, 0.10%)</title><rect x="64.7753%" y="1477" width="0.1037%" height="15" fill="rgb(229,48,4)"/><text x="65.0253%" y="1487.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (299 samples, 0.10%)</title><rect x="64.7753%" y="1461" width="0.1037%" height="15" fill="rgb(205,155,16)"/><text x="65.0253%" y="1471.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (299 samples, 0.10%)</title><rect x="64.7753%" y="1445" width="0.1037%" height="15" fill="rgb(211,141,53)"/><text x="65.0253%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (299 samples, 0.10%)</title><rect x="64.7753%" y="1429" width="0.1037%" height="15" fill="rgb(240,148,11)"/><text x="65.0253%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (103 samples, 0.04%)</title><rect x="64.8433%" y="1413" width="0.0357%" height="15" fill="rgb(214,45,23)"/><text x="65.0933%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (103 samples, 0.04%)</title><rect x="64.8433%" y="1397" width="0.0357%" height="15" fill="rgb(248,74,26)"/><text x="65.0933%" y="1407.50"></text></g><g><title>std::io::Write::write_fmt (103 samples, 0.04%)</title><rect x="64.8433%" y="1381" width="0.0357%" height="15" fill="rgb(218,121,16)"/><text x="65.0933%" y="1391.50"></text></g><g><title>core::fmt::write (103 samples, 0.04%)</title><rect x="64.8433%" y="1365" width="0.0357%" height="15" fill="rgb(218,10,47)"/><text x="65.0933%" y="1375.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (57 samples, 0.02%)</title><rect x="64.8593%" y="1349" width="0.0198%" height="15" fill="rgb(227,99,14)"/><text x="65.1093%" y="1359.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (57 samples, 0.02%)</title><rect x="64.8593%" y="1333" width="0.0198%" height="15" fill="rgb(229,83,46)"/><text x="65.1093%" y="1343.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::reset (34 samples, 0.01%)</title><rect x="64.8672%" y="1317" width="0.0118%" height="15" fill="rgb(228,25,1)"/><text x="65.1172%" y="1327.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::reset (34 samples, 0.01%)</title><rect x="64.8672%" y="1301" width="0.0118%" height="15" fill="rgb(252,190,15)"/><text x="65.1172%" y="1311.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (34 samples, 0.01%)</title><rect x="64.8672%" y="1285" width="0.0118%" height="15" fill="rgb(213,103,51)"/><text x="65.1172%" y="1295.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (34 samples, 0.01%)</title><rect x="64.8672%" y="1269" width="0.0118%" height="15" fill="rgb(220,38,44)"/><text x="65.1172%" y="1279.50"></text></g><g><title>std::io::Write::write_all (34 samples, 0.01%)</title><rect x="64.8672%" y="1253" width="0.0118%" height="15" fill="rgb(210,45,26)"/><text x="65.1172%" y="1263.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (32 samples, 0.01%)</title><rect x="64.8790%" y="1365" width="0.0111%" height="15" fill="rgb(205,95,48)"/><text x="65.1290%" y="1375.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (32 samples, 0.01%)</title><rect x="64.8790%" y="1349" width="0.0111%" height="15" fill="rgb(225,179,37)"/><text x="65.1290%" y="1359.50"></text></g><g><title>tokio::io::driver::Driver::turn (32 samples, 0.01%)</title><rect x="64.8790%" y="1333" width="0.0111%" height="15" fill="rgb(230,209,3)"/><text x="65.1290%" y="1343.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (32 samples, 0.01%)</title><rect x="64.8790%" y="1317" width="0.0111%" height="15" fill="rgb(248,12,46)"/><text x="65.1290%" y="1327.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (32 samples, 0.01%)</title><rect x="64.8790%" y="1301" width="0.0111%" height="15" fill="rgb(234,18,0)"/><text x="65.1290%" y="1311.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (32 samples, 0.01%)</title><rect x="64.8790%" y="1285" width="0.0111%" height="15" fill="rgb(238,197,14)"/><text x="65.1290%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (36 samples, 0.01%)</title><rect x="64.8790%" y="1477" width="0.0125%" height="15" fill="rgb(251,162,48)"/><text x="65.1290%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (36 samples, 0.01%)</title><rect x="64.8790%" y="1461" width="0.0125%" height="15" fill="rgb(237,73,42)"/><text x="65.1290%" y="1471.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (36 samples, 0.01%)</title><rect x="64.8790%" y="1445" width="0.0125%" height="15" fill="rgb(211,108,8)"/><text x="65.1290%" y="1455.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (36 samples, 0.01%)</title><rect x="64.8790%" y="1429" width="0.0125%" height="15" fill="rgb(213,45,22)"/><text x="65.1290%" y="1439.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (36 samples, 0.01%)</title><rect x="64.8790%" y="1413" width="0.0125%" height="15" fill="rgb(252,154,5)"/><text x="65.1290%" y="1423.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (36 samples, 0.01%)</title><rect x="64.8790%" y="1397" width="0.0125%" height="15" fill="rgb(221,79,52)"/><text x="65.1290%" y="1407.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (36 samples, 0.01%)</title><rect x="64.8790%" y="1381" width="0.0125%" height="15" fill="rgb(229,220,36)"/><text x="65.1290%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (104 samples, 0.04%)</title><rect x="64.8915%" y="1477" width="0.0361%" height="15" fill="rgb(211,17,16)"/><text x="65.1415%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (104 samples, 0.04%)</title><rect x="64.8915%" y="1461" width="0.0361%" height="15" fill="rgb(222,55,31)"/><text x="65.1415%" y="1471.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (104 samples, 0.04%)</title><rect x="64.8915%" y="1445" width="0.0361%" height="15" fill="rgb(221,221,31)"/><text x="65.1415%" y="1455.50"></text></g><g><title>tokio::runtime::park::Inner::park (104 samples, 0.04%)</title><rect x="64.8915%" y="1429" width="0.0361%" height="15" fill="rgb(227,168,26)"/><text x="65.1415%" y="1439.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (104 samples, 0.04%)</title><rect x="64.8915%" y="1413" width="0.0361%" height="15" fill="rgb(224,139,9)"/><text x="65.1415%" y="1423.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (104 samples, 0.04%)</title><rect x="64.8915%" y="1397" width="0.0361%" height="15" fill="rgb(254,172,0)"/><text x="65.1415%" y="1407.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (104 samples, 0.04%)</title><rect x="64.8915%" y="1381" width="0.0361%" height="15" fill="rgb(235,203,1)"/><text x="65.1415%" y="1391.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (104 samples, 0.04%)</title><rect x="64.8915%" y="1365" width="0.0361%" height="15" fill="rgb(216,205,24)"/><text x="65.1415%" y="1375.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (104 samples, 0.04%)</title><rect x="64.8915%" y="1349" width="0.0361%" height="15" fill="rgb(233,24,6)"/><text x="65.1415%" y="1359.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (101 samples, 0.04%)</title><rect x="64.8926%" y="1333" width="0.0350%" height="15" fill="rgb(244,110,9)"/><text x="65.1426%" y="1343.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (101 samples, 0.04%)</title><rect x="64.8926%" y="1317" width="0.0350%" height="15" fill="rgb(239,222,42)"/><text x="65.1426%" y="1327.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (101 samples, 0.04%)</title><rect x="64.8926%" y="1301" width="0.0350%" height="15" fill="rgb(218,145,13)"/><text x="65.1426%" y="1311.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (101 samples, 0.04%)</title><rect x="64.8926%" y="1285" width="0.0350%" height="15" fill="rgb(207,69,11)"/><text x="65.1426%" y="1295.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (101 samples, 0.04%)</title><rect x="64.8926%" y="1269" width="0.0350%" height="15" fill="rgb(220,223,22)"/><text x="65.1426%" y="1279.50"></text></g><g><title>core::mem::replace (101 samples, 0.04%)</title><rect x="64.8926%" y="1253" width="0.0350%" height="15" fill="rgb(245,102,5)"/><text x="65.1426%" y="1263.50"></text></g><g><title>core::mem::swap (101 samples, 0.04%)</title><rect x="64.8926%" y="1237" width="0.0350%" height="15" fill="rgb(211,148,2)"/><text x="65.1426%" y="1247.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (101 samples, 0.04%)</title><rect x="64.8926%" y="1221" width="0.0350%" height="15" fill="rgb(241,13,44)"/><text x="65.1426%" y="1231.50"></text></g><g><title>core::ptr::read (101 samples, 0.04%)</title><rect x="64.8926%" y="1205" width="0.0350%" height="15" fill="rgb(219,137,21)"/><text x="65.1426%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.02%)</title><rect x="64.9099%" y="1189" width="0.0177%" height="15" fill="rgb(242,206,5)"/><text x="65.1599%" y="1199.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (98 samples, 0.03%)</title><rect x="64.9276%" y="1077" width="0.0340%" height="15" fill="rgb(217,114,22)"/><text x="65.1776%" y="1087.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (98 samples, 0.03%)</title><rect x="64.9276%" y="1061" width="0.0340%" height="15" fill="rgb(253,206,42)"/><text x="65.1776%" y="1071.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (98 samples, 0.03%)</title><rect x="64.9276%" y="1045" width="0.0340%" height="15" fill="rgb(236,102,18)"/><text x="65.1776%" y="1055.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (98 samples, 0.03%)</title><rect x="64.9276%" y="1029" width="0.0340%" height="15" fill="rgb(208,59,49)"/><text x="65.1776%" y="1039.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (160 samples, 0.06%)</title><rect x="64.9276%" y="1093" width="0.0555%" height="15" fill="rgb(215,194,28)"/><text x="65.1776%" y="1103.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (62 samples, 0.02%)</title><rect x="64.9616%" y="1077" width="0.0215%" height="15" fill="rgb(243,207,11)"/><text x="65.2116%" y="1087.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (62 samples, 0.02%)</title><rect x="64.9616%" y="1061" width="0.0215%" height="15" fill="rgb(254,179,35)"/><text x="65.2116%" y="1071.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (62 samples, 0.02%)</title><rect x="64.9616%" y="1045" width="0.0215%" height="15" fill="rgb(235,97,3)"/><text x="65.2116%" y="1055.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (62 samples, 0.02%)</title><rect x="64.9616%" y="1029" width="0.0215%" height="15" fill="rgb(215,155,33)"/><text x="65.2116%" y="1039.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (62 samples, 0.02%)</title><rect x="64.9616%" y="1013" width="0.0215%" height="15" fill="rgb(223,128,12)"/><text x="65.2116%" y="1023.50"></text></g><g><title>__memset_avx2_unaligned_erms (221 samples, 0.08%)</title><rect x="65.0601%" y="949" width="0.0767%" height="15" fill="rgb(208,157,18)"/><text x="65.3101%" y="959.50"></text></g><g><title>__libc_calloc (385 samples, 0.13%)</title><rect x="65.0064%" y="965" width="0.1336%" height="15" fill="rgb(249,70,54)"/><text x="65.2564%" y="975.50"></text></g><g><title>alloc::alloc::alloc_zeroed (427 samples, 0.15%)</title><rect x="65.0012%" y="981" width="0.1482%" height="15" fill="rgb(244,118,24)"/><text x="65.2512%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (41 samples, 0.01%)</title><rect x="65.1677%" y="965" width="0.0142%" height="15" fill="rgb(211,54,0)"/><text x="65.4177%" y="975.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (78 samples, 0.03%)</title><rect x="65.1563%" y="981" width="0.0271%" height="15" fill="rgb(245,137,45)"/><text x="65.4063%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (619 samples, 0.21%)</title><rect x="64.9831%" y="1013" width="0.2148%" height="15" fill="rgb(232,154,31)"/><text x="65.2331%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (619 samples, 0.21%)</title><rect x="64.9831%" y="997" width="0.2148%" height="15" fill="rgb(253,6,39)"/><text x="65.2331%" y="1007.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (42 samples, 0.01%)</title><rect x="65.1833%" y="981" width="0.0146%" height="15" fill="rgb(234,183,24)"/><text x="65.4333%" y="991.50"></text></g><g><title>core::alloc::layout::Layout::new (46 samples, 0.02%)</title><rect x="65.2135%" y="997" width="0.0160%" height="15" fill="rgb(252,84,40)"/><text x="65.4635%" y="1007.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (64 samples, 0.02%)</title><rect x="65.2295%" y="997" width="0.0222%" height="15" fill="rgb(224,65,2)"/><text x="65.4795%" y="1007.50"></text></g><g><title>alloc::vec::from_elem (775 samples, 0.27%)</title><rect x="64.9831%" y="1093" width="0.2689%" height="15" fill="rgb(229,38,24)"/><text x="65.2331%" y="1103.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (775 samples, 0.27%)</title><rect x="64.9831%" y="1077" width="0.2689%" height="15" fill="rgb(218,131,50)"/><text x="65.2331%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (775 samples, 0.27%)</title><rect x="64.9831%" y="1061" width="0.2689%" height="15" fill="rgb(233,106,18)"/><text x="65.2331%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (775 samples, 0.27%)</title><rect x="64.9831%" y="1045" width="0.2689%" height="15" fill="rgb(220,216,11)"/><text x="65.2331%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (775 samples, 0.27%)</title><rect x="64.9831%" y="1029" width="0.2689%" height="15" fill="rgb(251,100,45)"/><text x="65.2331%" y="1039.50"></text></g><g><title>core::alloc::layout::Layout::array (156 samples, 0.05%)</title><rect x="65.1979%" y="1013" width="0.0541%" height="15" fill="rgb(235,143,32)"/><text x="65.4479%" y="1023.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.03%)</title><rect x="65.2520%" y="997" width="0.0274%" height="15" fill="rgb(248,124,34)"/><text x="65.5020%" y="1007.50"></text></g><g><title>tokio::io::driver::registration::Registration::deregister (63 samples, 0.02%)</title><rect x="65.2576%" y="981" width="0.0219%" height="15" fill="rgb(225,221,4)"/><text x="65.5076%" y="991.50"></text></g><g><title>tokio::io::driver::Inner::deregister_source (38 samples, 0.01%)</title><rect x="65.2662%" y="965" width="0.0132%" height="15" fill="rgb(242,27,43)"/><text x="65.5162%" y="975.50"></text></g><g><title>mio::poll::Registry::deregister (38 samples, 0.01%)</title><rect x="65.2662%" y="949" width="0.0132%" height="15" fill="rgb(227,54,8)"/><text x="65.5162%" y="959.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (43 samples, 0.01%)</title><rect x="65.2877%" y="869" width="0.0149%" height="15" fill="rgb(253,139,49)"/><text x="65.5377%" y="879.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (63 samples, 0.02%)</title><rect x="65.2860%" y="885" width="0.0219%" height="15" fill="rgb(231,26,43)"/><text x="65.5360%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (34 samples, 0.01%)</title><rect x="65.3086%" y="853" width="0.0118%" height="15" fill="rgb(207,121,39)"/><text x="65.5586%" y="863.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (103 samples, 0.04%)</title><rect x="65.2860%" y="917" width="0.0357%" height="15" fill="rgb(223,101,35)"/><text x="65.5360%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (103 samples, 0.04%)</title><rect x="65.2860%" y="901" width="0.0357%" height="15" fill="rgb(232,87,23)"/><text x="65.5360%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.01%)</title><rect x="65.3079%" y="885" width="0.0139%" height="15" fill="rgb(225,180,29)"/><text x="65.5579%" y="895.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (40 samples, 0.01%)</title><rect x="65.3079%" y="869" width="0.0139%" height="15" fill="rgb(225,25,17)"/><text x="65.5579%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (46 samples, 0.02%)</title><rect x="65.3266%" y="869" width="0.0160%" height="15" fill="rgb(223,8,52)"/><text x="65.5766%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (67 samples, 0.02%)</title><rect x="65.3256%" y="885" width="0.0232%" height="15" fill="rgb(246,42,21)"/><text x="65.5756%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (306 samples, 0.11%)</title><rect x="65.2520%" y="1093" width="0.1062%" height="15" fill="rgb(205,64,43)"/><text x="65.5020%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (306 samples, 0.11%)</title><rect x="65.2520%" y="1077" width="0.1062%" height="15" fill="rgb(221,160,13)"/><text x="65.5020%" y="1087.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (306 samples, 0.11%)</title><rect x="65.2520%" y="1061" width="0.1062%" height="15" fill="rgb(239,58,35)"/><text x="65.5020%" y="1071.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (306 samples, 0.11%)</title><rect x="65.2520%" y="1045" width="0.1062%" height="15" fill="rgb(251,26,40)"/><text x="65.5020%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (306 samples, 0.11%)</title><rect x="65.2520%" y="1029" width="0.1062%" height="15" fill="rgb(247,0,4)"/><text x="65.5020%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (306 samples, 0.11%)</title><rect x="65.2520%" y="1013" width="0.1062%" height="15" fill="rgb(218,130,10)"/><text x="65.5020%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (227 samples, 0.08%)</title><rect x="65.2794%" y="997" width="0.0788%" height="15" fill="rgb(239,32,7)"/><text x="65.5294%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (227 samples, 0.08%)</title><rect x="65.2794%" y="981" width="0.0788%" height="15" fill="rgb(210,192,24)"/><text x="65.5294%" y="991.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::drop::Drop&gt;::drop (227 samples, 0.08%)</title><rect x="65.2794%" y="965" width="0.0788%" height="15" fill="rgb(226,212,17)"/><text x="65.5294%" y="975.50"></text></g><g><title>tokio::util::slab::Value&lt;T&gt;::release (227 samples, 0.08%)</title><rect x="65.2794%" y="949" width="0.0788%" height="15" fill="rgb(219,201,28)"/><text x="65.5294%" y="959.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::release (227 samples, 0.08%)</title><rect x="65.2794%" y="933" width="0.0788%" height="15" fill="rgb(235,207,41)"/><text x="65.5294%" y="943.50"></text></g><g><title>tokio::util::slab::Slots&lt;T&gt;::index_for (105 samples, 0.04%)</title><rect x="65.3217%" y="917" width="0.0364%" height="15" fill="rgb(241,95,54)"/><text x="65.5717%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (105 samples, 0.04%)</title><rect x="65.3217%" y="901" width="0.0364%" height="15" fill="rgb(248,12,23)"/><text x="65.5717%" y="911.50"></text></g><g><title>&lt;tokio::sync::mpsc::block::Values&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (30 samples, 0.01%)</title><rect x="65.3582%" y="1013" width="0.0104%" height="15" fill="rgb(228,173,4)"/><text x="65.6082%" y="1023.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (30 samples, 0.01%)</title><rect x="65.3582%" y="997" width="0.0104%" height="15" fill="rgb(254,99,5)"/><text x="65.6082%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (84 samples, 0.03%)</title><rect x="65.3582%" y="1029" width="0.0291%" height="15" fill="rgb(212,184,17)"/><text x="65.6082%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (33 samples, 0.01%)</title><rect x="65.3759%" y="1013" width="0.0114%" height="15" fill="rgb(252,174,1)"/><text x="65.6259%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (30 samples, 0.01%)</title><rect x="65.3769%" y="997" width="0.0104%" height="15" fill="rgb(241,118,51)"/><text x="65.6269%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (201 samples, 0.07%)</title><rect x="65.3582%" y="1045" width="0.0697%" height="15" fill="rgb(227,94,47)"/><text x="65.6082%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (117 samples, 0.04%)</title><rect x="65.3873%" y="1029" width="0.0406%" height="15" fill="rgb(229,104,2)"/><text x="65.6373%" y="1039.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (52 samples, 0.02%)</title><rect x="65.4293%" y="965" width="0.0180%" height="15" fill="rgb(219,28,31)"/><text x="65.6793%" y="975.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (52 samples, 0.02%)</title><rect x="65.4293%" y="949" width="0.0180%" height="15" fill="rgb(233,109,36)"/><text x="65.6793%" y="959.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (52 samples, 0.02%)</title><rect x="65.4293%" y="933" width="0.0180%" height="15" fill="rgb(246,88,11)"/><text x="65.6793%" y="943.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (40 samples, 0.01%)</title><rect x="65.4335%" y="917" width="0.0139%" height="15" fill="rgb(209,212,17)"/><text x="65.6835%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (91 samples, 0.03%)</title><rect x="65.4279%" y="1029" width="0.0316%" height="15" fill="rgb(243,59,29)"/><text x="65.6779%" y="1039.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (91 samples, 0.03%)</title><rect x="65.4279%" y="1013" width="0.0316%" height="15" fill="rgb(244,205,48)"/><text x="65.6779%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (91 samples, 0.03%)</title><rect x="65.4279%" y="997" width="0.0316%" height="15" fill="rgb(227,30,6)"/><text x="65.6779%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (87 samples, 0.03%)</title><rect x="65.4293%" y="981" width="0.0302%" height="15" fill="rgb(220,205,48)"/><text x="65.6793%" y="991.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (1,608 samples, 0.56%)</title><rect x="64.9276%" y="1109" width="0.5579%" height="15" fill="rgb(250,94,14)"/><text x="65.1776%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (367 samples, 0.13%)</title><rect x="65.3582%" y="1093" width="0.1273%" height="15" fill="rgb(216,119,42)"/><text x="65.6082%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (367 samples, 0.13%)</title><rect x="65.3582%" y="1077" width="0.1273%" height="15" fill="rgb(232,155,0)"/><text x="65.6082%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (367 samples, 0.13%)</title><rect x="65.3582%" y="1061" width="0.1273%" height="15" fill="rgb(212,24,32)"/><text x="65.6082%" y="1071.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (166 samples, 0.06%)</title><rect x="65.4279%" y="1045" width="0.0576%" height="15" fill="rgb(216,69,20)"/><text x="65.6779%" y="1055.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (75 samples, 0.03%)</title><rect x="65.4595%" y="1029" width="0.0260%" height="15" fill="rgb(229,73,31)"/><text x="65.7095%" y="1039.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (45 samples, 0.02%)</title><rect x="65.4699%" y="1013" width="0.0156%" height="15" fill="rgb(224,219,20)"/><text x="65.7199%" y="1023.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker::{{closure}} (45 samples, 0.02%)</title><rect x="65.4699%" y="997" width="0.0156%" height="15" fill="rgb(215,146,41)"/><text x="65.7199%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (45 samples, 0.02%)</title><rect x="65.4699%" y="981" width="0.0156%" height="15" fill="rgb(244,71,31)"/><text x="65.7199%" y="991.50"></text></g><g><title>core::mem::take (45 samples, 0.02%)</title><rect x="65.4699%" y="965" width="0.0156%" height="15" fill="rgb(224,24,11)"/><text x="65.7199%" y="975.50"></text></g><g><title>core::mem::replace (32 samples, 0.01%)</title><rect x="65.4744%" y="949" width="0.0111%" height="15" fill="rgb(229,76,15)"/><text x="65.7244%" y="959.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (32 samples, 0.01%)</title><rect x="65.5112%" y="1045" width="0.0111%" height="15" fill="rgb(209,93,2)"/><text x="65.7612%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (115 samples, 0.04%)</title><rect x="65.4855%" y="1093" width="0.0399%" height="15" fill="rgb(216,200,50)"/><text x="65.7355%" y="1103.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (115 samples, 0.04%)</title><rect x="65.4855%" y="1077" width="0.0399%" height="15" fill="rgb(211,67,34)"/><text x="65.7355%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (115 samples, 0.04%)</title><rect x="65.4855%" y="1061" width="0.0399%" height="15" fill="rgb(225,87,47)"/><text x="65.7355%" y="1071.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (30 samples, 0.01%)</title><rect x="65.5254%" y="1077" width="0.0104%" height="15" fill="rgb(217,185,16)"/><text x="65.7754%" y="1087.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (30 samples, 0.01%)</title><rect x="65.5254%" y="1061" width="0.0104%" height="15" fill="rgb(205,0,0)"/><text x="65.7754%" y="1071.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (30 samples, 0.01%)</title><rect x="65.5254%" y="1045" width="0.0104%" height="15" fill="rgb(207,116,45)"/><text x="65.7754%" y="1055.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (30 samples, 0.01%)</title><rect x="65.5254%" y="1029" width="0.0104%" height="15" fill="rgb(221,156,26)"/><text x="65.7754%" y="1039.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (30 samples, 0.01%)</title><rect x="65.5254%" y="1013" width="0.0104%" height="15" fill="rgb(213,140,4)"/><text x="65.7754%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (99 samples, 0.03%)</title><rect x="65.5254%" y="1093" width="0.0343%" height="15" fill="rgb(231,224,15)"/><text x="65.7754%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (69 samples, 0.02%)</title><rect x="65.5358%" y="1077" width="0.0239%" height="15" fill="rgb(244,76,20)"/><text x="65.7858%" y="1087.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (69 samples, 0.02%)</title><rect x="65.5358%" y="1061" width="0.0239%" height="15" fill="rgb(238,117,7)"/><text x="65.7858%" y="1071.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (69 samples, 0.02%)</title><rect x="65.5358%" y="1045" width="0.0239%" height="15" fill="rgb(235,1,10)"/><text x="65.7858%" y="1055.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (51 samples, 0.02%)</title><rect x="65.5421%" y="1029" width="0.0177%" height="15" fill="rgb(216,165,6)"/><text x="65.7921%" y="1039.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (51 samples, 0.02%)</title><rect x="65.5421%" y="1013" width="0.0177%" height="15" fill="rgb(246,91,35)"/><text x="65.7921%" y="1023.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.01%)</title><rect x="65.5615%" y="1045" width="0.0146%" height="15" fill="rgb(228,96,24)"/><text x="65.8115%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (42 samples, 0.01%)</title><rect x="65.5615%" y="1029" width="0.0146%" height="15" fill="rgb(254,217,53)"/><text x="65.8115%" y="1039.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (42 samples, 0.01%)</title><rect x="65.5615%" y="1013" width="0.0146%" height="15" fill="rgb(209,60,0)"/><text x="65.8115%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (42 samples, 0.01%)</title><rect x="65.5615%" y="997" width="0.0146%" height="15" fill="rgb(250,93,26)"/><text x="65.8115%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (42 samples, 0.01%)</title><rect x="65.5615%" y="981" width="0.0146%" height="15" fill="rgb(211,9,40)"/><text x="65.8115%" y="991.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.01%)</title><rect x="65.5809%" y="869" width="0.0108%" height="15" fill="rgb(242,57,20)"/><text x="65.8309%" y="879.50"></text></g><g><title>core::mem::drop (115 samples, 0.04%)</title><rect x="65.5761%" y="917" width="0.0399%" height="15" fill="rgb(248,85,48)"/><text x="65.8261%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (115 samples, 0.04%)</title><rect x="65.5761%" y="901" width="0.0399%" height="15" fill="rgb(212,117,2)"/><text x="65.8261%" y="911.50"></text></g><g><title>alloc::alloc::box_free (115 samples, 0.04%)</title><rect x="65.5761%" y="885" width="0.0399%" height="15" fill="rgb(243,19,3)"/><text x="65.8261%" y="895.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (38 samples, 0.01%)</title><rect x="65.6337%" y="901" width="0.0132%" height="15" fill="rgb(232,217,24)"/><text x="65.8837%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (33 samples, 0.01%)</title><rect x="65.6354%" y="885" width="0.0114%" height="15" fill="rgb(224,175,40)"/><text x="65.8854%" y="895.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::free_blocks (224 samples, 0.08%)</title><rect x="65.5761%" y="933" width="0.0777%" height="15" fill="rgb(212,162,32)"/><text x="65.8261%" y="943.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::load_next (109 samples, 0.04%)</title><rect x="65.6160%" y="917" width="0.0378%" height="15" fill="rgb(215,9,4)"/><text x="65.8660%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (281 samples, 0.10%)</title><rect x="65.5598%" y="1093" width="0.0975%" height="15" fill="rgb(242,42,7)"/><text x="65.8098%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (281 samples, 0.10%)</title><rect x="65.5598%" y="1077" width="0.0975%" height="15" fill="rgb(242,184,45)"/><text x="65.8098%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (276 samples, 0.10%)</title><rect x="65.5615%" y="1061" width="0.0958%" height="15" fill="rgb(228,111,51)"/><text x="65.8115%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (234 samples, 0.08%)</title><rect x="65.5761%" y="1045" width="0.0812%" height="15" fill="rgb(236,147,17)"/><text x="65.8261%" y="1055.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (234 samples, 0.08%)</title><rect x="65.5761%" y="1029" width="0.0812%" height="15" fill="rgb(210,75,22)"/><text x="65.8261%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (234 samples, 0.08%)</title><rect x="65.5761%" y="1013" width="0.0812%" height="15" fill="rgb(217,159,45)"/><text x="65.8261%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (234 samples, 0.08%)</title><rect x="65.5761%" y="997" width="0.0812%" height="15" fill="rgb(245,165,53)"/><text x="65.8261%" y="1007.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (234 samples, 0.08%)</title><rect x="65.5761%" y="981" width="0.0812%" height="15" fill="rgb(251,190,50)"/><text x="65.8261%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (234 samples, 0.08%)</title><rect x="65.5761%" y="965" width="0.0812%" height="15" fill="rgb(208,203,29)"/><text x="65.8261%" y="975.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (234 samples, 0.08%)</title><rect x="65.5761%" y="949" width="0.0812%" height="15" fill="rgb(207,209,35)"/><text x="65.8261%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (57 samples, 0.02%)</title><rect x="65.6736%" y="997" width="0.0198%" height="15" fill="rgb(230,144,49)"/><text x="65.9236%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (81 samples, 0.03%)</title><rect x="65.6684%" y="1013" width="0.0281%" height="15" fill="rgb(229,31,6)"/><text x="65.9184%" y="1023.50"></text></g><g><title>env_logger::filter::Filter::enabled (89 samples, 0.03%)</title><rect x="65.6663%" y="1029" width="0.0309%" height="15" fill="rgb(251,129,24)"/><text x="65.9163%" y="1039.50"></text></g><g><title>env_logger::Logger::matches (130 samples, 0.05%)</title><rect x="65.6573%" y="1061" width="0.0451%" height="15" fill="rgb(235,105,15)"/><text x="65.9073%" y="1071.50"></text></g><g><title>env_logger::filter::Filter::matches (130 samples, 0.05%)</title><rect x="65.6573%" y="1045" width="0.0451%" height="15" fill="rgb(216,52,43)"/><text x="65.9073%" y="1055.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::FORMATTER::__getit (40 samples, 0.01%)</title><rect x="65.7024%" y="1045" width="0.0139%" height="15" fill="rgb(238,144,41)"/><text x="65.9524%" y="1055.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (40 samples, 0.01%)</title><rect x="65.7024%" y="1029" width="0.0139%" height="15" fill="rgb(243,63,9)"/><text x="65.9524%" y="1039.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (179 samples, 0.06%)</title><rect x="65.6573%" y="1077" width="0.0621%" height="15" fill="rgb(246,208,1)"/><text x="65.9073%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (49 samples, 0.02%)</title><rect x="65.7024%" y="1061" width="0.0170%" height="15" fill="rgb(233,182,18)"/><text x="65.9524%" y="1071.50"></text></g><g><title>log::Record::builder (47 samples, 0.02%)</title><rect x="65.7194%" y="1077" width="0.0163%" height="15" fill="rgb(242,224,8)"/><text x="65.9694%" y="1087.50"></text></g><g><title>log::RecordBuilder::new (47 samples, 0.02%)</title><rect x="65.7194%" y="1061" width="0.0163%" height="15" fill="rgb(243,54,37)"/><text x="65.9694%" y="1071.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (744 samples, 0.26%)</title><rect x="65.4855%" y="1109" width="0.2581%" height="15" fill="rgb(233,192,12)"/><text x="65.7355%" y="1119.50"></text></g><g><title>log::__private_api_log (249 samples, 0.09%)</title><rect x="65.6573%" y="1093" width="0.0864%" height="15" fill="rgb(251,192,53)"/><text x="65.9073%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (39 samples, 0.01%)</title><rect x="65.7436%" y="997" width="0.0135%" height="15" fill="rgb(246,141,26)"/><text x="65.9936%" y="1007.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (39 samples, 0.01%)</title><rect x="65.7436%" y="981" width="0.0135%" height="15" fill="rgb(239,195,19)"/><text x="65.9936%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (120 samples, 0.04%)</title><rect x="65.7436%" y="1093" width="0.0416%" height="15" fill="rgb(241,16,39)"/><text x="65.9936%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (120 samples, 0.04%)</title><rect x="65.7436%" y="1077" width="0.0416%" height="15" fill="rgb(223,13,53)"/><text x="65.9936%" y="1087.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (120 samples, 0.04%)</title><rect x="65.7436%" y="1061" width="0.0416%" height="15" fill="rgb(214,227,0)"/><text x="65.9936%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (120 samples, 0.04%)</title><rect x="65.7436%" y="1045" width="0.0416%" height="15" fill="rgb(228,103,26)"/><text x="65.9936%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (120 samples, 0.04%)</title><rect x="65.7436%" y="1029" width="0.0416%" height="15" fill="rgb(254,177,53)"/><text x="65.9936%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (120 samples, 0.04%)</title><rect x="65.7436%" y="1013" width="0.0416%" height="15" fill="rgb(208,201,34)"/><text x="65.9936%" y="1023.50"></text></g><g><title>tokio::coop::poll_proceed (81 samples, 0.03%)</title><rect x="65.7572%" y="997" width="0.0281%" height="15" fill="rgb(212,39,5)"/><text x="66.0072%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (81 samples, 0.03%)</title><rect x="65.7572%" y="981" width="0.0281%" height="15" fill="rgb(246,117,3)"/><text x="66.0072%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (75 samples, 0.03%)</title><rect x="65.7593%" y="965" width="0.0260%" height="15" fill="rgb(244,118,39)"/><text x="66.0093%" y="975.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (43 samples, 0.01%)</title><rect x="65.7853%" y="1093" width="0.0149%" height="15" fill="rgb(241,64,10)"/><text x="66.0353%" y="1103.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1765" width="1.3344%" height="15" fill="rgb(229,39,44)"/><text x="64.7384%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1749" width="1.3344%" height="15" fill="rgb(230,226,3)"/><text x="64.7384%" y="1759.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1733" width="1.3344%" height="15" fill="rgb(222,13,42)"/><text x="64.7384%" y="1743.50"></text></g><g><title>std::panic::catch_unwind (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1717" width="1.3344%" height="15" fill="rgb(247,180,54)"/><text x="64.7384%" y="1727.50"></text></g><g><title>std::panicking::try (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1701" width="1.3344%" height="15" fill="rgb(205,96,16)"/><text x="64.7384%" y="1711.50"></text></g><g><title>__rust_try (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1685" width="1.3344%" height="15" fill="rgb(205,100,21)"/><text x="64.7384%" y="1695.50"></text></g><g><title>std::panicking::try::do_call (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1669" width="1.3344%" height="15" fill="rgb(248,51,4)"/><text x="64.7384%" y="1679.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1653" width="1.3344%" height="15" fill="rgb(217,197,30)"/><text x="64.7384%" y="1663.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1637" width="1.3344%" height="15" fill="rgb(240,179,40)"/><text x="64.7384%" y="1647.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1621" width="1.3344%" height="15" fill="rgb(212,185,35)"/><text x="64.7384%" y="1631.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1605" width="1.3344%" height="15" fill="rgb(251,222,31)"/><text x="64.7384%" y="1615.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3,846 samples, 1.33%)</title><rect x="64.4884%" y="1589" width="1.3344%" height="15" fill="rgb(208,140,36)"/><text x="64.7384%" y="1599.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,720 samples, 0.94%)</title><rect x="64.8790%" y="1573" width="0.9437%" height="15" fill="rgb(220,148,1)"/><text x="65.1290%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2,720 samples, 0.94%)</title><rect x="64.8790%" y="1557" width="0.9437%" height="15" fill="rgb(254,4,28)"/><text x="65.1290%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2,720 samples, 0.94%)</title><rect x="64.8790%" y="1541" width="0.9437%" height="15" fill="rgb(222,185,44)"/><text x="65.1290%" y="1551.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2,720 samples, 0.94%)</title><rect x="64.8790%" y="1525" width="0.9437%" height="15" fill="rgb(215,74,39)"/><text x="65.1290%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2,720 samples, 0.94%)</title><rect x="64.8790%" y="1509" width="0.9437%" height="15" fill="rgb(247,86,4)"/><text x="65.1290%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2,720 samples, 0.94%)</title><rect x="64.8790%" y="1493" width="0.9437%" height="15" fill="rgb(231,105,32)"/><text x="65.1290%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1477" width="0.8951%" height="15" fill="rgb(222,65,35)"/><text x="65.1776%" y="1487.50"></text></g><g><title>tokio::coop::budget (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1461" width="0.8951%" height="15" fill="rgb(218,145,35)"/><text x="65.1776%" y="1471.50"></text></g><g><title>tokio::coop::with_budget (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1445" width="0.8951%" height="15" fill="rgb(208,7,15)"/><text x="65.1776%" y="1455.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1429" width="0.8951%" height="15" fill="rgb(209,83,13)"/><text x="65.1776%" y="1439.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1413" width="0.8951%" height="15" fill="rgb(218,3,10)"/><text x="65.1776%" y="1423.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1397" width="0.8951%" height="15" fill="rgb(211,219,4)"/><text x="65.1776%" y="1407.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1381" width="0.8951%" height="15" fill="rgb(228,194,12)"/><text x="65.1776%" y="1391.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1365" width="0.8951%" height="15" fill="rgb(210,175,7)"/><text x="65.1776%" y="1375.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1349" width="0.8951%" height="15" fill="rgb(243,132,6)"/><text x="65.1776%" y="1359.50"></text></g><g><title>tokio::runtime::task::raw::poll (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1333" width="0.8951%" height="15" fill="rgb(207,72,18)"/><text x="65.1776%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1317" width="0.8951%" height="15" fill="rgb(236,1,18)"/><text x="65.1776%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1301" width="0.8951%" height="15" fill="rgb(227,0,18)"/><text x="65.1776%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1285" width="0.8951%" height="15" fill="rgb(247,37,5)"/><text x="65.1776%" y="1295.50"></text></g><g><title>std::panic::catch_unwind (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1269" width="0.8951%" height="15" fill="rgb(237,179,24)"/><text x="65.1776%" y="1279.50"></text></g><g><title>std::panicking::try (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1253" width="0.8951%" height="15" fill="rgb(226,53,20)"/><text x="65.1776%" y="1263.50"></text></g><g><title>__rust_try (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1237" width="0.8951%" height="15" fill="rgb(247,75,7)"/><text x="65.1776%" y="1247.50"></text></g><g><title>std::panicking::try::do_call (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1221" width="0.8951%" height="15" fill="rgb(233,96,12)"/><text x="65.1776%" y="1231.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1205" width="0.8951%" height="15" fill="rgb(224,125,0)"/><text x="65.1776%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1189" width="0.8951%" height="15" fill="rgb(224,92,25)"/><text x="65.1776%" y="1199.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1173" width="0.8951%" height="15" fill="rgb(224,42,24)"/><text x="65.1776%" y="1183.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1157" width="0.8951%" height="15" fill="rgb(234,132,49)"/><text x="65.1776%" y="1167.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1141" width="0.8951%" height="15" fill="rgb(248,100,35)"/><text x="65.1776%" y="1151.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,580 samples, 0.90%)</title><rect x="64.9276%" y="1125" width="0.8951%" height="15" fill="rgb(239,94,40)"/><text x="65.1776%" y="1135.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (228 samples, 0.08%)</title><rect x="65.7436%" y="1109" width="0.0791%" height="15" fill="rgb(235,139,28)"/><text x="65.9936%" y="1119.50"></text></g><g><title>tunneler::message::message::Message::serialize (65 samples, 0.02%)</title><rect x="65.8002%" y="1093" width="0.0226%" height="15" fill="rgb(217,144,7)"/><text x="66.0502%" y="1103.50"></text></g><g><title>alloc::vec::from_elem (65 samples, 0.02%)</title><rect x="65.8002%" y="1077" width="0.0226%" height="15" fill="rgb(227,55,4)"/><text x="66.0502%" y="1087.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (65 samples, 0.02%)</title><rect x="65.8002%" y="1061" width="0.0226%" height="15" fill="rgb(252,82,54)"/><text x="66.0502%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (65 samples, 0.02%)</title><rect x="65.8002%" y="1045" width="0.0226%" height="15" fill="rgb(245,172,4)"/><text x="66.0502%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (65 samples, 0.02%)</title><rect x="65.8002%" y="1029" width="0.0226%" height="15" fill="rgb(207,26,27)"/><text x="66.0502%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.02%)</title><rect x="65.8002%" y="1013" width="0.0226%" height="15" fill="rgb(252,98,18)"/><text x="66.0502%" y="1023.50"></text></g><g><title>tokio::coop::poll_proceed (54 samples, 0.02%)</title><rect x="65.8252%" y="1397" width="0.0187%" height="15" fill="rgb(244,8,26)"/><text x="66.0752%" y="1407.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 samples, 0.02%)</title><rect x="65.8252%" y="1381" width="0.0187%" height="15" fill="rgb(237,173,45)"/><text x="66.0752%" y="1391.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (54 samples, 0.02%)</title><rect x="65.8252%" y="1365" width="0.0187%" height="15" fill="rgb(208,213,49)"/><text x="66.0752%" y="1375.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (85 samples, 0.03%)</title><rect x="65.8228%" y="1557" width="0.0295%" height="15" fill="rgb(212,122,37)"/><text x="66.0728%" y="1567.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (85 samples, 0.03%)</title><rect x="65.8228%" y="1541" width="0.0295%" height="15" fill="rgb(213,80,17)"/><text x="66.0728%" y="1551.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (85 samples, 0.03%)</title><rect x="65.8228%" y="1525" width="0.0295%" height="15" fill="rgb(206,210,43)"/><text x="66.0728%" y="1535.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (85 samples, 0.03%)</title><rect x="65.8228%" y="1509" width="0.0295%" height="15" fill="rgb(229,214,3)"/><text x="66.0728%" y="1519.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (85 samples, 0.03%)</title><rect x="65.8228%" y="1493" width="0.0295%" height="15" fill="rgb(235,213,29)"/><text x="66.0728%" y="1503.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (85 samples, 0.03%)</title><rect x="65.8228%" y="1477" width="0.0295%" height="15" fill="rgb(248,135,26)"/><text x="66.0728%" y="1487.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (85 samples, 0.03%)</title><rect x="65.8228%" y="1461" width="0.0295%" height="15" fill="rgb(242,188,12)"/><text x="66.0728%" y="1471.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (85 samples, 0.03%)</title><rect x="65.8228%" y="1445" width="0.0295%" height="15" fill="rgb(245,38,12)"/><text x="66.0728%" y="1455.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (85 samples, 0.03%)</title><rect x="65.8228%" y="1429" width="0.0295%" height="15" fill="rgb(218,42,13)"/><text x="66.0728%" y="1439.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (85 samples, 0.03%)</title><rect x="65.8228%" y="1413" width="0.0295%" height="15" fill="rgb(238,132,49)"/><text x="66.0728%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (35 samples, 0.01%)</title><rect x="65.8668%" y="1413" width="0.0121%" height="15" fill="rgb(209,196,19)"/><text x="66.1168%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (59 samples, 0.02%)</title><rect x="65.8620%" y="1429" width="0.0205%" height="15" fill="rgb(244,131,22)"/><text x="66.1120%" y="1439.50"></text></g><g><title>log::__private_api_log (133 samples, 0.05%)</title><rect x="65.8620%" y="1557" width="0.0461%" height="15" fill="rgb(223,18,34)"/><text x="66.1120%" y="1567.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (133 samples, 0.05%)</title><rect x="65.8620%" y="1541" width="0.0461%" height="15" fill="rgb(252,124,54)"/><text x="66.1120%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (133 samples, 0.05%)</title><rect x="65.8620%" y="1525" width="0.0461%" height="15" fill="rgb(229,106,42)"/><text x="66.1120%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (133 samples, 0.05%)</title><rect x="65.8620%" y="1509" width="0.0461%" height="15" fill="rgb(221,129,1)"/><text x="66.1120%" y="1519.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (133 samples, 0.05%)</title><rect x="65.8620%" y="1493" width="0.0461%" height="15" fill="rgb(229,74,15)"/><text x="66.1120%" y="1503.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (133 samples, 0.05%)</title><rect x="65.8620%" y="1477" width="0.0461%" height="15" fill="rgb(210,206,50)"/><text x="66.1120%" y="1487.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (133 samples, 0.05%)</title><rect x="65.8620%" y="1461" width="0.0461%" height="15" fill="rgb(251,114,31)"/><text x="66.1120%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (133 samples, 0.05%)</title><rect x="65.8620%" y="1445" width="0.0461%" height="15" fill="rgb(215,225,28)"/><text x="66.1120%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (40 samples, 0.01%)</title><rect x="65.8942%" y="1429" width="0.0139%" height="15" fill="rgb(237,109,14)"/><text x="66.1442%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (40 samples, 0.01%)</title><rect x="65.8942%" y="1413" width="0.0139%" height="15" fill="rgb(230,13,37)"/><text x="66.1442%" y="1423.50"></text></g><g><title>ttwu_do_activate (32 samples, 0.01%)</title><rect x="65.9175%" y="789" width="0.0111%" height="15" fill="rgb(231,40,28)"/><text x="66.1675%" y="799.50"></text></g><g><title>__wake_up_common (50 samples, 0.02%)</title><rect x="65.9119%" y="853" width="0.0173%" height="15" fill="rgb(231,202,18)"/><text x="66.1619%" y="863.50"></text></g><g><title>autoremove_wake_function (47 samples, 0.02%)</title><rect x="65.9130%" y="837" width="0.0163%" height="15" fill="rgb(225,33,18)"/><text x="66.1630%" y="847.50"></text></g><g><title>default_wake_function (46 samples, 0.02%)</title><rect x="65.9133%" y="821" width="0.0160%" height="15" fill="rgb(223,64,47)"/><text x="66.1633%" y="831.50"></text></g><g><title>try_to_wake_up (44 samples, 0.02%)</title><rect x="65.9140%" y="805" width="0.0153%" height="15" fill="rgb(234,114,13)"/><text x="66.1640%" y="815.50"></text></g><g><title>__wake_up (51 samples, 0.02%)</title><rect x="65.9119%" y="885" width="0.0177%" height="15" fill="rgb(248,56,40)"/><text x="66.1619%" y="895.50"></text></g><g><title>__wake_up_common_lock (51 samples, 0.02%)</title><rect x="65.9119%" y="869" width="0.0177%" height="15" fill="rgb(221,194,21)"/><text x="66.1619%" y="879.50"></text></g><g><title>__wake_up_locked_key (55 samples, 0.02%)</title><rect x="65.9109%" y="933" width="0.0191%" height="15" fill="rgb(242,108,46)"/><text x="66.1609%" y="943.50"></text></g><g><title>__wake_up_common (55 samples, 0.02%)</title><rect x="65.9109%" y="917" width="0.0191%" height="15" fill="rgb(220,106,10)"/><text x="66.1609%" y="927.50"></text></g><g><title>ep_poll_callback (54 samples, 0.02%)</title><rect x="65.9112%" y="901" width="0.0187%" height="15" fill="rgb(211,88,4)"/><text x="66.1612%" y="911.50"></text></g><g><title>__vfs_write (58 samples, 0.02%)</title><rect x="65.9109%" y="965" width="0.0201%" height="15" fill="rgb(214,95,34)"/><text x="66.1609%" y="975.50"></text></g><g><title>eventfd_write (58 samples, 0.02%)</title><rect x="65.9109%" y="949" width="0.0201%" height="15" fill="rgb(250,160,33)"/><text x="66.1609%" y="959.50"></text></g><g><title>__x64_sys_write (68 samples, 0.02%)</title><rect x="65.9098%" y="1013" width="0.0236%" height="15" fill="rgb(225,29,10)"/><text x="66.1598%" y="1023.50"></text></g><g><title>ksys_write (67 samples, 0.02%)</title><rect x="65.9102%" y="997" width="0.0232%" height="15" fill="rgb(224,28,30)"/><text x="66.1602%" y="1007.50"></text></g><g><title>vfs_write (65 samples, 0.02%)</title><rect x="65.9109%" y="981" width="0.0226%" height="15" fill="rgb(231,77,4)"/><text x="66.1609%" y="991.50"></text></g><g><title>__GI___libc_write (73 samples, 0.03%)</title><rect x="65.9085%" y="1077" width="0.0253%" height="15" fill="rgb(209,63,21)"/><text x="66.1585%" y="1087.50"></text></g><g><title>__GI___libc_write (72 samples, 0.02%)</title><rect x="65.9088%" y="1061" width="0.0250%" height="15" fill="rgb(226,22,11)"/><text x="66.1588%" y="1071.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (71 samples, 0.02%)</title><rect x="65.9091%" y="1045" width="0.0246%" height="15" fill="rgb(216,82,30)"/><text x="66.1591%" y="1055.50"></text></g><g><title>do_syscall_64 (69 samples, 0.02%)</title><rect x="65.9098%" y="1029" width="0.0239%" height="15" fill="rgb(246,227,38)"/><text x="66.1598%" y="1039.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (321 samples, 0.11%)</title><rect x="65.8228%" y="1573" width="0.1114%" height="15" fill="rgb(251,203,53)"/><text x="66.0728%" y="1583.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (75 samples, 0.03%)</title><rect x="65.9081%" y="1557" width="0.0260%" height="15" fill="rgb(254,101,1)"/><text x="66.1581%" y="1567.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (75 samples, 0.03%)</title><rect x="65.9081%" y="1541" width="0.0260%" height="15" fill="rgb(241,180,5)"/><text x="66.1581%" y="1551.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (75 samples, 0.03%)</title><rect x="65.9081%" y="1525" width="0.0260%" height="15" fill="rgb(218,168,4)"/><text x="66.1581%" y="1535.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (75 samples, 0.03%)</title><rect x="65.9081%" y="1509" width="0.0260%" height="15" fill="rgb(224,223,32)"/><text x="66.1581%" y="1519.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (75 samples, 0.03%)</title><rect x="65.9081%" y="1493" width="0.0260%" height="15" fill="rgb(236,106,22)"/><text x="66.1581%" y="1503.50"></text></g><g><title>core::task::wake::Waker::wake (75 samples, 0.03%)</title><rect x="65.9081%" y="1477" width="0.0260%" height="15" fill="rgb(206,121,5)"/><text x="66.1581%" y="1487.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (75 samples, 0.03%)</title><rect x="65.9081%" y="1461" width="0.0260%" height="15" fill="rgb(233,87,28)"/><text x="66.1581%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (75 samples, 0.03%)</title><rect x="65.9081%" y="1445" width="0.0260%" height="15" fill="rgb(236,137,17)"/><text x="66.1581%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (75 samples, 0.03%)</title><rect x="65.9081%" y="1429" width="0.0260%" height="15" fill="rgb(209,183,38)"/><text x="66.1581%" y="1439.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (75 samples, 0.03%)</title><rect x="65.9081%" y="1413" width="0.0260%" height="15" fill="rgb(206,162,44)"/><text x="66.1581%" y="1423.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (75 samples, 0.03%)</title><rect x="65.9081%" y="1397" width="0.0260%" height="15" fill="rgb(237,70,39)"/><text x="66.1581%" y="1407.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (75 samples, 0.03%)</title><rect x="65.9081%" y="1381" width="0.0260%" height="15" fill="rgb(212,176,5)"/><text x="66.1581%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (75 samples, 0.03%)</title><rect x="65.9081%" y="1365" width="0.0260%" height="15" fill="rgb(232,95,16)"/><text x="66.1581%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (75 samples, 0.03%)</title><rect x="65.9081%" y="1349" width="0.0260%" height="15" fill="rgb(219,115,35)"/><text x="66.1581%" y="1359.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (75 samples, 0.03%)</title><rect x="65.9081%" y="1333" width="0.0260%" height="15" fill="rgb(251,67,27)"/><text x="66.1581%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (75 samples, 0.03%)</title><rect x="65.9081%" y="1317" width="0.0260%" height="15" fill="rgb(222,95,40)"/><text x="66.1581%" y="1327.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (75 samples, 0.03%)</title><rect x="65.9081%" y="1301" width="0.0260%" height="15" fill="rgb(250,35,16)"/><text x="66.1581%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (75 samples, 0.03%)</title><rect x="65.9081%" y="1285" width="0.0260%" height="15" fill="rgb(224,86,44)"/><text x="66.1581%" y="1295.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (75 samples, 0.03%)</title><rect x="65.9081%" y="1269" width="0.0260%" height="15" fill="rgb(237,53,53)"/><text x="66.1581%" y="1279.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (75 samples, 0.03%)</title><rect x="65.9081%" y="1253" width="0.0260%" height="15" fill="rgb(208,171,33)"/><text x="66.1581%" y="1263.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_driver (75 samples, 0.03%)</title><rect x="65.9081%" y="1237" width="0.0260%" height="15" fill="rgb(222,64,27)"/><text x="66.1581%" y="1247.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (75 samples, 0.03%)</title><rect x="65.9081%" y="1221" width="0.0260%" height="15" fill="rgb(221,121,35)"/><text x="66.1581%" y="1231.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (75 samples, 0.03%)</title><rect x="65.9081%" y="1205" width="0.0260%" height="15" fill="rgb(228,137,42)"/><text x="66.1581%" y="1215.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (75 samples, 0.03%)</title><rect x="65.9081%" y="1189" width="0.0260%" height="15" fill="rgb(227,54,21)"/><text x="66.1581%" y="1199.50"></text></g><g><title>tokio::io::driver::Handle::wakeup (75 samples, 0.03%)</title><rect x="65.9081%" y="1173" width="0.0260%" height="15" fill="rgb(240,168,33)"/><text x="66.1581%" y="1183.50"></text></g><g><title>mio::waker::Waker::wake (75 samples, 0.03%)</title><rect x="65.9081%" y="1157" width="0.0260%" height="15" fill="rgb(243,159,6)"/><text x="66.1581%" y="1167.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (75 samples, 0.03%)</title><rect x="65.9081%" y="1141" width="0.0260%" height="15" fill="rgb(205,211,41)"/><text x="66.1581%" y="1151.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (75 samples, 0.03%)</title><rect x="65.9081%" y="1125" width="0.0260%" height="15" fill="rgb(253,30,1)"/><text x="66.1581%" y="1135.50"></text></g><g><title>std::sys::unix::fs::File::write (74 samples, 0.03%)</title><rect x="65.9085%" y="1109" width="0.0257%" height="15" fill="rgb(226,80,18)"/><text x="66.1585%" y="1119.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (74 samples, 0.03%)</title><rect x="65.9085%" y="1093" width="0.0257%" height="15" fill="rgb(253,156,46)"/><text x="66.1585%" y="1103.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (33 samples, 0.01%)</title><rect x="65.9341%" y="1429" width="0.0114%" height="15" fill="rgb(248,87,27)"/><text x="66.1841%" y="1439.50"></text></g><g><title>std::io::Write::write_fmt (33 samples, 0.01%)</title><rect x="65.9341%" y="1413" width="0.0114%" height="15" fill="rgb(227,122,2)"/><text x="66.1841%" y="1423.50"></text></g><g><title>core::fmt::write (33 samples, 0.01%)</title><rect x="65.9341%" y="1397" width="0.0114%" height="15" fill="rgb(229,94,39)"/><text x="66.1841%" y="1407.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (33 samples, 0.01%)</title><rect x="65.9341%" y="1381" width="0.0114%" height="15" fill="rgb(225,173,31)"/><text x="66.1841%" y="1391.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (33 samples, 0.01%)</title><rect x="65.9341%" y="1365" width="0.0114%" height="15" fill="rgb(239,176,30)"/><text x="66.1841%" y="1375.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (33 samples, 0.01%)</title><rect x="65.9341%" y="1349" width="0.0114%" height="15" fill="rgb(212,104,21)"/><text x="66.1841%" y="1359.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (33 samples, 0.01%)</title><rect x="65.9341%" y="1333" width="0.0114%" height="15" fill="rgb(240,209,40)"/><text x="66.1841%" y="1343.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (33 samples, 0.01%)</title><rect x="65.9341%" y="1317" width="0.0114%" height="15" fill="rgb(234,195,5)"/><text x="66.1841%" y="1327.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.01%)</title><rect x="65.9456%" y="1269" width="0.0139%" height="15" fill="rgb(238,213,1)"/><text x="66.1956%" y="1279.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (44 samples, 0.02%)</title><rect x="65.9456%" y="1317" width="0.0153%" height="15" fill="rgb(235,182,54)"/><text x="66.1956%" y="1327.50"></text></g><g><title>std::io::Write::write_all (44 samples, 0.02%)</title><rect x="65.9456%" y="1301" width="0.0153%" height="15" fill="rgb(229,50,46)"/><text x="66.1956%" y="1311.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (44 samples, 0.02%)</title><rect x="65.9456%" y="1285" width="0.0153%" height="15" fill="rgb(219,145,13)"/><text x="66.1956%" y="1295.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (64 samples, 0.02%)</title><rect x="65.9456%" y="1429" width="0.0222%" height="15" fill="rgb(220,226,10)"/><text x="66.1956%" y="1439.50"></text></g><g><title>std::io::Write::write_fmt (64 samples, 0.02%)</title><rect x="65.9456%" y="1413" width="0.0222%" height="15" fill="rgb(248,47,30)"/><text x="66.1956%" y="1423.50"></text></g><g><title>core::fmt::write (64 samples, 0.02%)</title><rect x="65.9456%" y="1397" width="0.0222%" height="15" fill="rgb(231,209,44)"/><text x="66.1956%" y="1407.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (64 samples, 0.02%)</title><rect x="65.9456%" y="1381" width="0.0222%" height="15" fill="rgb(209,80,30)"/><text x="66.1956%" y="1391.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (64 samples, 0.02%)</title><rect x="65.9456%" y="1365" width="0.0222%" height="15" fill="rgb(232,9,14)"/><text x="66.1956%" y="1375.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (64 samples, 0.02%)</title><rect x="65.9456%" y="1349" width="0.0222%" height="15" fill="rgb(243,91,43)"/><text x="66.1956%" y="1359.50"></text></g><g><title>core::fmt::write (64 samples, 0.02%)</title><rect x="65.9456%" y="1333" width="0.0222%" height="15" fill="rgb(231,90,52)"/><text x="66.1956%" y="1343.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (45 samples, 0.02%)</title><rect x="65.9678%" y="1429" width="0.0156%" height="15" fill="rgb(253,192,44)"/><text x="66.2178%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (45 samples, 0.02%)</title><rect x="65.9678%" y="1413" width="0.0156%" height="15" fill="rgb(241,66,31)"/><text x="66.2178%" y="1423.50"></text></g><g><title>std::io::Write::write_fmt (45 samples, 0.02%)</title><rect x="65.9678%" y="1397" width="0.0156%" height="15" fill="rgb(235,81,37)"/><text x="66.2178%" y="1407.50"></text></g><g><title>core::fmt::write (45 samples, 0.02%)</title><rect x="65.9678%" y="1381" width="0.0156%" height="15" fill="rgb(223,221,9)"/><text x="66.2178%" y="1391.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (45 samples, 0.02%)</title><rect x="65.9678%" y="1365" width="0.0156%" height="15" fill="rgb(242,180,7)"/><text x="66.2178%" y="1375.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (45 samples, 0.02%)</title><rect x="65.9678%" y="1349" width="0.0156%" height="15" fill="rgb(243,78,19)"/><text x="66.2178%" y="1359.50"></text></g><g><title>core::fmt::write (45 samples, 0.02%)</title><rect x="65.9678%" y="1333" width="0.0156%" height="15" fill="rgb(233,23,17)"/><text x="66.2178%" y="1343.50"></text></g><g><title>core::fmt::run (45 samples, 0.02%)</title><rect x="65.9678%" y="1317" width="0.0156%" height="15" fill="rgb(252,122,45)"/><text x="66.2178%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (45 samples, 0.02%)</title><rect x="65.9678%" y="1301" width="0.0156%" height="15" fill="rgb(247,108,20)"/><text x="66.2178%" y="1311.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (45 samples, 0.02%)</title><rect x="65.9678%" y="1285" width="0.0156%" height="15" fill="rgb(235,84,21)"/><text x="66.2178%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (30 samples, 0.01%)</title><rect x="65.9834%" y="1365" width="0.0104%" height="15" fill="rgb(247,129,10)"/><text x="66.2334%" y="1375.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (30 samples, 0.01%)</title><rect x="65.9834%" y="1349" width="0.0104%" height="15" fill="rgb(208,173,14)"/><text x="66.2334%" y="1359.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.01%)</title><rect x="65.9834%" y="1333" width="0.0104%" height="15" fill="rgb(236,31,38)"/><text x="66.2334%" y="1343.50"></text></g><g><title>std::io::Write::write_all (30 samples, 0.01%)</title><rect x="65.9834%" y="1317" width="0.0104%" height="15" fill="rgb(232,65,17)"/><text x="66.2334%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (35 samples, 0.01%)</title><rect x="65.9938%" y="1333" width="0.0121%" height="15" fill="rgb(224,45,49)"/><text x="66.2438%" y="1343.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (35 samples, 0.01%)</title><rect x="65.9938%" y="1317" width="0.0121%" height="15" fill="rgb(225,2,53)"/><text x="66.2438%" y="1327.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (35 samples, 0.01%)</title><rect x="65.9938%" y="1301" width="0.0121%" height="15" fill="rgb(248,210,53)"/><text x="66.2438%" y="1311.50"></text></g><g><title>std::io::Write::write_all (35 samples, 0.01%)</title><rect x="65.9938%" y="1285" width="0.0121%" height="15" fill="rgb(211,1,30)"/><text x="66.2438%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (35 samples, 0.01%)</title><rect x="65.9938%" y="1269" width="0.0121%" height="15" fill="rgb(224,96,15)"/><text x="66.2438%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (534 samples, 0.19%)</title><rect x="65.8228%" y="1589" width="0.1853%" height="15" fill="rgb(252,45,11)"/><text x="66.0728%" y="1599.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (213 samples, 0.07%)</title><rect x="65.9341%" y="1573" width="0.0739%" height="15" fill="rgb(220,125,38)"/><text x="66.1841%" y="1583.50"></text></g><g><title>log::__private_api_log (213 samples, 0.07%)</title><rect x="65.9341%" y="1557" width="0.0739%" height="15" fill="rgb(243,161,33)"/><text x="66.1841%" y="1567.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (213 samples, 0.07%)</title><rect x="65.9341%" y="1541" width="0.0739%" height="15" fill="rgb(248,197,34)"/><text x="66.1841%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (213 samples, 0.07%)</title><rect x="65.9341%" y="1525" width="0.0739%" height="15" fill="rgb(228,165,23)"/><text x="66.1841%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (213 samples, 0.07%)</title><rect x="65.9341%" y="1509" width="0.0739%" height="15" fill="rgb(236,94,38)"/><text x="66.1841%" y="1519.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (213 samples, 0.07%)</title><rect x="65.9341%" y="1493" width="0.0739%" height="15" fill="rgb(220,13,23)"/><text x="66.1841%" y="1503.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (213 samples, 0.07%)</title><rect x="65.9341%" y="1477" width="0.0739%" height="15" fill="rgb(234,26,39)"/><text x="66.1841%" y="1487.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (213 samples, 0.07%)</title><rect x="65.9341%" y="1461" width="0.0739%" height="15" fill="rgb(205,117,44)"/><text x="66.1841%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (213 samples, 0.07%)</title><rect x="65.9341%" y="1445" width="0.0739%" height="15" fill="rgb(250,42,2)"/><text x="66.1841%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (71 samples, 0.02%)</title><rect x="65.9834%" y="1429" width="0.0246%" height="15" fill="rgb(223,83,14)"/><text x="66.2334%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (71 samples, 0.02%)</title><rect x="65.9834%" y="1413" width="0.0246%" height="15" fill="rgb(241,147,50)"/><text x="66.2334%" y="1423.50"></text></g><g><title>std::io::Write::write_fmt (71 samples, 0.02%)</title><rect x="65.9834%" y="1397" width="0.0246%" height="15" fill="rgb(218,90,6)"/><text x="66.2334%" y="1407.50"></text></g><g><title>core::fmt::write (71 samples, 0.02%)</title><rect x="65.9834%" y="1381" width="0.0246%" height="15" fill="rgb(210,191,5)"/><text x="66.2334%" y="1391.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (41 samples, 0.01%)</title><rect x="65.9938%" y="1365" width="0.0142%" height="15" fill="rgb(225,139,19)"/><text x="66.2438%" y="1375.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (41 samples, 0.01%)</title><rect x="65.9938%" y="1349" width="0.0142%" height="15" fill="rgb(210,1,33)"/><text x="66.2438%" y="1359.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (56 samples, 0.02%)</title><rect x="66.0080%" y="1493" width="0.0194%" height="15" fill="rgb(213,50,3)"/><text x="66.2580%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1477" width="0.0194%" height="15" fill="rgb(234,227,4)"/><text x="66.2580%" y="1487.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1461" width="0.0194%" height="15" fill="rgb(246,63,5)"/><text x="66.2580%" y="1471.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1445" width="0.0194%" height="15" fill="rgb(245,136,27)"/><text x="66.2580%" y="1455.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1429" width="0.0194%" height="15" fill="rgb(247,199,27)"/><text x="66.2580%" y="1439.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1413" width="0.0194%" height="15" fill="rgb(252,158,49)"/><text x="66.2580%" y="1423.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (56 samples, 0.02%)</title><rect x="66.0080%" y="1397" width="0.0194%" height="15" fill="rgb(254,73,1)"/><text x="66.2580%" y="1407.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1381" width="0.0194%" height="15" fill="rgb(248,93,19)"/><text x="66.2580%" y="1391.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (56 samples, 0.02%)</title><rect x="66.0080%" y="1365" width="0.0194%" height="15" fill="rgb(206,67,5)"/><text x="66.2580%" y="1375.50"></text></g><g><title>tokio::io::driver::Driver::turn (56 samples, 0.02%)</title><rect x="66.0080%" y="1349" width="0.0194%" height="15" fill="rgb(209,210,4)"/><text x="66.2580%" y="1359.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (56 samples, 0.02%)</title><rect x="66.0080%" y="1333" width="0.0194%" height="15" fill="rgb(214,185,36)"/><text x="66.2580%" y="1343.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (56 samples, 0.02%)</title><rect x="66.0080%" y="1317" width="0.0194%" height="15" fill="rgb(233,191,26)"/><text x="66.2580%" y="1327.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (56 samples, 0.02%)</title><rect x="66.0080%" y="1301" width="0.0194%" height="15" fill="rgb(248,94,17)"/><text x="66.2580%" y="1311.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (73 samples, 0.03%)</title><rect x="66.0576%" y="1301" width="0.0253%" height="15" fill="rgb(250,64,4)"/><text x="66.3076%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (161 samples, 0.06%)</title><rect x="66.0275%" y="1493" width="0.0559%" height="15" fill="rgb(218,41,53)"/><text x="66.2775%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (161 samples, 0.06%)</title><rect x="66.0275%" y="1477" width="0.0559%" height="15" fill="rgb(251,176,28)"/><text x="66.2775%" y="1487.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (161 samples, 0.06%)</title><rect x="66.0275%" y="1461" width="0.0559%" height="15" fill="rgb(247,22,9)"/><text x="66.2775%" y="1471.50"></text></g><g><title>tokio::runtime::park::Inner::park (161 samples, 0.06%)</title><rect x="66.0275%" y="1445" width="0.0559%" height="15" fill="rgb(218,201,14)"/><text x="66.2775%" y="1455.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (161 samples, 0.06%)</title><rect x="66.0275%" y="1429" width="0.0559%" height="15" fill="rgb(218,94,10)"/><text x="66.2775%" y="1439.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (161 samples, 0.06%)</title><rect x="66.0275%" y="1413" width="0.0559%" height="15" fill="rgb(222,183,52)"/><text x="66.2775%" y="1423.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (161 samples, 0.06%)</title><rect x="66.0275%" y="1397" width="0.0559%" height="15" fill="rgb(242,140,25)"/><text x="66.2775%" y="1407.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (161 samples, 0.06%)</title><rect x="66.0275%" y="1381" width="0.0559%" height="15" fill="rgb(235,197,38)"/><text x="66.2775%" y="1391.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (161 samples, 0.06%)</title><rect x="66.0275%" y="1365" width="0.0559%" height="15" fill="rgb(237,136,15)"/><text x="66.2775%" y="1375.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (161 samples, 0.06%)</title><rect x="66.0275%" y="1349" width="0.0559%" height="15" fill="rgb(223,44,49)"/><text x="66.2775%" y="1359.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (161 samples, 0.06%)</title><rect x="66.0275%" y="1333" width="0.0559%" height="15" fill="rgb(227,71,15)"/><text x="66.2775%" y="1343.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (161 samples, 0.06%)</title><rect x="66.0275%" y="1317" width="0.0559%" height="15" fill="rgb(225,153,20)"/><text x="66.2775%" y="1327.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (44 samples, 0.02%)</title><rect x="66.0833%" y="1029" width="0.0153%" height="15" fill="rgb(210,190,26)"/><text x="66.3333%" y="1039.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::advance (52 samples, 0.02%)</title><rect x="66.0986%" y="1029" width="0.0180%" height="15" fill="rgb(223,147,5)"/><text x="66.3486%" y="1039.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (103 samples, 0.04%)</title><rect x="66.0833%" y="1109" width="0.0357%" height="15" fill="rgb(207,14,23)"/><text x="66.3333%" y="1119.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (103 samples, 0.04%)</title><rect x="66.0833%" y="1093" width="0.0357%" height="15" fill="rgb(211,195,53)"/><text x="66.3333%" y="1103.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (103 samples, 0.04%)</title><rect x="66.0833%" y="1077" width="0.0357%" height="15" fill="rgb(237,75,46)"/><text x="66.3333%" y="1087.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (103 samples, 0.04%)</title><rect x="66.0833%" y="1061" width="0.0357%" height="15" fill="rgb(254,55,14)"/><text x="66.3333%" y="1071.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (103 samples, 0.04%)</title><rect x="66.0833%" y="1045" width="0.0357%" height="15" fill="rgb(230,185,30)"/><text x="66.3333%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (72 samples, 0.02%)</title><rect x="66.1191%" y="1029" width="0.0250%" height="15" fill="rgb(220,14,11)"/><text x="66.3691%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (72 samples, 0.02%)</title><rect x="66.1191%" y="1013" width="0.0250%" height="15" fill="rgb(215,169,44)"/><text x="66.3691%" y="1023.50"></text></g><g><title>alloc::alloc::alloc_zeroed (72 samples, 0.02%)</title><rect x="66.1191%" y="997" width="0.0250%" height="15" fill="rgb(253,203,20)"/><text x="66.3691%" y="1007.50"></text></g><g><title>__libc_calloc (72 samples, 0.02%)</title><rect x="66.1191%" y="981" width="0.0250%" height="15" fill="rgb(229,225,17)"/><text x="66.3691%" y="991.50"></text></g><g><title>_int_malloc (72 samples, 0.02%)</title><rect x="66.1191%" y="965" width="0.0250%" height="15" fill="rgb(236,76,26)"/><text x="66.3691%" y="975.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (58 samples, 0.02%)</title><rect x="66.1763%" y="997" width="0.0201%" height="15" fill="rgb(234,15,30)"/><text x="66.4263%" y="1007.50"></text></g><g><title>alloc::vec::from_elem (260 samples, 0.09%)</title><rect x="66.1191%" y="1109" width="0.0902%" height="15" fill="rgb(211,113,48)"/><text x="66.3691%" y="1119.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (260 samples, 0.09%)</title><rect x="66.1191%" y="1093" width="0.0902%" height="15" fill="rgb(221,31,36)"/><text x="66.3691%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (260 samples, 0.09%)</title><rect x="66.1191%" y="1077" width="0.0902%" height="15" fill="rgb(215,118,52)"/><text x="66.3691%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (260 samples, 0.09%)</title><rect x="66.1191%" y="1061" width="0.0902%" height="15" fill="rgb(241,151,27)"/><text x="66.3691%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (260 samples, 0.09%)</title><rect x="66.1191%" y="1045" width="0.0902%" height="15" fill="rgb(253,51,3)"/><text x="66.3691%" y="1055.50"></text></g><g><title>core::alloc::layout::Layout::array (188 samples, 0.07%)</title><rect x="66.1440%" y="1029" width="0.0652%" height="15" fill="rgb(216,201,24)"/><text x="66.3940%" y="1039.50"></text></g><g><title>core::alloc::layout::Layout::repeat (166 samples, 0.06%)</title><rect x="66.1517%" y="1013" width="0.0576%" height="15" fill="rgb(231,107,4)"/><text x="66.4017%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="66.2093%" y="1109" width="0.0139%" height="15" fill="rgb(243,97,54)"/><text x="66.4593%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="66.2093%" y="1093" width="0.0139%" height="15" fill="rgb(221,32,51)"/><text x="66.4593%" y="1103.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.01%)</title><rect x="66.2093%" y="1077" width="0.0139%" height="15" fill="rgb(218,171,35)"/><text x="66.4593%" y="1087.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (40 samples, 0.01%)</title><rect x="66.2093%" y="1061" width="0.0139%" height="15" fill="rgb(214,20,53)"/><text x="66.4593%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="66.2093%" y="1045" width="0.0139%" height="15" fill="rgb(239,9,52)"/><text x="66.4593%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="66.2093%" y="1029" width="0.0139%" height="15" fill="rgb(215,114,45)"/><text x="66.4593%" y="1039.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.01%)</title><rect x="66.2093%" y="1013" width="0.0139%" height="15" fill="rgb(208,118,9)"/><text x="66.4593%" y="1023.50"></text></g><g><title>tokio::io::driver::registration::Registration::deregister (40 samples, 0.01%)</title><rect x="66.2093%" y="997" width="0.0139%" height="15" fill="rgb(235,7,39)"/><text x="66.4593%" y="1007.50"></text></g><g><title>tokio::io::driver::Inner::deregister_source (30 samples, 0.01%)</title><rect x="66.2127%" y="981" width="0.0104%" height="15" fill="rgb(243,225,15)"/><text x="66.4627%" y="991.50"></text></g><g><title>mio::poll::Registry::deregister (30 samples, 0.01%)</title><rect x="66.2127%" y="965" width="0.0104%" height="15" fill="rgb(225,216,18)"/><text x="66.4627%" y="975.50"></text></g><g><title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::deregister (30 samples, 0.01%)</title><rect x="66.2127%" y="949" width="0.0104%" height="15" fill="rgb(233,36,38)"/><text x="66.4627%" y="959.50"></text></g><g><title>&lt;mio::io_source::IoSource&lt;T&gt; as mio::event::source::Source&gt;::deregister (30 samples, 0.01%)</title><rect x="66.2127%" y="933" width="0.0104%" height="15" fill="rgb(239,88,23)"/><text x="66.4627%" y="943.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (34 samples, 0.01%)</title><rect x="66.2231%" y="1045" width="0.0118%" height="15" fill="rgb(219,181,35)"/><text x="66.4731%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (34 samples, 0.01%)</title><rect x="66.2231%" y="1029" width="0.0118%" height="15" fill="rgb(215,18,46)"/><text x="66.4731%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write::{{closure}} (34 samples, 0.01%)</title><rect x="66.2231%" y="1013" width="0.0118%" height="15" fill="rgb(241,38,11)"/><text x="66.4731%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (37 samples, 0.01%)</title><rect x="66.2231%" y="1061" width="0.0128%" height="15" fill="rgb(248,169,45)"/><text x="66.4731%" y="1071.50"></text></g><g><title>core::ptr::read (29 samples, 0.01%)</title><rect x="66.2443%" y="917" width="0.0101%" height="15" fill="rgb(239,50,49)"/><text x="66.4943%" y="927.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (502 samples, 0.17%)</title><rect x="66.0833%" y="1125" width="0.1742%" height="15" fill="rgb(231,96,31)"/><text x="66.3333%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (99 samples, 0.03%)</title><rect x="66.2231%" y="1109" width="0.0343%" height="15" fill="rgb(224,193,37)"/><text x="66.4731%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (99 samples, 0.03%)</title><rect x="66.2231%" y="1093" width="0.0343%" height="15" fill="rgb(227,153,50)"/><text x="66.4731%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (99 samples, 0.03%)</title><rect x="66.2231%" y="1077" width="0.0343%" height="15" fill="rgb(249,228,3)"/><text x="66.4731%" y="1087.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (62 samples, 0.02%)</title><rect x="66.2360%" y="1061" width="0.0215%" height="15" fill="rgb(219,164,43)"/><text x="66.4860%" y="1071.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (42 samples, 0.01%)</title><rect x="66.2429%" y="1045" width="0.0146%" height="15" fill="rgb(216,45,41)"/><text x="66.4929%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (42 samples, 0.01%)</title><rect x="66.2429%" y="1029" width="0.0146%" height="15" fill="rgb(210,226,51)"/><text x="66.4929%" y="1039.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker::{{closure}} (42 samples, 0.01%)</title><rect x="66.2429%" y="1013" width="0.0146%" height="15" fill="rgb(209,117,49)"/><text x="66.4929%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (42 samples, 0.01%)</title><rect x="66.2429%" y="997" width="0.0146%" height="15" fill="rgb(206,196,24)"/><text x="66.4929%" y="1007.50"></text></g><g><title>core::mem::take (42 samples, 0.01%)</title><rect x="66.2429%" y="981" width="0.0146%" height="15" fill="rgb(253,218,3)"/><text x="66.4929%" y="991.50"></text></g><g><title>core::mem::replace (42 samples, 0.01%)</title><rect x="66.2429%" y="965" width="0.0146%" height="15" fill="rgb(252,166,2)"/><text x="66.4929%" y="975.50"></text></g><g><title>core::mem::swap (42 samples, 0.01%)</title><rect x="66.2429%" y="949" width="0.0146%" height="15" fill="rgb(236,218,26)"/><text x="66.4929%" y="959.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (42 samples, 0.01%)</title><rect x="66.2429%" y="933" width="0.0146%" height="15" fill="rgb(254,84,19)"/><text x="66.4929%" y="943.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.01%)</title><rect x="66.2797%" y="1045" width="0.0125%" height="15" fill="rgb(219,137,29)"/><text x="66.5297%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.05%)</title><rect x="66.2575%" y="1109" width="0.0510%" height="15" fill="rgb(227,47,52)"/><text x="66.5075%" y="1119.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (147 samples, 0.05%)</title><rect x="66.2575%" y="1093" width="0.0510%" height="15" fill="rgb(229,167,24)"/><text x="66.5075%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.05%)</title><rect x="66.2575%" y="1077" width="0.0510%" height="15" fill="rgb(233,164,1)"/><text x="66.5075%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (147 samples, 0.05%)</title><rect x="66.2575%" y="1061" width="0.0510%" height="15" fill="rgb(218,88,48)"/><text x="66.5075%" y="1071.50"></text></g><g><title>_int_free (54 samples, 0.02%)</title><rect x="66.3192%" y="853" width="0.0187%" height="15" fill="rgb(226,214,24)"/><text x="66.5692%" y="863.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::free_blocks (88 samples, 0.03%)</title><rect x="66.3088%" y="949" width="0.0305%" height="15" fill="rgb(233,29,12)"/><text x="66.5588%" y="959.50"></text></g><g><title>core::mem::drop (88 samples, 0.03%)</title><rect x="66.3088%" y="933" width="0.0305%" height="15" fill="rgb(219,120,34)"/><text x="66.5588%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (88 samples, 0.03%)</title><rect x="66.3088%" y="917" width="0.0305%" height="15" fill="rgb(226,78,44)"/><text x="66.5588%" y="927.50"></text></g><g><title>alloc::alloc::box_free (88 samples, 0.03%)</title><rect x="66.3088%" y="901" width="0.0305%" height="15" fill="rgb(240,15,48)"/><text x="66.5588%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (88 samples, 0.03%)</title><rect x="66.3088%" y="885" width="0.0305%" height="15" fill="rgb(253,176,7)"/><text x="66.5588%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (88 samples, 0.03%)</title><rect x="66.3088%" y="869" width="0.0305%" height="15" fill="rgb(206,166,28)"/><text x="66.5588%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (91 samples, 0.03%)</title><rect x="66.3085%" y="1109" width="0.0316%" height="15" fill="rgb(241,53,51)"/><text x="66.5585%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place (91 samples, 0.03%)</title><rect x="66.3085%" y="1093" width="0.0316%" height="15" fill="rgb(249,112,30)"/><text x="66.5585%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (90 samples, 0.03%)</title><rect x="66.3088%" y="1077" width="0.0312%" height="15" fill="rgb(217,85,30)"/><text x="66.5588%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (90 samples, 0.03%)</title><rect x="66.3088%" y="1061" width="0.0312%" height="15" fill="rgb(233,49,7)"/><text x="66.5588%" y="1071.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.03%)</title><rect x="66.3088%" y="1045" width="0.0312%" height="15" fill="rgb(234,109,9)"/><text x="66.5588%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (90 samples, 0.03%)</title><rect x="66.3088%" y="1029" width="0.0312%" height="15" fill="rgb(253,95,22)"/><text x="66.5588%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (90 samples, 0.03%)</title><rect x="66.3088%" y="1013" width="0.0312%" height="15" fill="rgb(233,176,25)"/><text x="66.5588%" y="1023.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.03%)</title><rect x="66.3088%" y="997" width="0.0312%" height="15" fill="rgb(236,33,39)"/><text x="66.5588%" y="1007.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (90 samples, 0.03%)</title><rect x="66.3088%" y="981" width="0.0312%" height="15" fill="rgb(223,226,42)"/><text x="66.5588%" y="991.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (90 samples, 0.03%)</title><rect x="66.3088%" y="965" width="0.0312%" height="15" fill="rgb(216,99,33)"/><text x="66.5588%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.01%)</title><rect x="66.3401%" y="1029" width="0.0118%" height="15" fill="rgb(235,84,23)"/><text x="66.5901%" y="1039.50"></text></g><g><title>env_logger::Logger::matches (98 samples, 0.03%)</title><rect x="66.3401%" y="1077" width="0.0340%" height="15" fill="rgb(232,2,27)"/><text x="66.5901%" y="1087.50"></text></g><g><title>env_logger::filter::Filter::matches (98 samples, 0.03%)</title><rect x="66.3401%" y="1061" width="0.0340%" height="15" fill="rgb(241,23,22)"/><text x="66.5901%" y="1071.50"></text></g><g><title>env_logger::filter::Filter::enabled (98 samples, 0.03%)</title><rect x="66.3401%" y="1045" width="0.0340%" height="15" fill="rgb(211,73,27)"/><text x="66.5901%" y="1055.50"></text></g><g><title>env_logger::filter::enabled (64 samples, 0.02%)</title><rect x="66.3519%" y="1029" width="0.0222%" height="15" fill="rgb(235,109,49)"/><text x="66.6019%" y="1039.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (422 samples, 0.15%)</title><rect x="66.2575%" y="1125" width="0.1464%" height="15" fill="rgb(230,99,29)"/><text x="66.5075%" y="1135.50"></text></g><g><title>log::__private_api_log (184 samples, 0.06%)</title><rect x="66.3401%" y="1109" width="0.0638%" height="15" fill="rgb(245,199,7)"/><text x="66.5901%" y="1119.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (184 samples, 0.06%)</title><rect x="66.3401%" y="1093" width="0.0638%" height="15" fill="rgb(217,179,10)"/><text x="66.5901%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (86 samples, 0.03%)</title><rect x="66.3741%" y="1077" width="0.0298%" height="15" fill="rgb(254,99,47)"/><text x="66.6241%" y="1087.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (86 samples, 0.03%)</title><rect x="66.3741%" y="1061" width="0.0298%" height="15" fill="rgb(251,121,7)"/><text x="66.6241%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (65 samples, 0.02%)</title><rect x="66.4039%" y="1109" width="0.0226%" height="15" fill="rgb(250,177,26)"/><text x="66.6539%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (65 samples, 0.02%)</title><rect x="66.4039%" y="1093" width="0.0226%" height="15" fill="rgb(232,88,15)"/><text x="66.6539%" y="1103.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (65 samples, 0.02%)</title><rect x="66.4039%" y="1077" width="0.0226%" height="15" fill="rgb(251,54,54)"/><text x="66.6539%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (65 samples, 0.02%)</title><rect x="66.4039%" y="1061" width="0.0226%" height="15" fill="rgb(208,177,15)"/><text x="66.6539%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (65 samples, 0.02%)</title><rect x="66.4039%" y="1045" width="0.0226%" height="15" fill="rgb(205,97,32)"/><text x="66.6539%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (65 samples, 0.02%)</title><rect x="66.4039%" y="1029" width="0.0226%" height="15" fill="rgb(217,192,13)"/><text x="66.6539%" y="1039.50"></text></g><g><title>tokio::coop::poll_proceed (48 samples, 0.02%)</title><rect x="66.4098%" y="1013" width="0.0167%" height="15" fill="rgb(215,163,41)"/><text x="66.6598%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (48 samples, 0.02%)</title><rect x="66.4098%" y="997" width="0.0167%" height="15" fill="rgb(246,83,29)"/><text x="66.6598%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (48 samples, 0.02%)</title><rect x="66.4098%" y="981" width="0.0167%" height="15" fill="rgb(219,2,45)"/><text x="66.6598%" y="991.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (44 samples, 0.02%)</title><rect x="66.4112%" y="965" width="0.0153%" height="15" fill="rgb(242,215,33)"/><text x="66.6612%" y="975.50"></text></g><g><title>__libc_calloc (43 samples, 0.01%)</title><rect x="66.4341%" y="965" width="0.0149%" height="15" fill="rgb(217,1,6)"/><text x="66.6841%" y="975.50"></text></g><g><title>alloc::alloc::alloc_zeroed (56 samples, 0.02%)</title><rect x="66.4320%" y="981" width="0.0194%" height="15" fill="rgb(207,85,52)"/><text x="66.6820%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (110 samples, 0.04%)</title><rect x="66.4265%" y="1013" width="0.0382%" height="15" fill="rgb(231,171,19)"/><text x="66.6765%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (110 samples, 0.04%)</title><rect x="66.4265%" y="997" width="0.0382%" height="15" fill="rgb(207,128,4)"/><text x="66.6765%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1765" width="0.6533%" height="15" fill="rgb(219,208,4)"/><text x="66.0728%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1749" width="0.6533%" height="15" fill="rgb(235,161,42)"/><text x="66.0728%" y="1759.50"></text></g><g><title>std::panic::catch_unwind (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1733" width="0.6533%" height="15" fill="rgb(247,218,18)"/><text x="66.0728%" y="1743.50"></text></g><g><title>std::panicking::try (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1717" width="0.6533%" height="15" fill="rgb(232,114,51)"/><text x="66.0728%" y="1727.50"></text></g><g><title>__rust_try (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1701" width="0.6533%" height="15" fill="rgb(222,95,3)"/><text x="66.0728%" y="1711.50"></text></g><g><title>std::panicking::try::do_call (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1685" width="0.6533%" height="15" fill="rgb(240,65,29)"/><text x="66.0728%" y="1695.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1669" width="0.6533%" height="15" fill="rgb(249,209,20)"/><text x="66.0728%" y="1679.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1653" width="0.6533%" height="15" fill="rgb(241,48,37)"/><text x="66.0728%" y="1663.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1637" width="0.6533%" height="15" fill="rgb(230,140,42)"/><text x="66.0728%" y="1647.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1621" width="0.6533%" height="15" fill="rgb(230,176,45)"/><text x="66.0728%" y="1631.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,883 samples, 0.65%)</title><rect x="65.8228%" y="1605" width="0.6533%" height="15" fill="rgb(245,112,21)"/><text x="66.0728%" y="1615.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,349 samples, 0.47%)</title><rect x="66.0080%" y="1589" width="0.4680%" height="15" fill="rgb(207,183,35)"/><text x="66.2580%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1,349 samples, 0.47%)</title><rect x="66.0080%" y="1573" width="0.4680%" height="15" fill="rgb(227,44,33)"/><text x="66.2580%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1,349 samples, 0.47%)</title><rect x="66.0080%" y="1557" width="0.4680%" height="15" fill="rgb(246,120,21)"/><text x="66.2580%" y="1567.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,349 samples, 0.47%)</title><rect x="66.0080%" y="1541" width="0.4680%" height="15" fill="rgb(235,57,52)"/><text x="66.2580%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,349 samples, 0.47%)</title><rect x="66.0080%" y="1525" width="0.4680%" height="15" fill="rgb(238,84,10)"/><text x="66.2580%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,349 samples, 0.47%)</title><rect x="66.0080%" y="1509" width="0.4680%" height="15" fill="rgb(251,200,32)"/><text x="66.2580%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1493" width="0.3928%" height="15" fill="rgb(247,159,13)"/><text x="66.3333%" y="1503.50"></text></g><g><title>tokio::coop::budget (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1477" width="0.3928%" height="15" fill="rgb(238,64,4)"/><text x="66.3333%" y="1487.50"></text></g><g><title>tokio::coop::with_budget (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1461" width="0.3928%" height="15" fill="rgb(221,131,51)"/><text x="66.3333%" y="1471.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1445" width="0.3928%" height="15" fill="rgb(242,5,29)"/><text x="66.3333%" y="1455.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1429" width="0.3928%" height="15" fill="rgb(214,130,32)"/><text x="66.3333%" y="1439.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1413" width="0.3928%" height="15" fill="rgb(244,210,16)"/><text x="66.3333%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1397" width="0.3928%" height="15" fill="rgb(234,48,26)"/><text x="66.3333%" y="1407.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1381" width="0.3928%" height="15" fill="rgb(231,82,38)"/><text x="66.3333%" y="1391.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1365" width="0.3928%" height="15" fill="rgb(254,128,41)"/><text x="66.3333%" y="1375.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1349" width="0.3928%" height="15" fill="rgb(212,73,49)"/><text x="66.3333%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1333" width="0.3928%" height="15" fill="rgb(205,62,54)"/><text x="66.3333%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1317" width="0.3928%" height="15" fill="rgb(228,0,8)"/><text x="66.3333%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1301" width="0.3928%" height="15" fill="rgb(251,28,17)"/><text x="66.3333%" y="1311.50"></text></g><g><title>std::panic::catch_unwind (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1285" width="0.3928%" height="15" fill="rgb(238,105,27)"/><text x="66.3333%" y="1295.50"></text></g><g><title>std::panicking::try (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1269" width="0.3928%" height="15" fill="rgb(237,216,33)"/><text x="66.3333%" y="1279.50"></text></g><g><title>__rust_try (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1253" width="0.3928%" height="15" fill="rgb(229,228,25)"/><text x="66.3333%" y="1263.50"></text></g><g><title>std::panicking::try::do_call (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1237" width="0.3928%" height="15" fill="rgb(233,75,23)"/><text x="66.3333%" y="1247.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1221" width="0.3928%" height="15" fill="rgb(231,207,16)"/><text x="66.3333%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1205" width="0.3928%" height="15" fill="rgb(231,191,45)"/><text x="66.3333%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1189" width="0.3928%" height="15" fill="rgb(224,133,17)"/><text x="66.3333%" y="1199.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1173" width="0.3928%" height="15" fill="rgb(209,178,27)"/><text x="66.3333%" y="1183.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1157" width="0.3928%" height="15" fill="rgb(218,37,11)"/><text x="66.3333%" y="1167.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,132 samples, 0.39%)</title><rect x="66.0833%" y="1141" width="0.3928%" height="15" fill="rgb(251,226,25)"/><text x="66.3333%" y="1151.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (208 samples, 0.07%)</title><rect x="66.4039%" y="1125" width="0.0722%" height="15" fill="rgb(209,222,27)"/><text x="66.6539%" y="1135.50"></text></g><g><title>tunneler::message::message::Message::serialize (143 samples, 0.05%)</title><rect x="66.4265%" y="1109" width="0.0496%" height="15" fill="rgb(238,22,21)"/><text x="66.6765%" y="1119.50"></text></g><g><title>alloc::vec::from_elem (143 samples, 0.05%)</title><rect x="66.4265%" y="1093" width="0.0496%" height="15" fill="rgb(233,161,25)"/><text x="66.6765%" y="1103.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (143 samples, 0.05%)</title><rect x="66.4265%" y="1077" width="0.0496%" height="15" fill="rgb(226,122,53)"/><text x="66.6765%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (143 samples, 0.05%)</title><rect x="66.4265%" y="1061" width="0.0496%" height="15" fill="rgb(220,123,17)"/><text x="66.6765%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (143 samples, 0.05%)</title><rect x="66.4265%" y="1045" width="0.0496%" height="15" fill="rgb(230,224,35)"/><text x="66.6765%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (143 samples, 0.05%)</title><rect x="66.4265%" y="1029" width="0.0496%" height="15" fill="rgb(246,83,8)"/><text x="66.6765%" y="1039.50"></text></g><g><title>core::alloc::layout::Layout::array (33 samples, 0.01%)</title><rect x="66.4646%" y="1013" width="0.0114%" height="15" fill="rgb(230,214,17)"/><text x="66.7146%" y="1023.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (35 samples, 0.01%)</title><rect x="66.4761%" y="1493" width="0.0121%" height="15" fill="rgb(222,97,18)"/><text x="66.7261%" y="1503.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (35 samples, 0.01%)</title><rect x="66.4761%" y="1477" width="0.0121%" height="15" fill="rgb(206,79,1)"/><text x="66.7261%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (43 samples, 0.01%)</title><rect x="66.4761%" y="1541" width="0.0149%" height="15" fill="rgb(214,121,34)"/><text x="66.7261%" y="1551.50"></text></g><g><title>std::io::Write::write_fmt (43 samples, 0.01%)</title><rect x="66.4761%" y="1525" width="0.0149%" height="15" fill="rgb(249,199,46)"/><text x="66.7261%" y="1535.50"></text></g><g><title>core::fmt::write (43 samples, 0.01%)</title><rect x="66.4761%" y="1509" width="0.0149%" height="15" fill="rgb(214,222,46)"/><text x="66.7261%" y="1519.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (45 samples, 0.02%)</title><rect x="66.4910%" y="1429" width="0.0156%" height="15" fill="rgb(248,168,30)"/><text x="66.7410%" y="1439.50"></text></g><g><title>std::io::Write::write_all (45 samples, 0.02%)</title><rect x="66.4910%" y="1413" width="0.0156%" height="15" fill="rgb(226,14,28)"/><text x="66.7410%" y="1423.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (63 samples, 0.02%)</title><rect x="66.4910%" y="1493" width="0.0219%" height="15" fill="rgb(253,123,1)"/><text x="66.7410%" y="1503.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (63 samples, 0.02%)</title><rect x="66.4910%" y="1477" width="0.0219%" height="15" fill="rgb(225,24,42)"/><text x="66.7410%" y="1487.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (63 samples, 0.02%)</title><rect x="66.4910%" y="1461" width="0.0219%" height="15" fill="rgb(216,161,37)"/><text x="66.7410%" y="1471.50"></text></g><g><title>core::fmt::write (63 samples, 0.02%)</title><rect x="66.4910%" y="1445" width="0.0219%" height="15" fill="rgb(251,164,26)"/><text x="66.7410%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (81 samples, 0.03%)</title><rect x="66.4910%" y="1541" width="0.0281%" height="15" fill="rgb(219,177,3)"/><text x="66.7410%" y="1551.50"></text></g><g><title>std::io::Write::write_fmt (81 samples, 0.03%)</title><rect x="66.4910%" y="1525" width="0.0281%" height="15" fill="rgb(222,65,0)"/><text x="66.7410%" y="1535.50"></text></g><g><title>core::fmt::write (81 samples, 0.03%)</title><rect x="66.4910%" y="1509" width="0.0281%" height="15" fill="rgb(223,69,54)"/><text x="66.7410%" y="1519.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (30 samples, 0.01%)</title><rect x="66.5243%" y="1381" width="0.0104%" height="15" fill="rgb(235,30,27)"/><text x="66.7743%" y="1391.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (110 samples, 0.04%)</title><rect x="66.5191%" y="1477" width="0.0382%" height="15" fill="rgb(220,183,50)"/><text x="66.7691%" y="1487.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (110 samples, 0.04%)</title><rect x="66.5191%" y="1461" width="0.0382%" height="15" fill="rgb(248,198,15)"/><text x="66.7691%" y="1471.50"></text></g><g><title>core::fmt::write (110 samples, 0.04%)</title><rect x="66.5191%" y="1445" width="0.0382%" height="15" fill="rgb(222,211,4)"/><text x="66.7691%" y="1455.50"></text></g><g><title>core::fmt::run (108 samples, 0.04%)</title><rect x="66.5198%" y="1429" width="0.0375%" height="15" fill="rgb(214,102,34)"/><text x="66.7698%" y="1439.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (108 samples, 0.04%)</title><rect x="66.5198%" y="1413" width="0.0375%" height="15" fill="rgb(245,92,5)"/><text x="66.7698%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (108 samples, 0.04%)</title><rect x="66.5198%" y="1397" width="0.0375%" height="15" fill="rgb(252,72,51)"/><text x="66.7698%" y="1407.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (139 samples, 0.05%)</title><rect x="66.5191%" y="1541" width="0.0482%" height="15" fill="rgb(252,208,19)"/><text x="66.7691%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (139 samples, 0.05%)</title><rect x="66.5191%" y="1525" width="0.0482%" height="15" fill="rgb(211,69,7)"/><text x="66.7691%" y="1535.50"></text></g><g><title>std::io::Write::write_fmt (139 samples, 0.05%)</title><rect x="66.5191%" y="1509" width="0.0482%" height="15" fill="rgb(211,27,16)"/><text x="66.7691%" y="1519.50"></text></g><g><title>core::fmt::write (139 samples, 0.05%)</title><rect x="66.5191%" y="1493" width="0.0482%" height="15" fill="rgb(219,216,14)"/><text x="66.7691%" y="1503.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (29 samples, 0.01%)</title><rect x="66.5573%" y="1477" width="0.0101%" height="15" fill="rgb(219,71,8)"/><text x="66.8073%" y="1487.50"></text></g><g><title>std::io::Write::write_all (29 samples, 0.01%)</title><rect x="66.5573%" y="1461" width="0.0101%" height="15" fill="rgb(223,170,53)"/><text x="66.8073%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (40 samples, 0.01%)</title><rect x="66.5673%" y="1541" width="0.0139%" height="15" fill="rgb(246,21,26)"/><text x="66.8173%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (40 samples, 0.01%)</title><rect x="66.5673%" y="1525" width="0.0139%" height="15" fill="rgb(248,20,46)"/><text x="66.8173%" y="1535.50"></text></g><g><title>std::io::Write::write_fmt (40 samples, 0.01%)</title><rect x="66.5673%" y="1509" width="0.0139%" height="15" fill="rgb(252,94,11)"/><text x="66.8173%" y="1519.50"></text></g><g><title>core::fmt::write (40 samples, 0.01%)</title><rect x="66.5673%" y="1493" width="0.0139%" height="15" fill="rgb(236,163,8)"/><text x="66.8173%" y="1503.50"></text></g><g><title>core::str::converts::from_utf8 (32 samples, 0.01%)</title><rect x="66.6325%" y="1445" width="0.0111%" height="15" fill="rgb(217,221,45)"/><text x="66.8825%" y="1455.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (182 samples, 0.06%)</title><rect x="66.5812%" y="1477" width="0.0631%" height="15" fill="rgb(238,38,17)"/><text x="66.8312%" y="1487.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (182 samples, 0.06%)</title><rect x="66.5812%" y="1461" width="0.0631%" height="15" fill="rgb(242,210,23)"/><text x="66.8312%" y="1471.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (501 samples, 0.17%)</title><rect x="66.4761%" y="1685" width="0.1738%" height="15" fill="rgb(250,86,53)"/><text x="66.7261%" y="1695.50"></text></g><g><title>log::__private_api_log (501 samples, 0.17%)</title><rect x="66.4761%" y="1669" width="0.1738%" height="15" fill="rgb(223,168,25)"/><text x="66.7261%" y="1679.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (501 samples, 0.17%)</title><rect x="66.4761%" y="1653" width="0.1738%" height="15" fill="rgb(251,189,4)"/><text x="66.7261%" y="1663.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (501 samples, 0.17%)</title><rect x="66.4761%" y="1637" width="0.1738%" height="15" fill="rgb(245,19,28)"/><text x="66.7261%" y="1647.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (501 samples, 0.17%)</title><rect x="66.4761%" y="1621" width="0.1738%" height="15" fill="rgb(207,10,34)"/><text x="66.7261%" y="1631.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (501 samples, 0.17%)</title><rect x="66.4761%" y="1605" width="0.1738%" height="15" fill="rgb(235,153,31)"/><text x="66.7261%" y="1615.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (501 samples, 0.17%)</title><rect x="66.4761%" y="1589" width="0.1738%" height="15" fill="rgb(228,72,37)"/><text x="66.7261%" y="1599.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (501 samples, 0.17%)</title><rect x="66.4761%" y="1573" width="0.1738%" height="15" fill="rgb(215,15,16)"/><text x="66.7261%" y="1583.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (501 samples, 0.17%)</title><rect x="66.4761%" y="1557" width="0.1738%" height="15" fill="rgb(250,119,29)"/><text x="66.7261%" y="1567.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (198 samples, 0.07%)</title><rect x="66.5812%" y="1541" width="0.0687%" height="15" fill="rgb(214,59,1)"/><text x="66.8312%" y="1551.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (198 samples, 0.07%)</title><rect x="66.5812%" y="1525" width="0.0687%" height="15" fill="rgb(223,109,25)"/><text x="66.8312%" y="1535.50"></text></g><g><title>std::io::Write::write_fmt (198 samples, 0.07%)</title><rect x="66.5812%" y="1509" width="0.0687%" height="15" fill="rgb(230,198,22)"/><text x="66.8312%" y="1519.50"></text></g><g><title>core::fmt::write (198 samples, 0.07%)</title><rect x="66.5812%" y="1493" width="0.0687%" height="15" fill="rgb(245,184,46)"/><text x="66.8312%" y="1503.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (540 samples, 0.19%)</title><rect x="66.4761%" y="1701" width="0.1874%" height="15" fill="rgb(253,73,16)"/><text x="66.7261%" y="1711.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (39 samples, 0.01%)</title><rect x="66.6499%" y="1685" width="0.0135%" height="15" fill="rgb(206,94,45)"/><text x="66.8999%" y="1695.50"></text></g><g><title>log::__private_api_log (39 samples, 0.01%)</title><rect x="66.6499%" y="1669" width="0.0135%" height="15" fill="rgb(236,83,27)"/><text x="66.8999%" y="1679.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (39 samples, 0.01%)</title><rect x="66.6499%" y="1653" width="0.0135%" height="15" fill="rgb(220,196,8)"/><text x="66.8999%" y="1663.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (39 samples, 0.01%)</title><rect x="66.6499%" y="1637" width="0.0135%" height="15" fill="rgb(254,185,14)"/><text x="66.8999%" y="1647.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (39 samples, 0.01%)</title><rect x="66.6499%" y="1621" width="0.0135%" height="15" fill="rgb(226,50,22)"/><text x="66.8999%" y="1631.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (39 samples, 0.01%)</title><rect x="66.6499%" y="1605" width="0.0135%" height="15" fill="rgb(253,147,0)"/><text x="66.8999%" y="1615.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (39 samples, 0.01%)</title><rect x="66.6499%" y="1589" width="0.0135%" height="15" fill="rgb(252,46,33)"/><text x="66.8999%" y="1599.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (39 samples, 0.01%)</title><rect x="66.6499%" y="1573" width="0.0135%" height="15" fill="rgb(242,22,54)"/><text x="66.8999%" y="1583.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (39 samples, 0.01%)</title><rect x="66.6499%" y="1557" width="0.0135%" height="15" fill="rgb(223,178,32)"/><text x="66.8999%" y="1567.50"></text></g><g><title>&lt;tokio::util::linked_list::DrainFilter&lt;T,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.01%)</title><rect x="66.6634%" y="1365" width="0.0118%" height="15" fill="rgb(214,106,53)"/><text x="66.9134%" y="1375.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (34 samples, 0.01%)</title><rect x="66.6634%" y="1349" width="0.0118%" height="15" fill="rgb(232,65,50)"/><text x="66.9134%" y="1359.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (34 samples, 0.01%)</title><rect x="66.6634%" y="1333" width="0.0118%" height="15" fill="rgb(231,110,28)"/><text x="66.9134%" y="1343.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (235 samples, 0.08%)</title><rect x="66.7519%" y="1349" width="0.0815%" height="15" fill="rgb(216,71,40)"/><text x="67.0019%" y="1359.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (460 samples, 0.16%)</title><rect x="66.6752%" y="1365" width="0.1596%" height="15" fill="rgb(229,89,53)"/><text x="66.9252%" y="1375.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (32 samples, 0.01%)</title><rect x="66.8400%" y="1141" width="0.0111%" height="15" fill="rgb(210,124,14)"/><text x="67.0900%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (48 samples, 0.02%)</title><rect x="66.8348%" y="1205" width="0.0167%" height="15" fill="rgb(236,213,6)"/><text x="67.0848%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (48 samples, 0.02%)</title><rect x="66.8348%" y="1189" width="0.0167%" height="15" fill="rgb(228,41,5)"/><text x="67.0848%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (48 samples, 0.02%)</title><rect x="66.8348%" y="1173" width="0.0167%" height="15" fill="rgb(221,167,25)"/><text x="67.0848%" y="1183.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (48 samples, 0.02%)</title><rect x="66.8348%" y="1157" width="0.0167%" height="15" fill="rgb(228,144,37)"/><text x="67.0848%" y="1167.50"></text></g><g><title>core::cell::BorrowRefMut::new (36 samples, 0.01%)</title><rect x="66.8539%" y="1157" width="0.0125%" height="15" fill="rgb(227,189,38)"/><text x="67.1039%" y="1167.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (51 samples, 0.02%)</title><rect x="66.8515%" y="1173" width="0.0177%" height="15" fill="rgb(218,8,2)"/><text x="67.1015%" y="1183.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (53 samples, 0.02%)</title><rect x="66.8515%" y="1189" width="0.0184%" height="15" fill="rgb(209,61,28)"/><text x="67.1015%" y="1199.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (46 samples, 0.02%)</title><rect x="66.8792%" y="1173" width="0.0160%" height="15" fill="rgb(233,140,39)"/><text x="67.1292%" y="1183.50"></text></g><g><title>core::mem::take (39 samples, 0.01%)</title><rect x="66.8817%" y="1157" width="0.0135%" height="15" fill="rgb(251,66,48)"/><text x="67.1317%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1605" width="0.2352%" height="15" fill="rgb(210,44,45)"/><text x="66.9134%" y="1615.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (678 samples, 0.24%)</title><rect x="66.6634%" y="1589" width="0.2352%" height="15" fill="rgb(214,136,46)"/><text x="66.9134%" y="1599.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1573" width="0.2352%" height="15" fill="rgb(207,130,50)"/><text x="66.9134%" y="1583.50"></text></g><g><title>tokio::runtime::park::Inner::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1557" width="0.2352%" height="15" fill="rgb(228,102,49)"/><text x="66.9134%" y="1567.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (678 samples, 0.24%)</title><rect x="66.6634%" y="1541" width="0.2352%" height="15" fill="rgb(253,55,1)"/><text x="66.9134%" y="1551.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1525" width="0.2352%" height="15" fill="rgb(238,222,9)"/><text x="66.9134%" y="1535.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1509" width="0.2352%" height="15" fill="rgb(246,99,6)"/><text x="66.9134%" y="1519.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1493" width="0.2352%" height="15" fill="rgb(219,110,26)"/><text x="66.9134%" y="1503.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (678 samples, 0.24%)</title><rect x="66.6634%" y="1477" width="0.2352%" height="15" fill="rgb(239,160,33)"/><text x="66.9134%" y="1487.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1461" width="0.2352%" height="15" fill="rgb(220,202,23)"/><text x="66.9134%" y="1471.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (678 samples, 0.24%)</title><rect x="66.6634%" y="1445" width="0.2352%" height="15" fill="rgb(208,80,26)"/><text x="66.9134%" y="1455.50"></text></g><g><title>tokio::io::driver::Driver::turn (678 samples, 0.24%)</title><rect x="66.6634%" y="1429" width="0.2352%" height="15" fill="rgb(243,85,7)"/><text x="66.9134%" y="1439.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (678 samples, 0.24%)</title><rect x="66.6634%" y="1413" width="0.2352%" height="15" fill="rgb(228,77,47)"/><text x="66.9134%" y="1423.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (678 samples, 0.24%)</title><rect x="66.6634%" y="1397" width="0.2352%" height="15" fill="rgb(212,226,8)"/><text x="66.9134%" y="1407.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (678 samples, 0.24%)</title><rect x="66.6634%" y="1381" width="0.2352%" height="15" fill="rgb(241,120,54)"/><text x="66.9134%" y="1391.50"></text></g><g><title>core::task::wake::Waker::wake (184 samples, 0.06%)</title><rect x="66.8348%" y="1365" width="0.0638%" height="15" fill="rgb(226,80,16)"/><text x="67.0848%" y="1375.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (184 samples, 0.06%)</title><rect x="66.8348%" y="1349" width="0.0638%" height="15" fill="rgb(240,76,13)"/><text x="67.0848%" y="1359.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (184 samples, 0.06%)</title><rect x="66.8348%" y="1333" width="0.0638%" height="15" fill="rgb(252,74,8)"/><text x="67.0848%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (184 samples, 0.06%)</title><rect x="66.8348%" y="1317" width="0.0638%" height="15" fill="rgb(244,155,2)"/><text x="67.0848%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (184 samples, 0.06%)</title><rect x="66.8348%" y="1301" width="0.0638%" height="15" fill="rgb(215,81,35)"/><text x="67.0848%" y="1311.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (184 samples, 0.06%)</title><rect x="66.8348%" y="1285" width="0.0638%" height="15" fill="rgb(206,55,2)"/><text x="67.0848%" y="1295.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (184 samples, 0.06%)</title><rect x="66.8348%" y="1269" width="0.0638%" height="15" fill="rgb(231,2,34)"/><text x="67.0848%" y="1279.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (184 samples, 0.06%)</title><rect x="66.8348%" y="1253" width="0.0638%" height="15" fill="rgb(242,176,48)"/><text x="67.0848%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (184 samples, 0.06%)</title><rect x="66.8348%" y="1237" width="0.0638%" height="15" fill="rgb(249,31,36)"/><text x="67.0848%" y="1247.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (184 samples, 0.06%)</title><rect x="66.8348%" y="1221" width="0.0638%" height="15" fill="rgb(205,18,17)"/><text x="67.0848%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (136 samples, 0.05%)</title><rect x="66.8515%" y="1205" width="0.0472%" height="15" fill="rgb(254,130,5)"/><text x="67.1015%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (71 samples, 0.02%)</title><rect x="66.8740%" y="1189" width="0.0246%" height="15" fill="rgb(229,42,45)"/><text x="67.1240%" y="1199.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (102 samples, 0.04%)</title><rect x="66.8987%" y="1221" width="0.0354%" height="15" fill="rgb(245,95,25)"/><text x="67.1487%" y="1231.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.02%)</title><rect x="66.9358%" y="1141" width="0.0219%" height="15" fill="rgb(249,193,38)"/><text x="67.1858%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place (86 samples, 0.03%)</title><rect x="66.9341%" y="1221" width="0.0298%" height="15" fill="rgb(241,140,43)"/><text x="67.1841%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place (86 samples, 0.03%)</title><rect x="66.9341%" y="1205" width="0.0298%" height="15" fill="rgb(245,78,48)"/><text x="67.1841%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place (81 samples, 0.03%)</title><rect x="66.9358%" y="1189" width="0.0281%" height="15" fill="rgb(214,92,39)"/><text x="67.1858%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place (81 samples, 0.03%)</title><rect x="66.9358%" y="1173" width="0.0281%" height="15" fill="rgb(211,189,14)"/><text x="67.1858%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (81 samples, 0.03%)</title><rect x="66.9358%" y="1157" width="0.0281%" height="15" fill="rgb(218,7,24)"/><text x="67.1858%" y="1167.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (179 samples, 0.06%)</title><rect x="66.9667%" y="1221" width="0.0621%" height="15" fill="rgb(224,200,49)"/><text x="67.2167%" y="1231.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (179 samples, 0.06%)</title><rect x="66.9667%" y="1205" width="0.0621%" height="15" fill="rgb(218,210,14)"/><text x="67.2167%" y="1215.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (179 samples, 0.06%)</title><rect x="66.9667%" y="1189" width="0.0621%" height="15" fill="rgb(234,142,31)"/><text x="67.2167%" y="1199.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (39 samples, 0.01%)</title><rect x="67.0288%" y="1173" width="0.0135%" height="15" fill="rgb(227,165,2)"/><text x="67.2788%" y="1183.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (32 samples, 0.01%)</title><rect x="67.0517%" y="1173" width="0.0111%" height="15" fill="rgb(232,44,46)"/><text x="67.3017%" y="1183.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (132 samples, 0.05%)</title><rect x="67.0288%" y="1221" width="0.0458%" height="15" fill="rgb(236,149,47)"/><text x="67.2788%" y="1231.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (132 samples, 0.05%)</title><rect x="67.0288%" y="1205" width="0.0458%" height="15" fill="rgb(227,45,31)"/><text x="67.2788%" y="1215.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (132 samples, 0.05%)</title><rect x="67.0288%" y="1189" width="0.0458%" height="15" fill="rgb(240,176,51)"/><text x="67.2788%" y="1199.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (34 samples, 0.01%)</title><rect x="67.0628%" y="1173" width="0.0118%" height="15" fill="rgb(249,146,41)"/><text x="67.3128%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (34 samples, 0.01%)</title><rect x="67.0628%" y="1157" width="0.0118%" height="15" fill="rgb(213,208,4)"/><text x="67.3128%" y="1167.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (49 samples, 0.02%)</title><rect x="67.1023%" y="1205" width="0.0170%" height="15" fill="rgb(245,84,36)"/><text x="67.3523%" y="1215.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (39 samples, 0.01%)</title><rect x="67.1193%" y="1205" width="0.0135%" height="15" fill="rgb(254,84,18)"/><text x="67.3693%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (30 samples, 0.01%)</title><rect x="67.1225%" y="1189" width="0.0104%" height="15" fill="rgb(225,38,54)"/><text x="67.3725%" y="1199.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (30 samples, 0.01%)</title><rect x="67.1329%" y="1205" width="0.0104%" height="15" fill="rgb(246,50,30)"/><text x="67.3829%" y="1215.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_le_bytes (37 samples, 0.01%)</title><rect x="67.1433%" y="1205" width="0.0128%" height="15" fill="rgb(246,148,9)"/><text x="67.3933%" y="1215.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (34 samples, 0.01%)</title><rect x="67.1686%" y="1205" width="0.0118%" height="15" fill="rgb(223,75,4)"/><text x="67.4186%" y="1215.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 0.01%)</title><rect x="67.1804%" y="1205" width="0.0101%" height="15" fill="rgb(239,148,41)"/><text x="67.4304%" y="1215.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (886 samples, 0.31%)</title><rect x="66.8987%" y="1237" width="0.3074%" height="15" fill="rgb(205,195,3)"/><text x="67.1487%" y="1247.50"></text></g><g><title>tunneler::message::header::MessageHeader::deserialize (379 samples, 0.13%)</title><rect x="67.0746%" y="1221" width="0.1315%" height="15" fill="rgb(254,161,1)"/><text x="67.3246%" y="1231.50"></text></g><g><title>tunneler::message::kinds::MessageType::deserialize (45 samples, 0.02%)</title><rect x="67.1905%" y="1205" width="0.0156%" height="15" fill="rgb(211,229,8)"/><text x="67.4405%" y="1215.50"></text></g><g><title>tokio::coop::poll_proceed (49 samples, 0.02%)</title><rect x="67.2165%" y="1093" width="0.0170%" height="15" fill="rgb(220,97,9)"/><text x="67.4665%" y="1103.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (49 samples, 0.02%)</title><rect x="67.2165%" y="1077" width="0.0170%" height="15" fill="rgb(240,218,8)"/><text x="67.4665%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (49 samples, 0.02%)</title><rect x="67.2165%" y="1061" width="0.0170%" height="15" fill="rgb(250,44,0)"/><text x="67.4665%" y="1071.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (49 samples, 0.02%)</title><rect x="67.2165%" y="1045" width="0.0170%" height="15" fill="rgb(236,41,53)"/><text x="67.4665%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (49 samples, 0.02%)</title><rect x="67.2165%" y="1029" width="0.0170%" height="15" fill="rgb(218,227,13)"/><text x="67.4665%" y="1039.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (49 samples, 0.02%)</title><rect x="67.2165%" y="1013" width="0.0170%" height="15" fill="rgb(217,94,32)"/><text x="67.4665%" y="1023.50"></text></g><g><title>tokio::io::driver::Handle::inner (52 samples, 0.02%)</title><rect x="67.2335%" y="1093" width="0.0180%" height="15" fill="rgb(213,217,12)"/><text x="67.4835%" y="1103.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (52 samples, 0.02%)</title><rect x="67.2335%" y="1077" width="0.0180%" height="15" fill="rgb(229,13,46)"/><text x="67.4835%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (52 samples, 0.02%)</title><rect x="67.2335%" y="1061" width="0.0180%" height="15" fill="rgb(243,139,5)"/><text x="67.4835%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (52 samples, 0.02%)</title><rect x="67.2335%" y="1045" width="0.0180%" height="15" fill="rgb(249,38,45)"/><text x="67.4835%" y="1055.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (31 samples, 0.01%)</title><rect x="67.2879%" y="1077" width="0.0108%" height="15" fill="rgb(216,70,11)"/><text x="67.5379%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (48 samples, 0.02%)</title><rect x="67.3161%" y="1077" width="0.0167%" height="15" fill="rgb(253,101,25)"/><text x="67.5661%" y="1087.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="67.3220%" y="1061" width="0.0108%" height="15" fill="rgb(207,197,30)"/><text x="67.5720%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.01%)</title><rect x="67.3438%" y="1061" width="0.0121%" height="15" fill="rgb(238,87,13)"/><text x="67.5938%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (68 samples, 0.02%)</title><rect x="67.3327%" y="1077" width="0.0236%" height="15" fill="rgb(215,155,8)"/><text x="67.5827%" y="1087.50"></text></g><g><title>tokio::io::driver::Direction::mask (34 samples, 0.01%)</title><rect x="67.3601%" y="1077" width="0.0118%" height="15" fill="rgb(239,166,38)"/><text x="67.6101%" y="1087.50"></text></g><g><title>tokio::io::driver::ready::Ready::is_empty (51 samples, 0.02%)</title><rect x="67.3792%" y="1077" width="0.0177%" height="15" fill="rgb(240,194,35)"/><text x="67.6292%" y="1087.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (601 samples, 0.21%)</title><rect x="67.2061%" y="1237" width="0.2085%" height="15" fill="rgb(219,10,44)"/><text x="67.4561%" y="1247.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (601 samples, 0.21%)</title><rect x="67.2061%" y="1221" width="0.2085%" height="15" fill="rgb(251,220,35)"/><text x="67.4561%" y="1231.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (601 samples, 0.21%)</title><rect x="67.2061%" y="1205" width="0.2085%" height="15" fill="rgb(218,117,13)"/><text x="67.4561%" y="1215.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (601 samples, 0.21%)</title><rect x="67.2061%" y="1189" width="0.2085%" height="15" fill="rgb(221,213,40)"/><text x="67.4561%" y="1199.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (601 samples, 0.21%)</title><rect x="67.2061%" y="1173" width="0.2085%" height="15" fill="rgb(251,224,35)"/><text x="67.4561%" y="1183.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (601 samples, 0.21%)</title><rect x="67.2061%" y="1157" width="0.2085%" height="15" fill="rgb(241,33,39)"/><text x="67.4561%" y="1167.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (601 samples, 0.21%)</title><rect x="67.2061%" y="1141" width="0.2085%" height="15" fill="rgb(222,74,17)"/><text x="67.4561%" y="1151.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (601 samples, 0.21%)</title><rect x="67.2061%" y="1125" width="0.2085%" height="15" fill="rgb(225,103,0)"/><text x="67.4561%" y="1135.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (592 samples, 0.21%)</title><rect x="67.2092%" y="1109" width="0.2054%" height="15" fill="rgb(240,0,12)"/><text x="67.4592%" y="1119.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (470 samples, 0.16%)</title><rect x="67.2515%" y="1093" width="0.1631%" height="15" fill="rgb(233,213,37)"/><text x="67.5015%" y="1103.50"></text></g><g><title>tokio::util::bit::Pack::unpack (51 samples, 0.02%)</title><rect x="67.3969%" y="1077" width="0.0177%" height="15" fill="rgb(225,84,52)"/><text x="67.6469%" y="1087.50"></text></g><g><title>core::cmp::PartialEq::ne (39 samples, 0.01%)</title><rect x="67.4312%" y="1029" width="0.0135%" height="15" fill="rgb(247,160,51)"/><text x="67.6812%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (79 samples, 0.03%)</title><rect x="67.4177%" y="1045" width="0.0274%" height="15" fill="rgb(244,60,51)"/><text x="67.6677%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (186 samples, 0.06%)</title><rect x="67.4146%" y="1221" width="0.0645%" height="15" fill="rgb(233,114,7)"/><text x="67.6646%" y="1231.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (186 samples, 0.06%)</title><rect x="67.4146%" y="1205" width="0.0645%" height="15" fill="rgb(246,136,16)"/><text x="67.6646%" y="1215.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (186 samples, 0.06%)</title><rect x="67.4146%" y="1189" width="0.0645%" height="15" fill="rgb(243,114,45)"/><text x="67.6646%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (186 samples, 0.06%)</title><rect x="67.4146%" y="1173" width="0.0645%" height="15" fill="rgb(247,183,43)"/><text x="67.6646%" y="1183.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (186 samples, 0.06%)</title><rect x="67.4146%" y="1157" width="0.0645%" height="15" fill="rgb(251,210,42)"/><text x="67.6646%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (186 samples, 0.06%)</title><rect x="67.4146%" y="1141" width="0.0645%" height="15" fill="rgb(221,88,35)"/><text x="67.6646%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (186 samples, 0.06%)</title><rect x="67.4146%" y="1125" width="0.0645%" height="15" fill="rgb(242,21,20)"/><text x="67.6646%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (186 samples, 0.06%)</title><rect x="67.4146%" y="1109" width="0.0645%" height="15" fill="rgb(233,226,36)"/><text x="67.6646%" y="1119.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (186 samples, 0.06%)</title><rect x="67.4146%" y="1093" width="0.0645%" height="15" fill="rgb(243,189,34)"/><text x="67.6646%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (186 samples, 0.06%)</title><rect x="67.4146%" y="1077" width="0.0645%" height="15" fill="rgb(207,145,50)"/><text x="67.6646%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (177 samples, 0.06%)</title><rect x="67.4177%" y="1061" width="0.0614%" height="15" fill="rgb(242,1,50)"/><text x="67.6677%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (98 samples, 0.03%)</title><rect x="67.4451%" y="1045" width="0.0340%" height="15" fill="rgb(231,65,32)"/><text x="67.6951%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (31 samples, 0.01%)</title><rect x="67.4684%" y="1029" width="0.0108%" height="15" fill="rgb(208,68,49)"/><text x="67.7184%" y="1039.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (45 samples, 0.02%)</title><rect x="67.4944%" y="1093" width="0.0156%" height="15" fill="rgb(253,54,49)"/><text x="67.7444%" y="1103.50"></text></g><g><title>__GI___clock_gettime (34 samples, 0.01%)</title><rect x="67.5197%" y="1013" width="0.0118%" height="15" fill="rgb(245,186,24)"/><text x="67.7697%" y="1023.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (338 samples, 0.12%)</title><rect x="67.4146%" y="1237" width="0.1173%" height="15" fill="rgb(209,2,41)"/><text x="67.6646%" y="1247.50"></text></g><g><title>log::__private_api_log (135 samples, 0.05%)</title><rect x="67.4850%" y="1221" width="0.0468%" height="15" fill="rgb(242,208,54)"/><text x="67.7350%" y="1231.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (135 samples, 0.05%)</title><rect x="67.4850%" y="1205" width="0.0468%" height="15" fill="rgb(225,9,51)"/><text x="67.7350%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (135 samples, 0.05%)</title><rect x="67.4850%" y="1189" width="0.0468%" height="15" fill="rgb(207,207,25)"/><text x="67.7350%" y="1199.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (135 samples, 0.05%)</title><rect x="67.4850%" y="1173" width="0.0468%" height="15" fill="rgb(253,96,18)"/><text x="67.7350%" y="1183.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (135 samples, 0.05%)</title><rect x="67.4850%" y="1157" width="0.0468%" height="15" fill="rgb(252,215,20)"/><text x="67.7350%" y="1167.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (135 samples, 0.05%)</title><rect x="67.4850%" y="1141" width="0.0468%" height="15" fill="rgb(245,227,26)"/><text x="67.7350%" y="1151.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (135 samples, 0.05%)</title><rect x="67.4850%" y="1125" width="0.0468%" height="15" fill="rgb(241,208,0)"/><text x="67.7350%" y="1135.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (135 samples, 0.05%)</title><rect x="67.4850%" y="1109" width="0.0468%" height="15" fill="rgb(224,130,10)"/><text x="67.7350%" y="1119.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (57 samples, 0.02%)</title><rect x="67.5121%" y="1093" width="0.0198%" height="15" fill="rgb(237,29,0)"/><text x="67.7621%" y="1103.50"></text></g><g><title>env_logger::fmt::humantime::imp::&lt;impl env_logger::fmt::Formatter&gt;::timestamp_seconds (57 samples, 0.02%)</title><rect x="67.5121%" y="1077" width="0.0198%" height="15" fill="rgb(219,27,41)"/><text x="67.7621%" y="1087.50"></text></g><g><title>std::time::SystemTime::now (41 samples, 0.01%)</title><rect x="67.5176%" y="1061" width="0.0142%" height="15" fill="rgb(245,101,19)"/><text x="67.7676%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (41 samples, 0.01%)</title><rect x="67.5176%" y="1045" width="0.0142%" height="15" fill="rgb(243,44,37)"/><text x="67.7676%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::now (41 samples, 0.01%)</title><rect x="67.5176%" y="1029" width="0.0142%" height="15" fill="rgb(228,213,43)"/><text x="67.7676%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,070 samples, 1.07%)</title><rect x="66.4761%" y="1765" width="1.0652%" height="15" fill="rgb(219,163,21)"/><text x="66.7261%" y="1775.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3,070 samples, 1.07%)</title><rect x="66.4761%" y="1749" width="1.0652%" height="15" fill="rgb(234,86,24)"/><text x="66.7261%" y="1759.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,070 samples, 1.07%)</title><rect x="66.4761%" y="1733" width="1.0652%" height="15" fill="rgb(225,10,24)"/><text x="66.7261%" y="1743.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3,070 samples, 1.07%)</title><rect x="66.4761%" y="1717" width="1.0652%" height="15" fill="rgb(218,109,7)"/><text x="66.7261%" y="1727.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,530 samples, 0.88%)</title><rect x="66.6634%" y="1701" width="0.8778%" height="15" fill="rgb(210,20,26)"/><text x="66.9134%" y="1711.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2,530 samples, 0.88%)</title><rect x="66.6634%" y="1685" width="0.8778%" height="15" fill="rgb(216,18,1)"/><text x="66.9134%" y="1695.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2,530 samples, 0.88%)</title><rect x="66.6634%" y="1669" width="0.8778%" height="15" fill="rgb(206,163,23)"/><text x="66.9134%" y="1679.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2,530 samples, 0.88%)</title><rect x="66.6634%" y="1653" width="0.8778%" height="15" fill="rgb(229,150,31)"/><text x="66.9134%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2,530 samples, 0.88%)</title><rect x="66.6634%" y="1637" width="0.8778%" height="15" fill="rgb(231,10,5)"/><text x="66.9134%" y="1647.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2,530 samples, 0.88%)</title><rect x="66.6634%" y="1621" width="0.8778%" height="15" fill="rgb(250,40,50)"/><text x="66.9134%" y="1631.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1605" width="0.6426%" height="15" fill="rgb(217,119,7)"/><text x="67.1487%" y="1615.50"></text></g><g><title>tokio::coop::budget (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1589" width="0.6426%" height="15" fill="rgb(245,214,40)"/><text x="67.1487%" y="1599.50"></text></g><g><title>tokio::coop::with_budget (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1573" width="0.6426%" height="15" fill="rgb(216,187,1)"/><text x="67.1487%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1557" width="0.6426%" height="15" fill="rgb(237,146,21)"/><text x="67.1487%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1541" width="0.6426%" height="15" fill="rgb(210,174,47)"/><text x="67.1487%" y="1551.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1525" width="0.6426%" height="15" fill="rgb(218,111,39)"/><text x="67.1487%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1509" width="0.6426%" height="15" fill="rgb(224,95,19)"/><text x="67.1487%" y="1519.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1493" width="0.6426%" height="15" fill="rgb(234,15,38)"/><text x="67.1487%" y="1503.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1477" width="0.6426%" height="15" fill="rgb(246,56,12)"/><text x="67.1487%" y="1487.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1461" width="0.6426%" height="15" fill="rgb(247,16,17)"/><text x="67.1487%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1445" width="0.6426%" height="15" fill="rgb(215,151,11)"/><text x="67.1487%" y="1455.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1429" width="0.6426%" height="15" fill="rgb(225,16,24)"/><text x="67.1487%" y="1439.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1413" width="0.6426%" height="15" fill="rgb(217,117,5)"/><text x="67.1487%" y="1423.50"></text></g><g><title>std::panic::catch_unwind (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1397" width="0.6426%" height="15" fill="rgb(246,187,53)"/><text x="67.1487%" y="1407.50"></text></g><g><title>std::panicking::try (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1381" width="0.6426%" height="15" fill="rgb(241,71,40)"/><text x="67.1487%" y="1391.50"></text></g><g><title>__rust_try (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1365" width="0.6426%" height="15" fill="rgb(231,67,39)"/><text x="67.1487%" y="1375.50"></text></g><g><title>std::panicking::try::do_call (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1349" width="0.6426%" height="15" fill="rgb(222,120,24)"/><text x="67.1487%" y="1359.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1333" width="0.6426%" height="15" fill="rgb(248,3,3)"/><text x="67.1487%" y="1343.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1317" width="0.6426%" height="15" fill="rgb(228,218,5)"/><text x="67.1487%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1301" width="0.6426%" height="15" fill="rgb(212,202,43)"/><text x="67.1487%" y="1311.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1285" width="0.6426%" height="15" fill="rgb(235,183,2)"/><text x="67.1487%" y="1295.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1269" width="0.6426%" height="15" fill="rgb(230,165,10)"/><text x="67.1487%" y="1279.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,852 samples, 0.64%)</title><rect x="66.8987%" y="1253" width="0.6426%" height="15" fill="rgb(219,54,40)"/><text x="67.1487%" y="1263.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (35 samples, 0.01%)</title><rect x="67.5430%" y="1333" width="0.0121%" height="15" fill="rgb(244,73,9)"/><text x="67.7930%" y="1343.50"></text></g><g><title>core::mem::replace (31 samples, 0.01%)</title><rect x="67.5443%" y="1317" width="0.0108%" height="15" fill="rgb(212,32,45)"/><text x="67.7943%" y="1327.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (36 samples, 0.01%)</title><rect x="67.5430%" y="1349" width="0.0125%" height="15" fill="rgb(205,58,31)"/><text x="67.7930%" y="1359.50"></text></g><g><title>tokio::coop::poll_proceed (37 samples, 0.01%)</title><rect x="67.5430%" y="1413" width="0.0128%" height="15" fill="rgb(250,120,43)"/><text x="67.7930%" y="1423.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (37 samples, 0.01%)</title><rect x="67.5430%" y="1397" width="0.0128%" height="15" fill="rgb(235,13,10)"/><text x="67.7930%" y="1407.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (37 samples, 0.01%)</title><rect x="67.5430%" y="1381" width="0.0128%" height="15" fill="rgb(232,219,31)"/><text x="67.7930%" y="1391.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (37 samples, 0.01%)</title><rect x="67.5430%" y="1365" width="0.0128%" height="15" fill="rgb(218,157,51)"/><text x="67.7930%" y="1375.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (112 samples, 0.04%)</title><rect x="67.5412%" y="1573" width="0.0389%" height="15" fill="rgb(211,91,52)"/><text x="67.7912%" y="1583.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (112 samples, 0.04%)</title><rect x="67.5412%" y="1557" width="0.0389%" height="15" fill="rgb(240,173,1)"/><text x="67.7912%" y="1567.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (112 samples, 0.04%)</title><rect x="67.5412%" y="1541" width="0.0389%" height="15" fill="rgb(248,20,47)"/><text x="67.7912%" y="1551.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (112 samples, 0.04%)</title><rect x="67.5412%" y="1525" width="0.0389%" height="15" fill="rgb(217,221,40)"/><text x="67.7912%" y="1535.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (112 samples, 0.04%)</title><rect x="67.5412%" y="1509" width="0.0389%" height="15" fill="rgb(226,149,51)"/><text x="67.7912%" y="1519.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (112 samples, 0.04%)</title><rect x="67.5412%" y="1493" width="0.0389%" height="15" fill="rgb(252,193,7)"/><text x="67.7912%" y="1503.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (112 samples, 0.04%)</title><rect x="67.5412%" y="1477" width="0.0389%" height="15" fill="rgb(205,123,0)"/><text x="67.7912%" y="1487.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (112 samples, 0.04%)</title><rect x="67.5412%" y="1461" width="0.0389%" height="15" fill="rgb(233,173,25)"/><text x="67.7912%" y="1471.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (112 samples, 0.04%)</title><rect x="67.5412%" y="1445" width="0.0389%" height="15" fill="rgb(216,63,32)"/><text x="67.7912%" y="1455.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (112 samples, 0.04%)</title><rect x="67.5412%" y="1429" width="0.0389%" height="15" fill="rgb(209,56,45)"/><text x="67.7912%" y="1439.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (59 samples, 0.02%)</title><rect x="67.5596%" y="1413" width="0.0205%" height="15" fill="rgb(226,111,49)"/><text x="67.8096%" y="1423.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::Style as core::clone::Clone&gt;::clone (34 samples, 0.01%)</title><rect x="67.5860%" y="1413" width="0.0118%" height="15" fill="rgb(244,181,21)"/><text x="67.8360%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (67 samples, 0.02%)</title><rect x="67.5860%" y="1429" width="0.0232%" height="15" fill="rgb(222,126,15)"/><text x="67.8360%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (133 samples, 0.05%)</title><rect x="67.5801%" y="1445" width="0.0461%" height="15" fill="rgb(222,95,17)"/><text x="67.8301%" y="1455.50"></text></g><g><title>std::io::Write::write_fmt (49 samples, 0.02%)</title><rect x="67.6092%" y="1429" width="0.0170%" height="15" fill="rgb(254,46,5)"/><text x="67.8592%" y="1439.50"></text></g><g><title>core::fmt::write (49 samples, 0.02%)</title><rect x="67.6092%" y="1413" width="0.0170%" height="15" fill="rgb(236,216,35)"/><text x="67.8592%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (68 samples, 0.02%)</title><rect x="67.6262%" y="1445" width="0.0236%" height="15" fill="rgb(217,187,26)"/><text x="67.8762%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (47 samples, 0.02%)</title><rect x="67.6588%" y="1429" width="0.0163%" height="15" fill="rgb(207,192,25)"/><text x="67.9088%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (104 samples, 0.04%)</title><rect x="67.6498%" y="1445" width="0.0361%" height="15" fill="rgb(253,135,27)"/><text x="67.8998%" y="1455.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::default_styled_level (31 samples, 0.01%)</title><rect x="67.6752%" y="1429" width="0.0108%" height="15" fill="rgb(211,122,29)"/><text x="67.9252%" y="1439.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::default_level_style (31 samples, 0.01%)</title><rect x="67.6752%" y="1413" width="0.0108%" height="15" fill="rgb(233,162,40)"/><text x="67.9252%" y="1423.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::Style as core::clone::Clone&gt;::clone (34 samples, 0.01%)</title><rect x="67.7112%" y="1397" width="0.0118%" height="15" fill="rgb(222,184,47)"/><text x="67.9612%" y="1407.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="67.7282%" y="1365" width="0.0108%" height="15" fill="rgb(249,99,23)"/><text x="67.9782%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place (47 samples, 0.02%)</title><rect x="67.7230%" y="1397" width="0.0163%" height="15" fill="rgb(214,60,12)"/><text x="67.9730%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.01%)</title><rect x="67.7268%" y="1381" width="0.0125%" height="15" fill="rgb(250,229,36)"/><text x="67.9768%" y="1391.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.02%)</title><rect x="67.7425%" y="1381" width="0.0243%" height="15" fill="rgb(232,195,10)"/><text x="67.9925%" y="1391.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (55 samples, 0.02%)</title><rect x="67.7477%" y="1365" width="0.0191%" height="15" fill="rgb(205,213,31)"/><text x="67.9977%" y="1375.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::style (89 samples, 0.03%)</title><rect x="67.7393%" y="1397" width="0.0309%" height="15" fill="rgb(237,43,8)"/><text x="67.9893%" y="1407.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (209 samples, 0.07%)</title><rect x="67.7046%" y="1413" width="0.0725%" height="15" fill="rgb(216,208,3)"/><text x="67.9546%" y="1423.50"></text></g><g><title>core::fmt::write (47 samples, 0.02%)</title><rect x="67.7824%" y="1397" width="0.0163%" height="15" fill="rgb(228,179,44)"/><text x="68.0324%" y="1407.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (639 samples, 0.22%)</title><rect x="67.5801%" y="1493" width="0.2217%" height="15" fill="rgb(230,192,27)"/><text x="67.8301%" y="1503.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (639 samples, 0.22%)</title><rect x="67.5801%" y="1477" width="0.2217%" height="15" fill="rgb(251,30,38)"/><text x="67.8301%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (639 samples, 0.22%)</title><rect x="67.5801%" y="1461" width="0.2217%" height="15" fill="rgb(246,55,52)"/><text x="67.8301%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (320 samples, 0.11%)</title><rect x="67.6908%" y="1445" width="0.1110%" height="15" fill="rgb(249,79,26)"/><text x="67.9408%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (320 samples, 0.11%)</title><rect x="67.6908%" y="1429" width="0.1110%" height="15" fill="rgb(220,202,16)"/><text x="67.9408%" y="1439.50"></text></g><g><title>std::io::Write::write_fmt (71 samples, 0.02%)</title><rect x="67.7772%" y="1413" width="0.0246%" height="15" fill="rgb(250,170,23)"/><text x="68.0272%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (39 samples, 0.01%)</title><rect x="67.8146%" y="1381" width="0.0135%" height="15" fill="rgb(230,7,37)"/><text x="68.0646%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 0.02%)</title><rect x="67.8139%" y="1397" width="0.0170%" height="15" fill="rgb(213,71,1)"/><text x="68.0639%" y="1407.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.01%)</title><rect x="67.8476%" y="1317" width="0.0108%" height="15" fill="rgb(227,87,39)"/><text x="68.0976%" y="1327.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (31 samples, 0.01%)</title><rect x="67.8476%" y="1301" width="0.0108%" height="15" fill="rgb(210,41,29)"/><text x="68.0976%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place (88 samples, 0.03%)</title><rect x="67.8313%" y="1397" width="0.0305%" height="15" fill="rgb(206,191,31)"/><text x="68.0813%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place (78 samples, 0.03%)</title><rect x="67.8348%" y="1381" width="0.0271%" height="15" fill="rgb(247,75,54)"/><text x="68.0848%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place (60 samples, 0.02%)</title><rect x="67.8410%" y="1365" width="0.0208%" height="15" fill="rgb(208,54,50)"/><text x="68.0910%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place (58 samples, 0.02%)</title><rect x="67.8417%" y="1349" width="0.0201%" height="15" fill="rgb(214,90,37)"/><text x="68.0917%" y="1359.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.02%)</title><rect x="67.8431%" y="1333" width="0.0187%" height="15" fill="rgb(220,132,6)"/><text x="68.0931%" y="1343.50"></text></g><g><title>__GI___pthread_mutex_lock (33 samples, 0.01%)</title><rect x="67.8906%" y="1333" width="0.0114%" height="15" fill="rgb(213,167,7)"/><text x="68.1406%" y="1343.50"></text></g><g><title>termcolor::IoStandardStream::lock (74 samples, 0.03%)</title><rect x="67.8799%" y="1397" width="0.0257%" height="15" fill="rgb(243,36,27)"/><text x="68.1299%" y="1407.50"></text></g><g><title>std::io::stdio::Stderr::lock (57 samples, 0.02%)</title><rect x="67.8858%" y="1381" width="0.0198%" height="15" fill="rgb(235,147,12)"/><text x="68.1358%" y="1391.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (43 samples, 0.01%)</title><rect x="67.8906%" y="1365" width="0.0149%" height="15" fill="rgb(212,198,44)"/><text x="68.1406%" y="1375.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (43 samples, 0.01%)</title><rect x="67.8906%" y="1349" width="0.0149%" height="15" fill="rgb(218,68,50)"/><text x="68.1406%" y="1359.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (1,058 samples, 0.37%)</title><rect x="67.5412%" y="1589" width="0.3671%" height="15" fill="rgb(224,79,48)"/><text x="67.7912%" y="1599.50"></text></g><g><title>log::__private_api_log (946 samples, 0.33%)</title><rect x="67.5801%" y="1573" width="0.3282%" height="15" fill="rgb(213,191,50)"/><text x="67.8301%" y="1583.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (946 samples, 0.33%)</title><rect x="67.5801%" y="1557" width="0.3282%" height="15" fill="rgb(254,146,10)"/><text x="67.8301%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (946 samples, 0.33%)</title><rect x="67.5801%" y="1541" width="0.3282%" height="15" fill="rgb(215,175,11)"/><text x="67.8301%" y="1551.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (946 samples, 0.33%)</title><rect x="67.5801%" y="1525" width="0.3282%" height="15" fill="rgb(207,49,7)"/><text x="67.8301%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (946 samples, 0.33%)</title><rect x="67.5801%" y="1509" width="0.3282%" height="15" fill="rgb(234,144,29)"/><text x="67.8301%" y="1519.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (307 samples, 0.11%)</title><rect x="67.8018%" y="1493" width="0.1065%" height="15" fill="rgb(213,222,48)"/><text x="68.0518%" y="1503.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (307 samples, 0.11%)</title><rect x="67.8018%" y="1477" width="0.1065%" height="15" fill="rgb(222,8,6)"/><text x="68.0518%" y="1487.50"></text></g><g><title>env_logger::fmt::Formatter::print (307 samples, 0.11%)</title><rect x="67.8018%" y="1461" width="0.1065%" height="15" fill="rgb(221,114,49)"/><text x="68.0518%" y="1471.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (307 samples, 0.11%)</title><rect x="67.8018%" y="1445" width="0.1065%" height="15" fill="rgb(250,140,42)"/><text x="68.0518%" y="1455.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (307 samples, 0.11%)</title><rect x="67.8018%" y="1429" width="0.1065%" height="15" fill="rgb(250,150,27)"/><text x="68.0518%" y="1439.50"></text></g><g><title>termcolor::BufferWriter::print (307 samples, 0.11%)</title><rect x="67.8018%" y="1413" width="0.1065%" height="15" fill="rgb(252,159,3)"/><text x="68.0518%" y="1423.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (82 samples, 0.03%)</title><rect x="67.9715%" y="1237" width="0.0285%" height="15" fill="rgb(241,182,3)"/><text x="68.2215%" y="1247.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (39 samples, 0.01%)</title><rect x="67.9864%" y="1221" width="0.0135%" height="15" fill="rgb(236,3,9)"/><text x="68.2364%" y="1231.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (49 samples, 0.02%)</title><rect x="67.9999%" y="1237" width="0.0170%" height="15" fill="rgb(223,227,51)"/><text x="68.2499%" y="1247.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (317 samples, 0.11%)</title><rect x="67.9513%" y="1253" width="0.1100%" height="15" fill="rgb(232,133,30)"/><text x="68.2013%" y="1263.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (105 samples, 0.04%)</title><rect x="68.0249%" y="1237" width="0.0364%" height="15" fill="rgb(209,93,27)"/><text x="68.2749%" y="1247.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (41 samples, 0.01%)</title><rect x="68.0471%" y="1221" width="0.0142%" height="15" fill="rgb(208,108,34)"/><text x="68.2971%" y="1231.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (62 samples, 0.02%)</title><rect x="68.0613%" y="1253" width="0.0215%" height="15" fill="rgb(215,189,13)"/><text x="68.3113%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (492 samples, 0.17%)</title><rect x="67.9163%" y="1269" width="0.1707%" height="15" fill="rgb(206,88,23)"/><text x="68.1663%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (512 samples, 0.18%)</title><rect x="67.9163%" y="1285" width="0.1776%" height="15" fill="rgb(240,173,0)"/><text x="68.1663%" y="1295.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (37 samples, 0.01%)</title><rect x="68.1092%" y="1253" width="0.0128%" height="15" fill="rgb(223,106,52)"/><text x="68.3592%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.01%)</title><rect x="68.1220%" y="1253" width="0.0149%" height="15" fill="rgb(206,130,16)"/><text x="68.3720%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 0.01%)</title><rect x="68.1248%" y="1237" width="0.0121%" height="15" fill="rgb(220,54,25)"/><text x="68.3748%" y="1247.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="68.1255%" y="1221" width="0.0114%" height="15" fill="rgb(210,4,38)"/><text x="68.3755%" y="1231.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (137 samples, 0.05%)</title><rect x="68.1033%" y="1269" width="0.0475%" height="15" fill="rgb(238,94,39)"/><text x="68.3533%" y="1279.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (40 samples, 0.01%)</title><rect x="68.1370%" y="1253" width="0.0139%" height="15" fill="rgb(234,124,34)"/><text x="68.3870%" y="1263.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (34 samples, 0.01%)</title><rect x="68.1390%" y="1237" width="0.0118%" height="15" fill="rgb(221,91,40)"/><text x="68.3890%" y="1247.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (722 samples, 0.25%)</title><rect x="67.9163%" y="1333" width="0.2505%" height="15" fill="rgb(246,53,28)"/><text x="68.1663%" y="1343.50"></text></g><g><title>std::io::Write::write_all (722 samples, 0.25%)</title><rect x="67.9163%" y="1317" width="0.2505%" height="15" fill="rgb(229,109,7)"/><text x="68.1663%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (722 samples, 0.25%)</title><rect x="67.9163%" y="1301" width="0.2505%" height="15" fill="rgb(249,117,8)"/><text x="68.1663%" y="1311.50"></text></g><g><title>std::io::Write::write_all (210 samples, 0.07%)</title><rect x="68.0939%" y="1285" width="0.0729%" height="15" fill="rgb(210,181,1)"/><text x="68.3439%" y="1295.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (34 samples, 0.01%)</title><rect x="68.1550%" y="1269" width="0.0118%" height="15" fill="rgb(211,66,1)"/><text x="68.4050%" y="1279.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.01%)</title><rect x="68.1567%" y="1253" width="0.0101%" height="15" fill="rgb(221,90,14)"/><text x="68.4067%" y="1263.50"></text></g><g><title>&lt;tunneler::streams::error::RecvError as core::fmt::Display&gt;::fmt (42 samples, 0.01%)</title><rect x="68.1668%" y="1333" width="0.0146%" height="15" fill="rgb(219,222,44)"/><text x="68.4168%" y="1343.50"></text></g><g><title>core::fmt::Formatter::write_fmt (42 samples, 0.01%)</title><rect x="68.1668%" y="1317" width="0.0146%" height="15" fill="rgb(246,34,33)"/><text x="68.4168%" y="1327.50"></text></g><g><title>core::fmt::write (42 samples, 0.01%)</title><rect x="68.1668%" y="1301" width="0.0146%" height="15" fill="rgb(227,135,41)"/><text x="68.4168%" y="1311.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (42 samples, 0.01%)</title><rect x="68.1668%" y="1285" width="0.0146%" height="15" fill="rgb(226,15,14)"/><text x="68.4168%" y="1295.50"></text></g><g><title>std::io::Write::write_all (42 samples, 0.01%)</title><rect x="68.1668%" y="1269" width="0.0146%" height="15" fill="rgb(236,148,47)"/><text x="68.4168%" y="1279.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (42 samples, 0.01%)</title><rect x="68.1668%" y="1253" width="0.0146%" height="15" fill="rgb(233,162,52)"/><text x="68.4168%" y="1263.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (48 samples, 0.02%)</title><rect x="68.2150%" y="1205" width="0.0167%" height="15" fill="rgb(244,35,28)"/><text x="68.4650%" y="1215.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (37 samples, 0.01%)</title><rect x="68.2317%" y="1205" width="0.0128%" height="15" fill="rgb(205,121,10)"/><text x="68.4817%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 0.07%)</title><rect x="68.2039%" y="1221" width="0.0701%" height="15" fill="rgb(250,58,18)"/><text x="68.4539%" y="1231.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (67 samples, 0.02%)</title><rect x="68.2508%" y="1205" width="0.0232%" height="15" fill="rgb(216,37,13)"/><text x="68.5008%" y="1215.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (57 samples, 0.02%)</title><rect x="68.2740%" y="1221" width="0.0198%" height="15" fill="rgb(221,215,42)"/><text x="68.5240%" y="1231.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (325 samples, 0.11%)</title><rect x="68.1814%" y="1237" width="0.1128%" height="15" fill="rgb(217,214,19)"/><text x="68.4314%" y="1247.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (346 samples, 0.12%)</title><rect x="68.1814%" y="1253" width="0.1200%" height="15" fill="rgb(233,139,13)"/><text x="68.4314%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (62 samples, 0.02%)</title><rect x="68.3059%" y="1237" width="0.0215%" height="15" fill="rgb(247,168,23)"/><text x="68.5559%" y="1247.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1445" width="0.4212%" height="15" fill="rgb(207,202,1)"/><text x="68.1663%" y="1455.50"></text></g><g><title>std::io::Write::write_fmt (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1429" width="0.4212%" height="15" fill="rgb(220,155,48)"/><text x="68.1663%" y="1439.50"></text></g><g><title>core::fmt::write (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1413" width="0.4212%" height="15" fill="rgb(250,43,26)"/><text x="68.1663%" y="1423.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1397" width="0.4212%" height="15" fill="rgb(212,190,23)"/><text x="68.1663%" y="1407.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1381" width="0.4212%" height="15" fill="rgb(216,39,24)"/><text x="68.1663%" y="1391.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1365" width="0.4212%" height="15" fill="rgb(252,113,16)"/><text x="68.1663%" y="1375.50"></text></g><g><title>core::fmt::write (1,214 samples, 0.42%)</title><rect x="67.9163%" y="1349" width="0.4212%" height="15" fill="rgb(208,113,19)"/><text x="68.1663%" y="1359.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (450 samples, 0.16%)</title><rect x="68.1814%" y="1333" width="0.1561%" height="15" fill="rgb(234,107,25)"/><text x="68.4314%" y="1343.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (450 samples, 0.16%)</title><rect x="68.1814%" y="1317" width="0.1561%" height="15" fill="rgb(234,217,51)"/><text x="68.4314%" y="1327.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (450 samples, 0.16%)</title><rect x="68.1814%" y="1301" width="0.1561%" height="15" fill="rgb(251,29,42)"/><text x="68.4314%" y="1311.50"></text></g><g><title>std::io::Write::write_all (450 samples, 0.16%)</title><rect x="68.1814%" y="1285" width="0.1561%" height="15" fill="rgb(221,62,51)"/><text x="68.4314%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (450 samples, 0.16%)</title><rect x="68.1814%" y="1269" width="0.1561%" height="15" fill="rgb(240,192,43)"/><text x="68.4314%" y="1279.50"></text></g><g><title>std::io::Write::write_all (104 samples, 0.04%)</title><rect x="68.3014%" y="1253" width="0.0361%" height="15" fill="rgb(224,157,47)"/><text x="68.5514%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (49 samples, 0.02%)</title><rect x="68.3375%" y="1285" width="0.0170%" height="15" fill="rgb(226,84,45)"/><text x="68.5875%" y="1295.50"></text></g><g><title>&lt;log::Level as core::fmt::Display&gt;::fmt (49 samples, 0.02%)</title><rect x="68.3375%" y="1269" width="0.0170%" height="15" fill="rgb(208,207,23)"/><text x="68.5875%" y="1279.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 0.02%)</title><rect x="68.3375%" y="1253" width="0.0170%" height="15" fill="rgb(253,34,51)"/><text x="68.5875%" y="1263.50"></text></g><g><title>std::io::Write::write_all (49 samples, 0.02%)</title><rect x="68.3375%" y="1237" width="0.0170%" height="15" fill="rgb(227,26,34)"/><text x="68.5875%" y="1247.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (49 samples, 0.02%)</title><rect x="68.3375%" y="1221" width="0.0170%" height="15" fill="rgb(245,75,19)"/><text x="68.5875%" y="1231.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (30 samples, 0.01%)</title><rect x="68.3441%" y="1205" width="0.0104%" height="15" fill="rgb(250,191,31)"/><text x="68.5941%" y="1215.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (30 samples, 0.01%)</title><rect x="68.3441%" y="1189" width="0.0104%" height="15" fill="rgb(224,11,50)"/><text x="68.5941%" y="1199.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (30 samples, 0.01%)</title><rect x="68.3441%" y="1173" width="0.0104%" height="15" fill="rgb(231,171,7)"/><text x="68.5941%" y="1183.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (30 samples, 0.01%)</title><rect x="68.3441%" y="1157" width="0.0104%" height="15" fill="rgb(252,214,10)"/><text x="68.5941%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (30 samples, 0.01%)</title><rect x="68.3441%" y="1141" width="0.0104%" height="15" fill="rgb(249,45,46)"/><text x="68.5941%" y="1151.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (73 samples, 0.03%)</title><rect x="68.3375%" y="1445" width="0.0253%" height="15" fill="rgb(240,173,7)"/><text x="68.5875%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (73 samples, 0.03%)</title><rect x="68.3375%" y="1429" width="0.0253%" height="15" fill="rgb(235,214,13)"/><text x="68.5875%" y="1439.50"></text></g><g><title>std::io::Write::write_fmt (73 samples, 0.03%)</title><rect x="68.3375%" y="1413" width="0.0253%" height="15" fill="rgb(245,156,8)"/><text x="68.5875%" y="1423.50"></text></g><g><title>core::fmt::write (73 samples, 0.03%)</title><rect x="68.3375%" y="1397" width="0.0253%" height="15" fill="rgb(235,46,12)"/><text x="68.5875%" y="1407.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (73 samples, 0.03%)</title><rect x="68.3375%" y="1381" width="0.0253%" height="15" fill="rgb(221,81,14)"/><text x="68.5875%" y="1391.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (73 samples, 0.03%)</title><rect x="68.3375%" y="1365" width="0.0253%" height="15" fill="rgb(238,207,9)"/><text x="68.5875%" y="1375.50"></text></g><g><title>core::fmt::write (73 samples, 0.03%)</title><rect x="68.3375%" y="1349" width="0.0253%" height="15" fill="rgb(224,129,35)"/><text x="68.5875%" y="1359.50"></text></g><g><title>core::fmt::run (73 samples, 0.03%)</title><rect x="68.3375%" y="1333" width="0.0253%" height="15" fill="rgb(243,218,34)"/><text x="68.5875%" y="1343.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (73 samples, 0.03%)</title><rect x="68.3375%" y="1317" width="0.0253%" height="15" fill="rgb(220,166,13)"/><text x="68.5875%" y="1327.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (73 samples, 0.03%)</title><rect x="68.3375%" y="1301" width="0.0253%" height="15" fill="rgb(227,167,49)"/><text x="68.5875%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (31 samples, 0.01%)</title><rect x="68.3743%" y="1221" width="0.0108%" height="15" fill="rgb(234,142,12)"/><text x="68.6243%" y="1231.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (75 samples, 0.03%)</title><rect x="68.3628%" y="1381" width="0.0260%" height="15" fill="rgb(207,100,48)"/><text x="68.6128%" y="1391.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (75 samples, 0.03%)</title><rect x="68.3628%" y="1365" width="0.0260%" height="15" fill="rgb(210,25,14)"/><text x="68.6128%" y="1375.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (75 samples, 0.03%)</title><rect x="68.3628%" y="1349" width="0.0260%" height="15" fill="rgb(246,116,27)"/><text x="68.6128%" y="1359.50"></text></g><g><title>std::io::Write::write_all (75 samples, 0.03%)</title><rect x="68.3628%" y="1333" width="0.0260%" height="15" fill="rgb(214,193,42)"/><text x="68.6128%" y="1343.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (75 samples, 0.03%)</title><rect x="68.3628%" y="1317" width="0.0260%" height="15" fill="rgb(214,122,8)"/><text x="68.6128%" y="1327.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (45 samples, 0.02%)</title><rect x="68.3732%" y="1301" width="0.0156%" height="15" fill="rgb(244,173,18)"/><text x="68.6232%" y="1311.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (45 samples, 0.02%)</title><rect x="68.3732%" y="1285" width="0.0156%" height="15" fill="rgb(232,68,19)"/><text x="68.6232%" y="1295.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (45 samples, 0.02%)</title><rect x="68.3732%" y="1269" width="0.0156%" height="15" fill="rgb(236,224,1)"/><text x="68.6232%" y="1279.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (45 samples, 0.02%)</title><rect x="68.3732%" y="1253" width="0.0156%" height="15" fill="rgb(240,11,8)"/><text x="68.6232%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (45 samples, 0.02%)</title><rect x="68.3732%" y="1237" width="0.0156%" height="15" fill="rgb(244,159,20)"/><text x="68.6232%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,522 samples, 0.88%)</title><rect x="67.5412%" y="1605" width="0.8750%" height="15" fill="rgb(240,223,54)"/><text x="67.7912%" y="1615.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1589" width="0.5079%" height="15" fill="rgb(237,146,5)"/><text x="68.1583%" y="1599.50"></text></g><g><title>log::__private_api_log (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1573" width="0.5079%" height="15" fill="rgb(218,221,32)"/><text x="68.1583%" y="1583.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1557" width="0.5079%" height="15" fill="rgb(244,96,26)"/><text x="68.1583%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1541" width="0.5079%" height="15" fill="rgb(245,184,37)"/><text x="68.1583%" y="1551.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1525" width="0.5079%" height="15" fill="rgb(248,91,47)"/><text x="68.1583%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1509" width="0.5079%" height="15" fill="rgb(243,199,8)"/><text x="68.1583%" y="1519.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1493" width="0.5079%" height="15" fill="rgb(249,12,15)"/><text x="68.1583%" y="1503.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1477" width="0.5079%" height="15" fill="rgb(245,97,12)"/><text x="68.1583%" y="1487.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (1,464 samples, 0.51%)</title><rect x="67.9083%" y="1461" width="0.5079%" height="15" fill="rgb(244,61,1)"/><text x="68.1583%" y="1471.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (154 samples, 0.05%)</title><rect x="68.3628%" y="1445" width="0.0534%" height="15" fill="rgb(222,194,10)"/><text x="68.6128%" y="1455.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (154 samples, 0.05%)</title><rect x="68.3628%" y="1429" width="0.0534%" height="15" fill="rgb(226,178,8)"/><text x="68.6128%" y="1439.50"></text></g><g><title>std::io::Write::write_fmt (154 samples, 0.05%)</title><rect x="68.3628%" y="1413" width="0.0534%" height="15" fill="rgb(241,32,34)"/><text x="68.6128%" y="1423.50"></text></g><g><title>core::fmt::write (154 samples, 0.05%)</title><rect x="68.3628%" y="1397" width="0.0534%" height="15" fill="rgb(254,26,6)"/><text x="68.6128%" y="1407.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (79 samples, 0.03%)</title><rect x="68.3888%" y="1381" width="0.0274%" height="15" fill="rgb(249,71,11)"/><text x="68.6388%" y="1391.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (79 samples, 0.03%)</title><rect x="68.3888%" y="1365" width="0.0274%" height="15" fill="rgb(232,170,27)"/><text x="68.6388%" y="1375.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (70 samples, 0.02%)</title><rect x="68.3920%" y="1349" width="0.0243%" height="15" fill="rgb(214,223,17)"/><text x="68.6420%" y="1359.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (70 samples, 0.02%)</title><rect x="68.3920%" y="1333" width="0.0243%" height="15" fill="rgb(250,18,15)"/><text x="68.6420%" y="1343.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (70 samples, 0.02%)</title><rect x="68.3920%" y="1317" width="0.0243%" height="15" fill="rgb(212,153,51)"/><text x="68.6420%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.04%)</title><rect x="68.5377%" y="1269" width="0.0361%" height="15" fill="rgb(219,194,12)"/><text x="68.7877%" y="1279.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.02%)</title><rect x="68.5526%" y="1253" width="0.0212%" height="15" fill="rgb(212,58,17)"/><text x="68.8026%" y="1263.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (64 samples, 0.02%)</title><rect x="68.5738%" y="1269" width="0.0222%" height="15" fill="rgb(254,5,10)"/><text x="68.8238%" y="1279.50"></text></g><g><title>&lt;tokio::util::linked_list::DrainFilter&lt;T,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.03%)</title><rect x="68.5960%" y="1269" width="0.0305%" height="15" fill="rgb(246,91,7)"/><text x="68.8460%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::take (39 samples, 0.01%)</title><rect x="68.6338%" y="1269" width="0.0135%" height="15" fill="rgb(218,108,49)"/><text x="68.8838%" y="1279.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.01%)</title><rect x="68.6758%" y="1221" width="0.0132%" height="15" fill="rgb(238,123,20)"/><text x="68.9258%" y="1231.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (32 samples, 0.01%)</title><rect x="68.6779%" y="1205" width="0.0111%" height="15" fill="rgb(231,69,23)"/><text x="68.9279%" y="1215.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.05%)</title><rect x="68.6654%" y="1237" width="0.0458%" height="15" fill="rgb(230,209,3)"/><text x="68.9154%" y="1247.50"></text></g><g><title>std::sys_common::poison::Flag::done (64 samples, 0.02%)</title><rect x="68.6890%" y="1221" width="0.0222%" height="15" fill="rgb(231,19,0)"/><text x="68.9390%" y="1231.50"></text></g><g><title>std::thread::panicking (56 samples, 0.02%)</title><rect x="68.6917%" y="1205" width="0.0194%" height="15" fill="rgb(226,192,25)"/><text x="68.9417%" y="1215.50"></text></g><g><title>std::panicking::panicking (48 samples, 0.02%)</title><rect x="68.6945%" y="1189" width="0.0167%" height="15" fill="rgb(223,175,53)"/><text x="68.9445%" y="1199.50"></text></g><g><title>std::panicking::panic_count::is_zero (39 samples, 0.01%)</title><rect x="68.6976%" y="1173" width="0.0135%" height="15" fill="rgb(248,35,51)"/><text x="68.9476%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (34 samples, 0.01%)</title><rect x="68.6994%" y="1157" width="0.0118%" height="15" fill="rgb(230,37,26)"/><text x="68.9494%" y="1167.50"></text></g><g><title>core::mem::drop (185 samples, 0.06%)</title><rect x="68.6473%" y="1269" width="0.0642%" height="15" fill="rgb(206,120,22)"/><text x="68.8973%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place (173 samples, 0.06%)</title><rect x="68.6515%" y="1253" width="0.0600%" height="15" fill="rgb(207,165,28)"/><text x="68.9015%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (283 samples, 0.10%)</title><rect x="68.7115%" y="1269" width="0.0982%" height="15" fill="rgb(226,23,46)"/><text x="68.9615%" y="1279.50"></text></g><g><title>core::mem::take (248 samples, 0.09%)</title><rect x="68.7237%" y="1253" width="0.0860%" height="15" fill="rgb(208,130,44)"/><text x="68.9737%" y="1263.50"></text></g><g><title>core::mem::replace (168 samples, 0.06%)</title><rect x="68.7514%" y="1237" width="0.0583%" height="15" fill="rgb(231,67,8)"/><text x="69.0014%" y="1247.50"></text></g><g><title>core::mem::swap (126 samples, 0.04%)</title><rect x="68.7660%" y="1221" width="0.0437%" height="15" fill="rgb(205,183,22)"/><text x="69.0160%" y="1231.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (105 samples, 0.04%)</title><rect x="68.7733%" y="1205" width="0.0364%" height="15" fill="rgb(224,47,9)"/><text x="69.0233%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place (98 samples, 0.03%)</title><rect x="68.8545%" y="1253" width="0.0340%" height="15" fill="rgb(250,183,49)"/><text x="69.1045%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place (213 samples, 0.07%)</title><rect x="68.8152%" y="1269" width="0.0739%" height="15" fill="rgb(220,151,39)"/><text x="69.0652%" y="1279.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (40 samples, 0.01%)</title><rect x="68.9162%" y="1237" width="0.0139%" height="15" fill="rgb(220,118,20)"/><text x="69.1662%" y="1247.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (29 samples, 0.01%)</title><rect x="68.9301%" y="1237" width="0.0101%" height="15" fill="rgb(231,65,51)"/><text x="69.1801%" y="1247.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (186 samples, 0.06%)</title><rect x="68.8902%" y="1269" width="0.0645%" height="15" fill="rgb(253,125,37)"/><text x="69.1402%" y="1279.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (168 samples, 0.06%)</title><rect x="68.8964%" y="1253" width="0.0583%" height="15" fill="rgb(232,102,6)"/><text x="69.1464%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="68.9804%" y="1237" width="0.0108%" height="15" fill="rgb(251,105,13)"/><text x="69.2304%" y="1247.50"></text></g><g><title>tokio::park::thread::Inner::from_raw (45 samples, 0.02%)</title><rect x="68.9912%" y="1237" width="0.0156%" height="15" fill="rgb(222,179,29)"/><text x="69.2412%" y="1247.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (41 samples, 0.01%)</title><rect x="68.9925%" y="1221" width="0.0142%" height="15" fill="rgb(229,180,53)"/><text x="69.2425%" y="1231.50"></text></g><g><title>select_idle_sibling (45 samples, 0.02%)</title><rect x="69.0803%" y="1061" width="0.0156%" height="15" fill="rgb(238,104,13)"/><text x="69.3303%" y="1071.50"></text></g><g><title>select_idle_sibling.part.0 (29 samples, 0.01%)</title><rect x="69.0859%" y="1045" width="0.0101%" height="15" fill="rgb(210,130,5)"/><text x="69.3359%" y="1055.50"></text></g><g><title>select_task_rq_fair (84 samples, 0.03%)</title><rect x="69.0689%" y="1077" width="0.0291%" height="15" fill="rgb(233,87,49)"/><text x="69.3189%" y="1087.50"></text></g><g><title>update_load_avg (38 samples, 0.01%)</title><rect x="69.1213%" y="1013" width="0.0132%" height="15" fill="rgb(243,34,9)"/><text x="69.3713%" y="1023.50"></text></g><g><title>enqueue_entity (66 samples, 0.02%)</title><rect x="69.1119%" y="1029" width="0.0229%" height="15" fill="rgb(235,225,10)"/><text x="69.3619%" y="1039.50"></text></g><g><title>enqueue_task_fair (91 samples, 0.03%)</title><rect x="69.1077%" y="1045" width="0.0316%" height="15" fill="rgb(212,0,30)"/><text x="69.3577%" y="1055.50"></text></g><g><title>psi_task_change (77 samples, 0.03%)</title><rect x="69.1393%" y="1045" width="0.0267%" height="15" fill="rgb(211,177,0)"/><text x="69.3893%" y="1055.50"></text></g><g><title>activate_task (176 samples, 0.06%)</title><rect x="69.1053%" y="1061" width="0.0611%" height="15" fill="rgb(225,220,11)"/><text x="69.3553%" y="1071.50"></text></g><g><title>ttwu_do_activate (209 samples, 0.07%)</title><rect x="69.1043%" y="1077" width="0.0725%" height="15" fill="rgb(215,10,13)"/><text x="69.3543%" y="1087.50"></text></g><g><title>futex_wake (431 samples, 0.15%)</title><rect x="69.0307%" y="1125" width="0.1495%" height="15" fill="rgb(240,177,14)"/><text x="69.2807%" y="1135.50"></text></g><g><title>wake_up_q (387 samples, 0.13%)</title><rect x="69.0460%" y="1109" width="0.1343%" height="15" fill="rgb(243,7,39)"/><text x="69.2960%" y="1119.50"></text></g><g><title>try_to_wake_up (375 samples, 0.13%)</title><rect x="69.0501%" y="1093" width="0.1301%" height="15" fill="rgb(212,99,0)"/><text x="69.3001%" y="1103.50"></text></g><g><title>__x64_sys_futex (446 samples, 0.15%)</title><rect x="69.0269%" y="1157" width="0.1547%" height="15" fill="rgb(225,162,48)"/><text x="69.2769%" y="1167.50"></text></g><g><title>do_futex (440 samples, 0.15%)</title><rect x="69.0290%" y="1141" width="0.1527%" height="15" fill="rgb(246,16,25)"/><text x="69.2790%" y="1151.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (462 samples, 0.16%)</title><rect x="69.0224%" y="1189" width="0.1603%" height="15" fill="rgb(220,150,2)"/><text x="69.2724%" y="1199.50"></text></g><g><title>do_syscall_64 (456 samples, 0.16%)</title><rect x="69.0245%" y="1173" width="0.1582%" height="15" fill="rgb(237,113,11)"/><text x="69.2745%" y="1183.50"></text></g><g><title>__pthread_cond_signal (493 samples, 0.17%)</title><rect x="69.0127%" y="1221" width="0.1710%" height="15" fill="rgb(236,70,20)"/><text x="69.2627%" y="1231.50"></text></g><g><title>futex_wake (467 samples, 0.16%)</title><rect x="69.0217%" y="1205" width="0.1620%" height="15" fill="rgb(234,94,7)"/><text x="69.2717%" y="1215.50"></text></g><g><title>tokio::park::thread::wake (649 samples, 0.23%)</title><rect x="68.9703%" y="1253" width="0.2252%" height="15" fill="rgb(250,221,0)"/><text x="69.2203%" y="1263.50"></text></g><g><title>tokio::park::thread::Inner::unpark (544 samples, 0.19%)</title><rect x="69.0068%" y="1237" width="0.1887%" height="15" fill="rgb(245,149,46)"/><text x="69.2568%" y="1247.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (38 samples, 0.01%)</title><rect x="69.2129%" y="1221" width="0.0132%" height="15" fill="rgb(215,37,27)"/><text x="69.4629%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::from_raw (60 samples, 0.02%)</title><rect x="69.2056%" y="1237" width="0.0208%" height="15" fill="rgb(232,65,3)"/><text x="69.4556%" y="1247.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (66 samples, 0.02%)</title><rect x="69.2319%" y="1221" width="0.0229%" height="15" fill="rgb(214,2,16)"/><text x="69.4819%" y="1231.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (44 samples, 0.02%)</title><rect x="69.2396%" y="1205" width="0.0153%" height="15" fill="rgb(227,131,50)"/><text x="69.4896%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (71 samples, 0.02%)</title><rect x="69.2698%" y="1205" width="0.0246%" height="15" fill="rgb(247,131,45)"/><text x="69.5198%" y="1215.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (45 samples, 0.02%)</title><rect x="69.2788%" y="1189" width="0.0156%" height="15" fill="rgb(215,97,47)"/><text x="69.5288%" y="1199.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::header (33 samples, 0.01%)</title><rect x="69.3034%" y="1205" width="0.0114%" height="15" fill="rgb(233,143,12)"/><text x="69.5534%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::to_task (96 samples, 0.03%)</title><rect x="69.3149%" y="1205" width="0.0333%" height="15" fill="rgb(222,57,17)"/><text x="69.5649%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::to_task (71 samples, 0.02%)</title><rect x="69.3235%" y="1189" width="0.0246%" height="15" fill="rgb(214,119,38)"/><text x="69.5735%" y="1199.50"></text></g><g><title>core::task::wake::Waker::wake (1,220 samples, 0.42%)</title><rect x="68.9547%" y="1269" width="0.4233%" height="15" fill="rgb(217,28,47)"/><text x="69.2047%" y="1279.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (526 samples, 0.18%)</title><rect x="69.1955%" y="1253" width="0.1825%" height="15" fill="rgb(231,14,52)"/><text x="69.4455%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (437 samples, 0.15%)</title><rect x="69.2264%" y="1237" width="0.1516%" height="15" fill="rgb(220,158,18)"/><text x="69.4764%" y="1247.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (355 samples, 0.12%)</title><rect x="69.2548%" y="1221" width="0.1232%" height="15" fill="rgb(222,143,46)"/><text x="69.5048%" y="1231.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified (86 samples, 0.03%)</title><rect x="69.3482%" y="1205" width="0.0298%" height="15" fill="rgb(227,165,5)"/><text x="69.5982%" y="1215.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::will_need_queueing (38 samples, 0.01%)</title><rect x="69.3648%" y="1189" width="0.0132%" height="15" fill="rgb(216,222,49)"/><text x="69.6148%" y="1199.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (45 samples, 0.02%)</title><rect x="69.3947%" y="1237" width="0.0156%" height="15" fill="rgb(238,73,39)"/><text x="69.6447%" y="1247.50"></text></g><g><title>tokio::io::driver::ready::Ready::contains (80 samples, 0.03%)</title><rect x="69.3863%" y="1253" width="0.0278%" height="15" fill="rgb(252,115,9)"/><text x="69.6363%" y="1263.50"></text></g><g><title>tokio::io::driver::ready::Ready::is_readable (112 samples, 0.04%)</title><rect x="69.3794%" y="1269" width="0.0389%" height="15" fill="rgb(238,202,4)"/><text x="69.6294%" y="1279.50"></text></g><g><title>tokio::io::driver::ready::Ready::contains (30 samples, 0.01%)</title><rect x="69.4266%" y="1253" width="0.0104%" height="15" fill="rgb(252,153,44)"/><text x="69.6766%" y="1263.50"></text></g><g><title>tokio::io::driver::ready::Ready::is_writable (63 samples, 0.02%)</title><rect x="69.4183%" y="1269" width="0.0219%" height="15" fill="rgb(235,128,27)"/><text x="69.6683%" y="1279.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (67 samples, 0.02%)</title><rect x="69.4592%" y="1237" width="0.0232%" height="15" fill="rgb(221,121,47)"/><text x="69.7092%" y="1247.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (40 samples, 0.01%)</title><rect x="69.4686%" y="1221" width="0.0139%" height="15" fill="rgb(247,211,47)"/><text x="69.7186%" y="1231.50"></text></g><g><title>__GI___pthread_mutex_lock (59 samples, 0.02%)</title><rect x="69.4890%" y="1205" width="0.0205%" height="15" fill="rgb(252,47,49)"/><text x="69.7390%" y="1215.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (235 samples, 0.08%)</title><rect x="69.4401%" y="1269" width="0.0815%" height="15" fill="rgb(219,119,53)"/><text x="69.6901%" y="1279.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (205 samples, 0.07%)</title><rect x="69.4505%" y="1253" width="0.0711%" height="15" fill="rgb(243,165,53)"/><text x="69.7005%" y="1263.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (113 samples, 0.04%)</title><rect x="69.4824%" y="1237" width="0.0392%" height="15" fill="rgb(230,12,35)"/><text x="69.7324%" y="1247.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (104 samples, 0.04%)</title><rect x="69.4856%" y="1221" width="0.0361%" height="15" fill="rgb(239,57,49)"/><text x="69.7356%" y="1231.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (3,189 samples, 1.11%)</title><rect x="68.4228%" y="1365" width="1.1064%" height="15" fill="rgb(231,154,7)"/><text x="68.6728%" y="1375.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (3,189 samples, 1.11%)</title><rect x="68.4228%" y="1349" width="1.1064%" height="15" fill="rgb(248,81,34)"/><text x="68.6728%" y="1359.50"></text></g><g><title>tokio::io::driver::Driver::turn (3,189 samples, 1.11%)</title><rect x="68.4228%" y="1333" width="1.1064%" height="15" fill="rgb(247,9,5)"/><text x="68.6728%" y="1343.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (3,189 samples, 1.11%)</title><rect x="68.4228%" y="1317" width="1.1064%" height="15" fill="rgb(228,172,27)"/><text x="68.6728%" y="1327.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (3,189 samples, 1.11%)</title><rect x="68.4228%" y="1301" width="1.1064%" height="15" fill="rgb(230,57,44)"/><text x="68.6728%" y="1311.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (3,189 samples, 1.11%)</title><rect x="68.4228%" y="1285" width="1.1064%" height="15" fill="rgb(249,35,22)"/><text x="68.6728%" y="1295.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll (57 samples, 0.02%)</title><rect x="69.5293%" y="1333" width="0.0198%" height="15" fill="rgb(250,137,27)"/><text x="69.7793%" y="1343.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (57 samples, 0.02%)</title><rect x="69.5293%" y="1317" width="0.0198%" height="15" fill="rgb(251,57,31)"/><text x="69.7793%" y="1327.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (57 samples, 0.02%)</title><rect x="69.5293%" y="1301" width="0.0198%" height="15" fill="rgb(238,60,0)"/><text x="69.7793%" y="1311.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_occupied_slot (44 samples, 0.02%)</title><rect x="69.5338%" y="1285" width="0.0153%" height="15" fill="rgb(242,185,39)"/><text x="69.7838%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1509" width="1.1332%" height="15" fill="rgb(240,63,43)"/><text x="68.6728%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1493" width="1.1332%" height="15" fill="rgb(236,155,6)"/><text x="68.6728%" y="1503.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1477" width="1.1332%" height="15" fill="rgb(215,11,29)"/><text x="68.6728%" y="1487.50"></text></g><g><title>tokio::runtime::park::Inner::park (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1461" width="1.1332%" height="15" fill="rgb(228,180,48)"/><text x="68.6728%" y="1471.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1445" width="1.1332%" height="15" fill="rgb(241,102,12)"/><text x="68.6728%" y="1455.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1429" width="1.1332%" height="15" fill="rgb(246,213,4)"/><text x="68.6728%" y="1439.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1413" width="1.1332%" height="15" fill="rgb(218,134,35)"/><text x="68.6728%" y="1423.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1397" width="1.1332%" height="15" fill="rgb(251,117,35)"/><text x="68.6728%" y="1407.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (3,266 samples, 1.13%)</title><rect x="68.4228%" y="1381" width="1.1332%" height="15" fill="rgb(206,156,45)"/><text x="68.6728%" y="1391.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (77 samples, 0.03%)</title><rect x="69.5293%" y="1365" width="0.0267%" height="15" fill="rgb(218,52,27)"/><text x="69.7793%" y="1375.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (77 samples, 0.03%)</title><rect x="69.5293%" y="1349" width="0.0267%" height="15" fill="rgb(238,83,36)"/><text x="69.7793%" y="1359.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (185 samples, 0.06%)</title><rect x="69.5560%" y="1045" width="0.0642%" height="15" fill="rgb(218,53,43)"/><text x="69.8060%" y="1055.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (185 samples, 0.06%)</title><rect x="69.5560%" y="1029" width="0.0642%" height="15" fill="rgb(239,54,39)"/><text x="69.8060%" y="1039.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (213 samples, 0.07%)</title><rect x="69.5560%" y="1125" width="0.0739%" height="15" fill="rgb(212,198,13)"/><text x="69.8060%" y="1135.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (213 samples, 0.07%)</title><rect x="69.5560%" y="1109" width="0.0739%" height="15" fill="rgb(234,54,46)"/><text x="69.8060%" y="1119.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (213 samples, 0.07%)</title><rect x="69.5560%" y="1093" width="0.0739%" height="15" fill="rgb(217,120,7)"/><text x="69.8060%" y="1103.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (213 samples, 0.07%)</title><rect x="69.5560%" y="1077" width="0.0739%" height="15" fill="rgb(246,39,15)"/><text x="69.8060%" y="1087.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (213 samples, 0.07%)</title><rect x="69.5560%" y="1061" width="0.0739%" height="15" fill="rgb(242,143,31)"/><text x="69.8060%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (39 samples, 0.01%)</title><rect x="69.6299%" y="1045" width="0.0135%" height="15" fill="rgb(252,60,24)"/><text x="69.8799%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.01%)</title><rect x="69.6299%" y="1029" width="0.0135%" height="15" fill="rgb(249,220,7)"/><text x="69.8799%" y="1039.50"></text></g><g><title>alloc::alloc::alloc_zeroed (39 samples, 0.01%)</title><rect x="69.6299%" y="1013" width="0.0135%" height="15" fill="rgb(236,67,13)"/><text x="69.8799%" y="1023.50"></text></g><g><title>__libc_calloc (39 samples, 0.01%)</title><rect x="69.6299%" y="997" width="0.0135%" height="15" fill="rgb(210,62,39)"/><text x="69.8799%" y="1007.50"></text></g><g><title>_int_malloc (39 samples, 0.01%)</title><rect x="69.6299%" y="981" width="0.0135%" height="15" fill="rgb(219,122,53)"/><text x="69.8799%" y="991.50"></text></g><g><title>malloc_consolidate (39 samples, 0.01%)</title><rect x="69.6299%" y="965" width="0.0135%" height="15" fill="rgb(218,87,25)"/><text x="69.8799%" y="975.50"></text></g><g><title>alloc::vec::from_elem (46 samples, 0.02%)</title><rect x="69.6299%" y="1125" width="0.0160%" height="15" fill="rgb(234,179,48)"/><text x="69.8799%" y="1135.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (46 samples, 0.02%)</title><rect x="69.6299%" y="1109" width="0.0160%" height="15" fill="rgb(248,90,0)"/><text x="69.8799%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (46 samples, 0.02%)</title><rect x="69.6299%" y="1093" width="0.0160%" height="15" fill="rgb(207,228,37)"/><text x="69.8799%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (46 samples, 0.02%)</title><rect x="69.6299%" y="1077" width="0.0160%" height="15" fill="rgb(235,214,15)"/><text x="69.8799%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.02%)</title><rect x="69.6299%" y="1061" width="0.0160%" height="15" fill="rgb(210,144,39)"/><text x="69.8799%" y="1071.50"></text></g><g><title>mio::io_source::SelectorId::remove_association (37 samples, 0.01%)</title><rect x="69.6462%" y="933" width="0.0128%" height="15" fill="rgb(222,67,41)"/><text x="69.8962%" y="943.50"></text></g><g><title>kmem_cache_free (47 samples, 0.02%)</title><rect x="69.7239%" y="821" width="0.0163%" height="15" fill="rgb(205,35,37)"/><text x="69.9739%" y="831.50"></text></g><g><title>ep_remove (135 samples, 0.05%)</title><rect x="69.6972%" y="853" width="0.0468%" height="15" fill="rgb(216,125,40)"/><text x="69.9472%" y="863.50"></text></g><g><title>ep_unregister_pollwait.isra.0 (88 samples, 0.03%)</title><rect x="69.7135%" y="837" width="0.0305%" height="15" fill="rgb(228,227,20)"/><text x="69.9635%" y="847.50"></text></g><g><title>__x64_sys_epoll_ctl (260 samples, 0.09%)</title><rect x="69.6705%" y="869" width="0.0902%" height="15" fill="rgb(242,173,45)"/><text x="69.9205%" y="879.50"></text></g><g><title>do_syscall_64 (272 samples, 0.09%)</title><rect x="69.6681%" y="885" width="0.0944%" height="15" fill="rgb(215,79,24)"/><text x="69.9181%" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (282 samples, 0.10%)</title><rect x="69.6649%" y="901" width="0.0978%" height="15" fill="rgb(238,164,38)"/><text x="69.9149%" y="911.50"></text></g><g><title>__GI_epoll_ctl (292 samples, 0.10%)</title><rect x="69.6618%" y="917" width="0.1013%" height="15" fill="rgb(245,196,38)"/><text x="69.9118%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (345 samples, 0.12%)</title><rect x="69.6459%" y="1125" width="0.1197%" height="15" fill="rgb(231,217,29)"/><text x="69.8959%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place (345 samples, 0.12%)</title><rect x="69.6459%" y="1109" width="0.1197%" height="15" fill="rgb(245,6,4)"/><text x="69.8959%" y="1119.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (345 samples, 0.12%)</title><rect x="69.6459%" y="1093" width="0.1197%" height="15" fill="rgb(214,76,49)"/><text x="69.8959%" y="1103.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (345 samples, 0.12%)</title><rect x="69.6459%" y="1077" width="0.1197%" height="15" fill="rgb(205,96,12)"/><text x="69.8959%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (345 samples, 0.12%)</title><rect x="69.6459%" y="1061" width="0.1197%" height="15" fill="rgb(243,131,4)"/><text x="69.8959%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (345 samples, 0.12%)</title><rect x="69.6459%" y="1045" width="0.1197%" height="15" fill="rgb(214,114,4)"/><text x="69.8959%" y="1055.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (345 samples, 0.12%)</title><rect x="69.6459%" y="1029" width="0.1197%" height="15" fill="rgb(234,215,15)"/><text x="69.8959%" y="1039.50"></text></g><g><title>tokio::io::driver::registration::Registration::deregister (345 samples, 0.12%)</title><rect x="69.6459%" y="1013" width="0.1197%" height="15" fill="rgb(250,216,45)"/><text x="69.8959%" y="1023.50"></text></g><g><title>tokio::io::driver::Inner::deregister_source (345 samples, 0.12%)</title><rect x="69.6459%" y="997" width="0.1197%" height="15" fill="rgb(236,128,4)"/><text x="69.8959%" y="1007.50"></text></g><g><title>mio::poll::Registry::deregister (345 samples, 0.12%)</title><rect x="69.6459%" y="981" width="0.1197%" height="15" fill="rgb(234,50,33)"/><text x="69.8959%" y="991.50"></text></g><g><title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::deregister (345 samples, 0.12%)</title><rect x="69.6459%" y="965" width="0.1197%" height="15" fill="rgb(253,131,37)"/><text x="69.8959%" y="975.50"></text></g><g><title>&lt;mio::io_source::IoSource&lt;T&gt; as mio::event::source::Source&gt;::deregister (345 samples, 0.12%)</title><rect x="69.6459%" y="949" width="0.1197%" height="15" fill="rgb(218,55,27)"/><text x="69.8959%" y="959.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::deregister (307 samples, 0.11%)</title><rect x="69.6590%" y="933" width="0.1065%" height="15" fill="rgb(241,220,28)"/><text x="69.9090%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (69 samples, 0.02%)</title><rect x="69.7690%" y="901" width="0.0239%" height="15" fill="rgb(241,90,48)"/><text x="70.0190%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (59 samples, 0.02%)</title><rect x="69.7725%" y="885" width="0.0205%" height="15" fill="rgb(216,43,37)"/><text x="70.0225%" y="895.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (798 samples, 0.28%)</title><rect x="69.5560%" y="1141" width="0.2769%" height="15" fill="rgb(207,173,9)"/><text x="69.8060%" y="1151.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (194 samples, 0.07%)</title><rect x="69.7656%" y="1125" width="0.0673%" height="15" fill="rgb(240,126,30)"/><text x="70.0156%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (194 samples, 0.07%)</title><rect x="69.7656%" y="1109" width="0.0673%" height="15" fill="rgb(228,178,53)"/><text x="70.0156%" y="1119.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (194 samples, 0.07%)</title><rect x="69.7656%" y="1093" width="0.0673%" height="15" fill="rgb(217,33,4)"/><text x="70.0156%" y="1103.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (194 samples, 0.07%)</title><rect x="69.7656%" y="1077" width="0.0673%" height="15" fill="rgb(206,124,34)"/><text x="70.0156%" y="1087.50"></text></g><g><title>core::task::wake::Waker::wake (194 samples, 0.07%)</title><rect x="69.7656%" y="1061" width="0.0673%" height="15" fill="rgb(208,122,53)"/><text x="70.0156%" y="1071.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (194 samples, 0.07%)</title><rect x="69.7656%" y="1045" width="0.0673%" height="15" fill="rgb(215,202,26)"/><text x="70.0156%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (194 samples, 0.07%)</title><rect x="69.7656%" y="1029" width="0.0673%" height="15" fill="rgb(232,198,31)"/><text x="70.0156%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (194 samples, 0.07%)</title><rect x="69.7656%" y="1013" width="0.0673%" height="15" fill="rgb(222,23,35)"/><text x="70.0156%" y="1023.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (194 samples, 0.07%)</title><rect x="69.7656%" y="997" width="0.0673%" height="15" fill="rgb(242,27,53)"/><text x="70.0156%" y="1007.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (194 samples, 0.07%)</title><rect x="69.7656%" y="981" width="0.0673%" height="15" fill="rgb(210,216,42)"/><text x="70.0156%" y="991.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (194 samples, 0.07%)</title><rect x="69.7656%" y="965" width="0.0673%" height="15" fill="rgb(234,39,38)"/><text x="70.0156%" y="975.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (194 samples, 0.07%)</title><rect x="69.7656%" y="949" width="0.0673%" height="15" fill="rgb(235,126,54)"/><text x="70.0156%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (194 samples, 0.07%)</title><rect x="69.7656%" y="933" width="0.0673%" height="15" fill="rgb(235,150,33)"/><text x="70.0156%" y="943.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (194 samples, 0.07%)</title><rect x="69.7656%" y="917" width="0.0673%" height="15" fill="rgb(249,49,53)"/><text x="70.0156%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (115 samples, 0.04%)</title><rect x="69.7930%" y="901" width="0.0399%" height="15" fill="rgb(238,60,50)"/><text x="70.0430%" y="911.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (35 samples, 0.01%)</title><rect x="69.8207%" y="885" width="0.0121%" height="15" fill="rgb(210,5,2)"/><text x="70.0707%" y="895.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::DerefMut&gt;::deref_mut (29 samples, 0.01%)</title><rect x="69.8329%" y="1045" width="0.0101%" height="15" fill="rgb(214,207,24)"/><text x="70.0829%" y="1055.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.02%)</title><rect x="69.8787%" y="997" width="0.0208%" height="15" fill="rgb(228,173,2)"/><text x="70.1287%" y="1007.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (43 samples, 0.01%)</title><rect x="69.8846%" y="981" width="0.0149%" height="15" fill="rgb(244,26,8)"/><text x="70.1346%" y="991.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (29 samples, 0.01%)</title><rect x="69.8894%" y="965" width="0.0101%" height="15" fill="rgb(249,153,35)"/><text x="70.1394%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (36 samples, 0.01%)</title><rect x="69.9262%" y="965" width="0.0125%" height="15" fill="rgb(221,215,40)"/><text x="70.1762%" y="975.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (124 samples, 0.04%)</title><rect x="69.9123%" y="981" width="0.0430%" height="15" fill="rgb(238,106,35)"/><text x="70.1623%" y="991.50"></text></g><g><title>tokio::coop::Budget::is_unconstrained (48 samples, 0.02%)</title><rect x="69.9387%" y="965" width="0.0167%" height="15" fill="rgb(207,195,21)"/><text x="70.1887%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (41 samples, 0.01%)</title><rect x="69.9411%" y="949" width="0.0142%" height="15" fill="rgb(205,43,29)"/><text x="70.1911%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (162 samples, 0.06%)</title><rect x="69.8995%" y="997" width="0.0562%" height="15" fill="rgb(236,35,21)"/><text x="70.1495%" y="1007.50"></text></g><g><title>tokio::coop::poll_proceed (184 samples, 0.06%)</title><rect x="69.9560%" y="997" width="0.0638%" height="15" fill="rgb(244,74,8)"/><text x="70.2060%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (160 samples, 0.06%)</title><rect x="69.9644%" y="981" width="0.0555%" height="15" fill="rgb(241,229,7)"/><text x="70.2144%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (112 samples, 0.04%)</title><rect x="69.9810%" y="965" width="0.0389%" height="15" fill="rgb(212,223,25)"/><text x="70.2310%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (580 samples, 0.20%)</title><rect x="69.8329%" y="1125" width="0.2012%" height="15" fill="rgb(234,58,53)"/><text x="70.0829%" y="1135.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (580 samples, 0.20%)</title><rect x="69.8329%" y="1109" width="0.2012%" height="15" fill="rgb(244,36,1)"/><text x="70.0829%" y="1119.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (580 samples, 0.20%)</title><rect x="69.8329%" y="1093" width="0.2012%" height="15" fill="rgb(222,40,54)"/><text x="70.0829%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (580 samples, 0.20%)</title><rect x="69.8329%" y="1077" width="0.2012%" height="15" fill="rgb(210,207,39)"/><text x="70.0829%" y="1087.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (580 samples, 0.20%)</title><rect x="69.8329%" y="1061" width="0.2012%" height="15" fill="rgb(234,52,14)"/><text x="70.0829%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (551 samples, 0.19%)</title><rect x="69.8429%" y="1045" width="0.1912%" height="15" fill="rgb(239,108,46)"/><text x="70.0929%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (526 samples, 0.18%)</title><rect x="69.8516%" y="1029" width="0.1825%" height="15" fill="rgb(252,223,5)"/><text x="70.1016%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (506 samples, 0.18%)</title><rect x="69.8585%" y="1013" width="0.1756%" height="15" fill="rgb(227,181,11)"/><text x="70.1085%" y="1023.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (41 samples, 0.01%)</title><rect x="70.0199%" y="997" width="0.0142%" height="15" fill="rgb(248,126,40)"/><text x="70.2699%" y="1007.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (51 samples, 0.02%)</title><rect x="70.0494%" y="1013" width="0.0177%" height="15" fill="rgb(243,1,18)"/><text x="70.2994%" y="1023.50"></text></g><g><title>apparmor_socket_sendmsg (35 samples, 0.01%)</title><rect x="70.1666%" y="789" width="0.0121%" height="15" fill="rgb(214,145,23)"/><text x="70.4166%" y="799.50"></text></g><g><title>_cond_resched (47 samples, 0.02%)</title><rect x="70.2166%" y="725" width="0.0163%" height="15" fill="rgb(241,218,11)"/><text x="70.4666%" y="735.50"></text></g><g><title>preempt_schedule_common (46 samples, 0.02%)</title><rect x="70.2170%" y="709" width="0.0160%" height="15" fill="rgb(214,219,24)"/><text x="70.4670%" y="719.50"></text></g><g><title>__sched_text_start (46 samples, 0.02%)</title><rect x="70.2170%" y="693" width="0.0160%" height="15" fill="rgb(235,32,7)"/><text x="70.4670%" y="703.50"></text></g><g><title>skb_release_all (34 samples, 0.01%)</title><rect x="70.3422%" y="645" width="0.0118%" height="15" fill="rgb(227,121,28)"/><text x="70.5922%" y="655.50"></text></g><g><title>__kfree_skb (58 samples, 0.02%)</title><rect x="70.3353%" y="661" width="0.0201%" height="15" fill="rgb(216,129,49)"/><text x="70.5853%" y="671.50"></text></g><g><title>tcp_ack_update_rtt.isra.0 (30 samples, 0.01%)</title><rect x="70.3654%" y="661" width="0.0104%" height="15" fill="rgb(207,194,50)"/><text x="70.6154%" y="671.50"></text></g><g><title>tcp_clean_rtx_queue (219 samples, 0.08%)</title><rect x="70.3058%" y="677" width="0.0760%" height="15" fill="rgb(207,4,18)"/><text x="70.5558%" y="687.50"></text></g><g><title>tcp_ack (407 samples, 0.14%)</title><rect x="70.2627%" y="693" width="0.1412%" height="15" fill="rgb(213,50,30)"/><text x="70.5127%" y="703.50"></text></g><g><title>skb_release_data (34 samples, 0.01%)</title><rect x="70.4220%" y="645" width="0.0118%" height="15" fill="rgb(208,77,22)"/><text x="70.6720%" y="655.50"></text></g><g><title>skb_release_all (46 samples, 0.02%)</title><rect x="70.4189%" y="661" width="0.0160%" height="15" fill="rgb(244,204,34)"/><text x="70.6689%" y="671.50"></text></g><g><title>__kfree_skb (79 samples, 0.03%)</title><rect x="70.4081%" y="677" width="0.0274%" height="15" fill="rgb(230,20,17)"/><text x="70.6581%" y="687.50"></text></g><g><title>tcp_data_queue (93 samples, 0.03%)</title><rect x="70.4047%" y="693" width="0.0323%" height="15" fill="rgb(237,83,15)"/><text x="70.6547%" y="703.50"></text></g><g><title>tcp_rcv_established (599 samples, 0.21%)</title><rect x="70.2451%" y="709" width="0.2078%" height="15" fill="rgb(221,109,25)"/><text x="70.4951%" y="719.50"></text></g><g><title>__release_sock (705 samples, 0.24%)</title><rect x="70.2090%" y="741" width="0.2446%" height="15" fill="rgb(205,194,52)"/><text x="70.4590%" y="751.50"></text></g><g><title>tcp_v4_do_rcv (624 samples, 0.22%)</title><rect x="70.2371%" y="725" width="0.2165%" height="15" fill="rgb(244,173,54)"/><text x="70.4871%" y="735.50"></text></g><g><title>release_sock (749 samples, 0.26%)</title><rect x="70.2041%" y="757" width="0.2599%" height="15" fill="rgb(227,181,18)"/><text x="70.4541%" y="767.50"></text></g><g><title>__check_object_size (30 samples, 0.01%)</title><rect x="70.5185%" y="741" width="0.0104%" height="15" fill="rgb(238,36,30)"/><text x="70.7685%" y="751.50"></text></g><g><title>copy_user_generic_string (150 samples, 0.05%)</title><rect x="70.5434%" y="725" width="0.0520%" height="15" fill="rgb(254,85,0)"/><text x="70.7934%" y="735.50"></text></g><g><title>_copy_from_iter_full (171 samples, 0.06%)</title><rect x="70.5386%" y="741" width="0.0593%" height="15" fill="rgb(247,63,33)"/><text x="70.7886%" y="751.50"></text></g><g><title>sk_page_frag_refill (46 samples, 0.02%)</title><rect x="70.6097%" y="741" width="0.0160%" height="15" fill="rgb(220,7,54)"/><text x="70.8597%" y="751.50"></text></g><g><title>skb_page_frag_refill (44 samples, 0.02%)</title><rect x="70.6104%" y="725" width="0.0153%" height="15" fill="rgb(238,227,21)"/><text x="70.8604%" y="735.50"></text></g><g><title>__kmalloc_node_track_caller (58 samples, 0.02%)</title><rect x="70.6399%" y="693" width="0.0201%" height="15" fill="rgb(237,29,31)"/><text x="70.8899%" y="703.50"></text></g><g><title>memset (40 samples, 0.01%)</title><rect x="70.6652%" y="693" width="0.0139%" height="15" fill="rgb(211,21,50)"/><text x="70.9152%" y="703.50"></text></g><g><title>__kmalloc_reserve.isra.0 (121 samples, 0.04%)</title><rect x="70.6378%" y="709" width="0.0420%" height="15" fill="rgb(239,119,2)"/><text x="70.8878%" y="719.50"></text></g><g><title>kmem_cache_alloc_node (67 samples, 0.02%)</title><rect x="70.6833%" y="709" width="0.0232%" height="15" fill="rgb(250,2,39)"/><text x="70.9333%" y="719.50"></text></g><g><title>__ksize (29 samples, 0.01%)</title><rect x="70.7065%" y="693" width="0.0101%" height="15" fill="rgb(244,46,53)"/><text x="70.9565%" y="703.50"></text></g><g><title>ksize (30 samples, 0.01%)</title><rect x="70.7065%" y="709" width="0.0104%" height="15" fill="rgb(209,21,19)"/><text x="70.9565%" y="719.50"></text></g><g><title>memset (33 samples, 0.01%)</title><rect x="70.7186%" y="709" width="0.0114%" height="15" fill="rgb(236,145,4)"/><text x="70.9686%" y="719.50"></text></g><g><title>__alloc_skb (287 samples, 0.10%)</title><rect x="70.6316%" y="725" width="0.0996%" height="15" fill="rgb(220,133,36)"/><text x="70.8816%" y="735.50"></text></g><g><title>sk_stream_alloc_skb (310 samples, 0.11%)</title><rect x="70.6257%" y="741" width="0.1076%" height="15" fill="rgb(244,18,3)"/><text x="70.8757%" y="751.50"></text></g><g><title>skb_entail (34 samples, 0.01%)</title><rect x="70.7332%" y="741" width="0.0118%" height="15" fill="rgb(232,171,48)"/><text x="70.9832%" y="751.50"></text></g><g><title>iptable_filter_hook (52 samples, 0.02%)</title><rect x="70.8814%" y="597" width="0.0180%" height="15" fill="rgb(223,223,53)"/><text x="71.1314%" y="607.50"></text></g><g><title>ipt_do_table (51 samples, 0.02%)</title><rect x="70.8817%" y="581" width="0.0177%" height="15" fill="rgb(246,92,13)"/><text x="71.1317%" y="591.50"></text></g><g><title>__nf_conntrack_find_get (130 samples, 0.05%)</title><rect x="70.9234%" y="565" width="0.0451%" height="15" fill="rgb(229,171,10)"/><text x="71.1734%" y="575.50"></text></g><g><title>nf_conntrack_tcp_packet (180 samples, 0.06%)</title><rect x="70.9813%" y="565" width="0.0625%" height="15" fill="rgb(213,131,26)"/><text x="71.2313%" y="575.50"></text></g><g><title>tcp_in_window (98 samples, 0.03%)</title><rect x="71.0097%" y="549" width="0.0340%" height="15" fill="rgb(242,87,54)"/><text x="71.2597%" y="559.50"></text></g><g><title>nf_ct_seq_offset (41 samples, 0.01%)</title><rect x="71.0295%" y="533" width="0.0142%" height="15" fill="rgb(237,21,35)"/><text x="71.2795%" y="543.50"></text></g><g><title>nf_conntrack_in (403 samples, 0.14%)</title><rect x="70.9112%" y="581" width="0.1398%" height="15" fill="rgb(253,13,47)"/><text x="71.1612%" y="591.50"></text></g><g><title>ipv4_conntrack_local (424 samples, 0.15%)</title><rect x="70.9057%" y="597" width="0.1471%" height="15" fill="rgb(215,122,49)"/><text x="71.1557%" y="607.50"></text></g><g><title>nf_hook_slow (585 samples, 0.20%)</title><rect x="70.8710%" y="613" width="0.2030%" height="15" fill="rgb(209,179,30)"/><text x="71.1210%" y="623.50"></text></g><g><title>nf_nat_ipv4_local_fn (40 samples, 0.01%)</title><rect x="71.0601%" y="597" width="0.0139%" height="15" fill="rgb(235,100,24)"/><text x="71.3101%" y="607.50"></text></g><g><title>__ip_local_out (648 samples, 0.22%)</title><rect x="70.8519%" y="629" width="0.2248%" height="15" fill="rgb(209,67,24)"/><text x="71.1019%" y="639.50"></text></g><g><title>__netif_receive_skb_core (83 samples, 0.03%)</title><rect x="71.1933%" y="437" width="0.0288%" height="15" fill="rgb(206,74,32)"/><text x="71.4433%" y="447.50"></text></g><g><title>__x86_indirect_thunk_rax (32 samples, 0.01%)</title><rect x="71.2290%" y="421" width="0.0111%" height="15" fill="rgb(212,45,25)"/><text x="71.4790%" y="431.50"></text></g><g><title>__inet_lookup_established (145 samples, 0.05%)</title><rect x="71.3380%" y="341" width="0.0503%" height="15" fill="rgb(239,26,3)"/><text x="71.5880%" y="351.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (33 samples, 0.01%)</title><rect x="71.3990%" y="325" width="0.0114%" height="15" fill="rgb(218,36,15)"/><text x="71.6490%" y="335.50"></text></g><g><title>sk_filter_trim_cap (78 samples, 0.03%)</title><rect x="71.3945%" y="341" width="0.0271%" height="15" fill="rgb(206,108,24)"/><text x="71.6445%" y="351.50"></text></g><g><title>tcp_add_backlog (33 samples, 0.01%)</title><rect x="71.4237%" y="341" width="0.0114%" height="15" fill="rgb(234,204,42)"/><text x="71.6737%" y="351.50"></text></g><g><title>memset (56 samples, 0.02%)</title><rect x="71.5156%" y="229" width="0.0194%" height="15" fill="rgb(229,2,11)"/><text x="71.7656%" y="239.50"></text></g><g><title>__kmalloc_reserve.isra.0 (89 samples, 0.03%)</title><rect x="71.5052%" y="245" width="0.0309%" height="15" fill="rgb(221,20,48)"/><text x="71.7552%" y="255.50"></text></g><g><title>kmem_cache_alloc_node (32 samples, 0.01%)</title><rect x="71.5361%" y="245" width="0.0111%" height="15" fill="rgb(244,164,10)"/><text x="71.7861%" y="255.50"></text></g><g><title>__alloc_skb (171 samples, 0.06%)</title><rect x="71.4986%" y="261" width="0.0593%" height="15" fill="rgb(243,229,2)"/><text x="71.7486%" y="271.50"></text></g><g><title>__nf_conntrack_find_get (41 samples, 0.01%)</title><rect x="71.6176%" y="133" width="0.0142%" height="15" fill="rgb(232,131,37)"/><text x="71.8676%" y="143.50"></text></g><g><title>nf_conntrack_tcp_packet (65 samples, 0.02%)</title><rect x="71.6353%" y="133" width="0.0226%" height="15" fill="rgb(217,156,11)"/><text x="71.8853%" y="143.50"></text></g><g><title>tcp_in_window (33 samples, 0.01%)</title><rect x="71.6464%" y="117" width="0.0114%" height="15" fill="rgb(239,99,48)"/><text x="71.8964%" y="127.50"></text></g><g><title>nf_conntrack_in (152 samples, 0.05%)</title><rect x="71.6103%" y="149" width="0.0527%" height="15" fill="rgb(231,209,9)"/><text x="71.8603%" y="159.50"></text></g><g><title>ipv4_conntrack_local (158 samples, 0.05%)</title><rect x="71.6089%" y="165" width="0.0548%" height="15" fill="rgb(254,97,27)"/><text x="71.8589%" y="175.50"></text></g><g><title>nf_hook_slow (210 samples, 0.07%)</title><rect x="71.5985%" y="181" width="0.0729%" height="15" fill="rgb(223,151,38)"/><text x="71.8485%" y="191.50"></text></g><g><title>__ip_local_out (250 samples, 0.09%)</title><rect x="71.5867%" y="197" width="0.0867%" height="15" fill="rgb(219,206,35)"/><text x="71.8367%" y="207.50"></text></g><g><title>loopback_xmit (36 samples, 0.01%)</title><rect x="71.7078%" y="85" width="0.0125%" height="15" fill="rgb(216,130,31)"/><text x="71.9578%" y="95.50"></text></g><g><title>dev_hard_start_xmit (71 samples, 0.02%)</title><rect x="71.6967%" y="101" width="0.0246%" height="15" fill="rgb(251,97,34)"/><text x="71.9467%" y="111.50"></text></g><g><title>__dev_queue_xmit (110 samples, 0.04%)</title><rect x="71.6919%" y="117" width="0.0382%" height="15" fill="rgb(246,159,47)"/><text x="71.9419%" y="127.50"></text></g><g><title>ip_finish_output2 (139 samples, 0.05%)</title><rect x="71.6835%" y="149" width="0.0482%" height="15" fill="rgb(232,87,10)"/><text x="71.9335%" y="159.50"></text></g><g><title>dev_queue_xmit (115 samples, 0.04%)</title><rect x="71.6919%" y="133" width="0.0399%" height="15" fill="rgb(249,1,37)"/><text x="71.9419%" y="143.50"></text></g><g><title>__ip_finish_output (148 samples, 0.05%)</title><rect x="71.6808%" y="165" width="0.0513%" height="15" fill="rgb(239,135,14)"/><text x="71.9308%" y="175.50"></text></g><g><title>ip_finish_output (165 samples, 0.06%)</title><rect x="71.6780%" y="181" width="0.0572%" height="15" fill="rgb(253,116,46)"/><text x="71.9280%" y="191.50"></text></g><g><title>ip_output (195 samples, 0.07%)</title><rect x="71.6742%" y="197" width="0.0677%" height="15" fill="rgb(222,217,37)"/><text x="71.9242%" y="207.50"></text></g><g><title>ip_local_out (450 samples, 0.16%)</title><rect x="71.5864%" y="213" width="0.1561%" height="15" fill="rgb(252,96,8)"/><text x="71.8364%" y="223.50"></text></g><g><title>__ip_queue_xmit (487 samples, 0.17%)</title><rect x="71.5756%" y="229" width="0.1690%" height="15" fill="rgb(254,103,41)"/><text x="71.8256%" y="239.50"></text></g><g><title>ip_queue_xmit (492 samples, 0.17%)</title><rect x="71.5756%" y="245" width="0.1707%" height="15" fill="rgb(218,213,19)"/><text x="71.8256%" y="255.50"></text></g><g><title>__tcp_transmit_skb (546 samples, 0.19%)</title><rect x="71.5590%" y="261" width="0.1894%" height="15" fill="rgb(253,95,21)"/><text x="71.8090%" y="271.50"></text></g><g><title>__tcp_send_ack.part.0 (761 samples, 0.26%)</title><rect x="71.4927%" y="277" width="0.2640%" height="15" fill="rgb(229,26,28)"/><text x="71.7427%" y="287.50"></text></g><g><title>__tcp_ack_snd_check (789 samples, 0.27%)</title><rect x="71.4833%" y="309" width="0.2737%" height="15" fill="rgb(230,129,16)"/><text x="71.7333%" y="319.50"></text></g><g><title>tcp_send_ack (765 samples, 0.27%)</title><rect x="71.4917%" y="293" width="0.2654%" height="15" fill="rgb(236,126,17)"/><text x="71.7417%" y="303.50"></text></g><g><title>tcp_ack (50 samples, 0.02%)</title><rect x="71.7692%" y="309" width="0.0173%" height="15" fill="rgb(209,33,33)"/><text x="72.0192%" y="319.50"></text></g><g><title>select_task_rq_fair (56 samples, 0.02%)</title><rect x="71.8698%" y="101" width="0.0194%" height="15" fill="rgb(227,85,29)"/><text x="72.1198%" y="111.50"></text></g><g><title>enqueue_entity (65 samples, 0.02%)</title><rect x="71.8997%" y="53" width="0.0226%" height="15" fill="rgb(241,53,46)"/><text x="72.1497%" y="63.50"></text></g><g><title>update_load_avg (32 samples, 0.01%)</title><rect x="71.9111%" y="37" width="0.0111%" height="15" fill="rgb(228,167,53)"/><text x="72.1611%" y="47.50"></text></g><g><title>enqueue_task_fair (83 samples, 0.03%)</title><rect x="71.8945%" y="69" width="0.0288%" height="15" fill="rgb(238,195,45)"/><text x="72.1445%" y="79.50"></text></g><g><title>activate_task (133 samples, 0.05%)</title><rect x="71.8931%" y="85" width="0.0461%" height="15" fill="rgb(252,124,45)"/><text x="72.1431%" y="95.50"></text></g><g><title>psi_task_change (46 samples, 0.02%)</title><rect x="71.9233%" y="69" width="0.0160%" height="15" fill="rgb(251,38,35)"/><text x="72.1733%" y="79.50"></text></g><g><title>ttwu_do_activate (164 samples, 0.06%)</title><rect x="71.8917%" y="101" width="0.0569%" height="15" fill="rgb(227,33,2)"/><text x="72.1417%" y="111.50"></text></g><g><title>default_wake_function (289 samples, 0.10%)</title><rect x="71.8539%" y="133" width="0.1003%" height="15" fill="rgb(223,157,46)"/><text x="72.1039%" y="143.50"></text></g><g><title>try_to_wake_up (285 samples, 0.10%)</title><rect x="71.8553%" y="117" width="0.0989%" height="15" fill="rgb(222,78,41)"/><text x="72.1053%" y="127.50"></text></g><g><title>autoremove_wake_function (298 samples, 0.10%)</title><rect x="71.8515%" y="149" width="0.1034%" height="15" fill="rgb(248,176,11)"/><text x="72.1015%" y="159.50"></text></g><g><title>__wake_up_common (307 samples, 0.11%)</title><rect x="71.8490%" y="165" width="0.1065%" height="15" fill="rgb(241,221,18)"/><text x="72.0990%" y="175.50"></text></g><g><title>__wake_up (324 samples, 0.11%)</title><rect x="71.8470%" y="197" width="0.1124%" height="15" fill="rgb(218,85,22)"/><text x="72.0970%" y="207.50"></text></g><g><title>__wake_up_common_lock (323 samples, 0.11%)</title><rect x="71.8473%" y="181" width="0.1121%" height="15" fill="rgb(222,223,7)"/><text x="72.0973%" y="191.50"></text></g><g><title>__wake_up_common (442 samples, 0.15%)</title><rect x="71.8119%" y="229" width="0.1534%" height="15" fill="rgb(254,59,39)"/><text x="72.0619%" y="239.50"></text></g><g><title>ep_poll_callback (386 samples, 0.13%)</title><rect x="71.8313%" y="213" width="0.1339%" height="15" fill="rgb(247,100,27)"/><text x="72.0813%" y="223.50"></text></g><g><title>tcp_data_ready (496 samples, 0.17%)</title><rect x="71.7973%" y="293" width="0.1721%" height="15" fill="rgb(237,207,10)"/><text x="72.0473%" y="303.50"></text></g><g><title>sock_def_readable (494 samples, 0.17%)</title><rect x="71.7980%" y="277" width="0.1714%" height="15" fill="rgb(220,121,28)"/><text x="72.0480%" y="287.50"></text></g><g><title>__wake_up_sync_key (466 samples, 0.16%)</title><rect x="71.8077%" y="261" width="0.1617%" height="15" fill="rgb(213,223,20)"/><text x="72.0577%" y="271.50"></text></g><g><title>__wake_up_common_lock (462 samples, 0.16%)</title><rect x="71.8091%" y="245" width="0.1603%" height="15" fill="rgb(205,121,27)"/><text x="72.0591%" y="255.50"></text></g><g><title>tcp_data_queue (545 samples, 0.19%)</title><rect x="71.7866%" y="309" width="0.1891%" height="15" fill="rgb(253,24,53)"/><text x="72.0366%" y="319.50"></text></g><g><title>activate_task (41 samples, 0.01%)</title><rect x="72.0024%" y="101" width="0.0142%" height="15" fill="rgb(224,224,47)"/><text x="72.2524%" y="111.50"></text></g><g><title>ttwu_do_activate (47 samples, 0.02%)</title><rect x="72.0020%" y="117" width="0.0163%" height="15" fill="rgb(250,125,36)"/><text x="72.2520%" y="127.50"></text></g><g><title>try_to_wake_up (87 samples, 0.03%)</title><rect x="71.9892%" y="133" width="0.0302%" height="15" fill="rgb(240,144,38)"/><text x="72.2392%" y="143.50"></text></g><g><title>autoremove_wake_function (90 samples, 0.03%)</title><rect x="71.9885%" y="165" width="0.0312%" height="15" fill="rgb(250,15,50)"/><text x="72.2385%" y="175.50"></text></g><g><title>default_wake_function (89 samples, 0.03%)</title><rect x="71.9889%" y="149" width="0.0309%" height="15" fill="rgb(210,24,26)"/><text x="72.2389%" y="159.50"></text></g><g><title>__wake_up_common (92 samples, 0.03%)</title><rect x="71.9882%" y="181" width="0.0319%" height="15" fill="rgb(234,53,53)"/><text x="72.2382%" y="191.50"></text></g><g><title>__wake_up (96 samples, 0.03%)</title><rect x="71.9882%" y="213" width="0.0333%" height="15" fill="rgb(208,108,28)"/><text x="72.2382%" y="223.50"></text></g><g><title>__wake_up_common_lock (96 samples, 0.03%)</title><rect x="71.9882%" y="197" width="0.0333%" height="15" fill="rgb(227,143,7)"/><text x="72.2382%" y="207.50"></text></g><g><title>__wake_up_common (120 samples, 0.04%)</title><rect x="71.9840%" y="245" width="0.0416%" height="15" fill="rgb(238,189,38)"/><text x="72.2340%" y="255.50"></text></g><g><title>ep_poll_callback (115 samples, 0.04%)</title><rect x="71.9857%" y="229" width="0.0399%" height="15" fill="rgb(222,69,15)"/><text x="72.2357%" y="239.50"></text></g><g><title>tcp_data_ready (157 samples, 0.05%)</title><rect x="71.9757%" y="309" width="0.0545%" height="15" fill="rgb(213,169,7)"/><text x="72.2257%" y="319.50"></text></g><g><title>sock_def_readable (146 samples, 0.05%)</title><rect x="71.9795%" y="293" width="0.0507%" height="15" fill="rgb(251,219,4)"/><text x="72.2295%" y="303.50"></text></g><g><title>__wake_up_sync_key (140 samples, 0.05%)</title><rect x="71.9816%" y="277" width="0.0486%" height="15" fill="rgb(241,55,40)"/><text x="72.2316%" y="287.50"></text></g><g><title>__wake_up_common_lock (138 samples, 0.05%)</title><rect x="71.9823%" y="261" width="0.0479%" height="15" fill="rgb(243,57,30)"/><text x="72.2323%" y="271.50"></text></g><g><title>tcp_rcv_established (1,752 samples, 0.61%)</title><rect x="71.4556%" y="325" width="0.6079%" height="15" fill="rgb(234,50,30)"/><text x="71.7056%" y="335.50"></text></g><g><title>tcp_v4_do_rcv (1,812 samples, 0.63%)</title><rect x="71.4362%" y="341" width="0.6287%" height="15" fill="rgb(239,23,42)"/><text x="71.6862%" y="351.50"></text></g><g><title>ip_protocol_deliver_rcu (2,311 samples, 0.80%)</title><rect x="71.2696%" y="373" width="0.8018%" height="15" fill="rgb(217,38,19)"/><text x="71.5196%" y="383.50"></text></g><g><title>tcp_v4_rcv (2,250 samples, 0.78%)</title><rect x="71.2908%" y="357" width="0.7807%" height="15" fill="rgb(215,179,16)"/><text x="71.5408%" y="367.50"></text></g><g><title>ip_local_deliver_finish (2,324 samples, 0.81%)</title><rect x="71.2679%" y="389" width="0.8063%" height="15" fill="rgb(254,21,37)"/><text x="71.5179%" y="399.50"></text></g><g><title>iptable_filter_hook (54 samples, 0.02%)</title><rect x="72.0839%" y="373" width="0.0187%" height="15" fill="rgb(219,207,48)"/><text x="72.3339%" y="383.50"></text></g><g><title>ipt_do_table (53 samples, 0.02%)</title><rect x="72.0843%" y="357" width="0.0184%" height="15" fill="rgb(227,225,41)"/><text x="72.3343%" y="367.50"></text></g><g><title>nf_hook_slow (95 samples, 0.03%)</title><rect x="72.0805%" y="389" width="0.0330%" height="15" fill="rgb(223,130,1)"/><text x="72.3305%" y="399.50"></text></g><g><title>ip_local_deliver (2,467 samples, 0.86%)</title><rect x="71.2578%" y="405" width="0.8559%" height="15" fill="rgb(249,54,42)"/><text x="71.5078%" y="415.50"></text></g><g><title>ip_rcv_finish (2,508 samples, 0.87%)</title><rect x="71.2523%" y="421" width="0.8702%" height="15" fill="rgb(248,69,25)"/><text x="71.5023%" y="431.50"></text></g><g><title>ipv4_conntrack_in (29 samples, 0.01%)</title><rect x="72.1391%" y="405" width="0.0101%" height="15" fill="rgb(234,21,32)"/><text x="72.3891%" y="415.50"></text></g><g><title>nf_hook_slow (81 samples, 0.03%)</title><rect x="72.1311%" y="421" width="0.0281%" height="15" fill="rgb(252,136,6)"/><text x="72.3811%" y="431.50"></text></g><g><title>ip_rcv (2,715 samples, 0.94%)</title><rect x="71.2221%" y="437" width="0.9420%" height="15" fill="rgb(245,87,12)"/><text x="71.4721%" y="447.50"></text></g><g><title>__netif_receive_skb_one_core (2,849 samples, 0.99%)</title><rect x="71.1857%" y="453" width="0.9885%" height="15" fill="rgb(208,12,15)"/><text x="71.4357%" y="463.50"></text></g><g><title>__netif_receive_skb (2,861 samples, 0.99%)</title><rect x="71.1832%" y="469" width="0.9926%" height="15" fill="rgb(250,98,2)"/><text x="71.4332%" y="479.50"></text></g><g><title>process_backlog (2,898 samples, 1.01%)</title><rect x="71.1714%" y="485" width="1.0055%" height="15" fill="rgb(205,213,15)"/><text x="71.4214%" y="495.50"></text></g><g><title>net_rx_action (2,949 samples, 1.02%)</title><rect x="71.1541%" y="501" width="1.0232%" height="15" fill="rgb(248,192,44)"/><text x="71.4041%" y="511.50"></text></g><g><title>__softirqentry_text_start (2,996 samples, 1.04%)</title><rect x="71.1402%" y="517" width="1.0395%" height="15" fill="rgb(221,89,17)"/><text x="71.3902%" y="527.50"></text></g><g><title>do_softirq.part.0 (3,023 samples, 1.05%)</title><rect x="71.1364%" y="549" width="1.0488%" height="15" fill="rgb(209,55,3)"/><text x="71.3864%" y="559.50"></text></g><g><title>do_softirq_own_stack (3,012 samples, 1.05%)</title><rect x="71.1402%" y="533" width="1.0450%" height="15" fill="rgb(247,23,45)"/><text x="71.3902%" y="543.50"></text></g><g><title>__local_bh_enable_ip (3,045 samples, 1.06%)</title><rect x="71.1360%" y="565" width="1.0565%" height="15" fill="rgb(235,152,23)"/><text x="71.3860%" y="575.50"></text></g><g><title>netif_rx (58 samples, 0.02%)</title><rect x="72.2425%" y="501" width="0.0201%" height="15" fill="rgb(244,63,13)"/><text x="72.4925%" y="511.50"></text></g><g><title>netif_rx_internal (49 samples, 0.02%)</title><rect x="72.2456%" y="485" width="0.0170%" height="15" fill="rgb(227,30,37)"/><text x="72.4956%" y="495.50"></text></g><g><title>enqueue_to_backlog (40 samples, 0.01%)</title><rect x="72.2487%" y="469" width="0.0139%" height="15" fill="rgb(224,49,42)"/><text x="72.4987%" y="479.50"></text></g><g><title>loopback_xmit (138 samples, 0.05%)</title><rect x="72.2255%" y="517" width="0.0479%" height="15" fill="rgb(218,129,5)"/><text x="72.4755%" y="527.50"></text></g><g><title>dev_hard_start_xmit (185 samples, 0.06%)</title><rect x="72.2137%" y="533" width="0.0642%" height="15" fill="rgb(240,199,54)"/><text x="72.4637%" y="543.50"></text></g><g><title>validate_xmit_skb (60 samples, 0.02%)</title><rect x="72.2855%" y="533" width="0.0208%" height="15" fill="rgb(234,31,13)"/><text x="72.5355%" y="543.50"></text></g><g><title>__dev_queue_xmit (334 samples, 0.12%)</title><rect x="72.1925%" y="549" width="0.1159%" height="15" fill="rgb(219,73,54)"/><text x="72.4425%" y="559.50"></text></g><g><title>dev_queue_xmit (342 samples, 0.12%)</title><rect x="72.1925%" y="565" width="0.1187%" height="15" fill="rgb(251,162,10)"/><text x="72.4425%" y="575.50"></text></g><g><title>ip_finish_output2 (3,480 samples, 1.21%)</title><rect x="71.1059%" y="581" width="1.2074%" height="15" fill="rgb(240,138,47)"/><text x="71.3559%" y="591.50"></text></g><g><title>__ip_finish_output (3,504 samples, 1.22%)</title><rect x="71.0989%" y="597" width="1.2157%" height="15" fill="rgb(216,138,26)"/><text x="71.3489%" y="607.50"></text></g><g><title>ip_finish_output (3,550 samples, 1.23%)</title><rect x="71.0871%" y="613" width="1.2317%" height="15" fill="rgb(243,17,35)"/><text x="71.3371%" y="623.50"></text></g><g><title>nf_hook_slow (56 samples, 0.02%)</title><rect x="72.3230%" y="613" width="0.0194%" height="15" fill="rgb(241,60,18)"/><text x="72.5730%" y="623.50"></text></g><g><title>ip_output (3,651 samples, 1.27%)</title><rect x="71.0771%" y="629" width="1.2667%" height="15" fill="rgb(234,2,44)"/><text x="71.3271%" y="639.50"></text></g><g><title>ip_local_out (4,328 samples, 1.50%)</title><rect x="70.8498%" y="645" width="1.5016%" height="15" fill="rgb(225,225,33)"/><text x="71.0998%" y="655.50"></text></g><g><title>__ip_queue_xmit (4,394 samples, 1.52%)</title><rect x="70.8321%" y="661" width="1.5245%" height="15" fill="rgb(234,50,31)"/><text x="71.0821%" y="671.50"></text></g><g><title>ip_queue_xmit (4,416 samples, 1.53%)</title><rect x="70.8321%" y="677" width="1.5322%" height="15" fill="rgb(249,6,25)"/><text x="71.0821%" y="687.50"></text></g><g><title>skb_clone (38 samples, 0.01%)</title><rect x="72.3643%" y="677" width="0.0132%" height="15" fill="rgb(241,5,17)"/><text x="72.6143%" y="687.50"></text></g><g><title>__tcp_transmit_skb (4,613 samples, 1.60%)</title><rect x="70.7860%" y="693" width="1.6005%" height="15" fill="rgb(207,116,10)"/><text x="71.0360%" y="703.50"></text></g><g><title>mod_timer (102 samples, 0.04%)</title><rect x="72.4496%" y="645" width="0.0354%" height="15" fill="rgb(222,128,18)"/><text x="72.6996%" y="655.50"></text></g><g><title>tcp_event_new_data_sent (216 samples, 0.07%)</title><rect x="72.4128%" y="693" width="0.0749%" height="15" fill="rgb(229,109,25)"/><text x="72.6628%" y="703.50"></text></g><g><title>tcp_rearm_rto (171 samples, 0.06%)</title><rect x="72.4284%" y="677" width="0.0593%" height="15" fill="rgb(222,102,25)"/><text x="72.6784%" y="687.50"></text></g><g><title>sk_reset_timer (141 samples, 0.05%)</title><rect x="72.4389%" y="661" width="0.0489%" height="15" fill="rgb(239,211,5)"/><text x="72.6889%" y="671.50"></text></g><g><title>tcp_schedule_loss_probe (38 samples, 0.01%)</title><rect x="72.4965%" y="693" width="0.0132%" height="15" fill="rgb(223,136,26)"/><text x="72.7465%" y="703.50"></text></g><g><title>__tcp_push_pending_frames (5,089 samples, 1.77%)</title><rect x="70.7474%" y="725" width="1.7657%" height="15" fill="rgb(227,30,15)"/><text x="70.9974%" y="735.50"></text></g><g><title>tcp_write_xmit (5,054 samples, 1.75%)</title><rect x="70.7596%" y="709" width="1.7535%" height="15" fill="rgb(247,76,4)"/><text x="71.0096%" y="719.50"></text></g><g><title>tcp_push (5,092 samples, 1.77%)</title><rect x="70.7474%" y="741" width="1.7667%" height="15" fill="rgb(245,38,48)"/><text x="70.9974%" y="751.50"></text></g><g><title>tcp_send_mss (69 samples, 0.02%)</title><rect x="72.5176%" y="741" width="0.0239%" height="15" fill="rgb(210,220,14)"/><text x="72.7676%" y="751.50"></text></g><g><title>tcp_current_mss (41 samples, 0.01%)</title><rect x="72.5273%" y="725" width="0.0142%" height="15" fill="rgb(224,60,51)"/><text x="72.7773%" y="735.50"></text></g><g><title>tcp_sendmsg_locked (5,939 samples, 2.06%)</title><rect x="70.4813%" y="757" width="2.0606%" height="15" fill="rgb(212,133,49)"/><text x="70.7313%" y="767.50">t..</text></g><g><title>tcp_sendmsg (6,804 samples, 2.36%)</title><rect x="70.1888%" y="773" width="2.3607%" height="15" fill="rgb(231,39,22)"/><text x="70.4388%" y="783.50">tc..</text></g><g><title>inet_sendmsg (6,834 samples, 2.37%)</title><rect x="70.1795%" y="789" width="2.3711%" height="15" fill="rgb(236,173,22)"/><text x="70.4295%" y="799.50">in..</text></g><g><title>sock_sendmsg (6,918 samples, 2.40%)</title><rect x="70.1594%" y="805" width="2.4002%" height="15" fill="rgb(210,70,0)"/><text x="70.4094%" y="815.50">so..</text></g><g><title>__fdget (50 samples, 0.02%)</title><rect x="72.5631%" y="789" width="0.0173%" height="15" fill="rgb(215,170,11)"/><text x="72.8131%" y="799.50"></text></g><g><title>__fget_light (48 samples, 0.02%)</title><rect x="72.5638%" y="773" width="0.0167%" height="15" fill="rgb(220,154,28)"/><text x="72.8138%" y="783.50"></text></g><g><title>__fget (44 samples, 0.02%)</title><rect x="72.5651%" y="757" width="0.0153%" height="15" fill="rgb(240,160,41)"/><text x="72.8151%" y="767.50"></text></g><g><title>__sys_sendto (7,057 samples, 2.45%)</title><rect x="70.1378%" y="821" width="2.4485%" height="15" fill="rgb(243,215,41)"/><text x="70.3878%" y="831.50">__..</text></g><g><title>sockfd_lookup_light (77 samples, 0.03%)</title><rect x="72.5596%" y="805" width="0.0267%" height="15" fill="rgb(214,208,31)"/><text x="72.8096%" y="815.50"></text></g><g><title>__x64_sys_sendto (7,067 samples, 2.45%)</title><rect x="70.1378%" y="837" width="2.4519%" height="15" fill="rgb(247,57,22)"/><text x="70.3878%" y="847.50">__..</text></g><g><title>entry_SYSCALL_64_after_hwframe (7,131 samples, 2.47%)</title><rect x="70.1177%" y="869" width="2.4741%" height="15" fill="rgb(228,73,52)"/><text x="70.3677%" y="879.50">en..</text></g><g><title>do_syscall_64 (7,094 samples, 2.46%)</title><rect x="70.1306%" y="853" width="2.4613%" height="15" fill="rgb(252,60,9)"/><text x="70.3806%" y="863.50">do..</text></g><g><title>__libc_send (7,201 samples, 2.50%)</title><rect x="70.0993%" y="901" width="2.4984%" height="15" fill="rgb(233,9,51)"/><text x="70.3493%" y="911.50">__..</text></g><g><title>__libc_send (7,186 samples, 2.49%)</title><rect x="70.1045%" y="885" width="2.4932%" height="15" fill="rgb(223,67,14)"/><text x="70.3545%" y="895.50">__..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (7,226 samples, 2.51%)</title><rect x="70.0931%" y="949" width="2.5071%" height="15" fill="rgb(222,86,2)"/><text x="70.3431%" y="959.50">&lt;&amp;..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (7,221 samples, 2.51%)</title><rect x="70.0948%" y="933" width="2.5054%" height="15" fill="rgb(243,58,54)"/><text x="70.3448%" y="943.50">&lt;&amp;..</text></g><g><title>std::sys_common::net::TcpStream::write (7,213 samples, 2.50%)</title><rect x="70.0976%" y="917" width="2.5026%" height="15" fill="rgb(210,200,39)"/><text x="70.3476%" y="927.50">st..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (7,284 samples, 2.53%)</title><rect x="70.0733%" y="997" width="2.5272%" height="15" fill="rgb(238,135,9)"/><text x="70.3233%" y="1007.50">&lt;&amp;..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (7,263 samples, 2.52%)</title><rect x="70.0806%" y="981" width="2.5199%" height="15" fill="rgb(232,179,7)"/><text x="70.3306%" y="991.50">mi..</text></g><g><title>mio::sys::unix::IoSourceState::do_io (7,252 samples, 2.52%)</title><rect x="70.0844%" y="965" width="2.5161%" height="15" fill="rgb(245,65,41)"/><text x="70.3344%" y="975.50">mi..</text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1125" width="2.5734%" height="15" fill="rgb(227,43,8)"/><text x="70.2841%" y="1135.50">&lt;t..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1109" width="2.5734%" height="15" fill="rgb(235,91,14)"/><text x="70.2841%" y="1119.50">&lt;&amp;..</text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1093" width="2.5734%" height="15" fill="rgb(235,219,31)"/><text x="70.2841%" y="1103.50">&lt;t..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1077" width="2.5734%" height="15" fill="rgb(227,121,25)"/><text x="70.2841%" y="1087.50">to..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1061" width="2.5734%" height="15" fill="rgb(254,129,24)"/><text x="70.2841%" y="1071.50">to..</text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1045" width="2.5734%" height="15" fill="rgb(226,144,49)"/><text x="70.2841%" y="1055.50">to..</text></g><g><title>tokio::io::driver::registration::Registration::poll_io (7,417 samples, 2.57%)</title><rect x="70.0341%" y="1029" width="2.5734%" height="15" fill="rgb(214,187,32)"/><text x="70.2841%" y="1039.50">to..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::{{closure}} (7,322 samples, 2.54%)</title><rect x="70.0671%" y="1013" width="2.5404%" height="15" fill="rgb(243,129,46)"/><text x="70.3171%" y="1023.50">to..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.02%)</title><rect x="72.6404%" y="1013" width="0.0167%" height="15" fill="rgb(221,185,35)"/><text x="72.8904%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (113 samples, 0.04%)</title><rect x="72.6255%" y="1029" width="0.0392%" height="15" fill="rgb(205,0,32)"/><text x="72.8755%" y="1039.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (45 samples, 0.02%)</title><rect x="72.6859%" y="981" width="0.0156%" height="15" fill="rgb(229,179,12)"/><text x="72.9359%" y="991.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (73 samples, 0.03%)</title><rect x="72.6824%" y="997" width="0.0253%" height="15" fill="rgb(252,107,19)"/><text x="72.9324%" y="1007.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (133 samples, 0.05%)</title><rect x="72.6772%" y="1013" width="0.0461%" height="15" fill="rgb(220,95,27)"/><text x="72.9272%" y="1023.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.02%)</title><rect x="72.7077%" y="997" width="0.0156%" height="15" fill="rgb(240,113,40)"/><text x="72.9577%" y="1007.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (38 samples, 0.01%)</title><rect x="72.7102%" y="981" width="0.0132%" height="15" fill="rgb(208,4,43)"/><text x="72.9602%" y="991.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (141 samples, 0.05%)</title><rect x="72.6748%" y="1029" width="0.0489%" height="15" fill="rgb(247,189,30)"/><text x="72.9248%" y="1039.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Rx&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (329 samples, 0.11%)</title><rect x="72.6099%" y="1077" width="0.1141%" height="15" fill="rgb(231,157,17)"/><text x="72.8599%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::close (329 samples, 0.11%)</title><rect x="72.6099%" y="1061" width="0.1141%" height="15" fill="rgb(224,139,6)"/><text x="72.8599%" y="1071.50"></text></g><g><title>tokio::sync::notify::Notify::notify_waiters (329 samples, 0.11%)</title><rect x="72.6099%" y="1045" width="0.1141%" height="15" fill="rgb(223,83,16)"/><text x="72.8599%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (338 samples, 0.12%)</title><rect x="72.6075%" y="1125" width="0.1173%" height="15" fill="rgb(232,211,20)"/><text x="72.8575%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place (338 samples, 0.12%)</title><rect x="72.6075%" y="1109" width="0.1173%" height="15" fill="rgb(225,203,35)"/><text x="72.8575%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place (331 samples, 0.11%)</title><rect x="72.6099%" y="1093" width="0.1148%" height="15" fill="rgb(215,211,44)"/><text x="72.8599%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.01%)</title><rect x="72.7247%" y="1029" width="0.0125%" height="15" fill="rgb(248,213,26)"/><text x="72.9747%" y="1039.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (36 samples, 0.01%)</title><rect x="72.7247%" y="1013" width="0.0125%" height="15" fill="rgb(214,23,52)"/><text x="72.9747%" y="1023.50"></text></g><g><title>env_logger::Logger::matches (98 samples, 0.03%)</title><rect x="72.7247%" y="1093" width="0.0340%" height="15" fill="rgb(225,173,50)"/><text x="72.9747%" y="1103.50"></text></g><g><title>env_logger::filter::Filter::matches (98 samples, 0.03%)</title><rect x="72.7247%" y="1077" width="0.0340%" height="15" fill="rgb(206,150,22)"/><text x="72.9747%" y="1087.50"></text></g><g><title>env_logger::filter::Filter::enabled (98 samples, 0.03%)</title><rect x="72.7247%" y="1061" width="0.0340%" height="15" fill="rgb(239,64,23)"/><text x="72.9747%" y="1071.50"></text></g><g><title>env_logger::filter::enabled (98 samples, 0.03%)</title><rect x="72.7247%" y="1045" width="0.0340%" height="15" fill="rgb(242,50,38)"/><text x="72.9747%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (58 samples, 0.02%)</title><rect x="72.7386%" y="1029" width="0.0201%" height="15" fill="rgb(217,91,15)"/><text x="72.9886%" y="1039.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (58 samples, 0.02%)</title><rect x="72.7386%" y="1013" width="0.0201%" height="15" fill="rgb(230,172,6)"/><text x="72.9886%" y="1023.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (82 samples, 0.03%)</title><rect x="72.7744%" y="1045" width="0.0285%" height="15" fill="rgb(221,98,26)"/><text x="73.0244%" y="1055.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (70 samples, 0.02%)</title><rect x="72.7785%" y="1029" width="0.0243%" height="15" fill="rgb(227,210,45)"/><text x="73.0285%" y="1039.50"></text></g><g><title>env_logger::fmt::Formatter::print (64 samples, 0.02%)</title><rect x="72.7806%" y="1013" width="0.0222%" height="15" fill="rgb(206,8,30)"/><text x="73.0306%" y="1023.50"></text></g><g><title>env_logger::fmt::Formatter::clear (114 samples, 0.04%)</title><rect x="72.8028%" y="1045" width="0.0396%" height="15" fill="rgb(241,219,17)"/><text x="73.0528%" y="1055.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::clear (59 samples, 0.02%)</title><rect x="72.8219%" y="1029" width="0.0205%" height="15" fill="rgb(247,121,29)"/><text x="73.0719%" y="1039.50"></text></g><g><title>termcolor::Buffer::clear (57 samples, 0.02%)</title><rect x="72.8226%" y="1013" width="0.0198%" height="15" fill="rgb(219,169,49)"/><text x="73.0726%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::clear (42 samples, 0.01%)</title><rect x="72.8278%" y="997" width="0.0146%" height="15" fill="rgb(253,49,49)"/><text x="73.0778%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (37 samples, 0.01%)</title><rect x="72.8295%" y="981" width="0.0128%" height="15" fill="rgb(217,178,3)"/><text x="73.0795%" y="991.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (242 samples, 0.08%)</title><rect x="72.7588%" y="1061" width="0.0840%" height="15" fill="rgb(234,73,37)"/><text x="73.0088%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (31 samples, 0.01%)</title><rect x="72.8451%" y="1029" width="0.0108%" height="15" fill="rgb(250,98,22)"/><text x="73.0951%" y="1039.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (99 samples, 0.03%)</title><rect x="72.8594%" y="1013" width="0.0343%" height="15" fill="rgb(220,108,37)"/><text x="73.1094%" y="1023.50"></text></g><g><title>core::mem::replace (84 samples, 0.03%)</title><rect x="72.8646%" y="997" width="0.0291%" height="15" fill="rgb(225,168,10)"/><text x="73.1146%" y="1007.50"></text></g><g><title>core::mem::swap (69 samples, 0.02%)</title><rect x="72.8698%" y="981" width="0.0239%" height="15" fill="rgb(247,215,21)"/><text x="73.1198%" y="991.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (64 samples, 0.02%)</title><rect x="72.8715%" y="965" width="0.0222%" height="15" fill="rgb(253,189,31)"/><text x="73.1215%" y="975.50"></text></g><g><title>core::cell::BorrowRefMut::new (150 samples, 0.05%)</title><rect x="72.8427%" y="1045" width="0.0520%" height="15" fill="rgb(241,54,22)"/><text x="73.0927%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (112 samples, 0.04%)</title><rect x="72.8559%" y="1029" width="0.0389%" height="15" fill="rgb(211,87,4)"/><text x="73.1059%" y="1039.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (153 samples, 0.05%)</title><rect x="72.8427%" y="1061" width="0.0531%" height="15" fill="rgb(245,112,24)"/><text x="73.0927%" y="1071.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (8,841 samples, 3.07%)</title><rect x="69.8329%" y="1141" width="3.0674%" height="15" fill="rgb(235,190,41)"/><text x="70.0829%" y="1151.50">tun..</text></g><g><title>log::__private_api_log (506 samples, 0.18%)</title><rect x="72.7247%" y="1125" width="0.1756%" height="15" fill="rgb(214,89,8)"/><text x="72.9747%" y="1135.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (506 samples, 0.18%)</title><rect x="72.7247%" y="1109" width="0.1756%" height="15" fill="rgb(249,155,35)"/><text x="72.9747%" y="1119.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (408 samples, 0.14%)</title><rect x="72.7588%" y="1093" width="0.1416%" height="15" fill="rgb(249,88,26)"/><text x="73.0088%" y="1103.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (408 samples, 0.14%)</title><rect x="72.7588%" y="1077" width="0.1416%" height="15" fill="rgb(232,56,8)"/><text x="73.0088%" y="1087.50"></text></g><g><title>tokio::coop::poll_proceed (50 samples, 0.02%)</title><rect x="72.9045%" y="1029" width="0.0173%" height="15" fill="rgb(240,95,3)"/><text x="73.1545%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 samples, 0.02%)</title><rect x="72.9045%" y="1013" width="0.0173%" height="15" fill="rgb(222,44,28)"/><text x="73.1545%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (50 samples, 0.02%)</title><rect x="72.9045%" y="997" width="0.0173%" height="15" fill="rgb(234,16,30)"/><text x="73.1545%" y="1007.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (50 samples, 0.02%)</title><rect x="72.9045%" y="981" width="0.0173%" height="15" fill="rgb(223,26,17)"/><text x="73.1545%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (50 samples, 0.02%)</title><rect x="72.9045%" y="965" width="0.0173%" height="15" fill="rgb(239,187,47)"/><text x="73.1545%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (50 samples, 0.02%)</title><rect x="72.9045%" y="949" width="0.0173%" height="15" fill="rgb(247,102,50)"/><text x="73.1545%" y="959.50"></text></g><g><title>core::mem::replace (50 samples, 0.02%)</title><rect x="72.9045%" y="933" width="0.0173%" height="15" fill="rgb(231,216,22)"/><text x="73.1545%" y="943.50"></text></g><g><title>core::mem::swap (50 samples, 0.02%)</title><rect x="72.9045%" y="917" width="0.0173%" height="15" fill="rgb(216,201,26)"/><text x="73.1545%" y="927.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (49 samples, 0.02%)</title><rect x="72.9048%" y="901" width="0.0170%" height="15" fill="rgb(214,186,23)"/><text x="73.1548%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.01%)</title><rect x="72.9392%" y="997" width="0.0114%" height="15" fill="rgb(235,184,4)"/><text x="73.1892%" y="1007.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (31 samples, 0.01%)</title><rect x="72.9506%" y="997" width="0.0108%" height="15" fill="rgb(244,46,17)"/><text x="73.2006%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (79 samples, 0.03%)</title><rect x="72.9714%" y="997" width="0.0274%" height="15" fill="rgb(248,74,46)"/><text x="73.2214%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (290 samples, 0.10%)</title><rect x="72.9003%" y="1125" width="0.1006%" height="15" fill="rgb(243,79,5)"/><text x="73.1503%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (290 samples, 0.10%)</title><rect x="72.9003%" y="1109" width="0.1006%" height="15" fill="rgb(213,148,1)"/><text x="73.1503%" y="1119.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (290 samples, 0.10%)</title><rect x="72.9003%" y="1093" width="0.1006%" height="15" fill="rgb(221,30,0)"/><text x="73.1503%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (290 samples, 0.10%)</title><rect x="72.9003%" y="1077" width="0.1006%" height="15" fill="rgb(207,85,29)"/><text x="73.1503%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (290 samples, 0.10%)</title><rect x="72.9003%" y="1061" width="0.1006%" height="15" fill="rgb(239,31,46)"/><text x="73.1503%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (290 samples, 0.10%)</title><rect x="72.9003%" y="1045" width="0.1006%" height="15" fill="rgb(219,6,1)"/><text x="73.1503%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (228 samples, 0.08%)</title><rect x="72.9218%" y="1029" width="0.0791%" height="15" fill="rgb(229,90,29)"/><text x="73.1718%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (228 samples, 0.08%)</title><rect x="72.9218%" y="1013" width="0.0791%" height="15" fill="rgb(242,201,42)"/><text x="73.1718%" y="1023.50"></text></g><g><title>lock_sock_nested (38 samples, 0.01%)</title><rect x="73.1099%" y="757" width="0.0132%" height="15" fill="rgb(243,80,54)"/><text x="73.3599%" y="767.50"></text></g><g><title>__kfree_skb (29 samples, 0.01%)</title><rect x="73.1581%" y="661" width="0.0101%" height="15" fill="rgb(223,166,15)"/><text x="73.4081%" y="671.50"></text></g><g><title>tcp_clean_rtx_queue (45 samples, 0.02%)</title><rect x="73.1543%" y="677" width="0.0156%" height="15" fill="rgb(238,78,27)"/><text x="73.4043%" y="687.50"></text></g><g><title>tcp_ack (74 samples, 0.03%)</title><rect x="73.1480%" y="693" width="0.0257%" height="15" fill="rgb(235,28,43)"/><text x="73.3980%" y="703.50"></text></g><g><title>activate_task (48 samples, 0.02%)</title><rect x="73.1970%" y="485" width="0.0167%" height="15" fill="rgb(240,210,28)"/><text x="73.4470%" y="495.50"></text></g><g><title>ttwu_do_activate (57 samples, 0.02%)</title><rect x="73.1966%" y="501" width="0.0198%" height="15" fill="rgb(253,6,46)"/><text x="73.4466%" y="511.50"></text></g><g><title>default_wake_function (88 samples, 0.03%)</title><rect x="73.1876%" y="533" width="0.0305%" height="15" fill="rgb(250,159,47)"/><text x="73.4376%" y="543.50"></text></g><g><title>try_to_wake_up (87 samples, 0.03%)</title><rect x="73.1879%" y="517" width="0.0302%" height="15" fill="rgb(216,139,2)"/><text x="73.4379%" y="527.50"></text></g><g><title>__wake_up_common (103 samples, 0.04%)</title><rect x="73.1831%" y="565" width="0.0357%" height="15" fill="rgb(221,124,44)"/><text x="73.4331%" y="575.50"></text></g><g><title>autoremove_wake_function (99 samples, 0.03%)</title><rect x="73.1845%" y="549" width="0.0343%" height="15" fill="rgb(205,37,22)"/><text x="73.4345%" y="559.50"></text></g><g><title>__wake_up (106 samples, 0.04%)</title><rect x="73.1827%" y="597" width="0.0368%" height="15" fill="rgb(250,55,8)"/><text x="73.4327%" y="607.50"></text></g><g><title>__wake_up_common_lock (106 samples, 0.04%)</title><rect x="73.1827%" y="581" width="0.0368%" height="15" fill="rgb(215,83,48)"/><text x="73.4327%" y="591.50"></text></g><g><title>__wake_up_common (130 samples, 0.05%)</title><rect x="73.1768%" y="629" width="0.0451%" height="15" fill="rgb(253,2,32)"/><text x="73.4268%" y="639.50"></text></g><g><title>ep_poll_callback (122 samples, 0.04%)</title><rect x="73.1796%" y="613" width="0.0423%" height="15" fill="rgb(236,67,28)"/><text x="73.4296%" y="623.50"></text></g><g><title>tcp_data_ready (143 samples, 0.05%)</title><rect x="73.1737%" y="693" width="0.0496%" height="15" fill="rgb(252,55,15)"/><text x="73.4237%" y="703.50"></text></g><g><title>sock_def_readable (143 samples, 0.05%)</title><rect x="73.1737%" y="677" width="0.0496%" height="15" fill="rgb(243,173,17)"/><text x="73.4237%" y="687.50"></text></g><g><title>__wake_up_sync_key (140 samples, 0.05%)</title><rect x="73.1748%" y="661" width="0.0486%" height="15" fill="rgb(215,212,13)"/><text x="73.4248%" y="671.50"></text></g><g><title>__wake_up_common_lock (140 samples, 0.05%)</title><rect x="73.1748%" y="645" width="0.0486%" height="15" fill="rgb(253,176,6)"/><text x="73.4248%" y="655.50"></text></g><g><title>__release_sock (309 samples, 0.11%)</title><rect x="73.1251%" y="741" width="0.1072%" height="15" fill="rgb(236,105,26)"/><text x="73.3751%" y="751.50"></text></g><g><title>tcp_v4_do_rcv (297 samples, 0.10%)</title><rect x="73.1293%" y="725" width="0.1030%" height="15" fill="rgb(239,226,32)"/><text x="73.3793%" y="735.50"></text></g><g><title>tcp_rcv_established (285 samples, 0.10%)</title><rect x="73.1335%" y="709" width="0.0989%" height="15" fill="rgb(236,104,51)"/><text x="73.3835%" y="719.50"></text></g><g><title>activate_task (50 samples, 0.02%)</title><rect x="73.2570%" y="629" width="0.0173%" height="15" fill="rgb(220,172,33)"/><text x="73.5070%" y="639.50"></text></g><g><title>ttwu_do_activate (57 samples, 0.02%)</title><rect x="73.2570%" y="645" width="0.0198%" height="15" fill="rgb(224,182,25)"/><text x="73.5070%" y="655.50"></text></g><g><title>__wake_up (132 samples, 0.05%)</title><rect x="73.2323%" y="741" width="0.0458%" height="15" fill="rgb(236,184,24)"/><text x="73.4823%" y="751.50"></text></g><g><title>__wake_up_common_lock (132 samples, 0.05%)</title><rect x="73.2323%" y="725" width="0.0458%" height="15" fill="rgb(241,221,14)"/><text x="73.4823%" y="735.50"></text></g><g><title>__wake_up_common (131 samples, 0.05%)</title><rect x="73.2327%" y="709" width="0.0455%" height="15" fill="rgb(227,146,5)"/><text x="73.4827%" y="719.50"></text></g><g><title>autoremove_wake_function (129 samples, 0.04%)</title><rect x="73.2334%" y="693" width="0.0448%" height="15" fill="rgb(214,15,23)"/><text x="73.4834%" y="703.50"></text></g><g><title>default_wake_function (125 samples, 0.04%)</title><rect x="73.2348%" y="677" width="0.0434%" height="15" fill="rgb(233,157,31)"/><text x="73.4848%" y="687.50"></text></g><g><title>try_to_wake_up (125 samples, 0.04%)</title><rect x="73.2348%" y="661" width="0.0434%" height="15" fill="rgb(211,27,52)"/><text x="73.4848%" y="671.50"></text></g><g><title>release_sock (462 samples, 0.16%)</title><rect x="73.1231%" y="757" width="0.1603%" height="15" fill="rgb(212,223,15)"/><text x="73.3731%" y="767.50"></text></g><g><title>copy_user_generic_string (51 samples, 0.02%)</title><rect x="73.3267%" y="725" width="0.0177%" height="15" fill="rgb(254,211,0)"/><text x="73.5767%" y="735.50"></text></g><g><title>_copy_from_iter_full (64 samples, 0.02%)</title><rect x="73.3246%" y="741" width="0.0222%" height="15" fill="rgb(205,43,38)"/><text x="73.5746%" y="751.50"></text></g><g><title>__kmalloc_node_track_caller (38 samples, 0.01%)</title><rect x="73.3753%" y="693" width="0.0132%" height="15" fill="rgb(242,206,46)"/><text x="73.6253%" y="703.50"></text></g><g><title>__kmalloc_reserve.isra.0 (75 samples, 0.03%)</title><rect x="73.3736%" y="709" width="0.0260%" height="15" fill="rgb(220,221,12)"/><text x="73.6236%" y="719.50"></text></g><g><title>kmem_cache_alloc_node (49 samples, 0.02%)</title><rect x="73.4024%" y="709" width="0.0170%" height="15" fill="rgb(217,156,35)"/><text x="73.6524%" y="719.50"></text></g><g><title>__alloc_skb (193 samples, 0.07%)</title><rect x="73.3673%" y="725" width="0.0670%" height="15" fill="rgb(207,181,49)"/><text x="73.6173%" y="735.50"></text></g><g><title>sk_stream_alloc_skb (218 samples, 0.08%)</title><rect x="73.3621%" y="741" width="0.0756%" height="15" fill="rgb(235,103,47)"/><text x="73.6121%" y="751.50"></text></g><g><title>__nf_conntrack_find_get (53 samples, 0.02%)</title><rect x="73.5411%" y="565" width="0.0184%" height="15" fill="rgb(222,63,28)"/><text x="73.7911%" y="575.50"></text></g><g><title>nf_conntrack_tcp_packet (78 samples, 0.03%)</title><rect x="73.5682%" y="565" width="0.0271%" height="15" fill="rgb(244,137,21)"/><text x="73.8182%" y="575.50"></text></g><g><title>tcp_in_window (36 samples, 0.01%)</title><rect x="73.5828%" y="549" width="0.0125%" height="15" fill="rgb(228,35,27)"/><text x="73.8328%" y="559.50"></text></g><g><title>nf_conntrack_in (192 samples, 0.07%)</title><rect x="73.5342%" y="581" width="0.0666%" height="15" fill="rgb(226,191,41)"/><text x="73.7842%" y="591.50"></text></g><g><title>ipv4_conntrack_local (210 samples, 0.07%)</title><rect x="73.5304%" y="597" width="0.0729%" height="15" fill="rgb(210,154,3)"/><text x="73.7804%" y="607.50"></text></g><g><title>nf_hook_slow (289 samples, 0.10%)</title><rect x="73.5148%" y="613" width="0.1003%" height="15" fill="rgb(216,60,49)"/><text x="73.7648%" y="623.50"></text></g><g><title>__ip_local_out (342 samples, 0.12%)</title><rect x="73.4981%" y="629" width="0.1187%" height="15" fill="rgb(226,17,20)"/><text x="73.7481%" y="639.50"></text></g><g><title>__netif_receive_skb_core (46 samples, 0.02%)</title><rect x="73.6921%" y="437" width="0.0160%" height="15" fill="rgb(206,115,35)"/><text x="73.9421%" y="447.50"></text></g><g><title>__inet_lookup_established (72 samples, 0.02%)</title><rect x="73.7608%" y="341" width="0.0250%" height="15" fill="rgb(227,88,1)"/><text x="74.0108%" y="351.50"></text></g><g><title>__nf_conntrack_find_get (44 samples, 0.02%)</title><rect x="73.8725%" y="149" width="0.0153%" height="15" fill="rgb(230,222,24)"/><text x="74.1225%" y="159.50"></text></g><g><title>ipv4_conntrack_local (82 samples, 0.03%)</title><rect x="73.8683%" y="181" width="0.0285%" height="15" fill="rgb(214,124,32)"/><text x="74.1183%" y="191.50"></text></g><g><title>nf_conntrack_in (82 samples, 0.03%)</title><rect x="73.8683%" y="165" width="0.0285%" height="15" fill="rgb(240,41,36)"/><text x="74.1183%" y="175.50"></text></g><g><title>nf_hook_slow (97 samples, 0.03%)</title><rect x="73.8648%" y="197" width="0.0337%" height="15" fill="rgb(221,17,52)"/><text x="74.1148%" y="207.50"></text></g><g><title>__ip_local_out (130 samples, 0.05%)</title><rect x="73.8541%" y="213" width="0.0451%" height="15" fill="rgb(252,70,16)"/><text x="74.1041%" y="223.50"></text></g><g><title>__dev_queue_xmit (34 samples, 0.01%)</title><rect x="73.9061%" y="133" width="0.0118%" height="15" fill="rgb(250,177,4)"/><text x="74.1561%" y="143.50"></text></g><g><title>ip_finish_output2 (42 samples, 0.01%)</title><rect x="73.9037%" y="165" width="0.0146%" height="15" fill="rgb(240,188,47)"/><text x="74.1537%" y="175.50"></text></g><g><title>dev_queue_xmit (35 samples, 0.01%)</title><rect x="73.9061%" y="149" width="0.0121%" height="15" fill="rgb(215,92,12)"/><text x="74.1561%" y="159.50"></text></g><g><title>ip_finish_output (50 samples, 0.02%)</title><rect x="73.9016%" y="197" width="0.0173%" height="15" fill="rgb(242,110,29)"/><text x="74.1516%" y="207.50"></text></g><g><title>__ip_finish_output (46 samples, 0.02%)</title><rect x="73.9030%" y="181" width="0.0160%" height="15" fill="rgb(208,211,26)"/><text x="74.1530%" y="191.50"></text></g><g><title>ip_queue_xmit (205 samples, 0.07%)</title><rect x="73.8506%" y="261" width="0.0711%" height="15" fill="rgb(244,147,6)"/><text x="74.1006%" y="271.50"></text></g><g><title>__ip_queue_xmit (205 samples, 0.07%)</title><rect x="73.8506%" y="245" width="0.0711%" height="15" fill="rgb(211,130,42)"/><text x="74.1006%" y="255.50"></text></g><g><title>ip_local_out (196 samples, 0.07%)</title><rect x="73.8537%" y="229" width="0.0680%" height="15" fill="rgb(220,63,1)"/><text x="74.1037%" y="239.50"></text></g><g><title>ip_output (65 samples, 0.02%)</title><rect x="73.8992%" y="213" width="0.0226%" height="15" fill="rgb(241,212,30)"/><text x="74.1492%" y="223.50"></text></g><g><title>__tcp_transmit_skb (256 samples, 0.09%)</title><rect x="73.8433%" y="277" width="0.0888%" height="15" fill="rgb(233,153,17)"/><text x="74.0933%" y="287.50"></text></g><g><title>tcp_event_new_data_sent (42 samples, 0.01%)</title><rect x="73.9367%" y="277" width="0.0146%" height="15" fill="rgb(236,3,10)"/><text x="74.1867%" y="287.50"></text></g><g><title>__tcp_push_pending_frames (384 samples, 0.13%)</title><rect x="73.8263%" y="309" width="0.1332%" height="15" fill="rgb(232,41,21)"/><text x="74.0763%" y="319.50"></text></g><g><title>tcp_write_xmit (373 samples, 0.13%)</title><rect x="73.8302%" y="293" width="0.1294%" height="15" fill="rgb(206,63,51)"/><text x="74.0802%" y="303.50"></text></g><g><title>kfree_skbmem (43 samples, 0.01%)</title><rect x="74.0123%" y="261" width="0.0149%" height="15" fill="rgb(250,214,3)"/><text x="74.2623%" y="271.50"></text></g><g><title>kmem_cache_free (36 samples, 0.01%)</title><rect x="74.0147%" y="245" width="0.0125%" height="15" fill="rgb(254,89,27)"/><text x="74.2647%" y="255.50"></text></g><g><title>skb_release_data (78 samples, 0.03%)</title><rect x="74.0283%" y="245" width="0.0271%" height="15" fill="rgb(249,41,14)"/><text x="74.2783%" y="255.50"></text></g><g><title>skb_free_head (39 samples, 0.01%)</title><rect x="74.0418%" y="229" width="0.0135%" height="15" fill="rgb(221,196,51)"/><text x="74.2918%" y="239.50"></text></g><g><title>kfree (39 samples, 0.01%)</title><rect x="74.0418%" y="213" width="0.0135%" height="15" fill="rgb(214,116,26)"/><text x="74.2918%" y="223.50"></text></g><g><title>skb_release_all (82 samples, 0.03%)</title><rect x="74.0276%" y="261" width="0.0285%" height="15" fill="rgb(236,67,7)"/><text x="74.2776%" y="271.50"></text></g><g><title>__kfree_skb (133 samples, 0.05%)</title><rect x="74.0120%" y="277" width="0.0461%" height="15" fill="rgb(253,179,32)"/><text x="74.2620%" y="287.50"></text></g><g><title>tcp_clean_rtx_queue (208 samples, 0.07%)</title><rect x="73.9970%" y="293" width="0.0722%" height="15" fill="rgb(218,33,15)"/><text x="74.2470%" y="303.50"></text></g><g><title>tcp_ack (325 samples, 0.11%)</title><rect x="73.9672%" y="309" width="0.1128%" height="15" fill="rgb(217,202,41)"/><text x="74.2172%" y="319.50"></text></g><g><title>try_to_wake_up (72 samples, 0.02%)</title><rect x="74.1067%" y="117" width="0.0250%" height="15" fill="rgb(234,133,5)"/><text x="74.3567%" y="127.50"></text></g><g><title>autoremove_wake_function (75 samples, 0.03%)</title><rect x="74.1060%" y="149" width="0.0260%" height="15" fill="rgb(240,47,40)"/><text x="74.3560%" y="159.50"></text></g><g><title>default_wake_function (75 samples, 0.03%)</title><rect x="74.1060%" y="133" width="0.0260%" height="15" fill="rgb(234,166,26)"/><text x="74.3560%" y="143.50"></text></g><g><title>__wake_up_common (82 samples, 0.03%)</title><rect x="74.1039%" y="165" width="0.0285%" height="15" fill="rgb(244,125,51)"/><text x="74.3539%" y="175.50"></text></g><g><title>__wake_up (92 samples, 0.03%)</title><rect x="74.1022%" y="197" width="0.0319%" height="15" fill="rgb(229,171,11)"/><text x="74.3522%" y="207.50"></text></g><g><title>__wake_up_common_lock (92 samples, 0.03%)</title><rect x="74.1022%" y="181" width="0.0319%" height="15" fill="rgb(224,38,45)"/><text x="74.3522%" y="191.50"></text></g><g><title>__wake_up_common (127 samples, 0.04%)</title><rect x="74.0952%" y="229" width="0.0441%" height="15" fill="rgb(237,27,7)"/><text x="74.3452%" y="239.50"></text></g><g><title>ep_poll_callback (123 samples, 0.04%)</title><rect x="74.0966%" y="213" width="0.0427%" height="15" fill="rgb(216,52,7)"/><text x="74.3466%" y="223.50"></text></g><g><title>tcp_data_ready (160 samples, 0.06%)</title><rect x="74.0883%" y="293" width="0.0555%" height="15" fill="rgb(243,11,11)"/><text x="74.3383%" y="303.50"></text></g><g><title>sock_def_readable (160 samples, 0.06%)</title><rect x="74.0883%" y="277" width="0.0555%" height="15" fill="rgb(253,167,20)"/><text x="74.3383%" y="287.50"></text></g><g><title>__wake_up_sync_key (145 samples, 0.05%)</title><rect x="74.0935%" y="261" width="0.0503%" height="15" fill="rgb(215,207,5)"/><text x="74.3435%" y="271.50"></text></g><g><title>__wake_up_common_lock (144 samples, 0.05%)</title><rect x="74.0938%" y="245" width="0.0500%" height="15" fill="rgb(252,127,31)"/><text x="74.3438%" y="255.50"></text></g><g><title>tcp_queue_rcv (38 samples, 0.01%)</title><rect x="74.1455%" y="293" width="0.0132%" height="15" fill="rgb(209,106,27)"/><text x="74.3955%" y="303.50"></text></g><g><title>tcp_try_coalesce (36 samples, 0.01%)</title><rect x="74.1462%" y="277" width="0.0125%" height="15" fill="rgb(214,220,18)"/><text x="74.3962%" y="287.50"></text></g><g><title>tcp_data_queue (226 samples, 0.08%)</title><rect x="74.0813%" y="309" width="0.0784%" height="15" fill="rgb(237,89,12)"/><text x="74.3313%" y="319.50"></text></g><g><title>autoremove_wake_function (56 samples, 0.02%)</title><rect x="74.1716%" y="165" width="0.0194%" height="15" fill="rgb(209,167,36)"/><text x="74.4216%" y="175.50"></text></g><g><title>default_wake_function (56 samples, 0.02%)</title><rect x="74.1716%" y="149" width="0.0194%" height="15" fill="rgb(243,45,22)"/><text x="74.4216%" y="159.50"></text></g><g><title>try_to_wake_up (54 samples, 0.02%)</title><rect x="74.1722%" y="133" width="0.0187%" height="15" fill="rgb(239,2,46)"/><text x="74.4222%" y="143.50"></text></g><g><title>__wake_up_common (60 samples, 0.02%)</title><rect x="74.1705%" y="181" width="0.0208%" height="15" fill="rgb(241,101,0)"/><text x="74.4205%" y="191.50"></text></g><g><title>__wake_up (62 samples, 0.02%)</title><rect x="74.1702%" y="213" width="0.0215%" height="15" fill="rgb(244,34,31)"/><text x="74.4202%" y="223.50"></text></g><g><title>__wake_up_common_lock (62 samples, 0.02%)</title><rect x="74.1702%" y="197" width="0.0215%" height="15" fill="rgb(248,23,22)"/><text x="74.4202%" y="207.50"></text></g><g><title>__wake_up_common (90 samples, 0.03%)</title><rect x="74.1643%" y="245" width="0.0312%" height="15" fill="rgb(218,27,48)"/><text x="74.4143%" y="255.50"></text></g><g><title>ep_poll_callback (87 samples, 0.03%)</title><rect x="74.1653%" y="229" width="0.0302%" height="15" fill="rgb(232,78,1)"/><text x="74.4153%" y="239.50"></text></g><g><title>tcp_data_ready (114 samples, 0.04%)</title><rect x="74.1598%" y="309" width="0.0396%" height="15" fill="rgb(233,169,12)"/><text x="74.4098%" y="319.50"></text></g><g><title>sock_def_readable (107 samples, 0.04%)</title><rect x="74.1622%" y="293" width="0.0371%" height="15" fill="rgb(225,222,54)"/><text x="74.4122%" y="303.50"></text></g><g><title>__wake_up_sync_key (104 samples, 0.04%)</title><rect x="74.1632%" y="277" width="0.0361%" height="15" fill="rgb(245,126,29)"/><text x="74.4132%" y="287.50"></text></g><g><title>__wake_up_common_lock (103 samples, 0.04%)</title><rect x="74.1636%" y="261" width="0.0357%" height="15" fill="rgb(241,63,48)"/><text x="74.4136%" y="271.50"></text></g><g><title>tcp_rcv_established (1,173 samples, 0.41%)</title><rect x="73.8142%" y="325" width="0.4070%" height="15" fill="rgb(235,126,38)"/><text x="74.0642%" y="335.50"></text></g><g><title>tcp_v4_do_rcv (1,199 samples, 0.42%)</title><rect x="73.8059%" y="341" width="0.4160%" height="15" fill="rgb(232,96,49)"/><text x="74.0559%" y="351.50"></text></g><g><title>ip_protocol_deliver_rcu (1,422 samples, 0.49%)</title><rect x="73.7302%" y="373" width="0.4934%" height="15" fill="rgb(211,146,40)"/><text x="73.9802%" y="383.50"></text></g><g><title>tcp_v4_rcv (1,381 samples, 0.48%)</title><rect x="73.7445%" y="357" width="0.4791%" height="15" fill="rgb(247,93,44)"/><text x="73.9945%" y="367.50"></text></g><g><title>ip_local_deliver_finish (1,432 samples, 0.50%)</title><rect x="73.7288%" y="389" width="0.4968%" height="15" fill="rgb(251,41,49)"/><text x="73.9788%" y="399.50"></text></g><g><title>ip_local_deliver (1,489 samples, 0.52%)</title><rect x="73.7226%" y="405" width="0.5166%" height="15" fill="rgb(218,155,12)"/><text x="73.9726%" y="415.50"></text></g><g><title>ip_rcv_finish (1,514 samples, 0.53%)</title><rect x="73.7191%" y="421" width="0.5253%" height="15" fill="rgb(221,161,30)"/><text x="73.9691%" y="431.50"></text></g><g><title>nf_hook_slow (46 samples, 0.02%)</title><rect x="74.2538%" y="421" width="0.0160%" height="15" fill="rgb(221,179,11)"/><text x="74.5038%" y="431.50"></text></g><g><title>ip_rcv (1,620 samples, 0.56%)</title><rect x="73.7080%" y="437" width="0.5621%" height="15" fill="rgb(224,170,48)"/><text x="73.9580%" y="447.50"></text></g><g><title>__netif_receive_skb_one_core (1,687 samples, 0.59%)</title><rect x="73.6882%" y="453" width="0.5853%" height="15" fill="rgb(223,117,5)"/><text x="73.9382%" y="463.50"></text></g><g><title>__netif_receive_skb (1,696 samples, 0.59%)</title><rect x="73.6858%" y="469" width="0.5884%" height="15" fill="rgb(209,52,20)"/><text x="73.9358%" y="479.50"></text></g><g><title>net_rx_action (1,759 samples, 0.61%)</title><rect x="73.6657%" y="501" width="0.6103%" height="15" fill="rgb(209,19,41)"/><text x="73.9157%" y="511.50"></text></g><g><title>process_backlog (1,721 samples, 0.60%)</title><rect x="73.6789%" y="485" width="0.5971%" height="15" fill="rgb(210,177,12)"/><text x="73.9289%" y="495.50"></text></g><g><title>__softirqentry_text_start (1,786 samples, 0.62%)</title><rect x="73.6581%" y="517" width="0.6197%" height="15" fill="rgb(211,159,37)"/><text x="73.9081%" y="527.50"></text></g><g><title>do_softirq.part.0 (1,795 samples, 0.62%)</title><rect x="73.6563%" y="549" width="0.6228%" height="15" fill="rgb(209,20,2)"/><text x="73.9063%" y="559.50"></text></g><g><title>do_softirq_own_stack (1,793 samples, 0.62%)</title><rect x="73.6570%" y="533" width="0.6221%" height="15" fill="rgb(244,3,46)"/><text x="73.9070%" y="543.50"></text></g><g><title>__local_bh_enable_ip (1,807 samples, 0.63%)</title><rect x="73.6560%" y="565" width="0.6269%" height="15" fill="rgb(220,94,38)"/><text x="73.9060%" y="575.50"></text></g><g><title>loopback_xmit (54 samples, 0.02%)</title><rect x="74.3031%" y="517" width="0.0187%" height="15" fill="rgb(253,14,31)"/><text x="74.5531%" y="527.50"></text></g><g><title>dev_hard_start_xmit (78 samples, 0.03%)</title><rect x="74.2965%" y="533" width="0.0271%" height="15" fill="rgb(234,176,13)"/><text x="74.5465%" y="543.50"></text></g><g><title>__dev_queue_xmit (156 samples, 0.05%)</title><rect x="74.2829%" y="549" width="0.0541%" height="15" fill="rgb(218,62,25)"/><text x="74.5329%" y="559.50"></text></g><g><title>dev_queue_xmit (168 samples, 0.06%)</title><rect x="74.2829%" y="565" width="0.0583%" height="15" fill="rgb(216,124,40)"/><text x="74.5329%" y="575.50"></text></g><g><title>ip_finish_output2 (2,025 samples, 0.70%)</title><rect x="73.6393%" y="581" width="0.7026%" height="15" fill="rgb(228,170,12)"/><text x="73.8893%" y="591.50"></text></g><g><title>__ip_finish_output (2,045 samples, 0.71%)</title><rect x="73.6331%" y="597" width="0.7095%" height="15" fill="rgb(231,226,5)"/><text x="73.8831%" y="607.50"></text></g><g><title>ip_finish_output (2,073 samples, 0.72%)</title><rect x="73.6268%" y="613" width="0.7192%" height="15" fill="rgb(237,122,22)"/><text x="73.8768%" y="623.50"></text></g><g><title>ip_output (2,129 samples, 0.74%)</title><rect x="73.6175%" y="629" width="0.7387%" height="15" fill="rgb(209,185,25)"/><text x="73.8675%" y="639.50"></text></g><g><title>ip_local_out (2,486 samples, 0.86%)</title><rect x="73.4978%" y="645" width="0.8625%" height="15" fill="rgb(228,200,32)"/><text x="73.7478%" y="655.50"></text></g><g><title>__ip_queue_xmit (2,521 samples, 0.87%)</title><rect x="73.4884%" y="661" width="0.8747%" height="15" fill="rgb(217,140,10)"/><text x="73.7384%" y="671.50"></text></g><g><title>ip_queue_xmit (2,532 samples, 0.88%)</title><rect x="73.4884%" y="677" width="0.8785%" height="15" fill="rgb(253,17,24)"/><text x="73.7384%" y="687.50"></text></g><g><title>__tcp_transmit_skb (2,629 samples, 0.91%)</title><rect x="73.4645%" y="693" width="0.9121%" height="15" fill="rgb(212,61,6)"/><text x="73.7145%" y="703.50"></text></g><g><title>__tcp_push_pending_frames (2,785 samples, 0.97%)</title><rect x="73.4464%" y="725" width="0.9663%" height="15" fill="rgb(205,14,25)"/><text x="73.6964%" y="735.50"></text></g><g><title>tcp_write_xmit (2,771 samples, 0.96%)</title><rect x="73.4513%" y="709" width="0.9614%" height="15" fill="rgb(232,69,41)"/><text x="73.7013%" y="719.50"></text></g><g><title>tcp_push (2,789 samples, 0.97%)</title><rect x="73.4464%" y="741" width="0.9677%" height="15" fill="rgb(241,106,47)"/><text x="73.6964%" y="751.50"></text></g><g><title>tcp_sendmsg_locked (3,280 samples, 1.14%)</title><rect x="73.2920%" y="757" width="1.1380%" height="15" fill="rgb(210,213,53)"/><text x="73.5420%" y="767.50"></text></g><g><title>tcp_send_mss (44 samples, 0.02%)</title><rect x="74.4148%" y="741" width="0.0153%" height="15" fill="rgb(253,175,27)"/><text x="74.6648%" y="751.50"></text></g><g><title>tcp_sendmsg (3,842 samples, 1.33%)</title><rect x="73.1019%" y="773" width="1.3330%" height="15" fill="rgb(211,171,24)"/><text x="73.3519%" y="783.50"></text></g><g><title>inet_sendmsg (3,853 samples, 1.34%)</title><rect x="73.0991%" y="789" width="1.3368%" height="15" fill="rgb(229,80,7)"/><text x="73.3491%" y="799.50"></text></g><g><title>sock_sendmsg (3,898 samples, 1.35%)</title><rect x="73.0877%" y="805" width="1.3524%" height="15" fill="rgb(212,46,39)"/><text x="73.3377%" y="815.50"></text></g><g><title>__sys_sendto (3,950 samples, 1.37%)</title><rect x="73.0766%" y="821" width="1.3705%" height="15" fill="rgb(240,80,45)"/><text x="73.3266%" y="831.50"></text></g><g><title>__x64_sys_sendto (3,958 samples, 1.37%)</title><rect x="73.0766%" y="837" width="1.3733%" height="15" fill="rgb(253,177,40)"/><text x="73.3266%" y="847.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4,001 samples, 1.39%)</title><rect x="73.0648%" y="869" width="1.3882%" height="15" fill="rgb(249,200,15)"/><text x="73.3148%" y="879.50"></text></g><g><title>do_syscall_64 (3,986 samples, 1.38%)</title><rect x="73.0700%" y="853" width="1.3830%" height="15" fill="rgb(217,78,26)"/><text x="73.3200%" y="863.50"></text></g><g><title>__libc_send (4,047 samples, 1.40%)</title><rect x="73.0526%" y="901" width="1.4041%" height="15" fill="rgb(254,151,32)"/><text x="73.3026%" y="911.50"></text></g><g><title>__libc_send (4,041 samples, 1.40%)</title><rect x="73.0547%" y="885" width="1.4020%" height="15" fill="rgb(226,165,27)"/><text x="73.3047%" y="895.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (4,111 samples, 1.43%)</title><rect x="73.0315%" y="997" width="1.4263%" height="15" fill="rgb(250,206,4)"/><text x="73.2815%" y="1007.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4,100 samples, 1.42%)</title><rect x="73.0353%" y="981" width="1.4225%" height="15" fill="rgb(231,229,27)"/><text x="73.2853%" y="991.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (4,092 samples, 1.42%)</title><rect x="73.0381%" y="965" width="1.4197%" height="15" fill="rgb(239,217,8)"/><text x="73.2881%" y="975.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (4,063 samples, 1.41%)</title><rect x="73.0481%" y="949" width="1.4097%" height="15" fill="rgb(225,204,27)"/><text x="73.2981%" y="959.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (4,058 samples, 1.41%)</title><rect x="73.0498%" y="933" width="1.4079%" height="15" fill="rgb(230,56,32)"/><text x="73.2998%" y="943.50"></text></g><g><title>std::sys_common::net::TcpStream::write (4,053 samples, 1.41%)</title><rect x="73.0516%" y="917" width="1.4062%" height="15" fill="rgb(222,56,27)"/><text x="73.3016%" y="927.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1125" width="1.4635%" height="15" fill="rgb(253,108,27)"/><text x="73.2509%" y="1135.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1109" width="1.4635%" height="15" fill="rgb(212,87,36)"/><text x="73.2509%" y="1119.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1093" width="1.4635%" height="15" fill="rgb(247,82,36)"/><text x="73.2509%" y="1103.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1077" width="1.4635%" height="15" fill="rgb(222,143,9)"/><text x="73.2509%" y="1087.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1061" width="1.4635%" height="15" fill="rgb(238,162,48)"/><text x="73.2509%" y="1071.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1045" width="1.4635%" height="15" fill="rgb(221,59,43)"/><text x="73.2509%" y="1055.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (4,218 samples, 1.46%)</title><rect x="73.0009%" y="1029" width="1.4635%" height="15" fill="rgb(205,166,41)"/><text x="73.2509%" y="1039.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::{{closure}} (4,144 samples, 1.44%)</title><rect x="73.0266%" y="1013" width="1.4378%" height="15" fill="rgb(241,186,40)"/><text x="73.2766%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (76 samples, 0.03%)</title><rect x="74.4644%" y="1029" width="0.0264%" height="15" fill="rgb(216,119,35)"/><text x="74.7144%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.03%)</title><rect x="74.4644%" y="1013" width="0.0264%" height="15" fill="rgb(208,68,38)"/><text x="74.7144%" y="1023.50"></text></g><g><title>alloc::alloc::alloc_zeroed (76 samples, 0.03%)</title><rect x="74.4644%" y="997" width="0.0264%" height="15" fill="rgb(217,113,1)"/><text x="74.7144%" y="1007.50"></text></g><g><title>__libc_calloc (76 samples, 0.03%)</title><rect x="74.4644%" y="981" width="0.0264%" height="15" fill="rgb(242,153,3)"/><text x="74.7144%" y="991.50"></text></g><g><title>_int_malloc (76 samples, 0.03%)</title><rect x="74.4644%" y="965" width="0.0264%" height="15" fill="rgb(229,76,35)"/><text x="74.7144%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1765" width="6.9828%" height="15" fill="rgb(229,125,34)"/><text x="67.7912%" y="1775.50">tokio::ru..</text></g><g><title>std::panic::catch_unwind (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1749" width="6.9828%" height="15" fill="rgb(238,179,36)"/><text x="67.7912%" y="1759.50">std::pani..</text></g><g><title>std::panicking::try (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1733" width="6.9828%" height="15" fill="rgb(244,183,19)"/><text x="67.7912%" y="1743.50">std::pani..</text></g><g><title>__rust_try (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1717" width="6.9828%" height="15" fill="rgb(216,85,49)"/><text x="67.7912%" y="1727.50">__rust_try</text></g><g><title>std::panicking::try::do_call (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1701" width="6.9828%" height="15" fill="rgb(208,161,47)"/><text x="67.7912%" y="1711.50">std::pani..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1685" width="6.9828%" height="15" fill="rgb(233,210,18)"/><text x="67.7912%" y="1695.50">&lt;std::pan..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1669" width="6.9828%" height="15" fill="rgb(205,104,42)"/><text x="67.7912%" y="1679.50">tokio::ru..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1653" width="6.9828%" height="15" fill="rgb(248,90,43)"/><text x="67.7912%" y="1663.50">tokio::ru..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1637" width="6.9828%" height="15" fill="rgb(206,198,11)"/><text x="67.7912%" y="1647.50">tokio::lo..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (20,126 samples, 6.98%)</title><rect x="67.5412%" y="1621" width="6.9828%" height="15" fill="rgb(239,165,27)"/><text x="67.7912%" y="1631.50">tokio::ru..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (17,604 samples, 6.11%)</title><rect x="68.4163%" y="1605" width="6.1078%" height="15" fill="rgb(246,44,32)"/><text x="68.6663%" y="1615.50">&lt;tokio::..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (17,604 samples, 6.11%)</title><rect x="68.4163%" y="1589" width="6.1078%" height="15" fill="rgb(252,65,42)"/><text x="68.6663%" y="1599.50">tokio::r..</text></g><g><title>tokio::runtime::thread_pool::worker::run (17,604 samples, 6.11%)</title><rect x="68.4163%" y="1573" width="6.1078%" height="15" fill="rgb(246,197,18)"/><text x="68.6663%" y="1583.50">tokio::r..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (17,604 samples, 6.11%)</title><rect x="68.4163%" y="1557" width="6.1078%" height="15" fill="rgb(216,192,4)"/><text x="68.6663%" y="1567.50">tokio::m..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (17,604 samples, 6.11%)</title><rect x="68.4163%" y="1541" width="6.1078%" height="15" fill="rgb(208,117,10)"/><text x="68.6663%" y="1551.50">tokio::r..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (17,604 samples, 6.11%)</title><rect x="68.4163%" y="1525" width="6.1078%" height="15" fill="rgb(240,61,47)"/><text x="68.6663%" y="1535.50">tokio::r..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1509" width="4.9681%" height="15" fill="rgb(228,178,21)"/><text x="69.8060%" y="1519.50">tokio:..</text></g><g><title>tokio::coop::budget (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1493" width="4.9681%" height="15" fill="rgb(219,96,54)"/><text x="69.8060%" y="1503.50">tokio:..</text></g><g><title>tokio::coop::with_budget (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1477" width="4.9681%" height="15" fill="rgb(250,177,24)"/><text x="69.8060%" y="1487.50">tokio:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1461" width="4.9681%" height="15" fill="rgb(242,154,46)"/><text x="69.8060%" y="1471.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1445" width="4.9681%" height="15" fill="rgb(226,176,29)"/><text x="69.8060%" y="1455.50">std::t..</text></g><g><title>tokio::coop::with_budget::{{closure}} (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1429" width="4.9681%" height="15" fill="rgb(226,29,2)"/><text x="69.8060%" y="1439.50">tokio:..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1413" width="4.9681%" height="15" fill="rgb(237,104,14)"/><text x="69.8060%" y="1423.50">tokio:..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1397" width="4.9681%" height="15" fill="rgb(245,207,31)"/><text x="69.8060%" y="1407.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1381" width="4.9681%" height="15" fill="rgb(229,211,45)"/><text x="69.8060%" y="1391.50">tokio:..</text></g><g><title>tokio::runtime::task::raw::poll (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1365" width="4.9681%" height="15" fill="rgb(229,113,15)"/><text x="69.8060%" y="1375.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1349" width="4.9681%" height="15" fill="rgb(237,147,15)"/><text x="69.8060%" y="1359.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1333" width="4.9681%" height="15" fill="rgb(244,120,12)"/><text x="69.8060%" y="1343.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::poll_future (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1317" width="4.9681%" height="15" fill="rgb(205,120,12)"/><text x="69.8060%" y="1327.50">tokio:..</text></g><g><title>std::panic::catch_unwind (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1301" width="4.9681%" height="15" fill="rgb(231,26,45)"/><text x="69.8060%" y="1311.50">std::p..</text></g><g><title>std::panicking::try (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1285" width="4.9681%" height="15" fill="rgb(246,98,1)"/><text x="69.8060%" y="1295.50">std::p..</text></g><g><title>__rust_try (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1269" width="4.9681%" height="15" fill="rgb(207,68,45)"/><text x="69.8060%" y="1279.50">__rust..</text></g><g><title>std::panicking::try::do_call (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1253" width="4.9681%" height="15" fill="rgb(231,27,38)"/><text x="69.8060%" y="1263.50">std::p..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1237" width="4.9681%" height="15" fill="rgb(214,223,3)"/><text x="69.8060%" y="1247.50">&lt;std::..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1221" width="4.9681%" height="15" fill="rgb(228,195,46)"/><text x="69.8060%" y="1231.50">tokio:..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1205" width="4.9681%" height="15" fill="rgb(231,100,42)"/><text x="69.8060%" y="1215.50">tokio:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1189" width="4.9681%" height="15" fill="rgb(236,53,4)"/><text x="69.8060%" y="1199.50">tokio:..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1173" width="4.9681%" height="15" fill="rgb(230,152,12)"/><text x="69.8060%" y="1183.50">tokio:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,319 samples, 4.97%)</title><rect x="69.5560%" y="1157" width="4.9681%" height="15" fill="rgb(226,101,19)"/><text x="69.8060%" y="1167.50">&lt;core:..</text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (4,680 samples, 1.62%)</title><rect x="72.9003%" y="1141" width="1.6238%" height="15" fill="rgb(250,149,32)"/><text x="73.1503%" y="1151.50"></text></g><g><title>tunneler::message::message::Message::serialize (172 samples, 0.06%)</title><rect x="74.4644%" y="1125" width="0.0597%" height="15" fill="rgb(232,178,12)"/><text x="74.7144%" y="1135.50"></text></g><g><title>alloc::vec::from_elem (172 samples, 0.06%)</title><rect x="74.4644%" y="1109" width="0.0597%" height="15" fill="rgb(246,151,17)"/><text x="74.7144%" y="1119.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (172 samples, 0.06%)</title><rect x="74.4644%" y="1093" width="0.0597%" height="15" fill="rgb(252,17,51)"/><text x="74.7144%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (172 samples, 0.06%)</title><rect x="74.4644%" y="1077" width="0.0597%" height="15" fill="rgb(250,207,23)"/><text x="74.7144%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (172 samples, 0.06%)</title><rect x="74.4644%" y="1061" width="0.0597%" height="15" fill="rgb(205,27,5)"/><text x="74.7144%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (172 samples, 0.06%)</title><rect x="74.4644%" y="1045" width="0.0597%" height="15" fill="rgb(224,32,19)"/><text x="74.7144%" y="1055.50"></text></g><g><title>core::alloc::layout::Layout::array (96 samples, 0.03%)</title><rect x="74.4908%" y="1029" width="0.0333%" height="15" fill="rgb(247,214,40)"/><text x="74.7408%" y="1039.50"></text></g><g><title>core::alloc::layout::Layout::repeat (77 samples, 0.03%)</title><rect x="74.4973%" y="1013" width="0.0267%" height="15" fill="rgb(239,199,17)"/><text x="74.7473%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (85 samples, 0.03%)</title><rect x="74.5251%" y="1509" width="0.0295%" height="15" fill="rgb(251,159,9)"/><text x="74.7751%" y="1519.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (85 samples, 0.03%)</title><rect x="74.5251%" y="1493" width="0.0295%" height="15" fill="rgb(225,78,32)"/><text x="74.7751%" y="1503.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (85 samples, 0.03%)</title><rect x="74.5251%" y="1477" width="0.0295%" height="15" fill="rgb(206,97,47)"/><text x="74.7751%" y="1487.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (85 samples, 0.03%)</title><rect x="74.5251%" y="1461" width="0.0295%" height="15" fill="rgb(227,107,4)"/><text x="74.7751%" y="1471.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (85 samples, 0.03%)</title><rect x="74.5251%" y="1445" width="0.0295%" height="15" fill="rgb(241,146,50)"/><text x="74.7751%" y="1455.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (85 samples, 0.03%)</title><rect x="74.5251%" y="1429" width="0.0295%" height="15" fill="rgb(232,92,30)"/><text x="74.7751%" y="1439.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (85 samples, 0.03%)</title><rect x="74.5251%" y="1413" width="0.0295%" height="15" fill="rgb(222,0,40)"/><text x="74.7751%" y="1423.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (85 samples, 0.03%)</title><rect x="74.5251%" y="1397" width="0.0295%" height="15" fill="rgb(219,54,33)"/><text x="74.7751%" y="1407.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (68 samples, 0.02%)</title><rect x="74.5310%" y="1381" width="0.0236%" height="15" fill="rgb(226,209,28)"/><text x="74.7810%" y="1391.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (101 samples, 0.04%)</title><rect x="74.5241%" y="1525" width="0.0350%" height="15" fill="rgb(254,205,35)"/><text x="74.7741%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (137 samples, 0.05%)</title><rect x="74.5241%" y="1541" width="0.0475%" height="15" fill="rgb(230,159,3)"/><text x="74.7741%" y="1551.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (36 samples, 0.01%)</title><rect x="74.5591%" y="1525" width="0.0125%" height="15" fill="rgb(232,190,24)"/><text x="74.8091%" y="1535.50"></text></g><g><title>log::__private_api_log (36 samples, 0.01%)</title><rect x="74.5591%" y="1509" width="0.0125%" height="15" fill="rgb(217,227,44)"/><text x="74.8091%" y="1519.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (36 samples, 0.01%)</title><rect x="74.5591%" y="1493" width="0.0125%" height="15" fill="rgb(236,211,1)"/><text x="74.8091%" y="1503.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (36 samples, 0.01%)</title><rect x="74.5591%" y="1477" width="0.0125%" height="15" fill="rgb(250,127,46)"/><text x="74.8091%" y="1487.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (36 samples, 0.01%)</title><rect x="74.5591%" y="1461" width="0.0125%" height="15" fill="rgb(229,213,6)"/><text x="74.8091%" y="1471.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (36 samples, 0.01%)</title><rect x="74.5591%" y="1445" width="0.0125%" height="15" fill="rgb(237,15,36)"/><text x="74.8091%" y="1455.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (36 samples, 0.01%)</title><rect x="74.5591%" y="1429" width="0.0125%" height="15" fill="rgb(213,131,41)"/><text x="74.8091%" y="1439.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (36 samples, 0.01%)</title><rect x="74.5591%" y="1413" width="0.0125%" height="15" fill="rgb(225,82,44)"/><text x="74.8091%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (36 samples, 0.01%)</title><rect x="74.5591%" y="1397" width="0.0125%" height="15" fill="rgb(249,42,11)"/><text x="74.8091%" y="1407.50"></text></g><g><title>core::task::wake::Waker::wake (44 samples, 0.02%)</title><rect x="74.5910%" y="997" width="0.0153%" height="15" fill="rgb(253,11,29)"/><text x="74.8410%" y="1007.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (44 samples, 0.02%)</title><rect x="74.5910%" y="981" width="0.0153%" height="15" fill="rgb(206,8,54)"/><text x="74.8410%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (44 samples, 0.02%)</title><rect x="74.5910%" y="965" width="0.0153%" height="15" fill="rgb(222,186,2)"/><text x="74.8410%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (38 samples, 0.01%)</title><rect x="74.5931%" y="949" width="0.0132%" height="15" fill="rgb(221,206,53)"/><text x="74.8431%" y="959.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (107 samples, 0.04%)</title><rect x="74.5747%" y="1077" width="0.0371%" height="15" fill="rgb(230,150,21)"/><text x="74.8247%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (73 samples, 0.03%)</title><rect x="74.5865%" y="1061" width="0.0253%" height="15" fill="rgb(253,202,10)"/><text x="74.8365%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (73 samples, 0.03%)</title><rect x="74.5865%" y="1045" width="0.0253%" height="15" fill="rgb(238,109,40)"/><text x="74.8365%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (73 samples, 0.03%)</title><rect x="74.5865%" y="1029" width="0.0253%" height="15" fill="rgb(247,120,22)"/><text x="74.8365%" y="1039.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (60 samples, 0.02%)</title><rect x="74.5910%" y="1013" width="0.0208%" height="15" fill="rgb(207,43,30)"/><text x="74.8410%" y="1023.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (41 samples, 0.01%)</title><rect x="74.6118%" y="1061" width="0.0142%" height="15" fill="rgb(213,211,24)"/><text x="74.8618%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::free_blocks (30 samples, 0.01%)</title><rect x="74.6264%" y="901" width="0.0104%" height="15" fill="rgb(239,73,39)"/><text x="74.8764%" y="911.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="74.6264%" y="949" width="0.0108%" height="15" fill="rgb(245,182,19)"/><text x="74.8764%" y="959.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (31 samples, 0.01%)</title><rect x="74.6264%" y="933" width="0.0108%" height="15" fill="rgb(247,143,26)"/><text x="74.8764%" y="943.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (31 samples, 0.01%)</title><rect x="74.6264%" y="917" width="0.0108%" height="15" fill="rgb(228,191,23)"/><text x="74.8764%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (45 samples, 0.02%)</title><rect x="74.6261%" y="1061" width="0.0156%" height="15" fill="rgb(253,165,31)"/><text x="74.8761%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (45 samples, 0.02%)</title><rect x="74.6261%" y="1045" width="0.0156%" height="15" fill="rgb(234,138,20)"/><text x="74.8761%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="74.6264%" y="1029" width="0.0153%" height="15" fill="rgb(218,191,29)"/><text x="74.8764%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="74.6264%" y="1013" width="0.0153%" height="15" fill="rgb(221,157,19)"/><text x="74.8764%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.02%)</title><rect x="74.6264%" y="997" width="0.0153%" height="15" fill="rgb(237,26,42)"/><text x="74.8764%" y="1007.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (44 samples, 0.02%)</title><rect x="74.6264%" y="981" width="0.0153%" height="15" fill="rgb(220,163,24)"/><text x="74.8764%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="74.6264%" y="965" width="0.0153%" height="15" fill="rgb(242,115,20)"/><text x="74.8764%" y="975.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (103 samples, 0.04%)</title><rect x="74.6118%" y="1077" width="0.0357%" height="15" fill="rgb(210,206,9)"/><text x="74.8618%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.01%)</title><rect x="74.6476%" y="1061" width="0.0149%" height="15" fill="rgb(208,71,17)"/><text x="74.8976%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (43 samples, 0.01%)</title><rect x="74.6476%" y="1045" width="0.0149%" height="15" fill="rgb(233,7,5)"/><text x="74.8976%" y="1055.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (43 samples, 0.01%)</title><rect x="74.6476%" y="1029" width="0.0149%" height="15" fill="rgb(207,92,33)"/><text x="74.8976%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (43 samples, 0.01%)</title><rect x="74.6476%" y="1013" width="0.0149%" height="15" fill="rgb(218,87,9)"/><text x="74.8976%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (43 samples, 0.01%)</title><rect x="74.6476%" y="997" width="0.0149%" height="15" fill="rgb(219,47,37)"/><text x="74.8976%" y="1007.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (43 samples, 0.01%)</title><rect x="74.6476%" y="981" width="0.0149%" height="15" fill="rgb(221,152,34)"/><text x="74.8976%" y="991.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (417 samples, 0.14%)</title><rect x="74.5241%" y="1765" width="0.1447%" height="15" fill="rgb(235,176,21)"/><text x="74.7741%" y="1775.50"></text></g><g><title>tokio::runtime::task::raw::poll (417 samples, 0.14%)</title><rect x="74.5241%" y="1749" width="0.1447%" height="15" fill="rgb(232,212,21)"/><text x="74.7741%" y="1759.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (417 samples, 0.14%)</title><rect x="74.5241%" y="1733" width="0.1447%" height="15" fill="rgb(245,82,39)"/><text x="74.7741%" y="1743.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (417 samples, 0.14%)</title><rect x="74.5241%" y="1717" width="0.1447%" height="15" fill="rgb(241,52,51)"/><text x="74.7741%" y="1727.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (417 samples, 0.14%)</title><rect x="74.5241%" y="1701" width="0.1447%" height="15" fill="rgb(219,91,24)"/><text x="74.7741%" y="1711.50"></text></g><g><title>std::panic::catch_unwind (417 samples, 0.14%)</title><rect x="74.5241%" y="1685" width="0.1447%" height="15" fill="rgb(241,142,12)"/><text x="74.7741%" y="1695.50"></text></g><g><title>std::panicking::try (417 samples, 0.14%)</title><rect x="74.5241%" y="1669" width="0.1447%" height="15" fill="rgb(230,27,9)"/><text x="74.7741%" y="1679.50"></text></g><g><title>__rust_try (417 samples, 0.14%)</title><rect x="74.5241%" y="1653" width="0.1447%" height="15" fill="rgb(249,181,32)"/><text x="74.7741%" y="1663.50"></text></g><g><title>std::panicking::try::do_call (417 samples, 0.14%)</title><rect x="74.5241%" y="1637" width="0.1447%" height="15" fill="rgb(230,107,3)"/><text x="74.7741%" y="1647.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (417 samples, 0.14%)</title><rect x="74.5241%" y="1621" width="0.1447%" height="15" fill="rgb(246,204,14)"/><text x="74.7741%" y="1631.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (417 samples, 0.14%)</title><rect x="74.5241%" y="1605" width="0.1447%" height="15" fill="rgb(213,192,47)"/><text x="74.7741%" y="1615.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (417 samples, 0.14%)</title><rect x="74.5241%" y="1589" width="0.1447%" height="15" fill="rgb(240,44,36)"/><text x="74.7741%" y="1599.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (417 samples, 0.14%)</title><rect x="74.5241%" y="1573" width="0.1447%" height="15" fill="rgb(244,209,38)"/><text x="74.7741%" y="1583.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (417 samples, 0.14%)</title><rect x="74.5241%" y="1557" width="0.1447%" height="15" fill="rgb(219,34,37)"/><text x="74.7741%" y="1567.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (280 samples, 0.10%)</title><rect x="74.5716%" y="1541" width="0.0971%" height="15" fill="rgb(210,28,6)"/><text x="74.8216%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (280 samples, 0.10%)</title><rect x="74.5716%" y="1525" width="0.0971%" height="15" fill="rgb(244,110,52)"/><text x="74.8216%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (280 samples, 0.10%)</title><rect x="74.5716%" y="1509" width="0.0971%" height="15" fill="rgb(254,124,47)"/><text x="74.8216%" y="1519.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (280 samples, 0.10%)</title><rect x="74.5716%" y="1493" width="0.0971%" height="15" fill="rgb(254,110,13)"/><text x="74.8216%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (280 samples, 0.10%)</title><rect x="74.5716%" y="1477" width="0.0971%" height="15" fill="rgb(252,57,21)"/><text x="74.8216%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (280 samples, 0.10%)</title><rect x="74.5716%" y="1461" width="0.0971%" height="15" fill="rgb(242,60,45)"/><text x="74.8216%" y="1471.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (271 samples, 0.09%)</title><rect x="74.5747%" y="1445" width="0.0940%" height="15" fill="rgb(234,49,30)"/><text x="74.8247%" y="1455.50"></text></g><g><title>tokio::coop::budget (271 samples, 0.09%)</title><rect x="74.5747%" y="1429" width="0.0940%" height="15" fill="rgb(218,98,6)"/><text x="74.8247%" y="1439.50"></text></g><g><title>tokio::coop::with_budget (271 samples, 0.09%)</title><rect x="74.5747%" y="1413" width="0.0940%" height="15" fill="rgb(220,174,29)"/><text x="74.8247%" y="1423.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (271 samples, 0.09%)</title><rect x="74.5747%" y="1397" width="0.0940%" height="15" fill="rgb(236,163,23)"/><text x="74.8247%" y="1407.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (271 samples, 0.09%)</title><rect x="74.5747%" y="1381" width="0.0940%" height="15" fill="rgb(242,114,45)"/><text x="74.8247%" y="1391.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (271 samples, 0.09%)</title><rect x="74.5747%" y="1365" width="0.0940%" height="15" fill="rgb(232,10,53)"/><text x="74.8247%" y="1375.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (271 samples, 0.09%)</title><rect x="74.5747%" y="1349" width="0.0940%" height="15" fill="rgb(245,108,29)"/><text x="74.8247%" y="1359.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (271 samples, 0.09%)</title><rect x="74.5747%" y="1333" width="0.0940%" height="15" fill="rgb(240,89,53)"/><text x="74.8247%" y="1343.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (271 samples, 0.09%)</title><rect x="74.5747%" y="1317" width="0.0940%" height="15" fill="rgb(226,60,45)"/><text x="74.8247%" y="1327.50"></text></g><g><title>tokio::runtime::task::raw::poll (271 samples, 0.09%)</title><rect x="74.5747%" y="1301" width="0.0940%" height="15" fill="rgb(230,41,44)"/><text x="74.8247%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (271 samples, 0.09%)</title><rect x="74.5747%" y="1285" width="0.0940%" height="15" fill="rgb(230,26,20)"/><text x="74.8247%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (271 samples, 0.09%)</title><rect x="74.5747%" y="1269" width="0.0940%" height="15" fill="rgb(237,170,32)"/><text x="74.8247%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (271 samples, 0.09%)</title><rect x="74.5747%" y="1253" width="0.0940%" height="15" fill="rgb(212,35,42)"/><text x="74.8247%" y="1263.50"></text></g><g><title>std::panic::catch_unwind (271 samples, 0.09%)</title><rect x="74.5747%" y="1237" width="0.0940%" height="15" fill="rgb(227,31,34)"/><text x="74.8247%" y="1247.50"></text></g><g><title>std::panicking::try (271 samples, 0.09%)</title><rect x="74.5747%" y="1221" width="0.0940%" height="15" fill="rgb(216,19,18)"/><text x="74.8247%" y="1231.50"></text></g><g><title>__rust_try (271 samples, 0.09%)</title><rect x="74.5747%" y="1205" width="0.0940%" height="15" fill="rgb(211,133,42)"/><text x="74.8247%" y="1215.50"></text></g><g><title>std::panicking::try::do_call (271 samples, 0.09%)</title><rect x="74.5747%" y="1189" width="0.0940%" height="15" fill="rgb(244,66,13)"/><text x="74.8247%" y="1199.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (271 samples, 0.09%)</title><rect x="74.5747%" y="1173" width="0.0940%" height="15" fill="rgb(218,185,50)"/><text x="74.8247%" y="1183.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (271 samples, 0.09%)</title><rect x="74.5747%" y="1157" width="0.0940%" height="15" fill="rgb(219,149,13)"/><text x="74.8247%" y="1167.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (271 samples, 0.09%)</title><rect x="74.5747%" y="1141" width="0.0940%" height="15" fill="rgb(221,125,0)"/><text x="74.8247%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (271 samples, 0.09%)</title><rect x="74.5747%" y="1125" width="0.0940%" height="15" fill="rgb(247,126,27)"/><text x="74.8247%" y="1135.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (271 samples, 0.09%)</title><rect x="74.5747%" y="1109" width="0.0940%" height="15" fill="rgb(250,138,30)"/><text x="74.8247%" y="1119.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (271 samples, 0.09%)</title><rect x="74.5747%" y="1093" width="0.0940%" height="15" fill="rgb(230,151,9)"/><text x="74.8247%" y="1103.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (61 samples, 0.02%)</title><rect x="74.6476%" y="1077" width="0.0212%" height="15" fill="rgb(233,80,38)"/><text x="74.8976%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.01%)</title><rect x="74.6687%" y="1525" width="0.0125%" height="15" fill="rgb(232,68,43)"/><text x="74.9187%" y="1535.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (36 samples, 0.01%)</title><rect x="74.6687%" y="1509" width="0.0125%" height="15" fill="rgb(254,5,50)"/><text x="74.9187%" y="1519.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (36 samples, 0.01%)</title><rect x="74.6687%" y="1493" width="0.0125%" height="15" fill="rgb(225,45,5)"/><text x="74.9187%" y="1503.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (36 samples, 0.01%)</title><rect x="74.6687%" y="1477" width="0.0125%" height="15" fill="rgb(239,22,3)"/><text x="74.9187%" y="1487.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (36 samples, 0.01%)</title><rect x="74.6687%" y="1461" width="0.0125%" height="15" fill="rgb(243,129,0)"/><text x="74.9187%" y="1471.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (36 samples, 0.01%)</title><rect x="74.6687%" y="1445" width="0.0125%" height="15" fill="rgb(223,164,0)"/><text x="74.9187%" y="1455.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (36 samples, 0.01%)</title><rect x="74.6687%" y="1429" width="0.0125%" height="15" fill="rgb(221,46,29)"/><text x="74.9187%" y="1439.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (36 samples, 0.01%)</title><rect x="74.6687%" y="1413" width="0.0125%" height="15" fill="rgb(205,97,47)"/><text x="74.9187%" y="1423.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (36 samples, 0.01%)</title><rect x="74.6687%" y="1397" width="0.0125%" height="15" fill="rgb(249,14,8)"/><text x="74.9187%" y="1407.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (63 samples, 0.02%)</title><rect x="74.6812%" y="1525" width="0.0219%" height="15" fill="rgb(216,77,3)"/><text x="74.9312%" y="1535.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (63 samples, 0.02%)</title><rect x="74.6812%" y="1509" width="0.0219%" height="15" fill="rgb(206,168,54)"/><text x="74.9312%" y="1519.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (63 samples, 0.02%)</title><rect x="74.6812%" y="1493" width="0.0219%" height="15" fill="rgb(236,3,41)"/><text x="74.9312%" y="1503.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (63 samples, 0.02%)</title><rect x="74.6812%" y="1477" width="0.0219%" height="15" fill="rgb(231,132,24)"/><text x="74.9312%" y="1487.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (63 samples, 0.02%)</title><rect x="74.6812%" y="1461" width="0.0219%" height="15" fill="rgb(227,221,40)"/><text x="74.9312%" y="1471.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (63 samples, 0.02%)</title><rect x="74.6812%" y="1445" width="0.0219%" height="15" fill="rgb(233,151,11)"/><text x="74.9312%" y="1455.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (63 samples, 0.02%)</title><rect x="74.6812%" y="1429" width="0.0219%" height="15" fill="rgb(247,81,35)"/><text x="74.9312%" y="1439.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (63 samples, 0.02%)</title><rect x="74.6812%" y="1413" width="0.0219%" height="15" fill="rgb(243,128,48)"/><text x="74.9312%" y="1423.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (63 samples, 0.02%)</title><rect x="74.6812%" y="1397" width="0.0219%" height="15" fill="rgb(253,16,10)"/><text x="74.9312%" y="1407.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (42 samples, 0.01%)</title><rect x="74.6885%" y="1381" width="0.0146%" height="15" fill="rgb(228,67,27)"/><text x="74.9385%" y="1391.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.01%)</title><rect x="74.6885%" y="1365" width="0.0146%" height="15" fill="rgb(231,105,25)"/><text x="74.9385%" y="1375.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (104 samples, 0.04%)</title><rect x="74.6687%" y="1541" width="0.0361%" height="15" fill="rgb(213,166,47)"/><text x="74.9187%" y="1551.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (149 samples, 0.05%)</title><rect x="74.6687%" y="1557" width="0.0517%" height="15" fill="rgb(209,27,10)"/><text x="74.9187%" y="1567.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (45 samples, 0.02%)</title><rect x="74.7048%" y="1541" width="0.0156%" height="15" fill="rgb(241,44,30)"/><text x="74.9548%" y="1551.50"></text></g><g><title>log::__private_api_log (45 samples, 0.02%)</title><rect x="74.7048%" y="1525" width="0.0156%" height="15" fill="rgb(223,216,15)"/><text x="74.9548%" y="1535.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (45 samples, 0.02%)</title><rect x="74.7048%" y="1509" width="0.0156%" height="15" fill="rgb(227,14,7)"/><text x="74.9548%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (45 samples, 0.02%)</title><rect x="74.7048%" y="1493" width="0.0156%" height="15" fill="rgb(237,14,5)"/><text x="74.9548%" y="1503.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (45 samples, 0.02%)</title><rect x="74.7048%" y="1477" width="0.0156%" height="15" fill="rgb(232,14,36)"/><text x="74.9548%" y="1487.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (45 samples, 0.02%)</title><rect x="74.7048%" y="1461" width="0.0156%" height="15" fill="rgb(234,0,38)"/><text x="74.9548%" y="1471.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (45 samples, 0.02%)</title><rect x="74.7048%" y="1445" width="0.0156%" height="15" fill="rgb(207,170,14)"/><text x="74.9548%" y="1455.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (45 samples, 0.02%)</title><rect x="74.7048%" y="1429" width="0.0156%" height="15" fill="rgb(252,45,13)"/><text x="74.9548%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (45 samples, 0.02%)</title><rect x="74.7048%" y="1413" width="0.0156%" height="15" fill="rgb(213,142,7)"/><text x="74.9548%" y="1423.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (48 samples, 0.02%)</title><rect x="74.7204%" y="1461" width="0.0167%" height="15" fill="rgb(216,157,23)"/><text x="74.9704%" y="1471.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (48 samples, 0.02%)</title><rect x="74.7204%" y="1445" width="0.0167%" height="15" fill="rgb(212,145,33)"/><text x="74.9704%" y="1455.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (48 samples, 0.02%)</title><rect x="74.7204%" y="1429" width="0.0167%" height="15" fill="rgb(233,26,13)"/><text x="74.9704%" y="1439.50"></text></g><g><title>tokio::runtime::park::Inner::park (48 samples, 0.02%)</title><rect x="74.7204%" y="1413" width="0.0167%" height="15" fill="rgb(219,196,19)"/><text x="74.9704%" y="1423.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (48 samples, 0.02%)</title><rect x="74.7204%" y="1397" width="0.0167%" height="15" fill="rgb(246,56,21)"/><text x="74.9704%" y="1407.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (48 samples, 0.02%)</title><rect x="74.7204%" y="1381" width="0.0167%" height="15" fill="rgb(222,28,53)"/><text x="74.9704%" y="1391.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (48 samples, 0.02%)</title><rect x="74.7204%" y="1365" width="0.0167%" height="15" fill="rgb(224,5,27)"/><text x="74.9704%" y="1375.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (48 samples, 0.02%)</title><rect x="74.7204%" y="1349" width="0.0167%" height="15" fill="rgb(220,153,33)"/><text x="74.9704%" y="1359.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (48 samples, 0.02%)</title><rect x="74.7204%" y="1333" width="0.0167%" height="15" fill="rgb(226,58,19)"/><text x="74.9704%" y="1343.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (48 samples, 0.02%)</title><rect x="74.7204%" y="1317" width="0.0167%" height="15" fill="rgb(239,112,23)"/><text x="74.9704%" y="1327.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (48 samples, 0.02%)</title><rect x="74.7204%" y="1301" width="0.0167%" height="15" fill="rgb(251,213,20)"/><text x="74.9704%" y="1311.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::poll_at (29 samples, 0.01%)</title><rect x="74.7270%" y="1285" width="0.0101%" height="15" fill="rgb(215,181,21)"/><text x="74.9770%" y="1295.50"></text></g><g><title>tokio::time::driver::wheel::Wheel::next_expiration (29 samples, 0.01%)</title><rect x="74.7270%" y="1269" width="0.0101%" height="15" fill="rgb(240,8,35)"/><text x="74.9770%" y="1279.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (29 samples, 0.01%)</title><rect x="74.7270%" y="1253" width="0.0101%" height="15" fill="rgb(232,203,3)"/><text x="74.9770%" y="1263.50"></text></g><g><title>core::mem::replace (29 samples, 0.01%)</title><rect x="74.7270%" y="1237" width="0.0101%" height="15" fill="rgb(214,202,43)"/><text x="74.9770%" y="1247.50"></text></g><g><title>core::mem::swap (29 samples, 0.01%)</title><rect x="74.7270%" y="1221" width="0.0101%" height="15" fill="rgb(254,35,11)"/><text x="74.9770%" y="1231.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (29 samples, 0.01%)</title><rect x="74.7270%" y="1205" width="0.0101%" height="15" fill="rgb(239,173,13)"/><text x="74.9770%" y="1215.50"></text></g><g><title>core::ptr::read (29 samples, 0.01%)</title><rect x="74.7270%" y="1189" width="0.0101%" height="15" fill="rgb(220,141,0)"/><text x="74.9770%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.01%)</title><rect x="74.7270%" y="1173" width="0.0101%" height="15" fill="rgb(210,98,12)"/><text x="74.9770%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="74.7378%" y="1077" width="0.0139%" height="15" fill="rgb(254,153,22)"/><text x="74.9878%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="74.7378%" y="1061" width="0.0139%" height="15" fill="rgb(247,223,17)"/><text x="74.9878%" y="1071.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.01%)</title><rect x="74.7378%" y="1045" width="0.0139%" height="15" fill="rgb(246,56,7)"/><text x="74.9878%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (40 samples, 0.01%)</title><rect x="74.7378%" y="1029" width="0.0139%" height="15" fill="rgb(240,226,12)"/><text x="74.9878%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="74.7378%" y="1013" width="0.0139%" height="15" fill="rgb(205,87,46)"/><text x="74.9878%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="74.7378%" y="997" width="0.0139%" height="15" fill="rgb(245,214,51)"/><text x="74.9878%" y="1007.50"></text></g><g><title>tunneler::server::client::client::Client::recv_user_connection::{{closure}} (98 samples, 0.03%)</title><rect x="74.7371%" y="1093" width="0.0340%" height="15" fill="rgb(223,172,33)"/><text x="74.9871%" y="1103.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (56 samples, 0.02%)</title><rect x="74.7517%" y="1077" width="0.0194%" height="15" fill="rgb(227,203,34)"/><text x="75.0017%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (56 samples, 0.02%)</title><rect x="74.7517%" y="1061" width="0.0194%" height="15" fill="rgb(248,143,44)"/><text x="75.0017%" y="1071.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (56 samples, 0.02%)</title><rect x="74.7517%" y="1045" width="0.0194%" height="15" fill="rgb(226,162,5)"/><text x="75.0017%" y="1055.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (51 samples, 0.02%)</title><rect x="74.7534%" y="1029" width="0.0177%" height="15" fill="rgb(211,143,1)"/><text x="75.0034%" y="1039.50"></text></g><g><title>core::task::wake::Waker::wake (51 samples, 0.02%)</title><rect x="74.7534%" y="1013" width="0.0177%" height="15" fill="rgb(224,96,15)"/><text x="75.0034%" y="1023.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (51 samples, 0.02%)</title><rect x="74.7534%" y="997" width="0.0177%" height="15" fill="rgb(222,4,38)"/><text x="75.0034%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (51 samples, 0.02%)</title><rect x="74.7534%" y="981" width="0.0177%" height="15" fill="rgb(253,228,15)"/><text x="75.0034%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (46 samples, 0.02%)</title><rect x="74.7551%" y="965" width="0.0160%" height="15" fill="rgb(242,194,12)"/><text x="75.0051%" y="975.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (71 samples, 0.02%)</title><rect x="74.7711%" y="1077" width="0.0246%" height="15" fill="rgb(214,177,31)"/><text x="75.0211%" y="1087.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (42 samples, 0.01%)</title><rect x="74.7812%" y="1061" width="0.0146%" height="15" fill="rgb(226,58,51)"/><text x="75.0312%" y="1071.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (42 samples, 0.01%)</title><rect x="74.7812%" y="1045" width="0.0146%" height="15" fill="rgb(250,119,16)"/><text x="75.0312%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (42 samples, 0.01%)</title><rect x="74.7812%" y="1029" width="0.0146%" height="15" fill="rgb(223,128,53)"/><text x="75.0312%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.01%)</title><rect x="74.7957%" y="1077" width="0.0128%" height="15" fill="rgb(251,199,15)"/><text x="75.0457%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.01%)</title><rect x="74.7957%" y="1061" width="0.0128%" height="15" fill="rgb(235,168,42)"/><text x="75.0457%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 0.01%)</title><rect x="74.7964%" y="1045" width="0.0121%" height="15" fill="rgb(250,210,17)"/><text x="75.0464%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 0.01%)</title><rect x="74.7964%" y="1029" width="0.0121%" height="15" fill="rgb(226,36,41)"/><text x="75.0464%" y="1039.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.01%)</title><rect x="74.7964%" y="1013" width="0.0121%" height="15" fill="rgb(225,87,10)"/><text x="75.0464%" y="1023.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (35 samples, 0.01%)</title><rect x="74.7964%" y="997" width="0.0121%" height="15" fill="rgb(228,83,9)"/><text x="75.0464%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 0.01%)</title><rect x="74.7964%" y="981" width="0.0121%" height="15" fill="rgb(225,16,36)"/><text x="75.0464%" y="991.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.01%)</title><rect x="74.7964%" y="965" width="0.0121%" height="15" fill="rgb(242,198,13)"/><text x="75.0464%" y="975.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.01%)</title><rect x="74.7964%" y="949" width="0.0121%" height="15" fill="rgb(239,25,51)"/><text x="75.0464%" y="959.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (35 samples, 0.01%)</title><rect x="74.7964%" y="933" width="0.0121%" height="15" fill="rgb(239,28,37)"/><text x="75.0464%" y="943.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::free_blocks (35 samples, 0.01%)</title><rect x="74.7964%" y="917" width="0.0121%" height="15" fill="rgb(234,70,17)"/><text x="75.0464%" y="927.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (36 samples, 0.01%)</title><rect x="74.8086%" y="1061" width="0.0125%" height="15" fill="rgb(231,215,53)"/><text x="75.0586%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (36 samples, 0.01%)</title><rect x="74.8086%" y="1045" width="0.0125%" height="15" fill="rgb(218,140,42)"/><text x="75.0586%" y="1055.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (150 samples, 0.05%)</title><rect x="74.7711%" y="1093" width="0.0520%" height="15" fill="rgb(233,227,45)"/><text x="75.0211%" y="1103.50"></text></g><g><title>log::__private_api_log (42 samples, 0.01%)</title><rect x="74.8086%" y="1077" width="0.0146%" height="15" fill="rgb(225,189,21)"/><text x="75.0586%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.01%)</title><rect x="74.8231%" y="1077" width="0.0121%" height="15" fill="rgb(237,176,54)"/><text x="75.0731%" y="1087.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (35 samples, 0.01%)</title><rect x="74.8231%" y="1061" width="0.0121%" height="15" fill="rgb(215,131,46)"/><text x="75.0731%" y="1071.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (35 samples, 0.01%)</title><rect x="74.8231%" y="1045" width="0.0121%" height="15" fill="rgb(218,95,20)"/><text x="75.0731%" y="1055.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (35 samples, 0.01%)</title><rect x="74.8231%" y="1029" width="0.0121%" height="15" fill="rgb(208,198,12)"/><text x="75.0731%" y="1039.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (35 samples, 0.01%)</title><rect x="74.8231%" y="1013" width="0.0121%" height="15" fill="rgb(239,107,50)"/><text x="75.0731%" y="1023.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (35 samples, 0.01%)</title><rect x="74.8231%" y="997" width="0.0121%" height="15" fill="rgb(240,217,37)"/><text x="75.0731%" y="1007.50"></text></g><g><title>tokio::runtime::task::raw::poll (547 samples, 0.19%)</title><rect x="74.6687%" y="1765" width="0.1898%" height="15" fill="rgb(242,197,49)"/><text x="74.9187%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (547 samples, 0.19%)</title><rect x="74.6687%" y="1749" width="0.1898%" height="15" fill="rgb(219,171,17)"/><text x="74.9187%" y="1759.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (547 samples, 0.19%)</title><rect x="74.6687%" y="1733" width="0.1898%" height="15" fill="rgb(209,81,40)"/><text x="74.9187%" y="1743.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (547 samples, 0.19%)</title><rect x="74.6687%" y="1717" width="0.1898%" height="15" fill="rgb(237,156,30)"/><text x="74.9187%" y="1727.50"></text></g><g><title>std::panic::catch_unwind (547 samples, 0.19%)</title><rect x="74.6687%" y="1701" width="0.1898%" height="15" fill="rgb(212,127,16)"/><text x="74.9187%" y="1711.50"></text></g><g><title>std::panicking::try (547 samples, 0.19%)</title><rect x="74.6687%" y="1685" width="0.1898%" height="15" fill="rgb(226,66,32)"/><text x="74.9187%" y="1695.50"></text></g><g><title>__rust_try (547 samples, 0.19%)</title><rect x="74.6687%" y="1669" width="0.1898%" height="15" fill="rgb(245,22,46)"/><text x="74.9187%" y="1679.50"></text></g><g><title>std::panicking::try::do_call (547 samples, 0.19%)</title><rect x="74.6687%" y="1653" width="0.1898%" height="15" fill="rgb(210,112,21)"/><text x="74.9187%" y="1663.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (547 samples, 0.19%)</title><rect x="74.6687%" y="1637" width="0.1898%" height="15" fill="rgb(207,118,39)"/><text x="74.9187%" y="1647.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (547 samples, 0.19%)</title><rect x="74.6687%" y="1621" width="0.1898%" height="15" fill="rgb(205,206,35)"/><text x="74.9187%" y="1631.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (547 samples, 0.19%)</title><rect x="74.6687%" y="1605" width="0.1898%" height="15" fill="rgb(222,120,2)"/><text x="74.9187%" y="1615.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (547 samples, 0.19%)</title><rect x="74.6687%" y="1589" width="0.1898%" height="15" fill="rgb(205,38,18)"/><text x="74.9187%" y="1599.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (547 samples, 0.19%)</title><rect x="74.6687%" y="1573" width="0.1898%" height="15" fill="rgb(226,61,2)"/><text x="74.9187%" y="1583.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (398 samples, 0.14%)</title><rect x="74.7204%" y="1557" width="0.1381%" height="15" fill="rgb(242,161,23)"/><text x="74.9704%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (398 samples, 0.14%)</title><rect x="74.7204%" y="1541" width="0.1381%" height="15" fill="rgb(213,13,52)"/><text x="74.9704%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (398 samples, 0.14%)</title><rect x="74.7204%" y="1525" width="0.1381%" height="15" fill="rgb(246,209,47)"/><text x="74.9704%" y="1535.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (398 samples, 0.14%)</title><rect x="74.7204%" y="1509" width="0.1381%" height="15" fill="rgb(214,41,3)"/><text x="74.9704%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (398 samples, 0.14%)</title><rect x="74.7204%" y="1493" width="0.1381%" height="15" fill="rgb(236,119,38)"/><text x="74.9704%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (398 samples, 0.14%)</title><rect x="74.7204%" y="1477" width="0.1381%" height="15" fill="rgb(218,50,11)"/><text x="74.9704%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (350 samples, 0.12%)</title><rect x="74.7371%" y="1461" width="0.1214%" height="15" fill="rgb(228,38,11)"/><text x="74.9871%" y="1471.50"></text></g><g><title>tokio::coop::budget (350 samples, 0.12%)</title><rect x="74.7371%" y="1445" width="0.1214%" height="15" fill="rgb(212,13,9)"/><text x="74.9871%" y="1455.50"></text></g><g><title>tokio::coop::with_budget (350 samples, 0.12%)</title><rect x="74.7371%" y="1429" width="0.1214%" height="15" fill="rgb(208,211,9)"/><text x="74.9871%" y="1439.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (350 samples, 0.12%)</title><rect x="74.7371%" y="1413" width="0.1214%" height="15" fill="rgb(239,39,32)"/><text x="74.9871%" y="1423.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (350 samples, 0.12%)</title><rect x="74.7371%" y="1397" width="0.1214%" height="15" fill="rgb(254,179,26)"/><text x="74.9871%" y="1407.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (350 samples, 0.12%)</title><rect x="74.7371%" y="1381" width="0.1214%" height="15" fill="rgb(249,165,28)"/><text x="74.9871%" y="1391.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (350 samples, 0.12%)</title><rect x="74.7371%" y="1365" width="0.1214%" height="15" fill="rgb(225,59,50)"/><text x="74.9871%" y="1375.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (350 samples, 0.12%)</title><rect x="74.7371%" y="1349" width="0.1214%" height="15" fill="rgb(209,122,5)"/><text x="74.9871%" y="1359.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (350 samples, 0.12%)</title><rect x="74.7371%" y="1333" width="0.1214%" height="15" fill="rgb(214,65,34)"/><text x="74.9871%" y="1343.50"></text></g><g><title>tokio::runtime::task::raw::poll (350 samples, 0.12%)</title><rect x="74.7371%" y="1317" width="0.1214%" height="15" fill="rgb(249,183,32)"/><text x="74.9871%" y="1327.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (350 samples, 0.12%)</title><rect x="74.7371%" y="1301" width="0.1214%" height="15" fill="rgb(218,122,24)"/><text x="74.9871%" y="1311.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (350 samples, 0.12%)</title><rect x="74.7371%" y="1285" width="0.1214%" height="15" fill="rgb(224,109,18)"/><text x="74.9871%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (350 samples, 0.12%)</title><rect x="74.7371%" y="1269" width="0.1214%" height="15" fill="rgb(210,68,50)"/><text x="74.9871%" y="1279.50"></text></g><g><title>std::panic::catch_unwind (350 samples, 0.12%)</title><rect x="74.7371%" y="1253" width="0.1214%" height="15" fill="rgb(212,184,34)"/><text x="74.9871%" y="1263.50"></text></g><g><title>std::panicking::try (350 samples, 0.12%)</title><rect x="74.7371%" y="1237" width="0.1214%" height="15" fill="rgb(238,105,48)"/><text x="74.9871%" y="1247.50"></text></g><g><title>__rust_try (350 samples, 0.12%)</title><rect x="74.7371%" y="1221" width="0.1214%" height="15" fill="rgb(222,134,54)"/><text x="74.9871%" y="1231.50"></text></g><g><title>std::panicking::try::do_call (350 samples, 0.12%)</title><rect x="74.7371%" y="1205" width="0.1214%" height="15" fill="rgb(246,24,43)"/><text x="74.9871%" y="1215.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (350 samples, 0.12%)</title><rect x="74.7371%" y="1189" width="0.1214%" height="15" fill="rgb(227,169,22)"/><text x="74.9871%" y="1199.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (350 samples, 0.12%)</title><rect x="74.7371%" y="1173" width="0.1214%" height="15" fill="rgb(253,152,4)"/><text x="74.9871%" y="1183.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (350 samples, 0.12%)</title><rect x="74.7371%" y="1157" width="0.1214%" height="15" fill="rgb(219,158,36)"/><text x="74.9871%" y="1167.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (350 samples, 0.12%)</title><rect x="74.7371%" y="1141" width="0.1214%" height="15" fill="rgb(251,128,40)"/><text x="74.9871%" y="1151.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (350 samples, 0.12%)</title><rect x="74.7371%" y="1125" width="0.1214%" height="15" fill="rgb(254,101,39)"/><text x="74.9871%" y="1135.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (350 samples, 0.12%)</title><rect x="74.7371%" y="1109" width="0.1214%" height="15" fill="rgb(221,168,40)"/><text x="74.9871%" y="1119.50"></text></g><g><title>tunneler::server::client::client::Client::sender::{{closure}} (102 samples, 0.04%)</title><rect x="74.8231%" y="1093" width="0.0354%" height="15" fill="rgb(221,14,27)"/><text x="75.0731%" y="1103.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (67 samples, 0.02%)</title><rect x="74.8353%" y="1077" width="0.0232%" height="15" fill="rgb(207,36,43)"/><text x="75.0853%" y="1087.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (34 samples, 0.01%)</title><rect x="74.8467%" y="1061" width="0.0118%" height="15" fill="rgb(240,172,53)"/><text x="75.0967%" y="1071.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (34 samples, 0.01%)</title><rect x="74.8467%" y="1045" width="0.0118%" height="15" fill="rgb(241,138,43)"/><text x="75.0967%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (34 samples, 0.01%)</title><rect x="74.8467%" y="1029" width="0.0118%" height="15" fill="rgb(227,78,19)"/><text x="75.0967%" y="1039.50"></text></g><g><title>__libc_calloc (67 samples, 0.02%)</title><rect x="74.8731%" y="1205" width="0.0232%" height="15" fill="rgb(215,127,44)"/><text x="75.1231%" y="1215.50"></text></g><g><title>__memset_avx2_unaligned_erms (31 samples, 0.01%)</title><rect x="74.8856%" y="1189" width="0.0108%" height="15" fill="rgb(227,13,10)"/><text x="75.1356%" y="1199.50"></text></g><g><title>alloc::alloc::alloc_zeroed (76 samples, 0.03%)</title><rect x="74.8710%" y="1221" width="0.0264%" height="15" fill="rgb(249,177,6)"/><text x="75.1210%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (120 samples, 0.04%)</title><rect x="74.8655%" y="1253" width="0.0416%" height="15" fill="rgb(215,154,26)"/><text x="75.1155%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (120 samples, 0.04%)</title><rect x="74.8655%" y="1237" width="0.0416%" height="15" fill="rgb(250,168,20)"/><text x="75.1155%" y="1247.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (178 samples, 0.06%)</title><rect x="74.8585%" y="1365" width="0.0618%" height="15" fill="rgb(222,53,38)"/><text x="75.1085%" y="1375.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (178 samples, 0.06%)</title><rect x="74.8585%" y="1349" width="0.0618%" height="15" fill="rgb(245,154,5)"/><text x="75.1085%" y="1359.50"></text></g><g><title>alloc::vec::from_elem (158 samples, 0.05%)</title><rect x="74.8655%" y="1333" width="0.0548%" height="15" fill="rgb(214,89,50)"/><text x="75.1155%" y="1343.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (158 samples, 0.05%)</title><rect x="74.8655%" y="1317" width="0.0548%" height="15" fill="rgb(232,73,14)"/><text x="75.1155%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (158 samples, 0.05%)</title><rect x="74.8655%" y="1301" width="0.0548%" height="15" fill="rgb(230,101,20)"/><text x="75.1155%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (158 samples, 0.05%)</title><rect x="74.8655%" y="1285" width="0.0548%" height="15" fill="rgb(208,56,28)"/><text x="75.1155%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (158 samples, 0.05%)</title><rect x="74.8655%" y="1269" width="0.0548%" height="15" fill="rgb(247,205,22)"/><text x="75.1155%" y="1279.50"></text></g><g><title>core::alloc::layout::Layout::array (38 samples, 0.01%)</title><rect x="74.9071%" y="1253" width="0.0132%" height="15" fill="rgb(252,109,51)"/><text x="75.1571%" y="1263.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (30 samples, 0.01%)</title><rect x="74.9203%" y="1365" width="0.0104%" height="15" fill="rgb(220,40,24)"/><text x="75.1703%" y="1375.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (30 samples, 0.01%)</title><rect x="74.9203%" y="1349" width="0.0104%" height="15" fill="rgb(251,108,7)"/><text x="75.1703%" y="1359.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (30 samples, 0.01%)</title><rect x="74.9203%" y="1333" width="0.0104%" height="15" fill="rgb(238,102,51)"/><text x="75.1703%" y="1343.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (30 samples, 0.01%)</title><rect x="74.9203%" y="1317" width="0.0104%" height="15" fill="rgb(219,149,34)"/><text x="75.1703%" y="1327.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (30 samples, 0.01%)</title><rect x="74.9203%" y="1301" width="0.0104%" height="15" fill="rgb(239,70,0)"/><text x="75.1703%" y="1311.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::advance (30 samples, 0.01%)</title><rect x="74.9203%" y="1285" width="0.0104%" height="15" fill="rgb(246,214,23)"/><text x="75.1703%" y="1295.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (30 samples, 0.01%)</title><rect x="74.9203%" y="1269" width="0.0104%" height="15" fill="rgb(239,221,51)"/><text x="75.1703%" y="1279.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (30 samples, 0.01%)</title><rect x="74.9203%" y="1253" width="0.0104%" height="15" fill="rgb(254,62,14)"/><text x="75.1703%" y="1263.50"></text></g><g><title>env_logger::Logger::matches (77 samples, 0.03%)</title><rect x="74.9331%" y="1333" width="0.0267%" height="15" fill="rgb(253,57,33)"/><text x="75.1831%" y="1343.50"></text></g><g><title>env_logger::filter::Filter::matches (77 samples, 0.03%)</title><rect x="74.9331%" y="1317" width="0.0267%" height="15" fill="rgb(229,34,6)"/><text x="75.1831%" y="1327.50"></text></g><g><title>env_logger::filter::Filter::enabled (77 samples, 0.03%)</title><rect x="74.9331%" y="1301" width="0.0267%" height="15" fill="rgb(235,191,23)"/><text x="75.1831%" y="1311.50"></text></g><g><title>env_logger::filter::enabled (77 samples, 0.03%)</title><rect x="74.9331%" y="1285" width="0.0267%" height="15" fill="rgb(217,207,27)"/><text x="75.1831%" y="1295.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (46 samples, 0.02%)</title><rect x="74.9439%" y="1269" width="0.0160%" height="15" fill="rgb(232,41,44)"/><text x="75.1939%" y="1279.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (40 samples, 0.01%)</title><rect x="74.9460%" y="1253" width="0.0139%" height="15" fill="rgb(221,188,19)"/><text x="75.1960%" y="1263.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (122 samples, 0.04%)</title><rect x="74.9598%" y="1301" width="0.0423%" height="15" fill="rgb(245,180,45)"/><text x="75.2098%" y="1311.50"></text></g><g><title>env_logger::fmt::Formatter::clear (58 samples, 0.02%)</title><rect x="74.9820%" y="1285" width="0.0201%" height="15" fill="rgb(250,220,42)"/><text x="75.2320%" y="1295.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::clear (29 samples, 0.01%)</title><rect x="74.9921%" y="1269" width="0.0101%" height="15" fill="rgb(234,16,34)"/><text x="75.2421%" y="1279.50"></text></g><g><title>core::cell::BorrowRefMut::new (47 samples, 0.02%)</title><rect x="75.0049%" y="1285" width="0.0163%" height="15" fill="rgb(233,217,23)"/><text x="75.2549%" y="1295.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (58 samples, 0.02%)</title><rect x="75.0022%" y="1301" width="0.0201%" height="15" fill="rgb(209,22,46)"/><text x="75.2522%" y="1311.50"></text></g><g><title>log::__private_api_log (270 samples, 0.09%)</title><rect x="74.9331%" y="1365" width="0.0937%" height="15" fill="rgb(213,101,18)"/><text x="75.1831%" y="1375.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (270 samples, 0.09%)</title><rect x="74.9331%" y="1349" width="0.0937%" height="15" fill="rgb(215,179,52)"/><text x="75.1831%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (193 samples, 0.07%)</title><rect x="74.9598%" y="1333" width="0.0670%" height="15" fill="rgb(223,50,25)"/><text x="75.2098%" y="1343.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (193 samples, 0.07%)</title><rect x="74.9598%" y="1317" width="0.0670%" height="15" fill="rgb(224,51,44)"/><text x="75.2098%" y="1327.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.02%)</title><rect x="75.0317%" y="1269" width="0.0246%" height="15" fill="rgb(224,13,54)"/><text x="75.2817%" y="1279.50"></text></g><g><title>hashbrown::raw::h2 (39 samples, 0.01%)</title><rect x="75.0563%" y="1237" width="0.0135%" height="15" fill="rgb(219,58,47)"/><text x="75.3063%" y="1247.50"></text></g><g><title>core::cmp::Ord::min (39 samples, 0.01%)</title><rect x="75.0563%" y="1221" width="0.0135%" height="15" fill="rgb(246,124,34)"/><text x="75.3063%" y="1231.50"></text></g><g><title>core::cmp::min_by (39 samples, 0.01%)</title><rect x="75.0563%" y="1205" width="0.0135%" height="15" fill="rgb(245,109,25)"/><text x="75.3063%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.01%)</title><rect x="75.0761%" y="1205" width="0.0142%" height="15" fill="rgb(235,48,23)"/><text x="75.3261%" y="1215.50"></text></g><g><title>__memmove_avx_unaligned_erms (32 samples, 0.01%)</title><rect x="75.0792%" y="1189" width="0.0111%" height="15" fill="rgb(229,203,36)"/><text x="75.3292%" y="1199.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (60 samples, 0.02%)</title><rect x="75.0698%" y="1237" width="0.0208%" height="15" fill="rgb(234,180,9)"/><text x="75.3198%" y="1247.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (60 samples, 0.02%)</title><rect x="75.0698%" y="1221" width="0.0208%" height="15" fill="rgb(228,98,45)"/><text x="75.3198%" y="1231.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (252 samples, 0.09%)</title><rect x="75.0268%" y="1365" width="0.0874%" height="15" fill="rgb(240,24,36)"/><text x="75.2768%" y="1375.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (252 samples, 0.09%)</title><rect x="75.0268%" y="1349" width="0.0874%" height="15" fill="rgb(227,154,19)"/><text x="75.2768%" y="1359.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (252 samples, 0.09%)</title><rect x="75.0268%" y="1333" width="0.0874%" height="15" fill="rgb(231,2,48)"/><text x="75.2768%" y="1343.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (252 samples, 0.09%)</title><rect x="75.0268%" y="1317" width="0.0874%" height="15" fill="rgb(219,216,0)"/><text x="75.2768%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (252 samples, 0.09%)</title><rect x="75.0268%" y="1301" width="0.0874%" height="15" fill="rgb(251,88,0)"/><text x="75.2768%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (238 samples, 0.08%)</title><rect x="75.0317%" y="1285" width="0.0826%" height="15" fill="rgb(242,45,45)"/><text x="75.2817%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (167 samples, 0.06%)</title><rect x="75.0563%" y="1269" width="0.0579%" height="15" fill="rgb(218,149,45)"/><text x="75.3063%" y="1279.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (167 samples, 0.06%)</title><rect x="75.0563%" y="1253" width="0.0579%" height="15" fill="rgb(247,194,10)"/><text x="75.3063%" y="1263.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (68 samples, 0.02%)</title><rect x="75.0906%" y="1237" width="0.0236%" height="15" fill="rgb(234,33,37)"/><text x="75.3406%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (55 samples, 0.02%)</title><rect x="75.1153%" y="1285" width="0.0191%" height="15" fill="rgb(218,61,13)"/><text x="75.3653%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (47 samples, 0.02%)</title><rect x="75.1181%" y="1269" width="0.0163%" height="15" fill="rgb(210,80,52)"/><text x="75.3681%" y="1279.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (47 samples, 0.02%)</title><rect x="75.1181%" y="1253" width="0.0163%" height="15" fill="rgb(218,203,27)"/><text x="75.3681%" y="1263.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (67 samples, 0.02%)</title><rect x="75.1142%" y="1365" width="0.0232%" height="15" fill="rgb(209,126,33)"/><text x="75.3642%" y="1375.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (67 samples, 0.02%)</title><rect x="75.1142%" y="1349" width="0.0232%" height="15" fill="rgb(234,173,41)"/><text x="75.3642%" y="1359.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (67 samples, 0.02%)</title><rect x="75.1142%" y="1333" width="0.0232%" height="15" fill="rgb(228,166,9)"/><text x="75.3642%" y="1343.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (67 samples, 0.02%)</title><rect x="75.1142%" y="1317" width="0.0232%" height="15" fill="rgb(208,124,43)"/><text x="75.3642%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (67 samples, 0.02%)</title><rect x="75.1142%" y="1301" width="0.0232%" height="15" fill="rgb(212,154,38)"/><text x="75.3642%" y="1311.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (35 samples, 0.01%)</title><rect x="75.1375%" y="1301" width="0.0121%" height="15" fill="rgb(246,179,35)"/><text x="75.3875%" y="1311.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (35 samples, 0.01%)</title><rect x="75.1375%" y="1285" width="0.0121%" height="15" fill="rgb(251,3,50)"/><text x="75.3875%" y="1295.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.01%)</title><rect x="75.1375%" y="1269" width="0.0121%" height="15" fill="rgb(219,96,8)"/><text x="75.3875%" y="1279.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write::{{closure}} (35 samples, 0.01%)</title><rect x="75.1375%" y="1253" width="0.0121%" height="15" fill="rgb(251,216,33)"/><text x="75.3875%" y="1263.50"></text></g><g><title>core::task::wake::Waker::wake (44 samples, 0.02%)</title><rect x="75.1496%" y="1285" width="0.0153%" height="15" fill="rgb(243,145,29)"/><text x="75.3996%" y="1295.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (44 samples, 0.02%)</title><rect x="75.1496%" y="1269" width="0.0153%" height="15" fill="rgb(210,75,20)"/><text x="75.3996%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (44 samples, 0.02%)</title><rect x="75.1496%" y="1253" width="0.0153%" height="15" fill="rgb(235,56,8)"/><text x="75.3996%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (44 samples, 0.02%)</title><rect x="75.1496%" y="1237" width="0.0153%" height="15" fill="rgb(226,175,49)"/><text x="75.3996%" y="1247.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (44 samples, 0.02%)</title><rect x="75.1496%" y="1221" width="0.0153%" height="15" fill="rgb(242,204,23)"/><text x="75.3996%" y="1231.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (44 samples, 0.02%)</title><rect x="75.1496%" y="1205" width="0.0153%" height="15" fill="rgb(225,104,24)"/><text x="75.3996%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (44 samples, 0.02%)</title><rect x="75.1496%" y="1189" width="0.0153%" height="15" fill="rgb(253,34,1)"/><text x="75.3996%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (44 samples, 0.02%)</title><rect x="75.1496%" y="1173" width="0.0153%" height="15" fill="rgb(233,199,23)"/><text x="75.3996%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (44 samples, 0.02%)</title><rect x="75.1496%" y="1157" width="0.0153%" height="15" fill="rgb(247,7,51)"/><text x="75.3996%" y="1167.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (44 samples, 0.02%)</title><rect x="75.1496%" y="1141" width="0.0153%" height="15" fill="rgb(214,146,12)"/><text x="75.3996%" y="1151.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (916 samples, 0.32%)</title><rect x="74.8585%" y="1381" width="0.3178%" height="15" fill="rgb(234,181,43)"/><text x="75.1085%" y="1391.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (112 samples, 0.04%)</title><rect x="75.1375%" y="1365" width="0.0389%" height="15" fill="rgb(239,148,6)"/><text x="75.3875%" y="1375.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (112 samples, 0.04%)</title><rect x="75.1375%" y="1349" width="0.0389%" height="15" fill="rgb(206,151,17)"/><text x="75.3875%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (112 samples, 0.04%)</title><rect x="75.1375%" y="1333" width="0.0389%" height="15" fill="rgb(213,215,10)"/><text x="75.3875%" y="1343.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (112 samples, 0.04%)</title><rect x="75.1375%" y="1317" width="0.0389%" height="15" fill="rgb(215,220,44)"/><text x="75.3875%" y="1327.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (77 samples, 0.03%)</title><rect x="75.1496%" y="1301" width="0.0267%" height="15" fill="rgb(245,205,37)"/><text x="75.3996%" y="1311.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (33 samples, 0.01%)</title><rect x="75.1649%" y="1285" width="0.0114%" height="15" fill="rgb(245,130,43)"/><text x="75.4149%" y="1295.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (33 samples, 0.01%)</title><rect x="75.1649%" y="1269" width="0.0114%" height="15" fill="rgb(231,227,38)"/><text x="75.4149%" y="1279.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker::{{closure}} (33 samples, 0.01%)</title><rect x="75.1649%" y="1253" width="0.0114%" height="15" fill="rgb(233,185,4)"/><text x="75.4149%" y="1263.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (33 samples, 0.01%)</title><rect x="75.1649%" y="1237" width="0.0114%" height="15" fill="rgb(224,154,43)"/><text x="75.4149%" y="1247.50"></text></g><g><title>core::mem::take (33 samples, 0.01%)</title><rect x="75.1649%" y="1221" width="0.0114%" height="15" fill="rgb(235,156,15)"/><text x="75.4149%" y="1231.50"></text></g><g><title>core::mem::replace (33 samples, 0.01%)</title><rect x="75.1649%" y="1205" width="0.0114%" height="15" fill="rgb(211,55,43)"/><text x="75.4149%" y="1215.50"></text></g><g><title>core::mem::swap (33 samples, 0.01%)</title><rect x="75.1649%" y="1189" width="0.0114%" height="15" fill="rgb(247,149,40)"/><text x="75.4149%" y="1199.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (33 samples, 0.01%)</title><rect x="75.1649%" y="1173" width="0.0114%" height="15" fill="rgb(232,171,16)"/><text x="75.4149%" y="1183.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (81 samples, 0.03%)</title><rect x="75.1763%" y="1189" width="0.0281%" height="15" fill="rgb(215,117,49)"/><text x="75.4263%" y="1199.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (81 samples, 0.03%)</title><rect x="75.1763%" y="1173" width="0.0281%" height="15" fill="rgb(246,194,11)"/><text x="75.4263%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (112 samples, 0.04%)</title><rect x="75.1763%" y="1237" width="0.0389%" height="15" fill="rgb(242,101,44)"/><text x="75.4263%" y="1247.50"></text></g><g><title>std::io::Write::write_fmt (112 samples, 0.04%)</title><rect x="75.1763%" y="1221" width="0.0389%" height="15" fill="rgb(226,174,6)"/><text x="75.4263%" y="1231.50"></text></g><g><title>core::fmt::write (112 samples, 0.04%)</title><rect x="75.1763%" y="1205" width="0.0389%" height="15" fill="rgb(213,150,20)"/><text x="75.4263%" y="1215.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (31 samples, 0.01%)</title><rect x="75.2044%" y="1189" width="0.0108%" height="15" fill="rgb(222,124,42)"/><text x="75.4544%" y="1199.50"></text></g><g><title>std::io::Write::write_all (31 samples, 0.01%)</title><rect x="75.2044%" y="1173" width="0.0108%" height="15" fill="rgb(250,19,47)"/><text x="75.4544%" y="1183.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (76 samples, 0.03%)</title><rect x="75.2152%" y="1189" width="0.0264%" height="15" fill="rgb(241,217,19)"/><text x="75.4652%" y="1199.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (71 samples, 0.02%)</title><rect x="75.2169%" y="1173" width="0.0246%" height="15" fill="rgb(207,210,34)"/><text x="75.4669%" y="1183.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (65 samples, 0.02%)</title><rect x="75.2190%" y="1157" width="0.0226%" height="15" fill="rgb(244,45,4)"/><text x="75.4690%" y="1167.50"></text></g><g><title>core::fmt::write (60 samples, 0.02%)</title><rect x="75.2208%" y="1141" width="0.0208%" height="15" fill="rgb(252,134,50)"/><text x="75.4708%" y="1151.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (38 samples, 0.01%)</title><rect x="75.2284%" y="1125" width="0.0132%" height="15" fill="rgb(238,74,2)"/><text x="75.4784%" y="1135.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (98 samples, 0.03%)</title><rect x="75.2152%" y="1237" width="0.0340%" height="15" fill="rgb(226,58,46)"/><text x="75.4652%" y="1247.50"></text></g><g><title>std::io::Write::write_fmt (98 samples, 0.03%)</title><rect x="75.2152%" y="1221" width="0.0340%" height="15" fill="rgb(232,83,35)"/><text x="75.4652%" y="1231.50"></text></g><g><title>core::fmt::write (98 samples, 0.03%)</title><rect x="75.2152%" y="1205" width="0.0340%" height="15" fill="rgb(212,148,47)"/><text x="75.4652%" y="1215.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (32 samples, 0.01%)</title><rect x="75.2492%" y="1173" width="0.0111%" height="15" fill="rgb(235,29,1)"/><text x="75.4992%" y="1183.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (32 samples, 0.01%)</title><rect x="75.2492%" y="1157" width="0.0111%" height="15" fill="rgb(247,55,37)"/><text x="75.4992%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (37 samples, 0.01%)</title><rect x="75.2492%" y="1221" width="0.0128%" height="15" fill="rgb(222,48,3)"/><text x="75.4992%" y="1231.50"></text></g><g><title>std::io::Write::write_fmt (37 samples, 0.01%)</title><rect x="75.2492%" y="1205" width="0.0128%" height="15" fill="rgb(234,21,33)"/><text x="75.4992%" y="1215.50"></text></g><g><title>core::fmt::write (37 samples, 0.01%)</title><rect x="75.2492%" y="1189" width="0.0128%" height="15" fill="rgb(247,178,53)"/><text x="75.4992%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (38 samples, 0.01%)</title><rect x="75.2492%" y="1237" width="0.0132%" height="15" fill="rgb(225,75,7)"/><text x="75.4992%" y="1247.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (92 samples, 0.03%)</title><rect x="75.2672%" y="1205" width="0.0319%" height="15" fill="rgb(219,199,7)"/><text x="75.5172%" y="1215.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::style (70 samples, 0.02%)</title><rect x="75.2749%" y="1189" width="0.0243%" height="15" fill="rgb(209,93,42)"/><text x="75.5249%" y="1199.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.02%)</title><rect x="75.2749%" y="1173" width="0.0243%" height="15" fill="rgb(240,175,17)"/><text x="75.5249%" y="1183.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (70 samples, 0.02%)</title><rect x="75.2749%" y="1157" width="0.0243%" height="15" fill="rgb(232,106,7)"/><text x="75.5249%" y="1167.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (70 samples, 0.02%)</title><rect x="75.2749%" y="1141" width="0.0243%" height="15" fill="rgb(242,106,43)"/><text x="75.5249%" y="1151.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (70 samples, 0.02%)</title><rect x="75.2749%" y="1125" width="0.0243%" height="15" fill="rgb(242,61,37)"/><text x="75.5249%" y="1135.50"></text></g><g><title>core::mem::replace (70 samples, 0.02%)</title><rect x="75.2749%" y="1109" width="0.0243%" height="15" fill="rgb(205,72,10)"/><text x="75.5249%" y="1119.50"></text></g><g><title>core::mem::swap (55 samples, 0.02%)</title><rect x="75.2801%" y="1093" width="0.0191%" height="15" fill="rgb(214,184,36)"/><text x="75.5301%" y="1103.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (49 samples, 0.02%)</title><rect x="75.2822%" y="1077" width="0.0170%" height="15" fill="rgb(206,107,18)"/><text x="75.5322%" y="1087.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (362 samples, 0.13%)</title><rect x="75.1763%" y="1285" width="0.1256%" height="15" fill="rgb(210,75,5)"/><text x="75.4263%" y="1295.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (362 samples, 0.13%)</title><rect x="75.1763%" y="1269" width="0.1256%" height="15" fill="rgb(205,3,19)"/><text x="75.4263%" y="1279.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (362 samples, 0.13%)</title><rect x="75.1763%" y="1253" width="0.1256%" height="15" fill="rgb(207,181,42)"/><text x="75.4263%" y="1263.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (106 samples, 0.04%)</title><rect x="75.2652%" y="1237" width="0.0368%" height="15" fill="rgb(229,179,43)"/><text x="75.5152%" y="1247.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (106 samples, 0.04%)</title><rect x="75.2652%" y="1221" width="0.0368%" height="15" fill="rgb(246,95,30)"/><text x="75.5152%" y="1231.50"></text></g><g><title>__check_object_size (34 samples, 0.01%)</title><rect x="75.3956%" y="933" width="0.0118%" height="15" fill="rgb(234,144,45)"/><text x="75.6456%" y="943.50"></text></g><g><title>copy_user_generic_string (31 samples, 0.01%)</title><rect x="75.4133%" y="933" width="0.0108%" height="15" fill="rgb(250,54,25)"/><text x="75.6633%" y="943.50"></text></g><g><title>do_output_char (48 samples, 0.02%)</title><rect x="75.5261%" y="917" width="0.0167%" height="15" fill="rgb(215,195,40)"/><text x="75.7761%" y="927.50"></text></g><g><title>pty_write (35 samples, 0.01%)</title><rect x="75.5306%" y="901" width="0.0121%" height="15" fill="rgb(233,188,42)"/><text x="75.7806%" y="911.50"></text></g><g><title>__sched_text_start (39 samples, 0.01%)</title><rect x="75.5493%" y="869" width="0.0135%" height="15" fill="rgb(247,227,35)"/><text x="75.7993%" y="879.50"></text></g><g><title>mutex_lock (55 samples, 0.02%)</title><rect x="75.5441%" y="917" width="0.0191%" height="15" fill="rgb(249,124,27)"/><text x="75.7941%" y="927.50"></text></g><g><title>_cond_resched (42 samples, 0.01%)</title><rect x="75.5486%" y="901" width="0.0146%" height="15" fill="rgb(219,207,25)"/><text x="75.7986%" y="911.50"></text></g><g><title>preempt_schedule_common (41 samples, 0.01%)</title><rect x="75.5490%" y="885" width="0.0142%" height="15" fill="rgb(241,216,47)"/><text x="75.7990%" y="895.50"></text></g><g><title>select_task_rq_fair (109 samples, 0.04%)</title><rect x="75.6479%" y="805" width="0.0378%" height="15" fill="rgb(233,82,50)"/><text x="75.8979%" y="815.50"></text></g><g><title>select_idle_sibling (73 samples, 0.03%)</title><rect x="75.6603%" y="789" width="0.0253%" height="15" fill="rgb(232,63,2)"/><text x="75.9103%" y="799.50"></text></g><g><title>select_idle_sibling.part.0 (39 samples, 0.01%)</title><rect x="75.6721%" y="773" width="0.0135%" height="15" fill="rgb(236,184,28)"/><text x="75.9221%" y="783.50"></text></g><g><title>enqueue_entity (63 samples, 0.02%)</title><rect x="75.6985%" y="757" width="0.0219%" height="15" fill="rgb(254,63,27)"/><text x="75.9485%" y="767.50"></text></g><g><title>enqueue_task_fair (89 samples, 0.03%)</title><rect x="75.6930%" y="773" width="0.0309%" height="15" fill="rgb(253,106,28)"/><text x="75.9430%" y="783.50"></text></g><g><title>activate_task (128 samples, 0.04%)</title><rect x="75.6919%" y="789" width="0.0444%" height="15" fill="rgb(225,141,39)"/><text x="75.9419%" y="799.50"></text></g><g><title>psi_task_change (36 samples, 0.01%)</title><rect x="75.7238%" y="773" width="0.0125%" height="15" fill="rgb(222,157,20)"/><text x="75.9738%" y="783.50"></text></g><g><title>ttwu_do_activate (171 samples, 0.06%)</title><rect x="75.6909%" y="805" width="0.0593%" height="15" fill="rgb(210,190,9)"/><text x="75.9409%" y="815.50"></text></g><g><title>ttwu_do_wakeup (34 samples, 0.01%)</title><rect x="75.7384%" y="789" width="0.0118%" height="15" fill="rgb(242,167,7)"/><text x="75.9884%" y="799.50"></text></g><g><title>check_preempt_curr (32 samples, 0.01%)</title><rect x="75.7391%" y="773" width="0.0111%" height="15" fill="rgb(227,82,41)"/><text x="75.9891%" y="783.50"></text></g><g><title>insert_work (413 samples, 0.14%)</title><rect x="75.6114%" y="853" width="0.1433%" height="15" fill="rgb(222,131,13)"/><text x="75.8614%" y="863.50"></text></g><g><title>wake_up_process (413 samples, 0.14%)</title><rect x="75.6114%" y="837" width="0.1433%" height="15" fill="rgb(221,98,26)"/><text x="75.8614%" y="847.50"></text></g><g><title>try_to_wake_up (399 samples, 0.14%)</title><rect x="75.6163%" y="821" width="0.1384%" height="15" fill="rgb(251,63,52)"/><text x="75.8663%" y="831.50"></text></g><g><title>__queue_work (473 samples, 0.16%)</title><rect x="75.5910%" y="869" width="0.1641%" height="15" fill="rgb(246,25,43)"/><text x="75.8410%" y="879.50"></text></g><g><title>tty_flip_buffer_push (517 samples, 0.18%)</title><rect x="75.5830%" y="901" width="0.1794%" height="15" fill="rgb(247,167,15)"/><text x="75.8330%" y="911.50"></text></g><g><title>queue_work_on (513 samples, 0.18%)</title><rect x="75.5844%" y="885" width="0.1780%" height="15" fill="rgb(240,104,42)"/><text x="75.8344%" y="895.50"></text></g><g><title>pty_write (577 samples, 0.20%)</title><rect x="75.5691%" y="917" width="0.2002%" height="15" fill="rgb(224,54,6)"/><text x="75.8191%" y="927.50"></text></g><g><title>n_tty_write (1,005 samples, 0.35%)</title><rect x="75.4352%" y="933" width="0.3487%" height="15" fill="rgb(244,108,35)"/><text x="75.6852%" y="943.50"></text></g><g><title>tty_write_unlock (29 samples, 0.01%)</title><rect x="75.7974%" y="933" width="0.0101%" height="15" fill="rgb(216,154,2)"/><text x="76.0474%" y="943.50"></text></g><g><title>__vfs_write (1,279 samples, 0.44%)</title><rect x="75.3647%" y="965" width="0.4438%" height="15" fill="rgb(222,8,47)"/><text x="75.6147%" y="975.50"></text></g><g><title>tty_write (1,252 samples, 0.43%)</title><rect x="75.3741%" y="949" width="0.4344%" height="15" fill="rgb(252,93,1)"/><text x="75.6241%" y="959.50"></text></g><g><title>rw_verify_area (45 samples, 0.02%)</title><rect x="75.8165%" y="965" width="0.0156%" height="15" fill="rgb(223,226,51)"/><text x="76.0665%" y="975.50"></text></g><g><title>security_file_permission (35 samples, 0.01%)</title><rect x="75.8199%" y="949" width="0.0121%" height="15" fill="rgb(206,147,9)"/><text x="76.0699%" y="959.50"></text></g><g><title>ksys_write (1,443 samples, 0.50%)</title><rect x="75.3339%" y="997" width="0.5007%" height="15" fill="rgb(248,180,41)"/><text x="75.5839%" y="1007.50"></text></g><g><title>vfs_write (1,368 samples, 0.47%)</title><rect x="75.3599%" y="981" width="0.4746%" height="15" fill="rgb(209,47,50)"/><text x="75.6099%" y="991.50"></text></g><g><title>__x64_sys_write (1,451 samples, 0.50%)</title><rect x="75.3314%" y="1013" width="0.5034%" height="15" fill="rgb(243,65,31)"/><text x="75.5814%" y="1023.50"></text></g><g><title>do_syscall_64 (1,482 samples, 0.51%)</title><rect x="75.3293%" y="1029" width="0.5142%" height="15" fill="rgb(228,128,1)"/><text x="75.5793%" y="1039.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,494 samples, 0.52%)</title><rect x="75.3255%" y="1045" width="0.5184%" height="15" fill="rgb(231,192,16)"/><text x="75.5755%" y="1055.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (1,533 samples, 0.53%)</title><rect x="75.3134%" y="1109" width="0.5319%" height="15" fill="rgb(224,26,40)"/><text x="75.5634%" y="1119.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1,533 samples, 0.53%)</title><rect x="75.3134%" y="1093" width="0.5319%" height="15" fill="rgb(214,192,17)"/><text x="75.5634%" y="1103.50"></text></g><g><title>__GI___libc_write (1,532 samples, 0.53%)</title><rect x="75.3137%" y="1077" width="0.5315%" height="15" fill="rgb(225,147,18)"/><text x="75.5637%" y="1087.50"></text></g><g><title>__GI___libc_write (1,514 samples, 0.53%)</title><rect x="75.3200%" y="1061" width="0.5253%" height="15" fill="rgb(205,35,11)"/><text x="75.5700%" y="1071.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write (1,535 samples, 0.53%)</title><rect x="75.3134%" y="1125" width="0.5326%" height="15" fill="rgb(242,40,42)"/><text x="75.5634%" y="1135.50"></text></g><g><title>&lt;termcolor::LossyStandardStream&lt;W&gt; as std::io::Write&gt;::write (1,557 samples, 0.54%)</title><rect x="75.3075%" y="1173" width="0.5402%" height="15" fill="rgb(250,170,13)"/><text x="75.5575%" y="1183.50"></text></g><g><title>&lt;termcolor::IoStandardStreamLock as std::io::Write&gt;::write (1,550 samples, 0.54%)</title><rect x="75.3099%" y="1157" width="0.5378%" height="15" fill="rgb(240,161,28)"/><text x="75.5599%" y="1167.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write (1,549 samples, 0.54%)</title><rect x="75.3103%" y="1141" width="0.5374%" height="15" fill="rgb(245,179,12)"/><text x="75.5603%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1765" width="1.0093%" height="15" fill="rgb(250,92,32)"/><text x="75.1085%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1749" width="1.0093%" height="15" fill="rgb(233,10,40)"/><text x="75.1085%" y="1759.50"></text></g><g><title>tokio::coop::budget (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1733" width="1.0093%" height="15" fill="rgb(217,98,1)"/><text x="75.1085%" y="1743.50"></text></g><g><title>tokio::coop::with_budget (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1717" width="1.0093%" height="15" fill="rgb(238,202,7)"/><text x="75.1085%" y="1727.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1701" width="1.0093%" height="15" fill="rgb(222,91,3)"/><text x="75.1085%" y="1711.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1685" width="1.0093%" height="15" fill="rgb(211,170,49)"/><text x="75.1085%" y="1695.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1669" width="1.0093%" height="15" fill="rgb(253,139,18)"/><text x="75.1085%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1653" width="1.0093%" height="15" fill="rgb(222,4,43)"/><text x="75.1085%" y="1663.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1637" width="1.0093%" height="15" fill="rgb(207,205,12)"/><text x="75.1085%" y="1647.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1621" width="1.0093%" height="15" fill="rgb(216,159,46)"/><text x="75.1085%" y="1631.50"></text></g><g><title>tokio::runtime::task::raw::poll (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1605" width="1.0093%" height="15" fill="rgb(236,115,1)"/><text x="75.1085%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1589" width="1.0093%" height="15" fill="rgb(251,35,33)"/><text x="75.1085%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1573" width="1.0093%" height="15" fill="rgb(248,62,51)"/><text x="75.1085%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1557" width="1.0093%" height="15" fill="rgb(254,180,19)"/><text x="75.1085%" y="1567.50"></text></g><g><title>std::panic::catch_unwind (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1541" width="1.0093%" height="15" fill="rgb(217,100,32)"/><text x="75.1085%" y="1551.50"></text></g><g><title>std::panicking::try (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1525" width="1.0093%" height="15" fill="rgb(224,71,22)"/><text x="75.1085%" y="1535.50"></text></g><g><title>__rust_try (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1509" width="1.0093%" height="15" fill="rgb(251,185,33)"/><text x="75.1085%" y="1519.50"></text></g><g><title>std::panicking::try::do_call (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1493" width="1.0093%" height="15" fill="rgb(209,75,48)"/><text x="75.1085%" y="1503.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1477" width="1.0093%" height="15" fill="rgb(253,190,16)"/><text x="75.1085%" y="1487.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1461" width="1.0093%" height="15" fill="rgb(226,140,1)"/><text x="75.1085%" y="1471.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1445" width="1.0093%" height="15" fill="rgb(206,75,30)"/><text x="75.1085%" y="1455.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1429" width="1.0093%" height="15" fill="rgb(231,208,37)"/><text x="75.1085%" y="1439.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1413" width="1.0093%" height="15" fill="rgb(238,136,40)"/><text x="75.1085%" y="1423.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,909 samples, 1.01%)</title><rect x="74.8585%" y="1397" width="1.0093%" height="15" fill="rgb(247,137,17)"/><text x="75.1085%" y="1407.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (1,993 samples, 0.69%)</title><rect x="75.1763%" y="1381" width="0.6915%" height="15" fill="rgb(240,60,40)"/><text x="75.4263%" y="1391.50"></text></g><g><title>log::__private_api_log (1,993 samples, 0.69%)</title><rect x="75.1763%" y="1365" width="0.6915%" height="15" fill="rgb(236,68,50)"/><text x="75.4263%" y="1375.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (1,993 samples, 0.69%)</title><rect x="75.1763%" y="1349" width="0.6915%" height="15" fill="rgb(230,42,12)"/><text x="75.4263%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,993 samples, 0.69%)</title><rect x="75.1763%" y="1333" width="0.6915%" height="15" fill="rgb(219,16,16)"/><text x="75.4263%" y="1343.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1,993 samples, 0.69%)</title><rect x="75.1763%" y="1317" width="0.6915%" height="15" fill="rgb(220,38,35)"/><text x="75.4263%" y="1327.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1,993 samples, 0.69%)</title><rect x="75.1763%" y="1301" width="0.6915%" height="15" fill="rgb(228,33,1)"/><text x="75.4263%" y="1311.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,631 samples, 0.57%)</title><rect x="75.3019%" y="1285" width="0.5659%" height="15" fill="rgb(241,46,31)"/><text x="75.5519%" y="1295.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (1,631 samples, 0.57%)</title><rect x="75.3019%" y="1269" width="0.5659%" height="15" fill="rgb(232,58,20)"/><text x="75.5519%" y="1279.50"></text></g><g><title>env_logger::fmt::Formatter::print (1,631 samples, 0.57%)</title><rect x="75.3019%" y="1253" width="0.5659%" height="15" fill="rgb(206,228,53)"/><text x="75.5519%" y="1263.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (1,631 samples, 0.57%)</title><rect x="75.3019%" y="1237" width="0.5659%" height="15" fill="rgb(206,88,33)"/><text x="75.5519%" y="1247.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (1,631 samples, 0.57%)</title><rect x="75.3019%" y="1221" width="0.5659%" height="15" fill="rgb(238,69,7)"/><text x="75.5519%" y="1231.50"></text></g><g><title>termcolor::BufferWriter::print (1,631 samples, 0.57%)</title><rect x="75.3019%" y="1205" width="0.5659%" height="15" fill="rgb(250,21,46)"/><text x="75.5519%" y="1215.50"></text></g><g><title>std::io::Write::write_all (1,629 samples, 0.57%)</title><rect x="75.3026%" y="1189" width="0.5652%" height="15" fill="rgb(215,212,21)"/><text x="75.5526%" y="1199.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.01%)</title><rect x="75.8564%" y="1173" width="0.0114%" height="15" fill="rgb(211,35,12)"/><text x="76.1064%" y="1183.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (62 samples, 0.02%)</title><rect x="75.8678%" y="1477" width="0.0215%" height="15" fill="rgb(231,184,16)"/><text x="76.1178%" y="1487.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (62 samples, 0.02%)</title><rect x="75.8678%" y="1461" width="0.0215%" height="15" fill="rgb(242,140,15)"/><text x="76.1178%" y="1471.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (62 samples, 0.02%)</title><rect x="75.8678%" y="1445" width="0.0215%" height="15" fill="rgb(220,37,14)"/><text x="76.1178%" y="1455.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (62 samples, 0.02%)</title><rect x="75.8678%" y="1429" width="0.0215%" height="15" fill="rgb(223,146,22)"/><text x="76.1178%" y="1439.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (62 samples, 0.02%)</title><rect x="75.8678%" y="1413" width="0.0215%" height="15" fill="rgb(216,132,15)"/><text x="76.1178%" y="1423.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (62 samples, 0.02%)</title><rect x="75.8678%" y="1397" width="0.0215%" height="15" fill="rgb(248,83,5)"/><text x="76.1178%" y="1407.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (62 samples, 0.02%)</title><rect x="75.8678%" y="1381" width="0.0215%" height="15" fill="rgb(231,206,48)"/><text x="76.1178%" y="1391.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (62 samples, 0.02%)</title><rect x="75.8678%" y="1365" width="0.0215%" height="15" fill="rgb(253,185,37)"/><text x="76.1178%" y="1375.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (62 samples, 0.02%)</title><rect x="75.8678%" y="1349" width="0.0215%" height="15" fill="rgb(208,21,44)"/><text x="76.1178%" y="1359.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (40 samples, 0.01%)</title><rect x="75.8755%" y="1333" width="0.0139%" height="15" fill="rgb(236,125,4)"/><text x="76.1255%" y="1343.50"></text></g><g><title>tokio::io::driver::registration::Registration::clear_readiness (54 samples, 0.02%)</title><rect x="75.8893%" y="1365" width="0.0187%" height="15" fill="rgb(226,134,25)"/><text x="76.1393%" y="1375.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::clear_readiness (54 samples, 0.02%)</title><rect x="75.8893%" y="1349" width="0.0187%" height="15" fill="rgb(250,201,12)"/><text x="76.1393%" y="1359.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (54 samples, 0.02%)</title><rect x="75.8893%" y="1333" width="0.0187%" height="15" fill="rgb(225,92,18)"/><text x="76.1393%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.01%)</title><rect x="75.9081%" y="1349" width="0.0101%" height="15" fill="rgb(227,35,22)"/><text x="76.1581%" y="1359.50"></text></g><g><title>&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="75.9081%" y="1333" width="0.0101%" height="15" fill="rgb(214,180,52)"/><text x="76.1581%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (29 samples, 0.01%)</title><rect x="75.9081%" y="1317" width="0.0101%" height="15" fill="rgb(233,55,38)"/><text x="76.1581%" y="1327.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 0.01%)</title><rect x="75.9081%" y="1301" width="0.0101%" height="15" fill="rgb(249,171,43)"/><text x="76.1581%" y="1311.50"></text></g><g><title>tokio::coop::RestoreOnPending::made_progress (52 samples, 0.02%)</title><rect x="75.9181%" y="1349" width="0.0180%" height="15" fill="rgb(239,87,2)"/><text x="76.1681%" y="1359.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (52 samples, 0.02%)</title><rect x="75.9181%" y="1333" width="0.0180%" height="15" fill="rgb(248,141,5)"/><text x="76.1681%" y="1343.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (52 samples, 0.02%)</title><rect x="75.9181%" y="1317" width="0.0180%" height="15" fill="rgb(238,33,42)"/><text x="76.1681%" y="1327.50"></text></g><g><title>core::mem::replace (52 samples, 0.02%)</title><rect x="75.9181%" y="1301" width="0.0180%" height="15" fill="rgb(231,57,19)"/><text x="76.1681%" y="1311.50"></text></g><g><title>core::mem::swap (52 samples, 0.02%)</title><rect x="75.9181%" y="1285" width="0.0180%" height="15" fill="rgb(214,78,53)"/><text x="76.1681%" y="1295.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (47 samples, 0.02%)</title><rect x="75.9199%" y="1269" width="0.0163%" height="15" fill="rgb(206,132,29)"/><text x="76.1699%" y="1279.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (38 samples, 0.01%)</title><rect x="75.9487%" y="1269" width="0.0132%" height="15" fill="rgb(248,174,31)"/><text x="76.1987%" y="1279.50"></text></g><g><title>tokio::coop::CURRENT::__getit (60 samples, 0.02%)</title><rect x="75.9414%" y="1301" width="0.0208%" height="15" fill="rgb(221,87,13)"/><text x="76.1914%" y="1311.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (60 samples, 0.02%)</title><rect x="75.9414%" y="1285" width="0.0208%" height="15" fill="rgb(223,197,17)"/><text x="76.1914%" y="1295.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (47 samples, 0.02%)</title><rect x="75.9764%" y="1285" width="0.0163%" height="15" fill="rgb(220,144,50)"/><text x="76.2264%" y="1295.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::new (30 samples, 0.01%)</title><rect x="75.9927%" y="1285" width="0.0104%" height="15" fill="rgb(244,201,11)"/><text x="76.2427%" y="1295.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (31 samples, 0.01%)</title><rect x="76.0097%" y="1269" width="0.0108%" height="15" fill="rgb(249,81,34)"/><text x="76.2597%" y="1279.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (71 samples, 0.02%)</title><rect x="76.0031%" y="1285" width="0.0246%" height="15" fill="rgb(205,161,12)"/><text x="76.2531%" y="1295.50"></text></g><g><title>tokio::coop::poll_proceed (292 samples, 0.10%)</title><rect x="75.9362%" y="1349" width="0.1013%" height="15" fill="rgb(252,139,50)"/><text x="76.1862%" y="1359.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (292 samples, 0.10%)</title><rect x="75.9362%" y="1333" width="0.1013%" height="15" fill="rgb(205,169,14)"/><text x="76.1862%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (292 samples, 0.10%)</title><rect x="75.9362%" y="1317" width="0.1013%" height="15" fill="rgb(248,198,33)"/><text x="76.1862%" y="1327.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (217 samples, 0.08%)</title><rect x="75.9622%" y="1301" width="0.0753%" height="15" fill="rgb(236,23,21)"/><text x="76.2122%" y="1311.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (48 samples, 0.02%)</title><rect x="76.0375%" y="1317" width="0.0167%" height="15" fill="rgb(231,13,38)"/><text x="76.2875%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (37 samples, 0.01%)</title><rect x="76.0413%" y="1301" width="0.0128%" height="15" fill="rgb(239,139,21)"/><text x="76.2913%" y="1311.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::inner (50 samples, 0.02%)</title><rect x="76.0541%" y="1317" width="0.0173%" height="15" fill="rgb(222,164,45)"/><text x="76.3041%" y="1327.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (77 samples, 0.03%)</title><rect x="76.0715%" y="1317" width="0.0267%" height="15" fill="rgb(230,52,27)"/><text x="76.3215%" y="1327.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (61 samples, 0.02%)</title><rect x="76.0770%" y="1301" width="0.0212%" height="15" fill="rgb(227,143,42)"/><text x="76.3270%" y="1311.50"></text></g><g><title>tokio::io::driver::Handle::inner (222 samples, 0.08%)</title><rect x="76.0375%" y="1349" width="0.0770%" height="15" fill="rgb(249,127,1)"/><text x="76.2875%" y="1359.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (222 samples, 0.08%)</title><rect x="76.0375%" y="1333" width="0.0770%" height="15" fill="rgb(243,107,26)"/><text x="76.2875%" y="1343.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (47 samples, 0.02%)</title><rect x="76.0982%" y="1317" width="0.0163%" height="15" fill="rgb(225,7,45)"/><text x="76.3482%" y="1327.50"></text></g><g><title>core::sync::atomic::atomic_load (34 samples, 0.01%)</title><rect x="76.1027%" y="1301" width="0.0118%" height="15" fill="rgb(241,88,38)"/><text x="76.3527%" y="1311.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (745 samples, 0.26%)</title><rect x="75.8893%" y="1477" width="0.2585%" height="15" fill="rgb(226,121,9)"/><text x="76.1393%" y="1487.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (745 samples, 0.26%)</title><rect x="75.8893%" y="1461" width="0.2585%" height="15" fill="rgb(253,60,29)"/><text x="76.1393%" y="1471.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (745 samples, 0.26%)</title><rect x="75.8893%" y="1445" width="0.2585%" height="15" fill="rgb(244,181,39)"/><text x="76.1393%" y="1455.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (745 samples, 0.26%)</title><rect x="75.8893%" y="1429" width="0.2585%" height="15" fill="rgb(252,203,31)"/><text x="76.1393%" y="1439.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (745 samples, 0.26%)</title><rect x="75.8893%" y="1413" width="0.2585%" height="15" fill="rgb(224,120,8)"/><text x="76.1393%" y="1423.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (745 samples, 0.26%)</title><rect x="75.8893%" y="1397" width="0.2585%" height="15" fill="rgb(205,171,54)"/><text x="76.1393%" y="1407.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (745 samples, 0.26%)</title><rect x="75.8893%" y="1381" width="0.2585%" height="15" fill="rgb(235,89,11)"/><text x="76.1393%" y="1391.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (691 samples, 0.24%)</title><rect x="75.9081%" y="1365" width="0.2397%" height="15" fill="rgb(212,180,28)"/><text x="76.1581%" y="1375.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (96 samples, 0.03%)</title><rect x="76.1145%" y="1349" width="0.0333%" height="15" fill="rgb(247,84,49)"/><text x="76.3645%" y="1359.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (58 samples, 0.02%)</title><rect x="76.1478%" y="1397" width="0.0201%" height="15" fill="rgb(236,187,52)"/><text x="76.3978%" y="1407.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (58 samples, 0.02%)</title><rect x="76.1478%" y="1381" width="0.0201%" height="15" fill="rgb(227,24,15)"/><text x="76.3978%" y="1391.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (58 samples, 0.02%)</title><rect x="76.1478%" y="1365" width="0.0201%" height="15" fill="rgb(227,211,13)"/><text x="76.3978%" y="1375.50"></text></g><g><title>log::__private_api_log (66 samples, 0.02%)</title><rect x="76.1478%" y="1477" width="0.0229%" height="15" fill="rgb(245,52,14)"/><text x="76.3978%" y="1487.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (66 samples, 0.02%)</title><rect x="76.1478%" y="1461" width="0.0229%" height="15" fill="rgb(225,185,13)"/><text x="76.3978%" y="1471.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (66 samples, 0.02%)</title><rect x="76.1478%" y="1445" width="0.0229%" height="15" fill="rgb(217,160,29)"/><text x="76.3978%" y="1455.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (66 samples, 0.02%)</title><rect x="76.1478%" y="1429" width="0.0229%" height="15" fill="rgb(216,115,53)"/><text x="76.3978%" y="1439.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (66 samples, 0.02%)</title><rect x="76.1478%" y="1413" width="0.0229%" height="15" fill="rgb(236,99,5)"/><text x="76.3978%" y="1423.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (914 samples, 0.32%)</title><rect x="75.8678%" y="1493" width="0.3171%" height="15" fill="rgb(222,60,38)"/><text x="76.1178%" y="1503.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (41 samples, 0.01%)</title><rect x="76.1707%" y="1477" width="0.0142%" height="15" fill="rgb(212,82,22)"/><text x="76.4207%" y="1487.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (41 samples, 0.01%)</title><rect x="76.1707%" y="1461" width="0.0142%" height="15" fill="rgb(214,48,28)"/><text x="76.4207%" y="1471.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (41 samples, 0.01%)</title><rect x="76.1707%" y="1445" width="0.0142%" height="15" fill="rgb(245,196,50)"/><text x="76.4207%" y="1455.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (41 samples, 0.01%)</title><rect x="76.1707%" y="1429" width="0.0142%" height="15" fill="rgb(225,159,46)"/><text x="76.4207%" y="1439.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (41 samples, 0.01%)</title><rect x="76.1707%" y="1413" width="0.0142%" height="15" fill="rgb(207,195,48)"/><text x="76.4207%" y="1423.50"></text></g><g><title>core::task::wake::Waker::wake (41 samples, 0.01%)</title><rect x="76.1707%" y="1397" width="0.0142%" height="15" fill="rgb(240,73,3)"/><text x="76.4207%" y="1407.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (41 samples, 0.01%)</title><rect x="76.1707%" y="1381" width="0.0142%" height="15" fill="rgb(245,57,23)"/><text x="76.4207%" y="1391.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (41 samples, 0.01%)</title><rect x="76.1707%" y="1365" width="0.0142%" height="15" fill="rgb(240,75,18)"/><text x="76.4207%" y="1375.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (41 samples, 0.01%)</title><rect x="76.1707%" y="1349" width="0.0142%" height="15" fill="rgb(238,168,12)"/><text x="76.4207%" y="1359.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (41 samples, 0.01%)</title><rect x="76.1707%" y="1333" width="0.0142%" height="15" fill="rgb(226,20,40)"/><text x="76.4207%" y="1343.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (41 samples, 0.01%)</title><rect x="76.1707%" y="1317" width="0.0142%" height="15" fill="rgb(224,130,35)"/><text x="76.4207%" y="1327.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (41 samples, 0.01%)</title><rect x="76.1707%" y="1301" width="0.0142%" height="15" fill="rgb(225,63,41)"/><text x="76.4207%" y="1311.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (41 samples, 0.01%)</title><rect x="76.1707%" y="1285" width="0.0142%" height="15" fill="rgb(219,3,3)"/><text x="76.4207%" y="1295.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (41 samples, 0.01%)</title><rect x="76.1707%" y="1269" width="0.0142%" height="15" fill="rgb(218,157,4)"/><text x="76.4207%" y="1279.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (41 samples, 0.01%)</title><rect x="76.1707%" y="1253" width="0.0142%" height="15" fill="rgb(232,76,36)"/><text x="76.4207%" y="1263.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (41 samples, 0.01%)</title><rect x="76.1707%" y="1237" width="0.0142%" height="15" fill="rgb(247,36,0)"/><text x="76.4207%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (38 samples, 0.01%)</title><rect x="76.1718%" y="1221" width="0.0132%" height="15" fill="rgb(205,2,34)"/><text x="76.4218%" y="1231.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (38 samples, 0.01%)</title><rect x="76.1718%" y="1205" width="0.0132%" height="15" fill="rgb(239,136,13)"/><text x="76.4218%" y="1215.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (30 samples, 0.01%)</title><rect x="76.1915%" y="1189" width="0.0104%" height="15" fill="rgb(253,122,12)"/><text x="76.4415%" y="1199.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (30 samples, 0.01%)</title><rect x="76.1915%" y="1173" width="0.0104%" height="15" fill="rgb(222,174,7)"/><text x="76.4415%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (30 samples, 0.01%)</title><rect x="76.1915%" y="1157" width="0.0104%" height="15" fill="rgb(208,191,42)"/><text x="76.4415%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (51 samples, 0.02%)</title><rect x="76.1849%" y="1349" width="0.0177%" height="15" fill="rgb(237,212,15)"/><text x="76.4349%" y="1359.50"></text></g><g><title>std::io::Write::write_fmt (51 samples, 0.02%)</title><rect x="76.1849%" y="1333" width="0.0177%" height="15" fill="rgb(215,65,20)"/><text x="76.4349%" y="1343.50"></text></g><g><title>core::fmt::write (51 samples, 0.02%)</title><rect x="76.1849%" y="1317" width="0.0177%" height="15" fill="rgb(232,103,11)"/><text x="76.4349%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (51 samples, 0.02%)</title><rect x="76.1849%" y="1301" width="0.0177%" height="15" fill="rgb(235,148,18)"/><text x="76.4349%" y="1311.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (51 samples, 0.02%)</title><rect x="76.1849%" y="1285" width="0.0177%" height="15" fill="rgb(240,173,7)"/><text x="76.4349%" y="1295.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::reset (32 samples, 0.01%)</title><rect x="76.1915%" y="1269" width="0.0111%" height="15" fill="rgb(228,182,25)"/><text x="76.4415%" y="1279.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::reset (32 samples, 0.01%)</title><rect x="76.1915%" y="1253" width="0.0111%" height="15" fill="rgb(247,3,52)"/><text x="76.4415%" y="1263.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (32 samples, 0.01%)</title><rect x="76.1915%" y="1237" width="0.0111%" height="15" fill="rgb(226,155,8)"/><text x="76.4415%" y="1247.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (32 samples, 0.01%)</title><rect x="76.1915%" y="1221" width="0.0111%" height="15" fill="rgb(243,195,38)"/><text x="76.4415%" y="1231.50"></text></g><g><title>std::io::Write::write_all (32 samples, 0.01%)</title><rect x="76.1915%" y="1205" width="0.0111%" height="15" fill="rgb(254,181,33)"/><text x="76.4415%" y="1215.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (58 samples, 0.02%)</title><rect x="76.2026%" y="1301" width="0.0201%" height="15" fill="rgb(232,98,23)"/><text x="76.4526%" y="1311.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (58 samples, 0.02%)</title><rect x="76.2026%" y="1285" width="0.0201%" height="15" fill="rgb(205,23,10)"/><text x="76.4526%" y="1295.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (58 samples, 0.02%)</title><rect x="76.2026%" y="1269" width="0.0201%" height="15" fill="rgb(212,124,38)"/><text x="76.4526%" y="1279.50"></text></g><g><title>core::fmt::write (58 samples, 0.02%)</title><rect x="76.2026%" y="1253" width="0.0201%" height="15" fill="rgb(228,207,2)"/><text x="76.4526%" y="1263.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (84 samples, 0.03%)</title><rect x="76.2026%" y="1349" width="0.0291%" height="15" fill="rgb(215,120,22)"/><text x="76.4526%" y="1359.50"></text></g><g><title>std::io::Write::write_fmt (84 samples, 0.03%)</title><rect x="76.2026%" y="1333" width="0.0291%" height="15" fill="rgb(251,172,33)"/><text x="76.4526%" y="1343.50"></text></g><g><title>core::fmt::write (84 samples, 0.03%)</title><rect x="76.2026%" y="1317" width="0.0291%" height="15" fill="rgb(250,83,2)"/><text x="76.4526%" y="1327.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (44 samples, 0.02%)</title><rect x="76.2318%" y="1285" width="0.0153%" height="15" fill="rgb(210,132,53)"/><text x="76.4818%" y="1295.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (44 samples, 0.02%)</title><rect x="76.2318%" y="1269" width="0.0153%" height="15" fill="rgb(221,208,36)"/><text x="76.4818%" y="1279.50"></text></g><g><title>core::fmt::write (44 samples, 0.02%)</title><rect x="76.2318%" y="1253" width="0.0153%" height="15" fill="rgb(205,192,46)"/><text x="76.4818%" y="1263.50"></text></g><g><title>core::fmt::run (44 samples, 0.02%)</title><rect x="76.2318%" y="1237" width="0.0153%" height="15" fill="rgb(223,163,14)"/><text x="76.4818%" y="1247.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (44 samples, 0.02%)</title><rect x="76.2318%" y="1221" width="0.0153%" height="15" fill="rgb(218,41,28)"/><text x="76.4818%" y="1231.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (44 samples, 0.02%)</title><rect x="76.2318%" y="1205" width="0.0153%" height="15" fill="rgb(235,104,10)"/><text x="76.4818%" y="1215.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (93 samples, 0.03%)</title><rect x="76.2318%" y="1349" width="0.0323%" height="15" fill="rgb(246,17,4)"/><text x="76.4818%" y="1359.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (93 samples, 0.03%)</title><rect x="76.2318%" y="1333" width="0.0323%" height="15" fill="rgb(240,7,16)"/><text x="76.4818%" y="1343.50"></text></g><g><title>std::io::Write::write_fmt (93 samples, 0.03%)</title><rect x="76.2318%" y="1317" width="0.0323%" height="15" fill="rgb(213,160,23)"/><text x="76.4818%" y="1327.50"></text></g><g><title>core::fmt::write (93 samples, 0.03%)</title><rect x="76.2318%" y="1301" width="0.0323%" height="15" fill="rgb(251,179,49)"/><text x="76.4818%" y="1311.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 0.02%)</title><rect x="76.2470%" y="1285" width="0.0170%" height="15" fill="rgb(247,198,10)"/><text x="76.4970%" y="1295.50"></text></g><g><title>std::io::Write::write_all (49 samples, 0.02%)</title><rect x="76.2470%" y="1269" width="0.0170%" height="15" fill="rgb(220,65,29)"/><text x="76.4970%" y="1279.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (49 samples, 0.02%)</title><rect x="76.2470%" y="1253" width="0.0170%" height="15" fill="rgb(237,171,28)"/><text x="76.4970%" y="1263.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (37 samples, 0.01%)</title><rect x="76.2640%" y="1285" width="0.0128%" height="15" fill="rgb(228,44,26)"/><text x="76.5140%" y="1295.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (37 samples, 0.01%)</title><rect x="76.2640%" y="1269" width="0.0128%" height="15" fill="rgb(216,210,27)"/><text x="76.5140%" y="1279.50"></text></g><g><title>std::io::Write::write_all (37 samples, 0.01%)</title><rect x="76.2640%" y="1253" width="0.0128%" height="15" fill="rgb(252,10,17)"/><text x="76.5140%" y="1263.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (37 samples, 0.01%)</title><rect x="76.2640%" y="1237" width="0.0128%" height="15" fill="rgb(214,172,30)"/><text x="76.5140%" y="1247.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (32 samples, 0.01%)</title><rect x="76.2658%" y="1221" width="0.0111%" height="15" fill="rgb(253,130,48)"/><text x="76.5158%" y="1231.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (32 samples, 0.01%)</title><rect x="76.2658%" y="1205" width="0.0111%" height="15" fill="rgb(226,99,43)"/><text x="76.5158%" y="1215.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (32 samples, 0.01%)</title><rect x="76.2658%" y="1189" width="0.0111%" height="15" fill="rgb(239,111,26)"/><text x="76.5158%" y="1199.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (32 samples, 0.01%)</title><rect x="76.2658%" y="1173" width="0.0111%" height="15" fill="rgb(240,27,53)"/><text x="76.5158%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (32 samples, 0.01%)</title><rect x="76.2658%" y="1157" width="0.0111%" height="15" fill="rgb(254,163,12)"/><text x="76.5158%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 0.01%)</title><rect x="76.2793%" y="1157" width="0.0101%" height="15" fill="rgb(225,51,48)"/><text x="76.5293%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (85 samples, 0.03%)</title><rect x="76.2640%" y="1349" width="0.0295%" height="15" fill="rgb(205,19,32)"/><text x="76.5140%" y="1359.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (85 samples, 0.03%)</title><rect x="76.2640%" y="1333" width="0.0295%" height="15" fill="rgb(218,119,26)"/><text x="76.5140%" y="1343.50"></text></g><g><title>std::io::Write::write_fmt (85 samples, 0.03%)</title><rect x="76.2640%" y="1317" width="0.0295%" height="15" fill="rgb(231,173,33)"/><text x="76.5140%" y="1327.50"></text></g><g><title>core::fmt::write (85 samples, 0.03%)</title><rect x="76.2640%" y="1301" width="0.0295%" height="15" fill="rgb(241,100,29)"/><text x="76.5140%" y="1311.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (48 samples, 0.02%)</title><rect x="76.2769%" y="1285" width="0.0167%" height="15" fill="rgb(250,194,34)"/><text x="76.5269%" y="1295.50"></text></g><g><title>std::io::Write::write_all (48 samples, 0.02%)</title><rect x="76.2769%" y="1269" width="0.0167%" height="15" fill="rgb(215,23,50)"/><text x="76.5269%" y="1279.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (48 samples, 0.02%)</title><rect x="76.2769%" y="1253" width="0.0167%" height="15" fill="rgb(206,49,37)"/><text x="76.5269%" y="1263.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (41 samples, 0.01%)</title><rect x="76.2793%" y="1237" width="0.0142%" height="15" fill="rgb(247,39,21)"/><text x="76.5293%" y="1247.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (41 samples, 0.01%)</title><rect x="76.2793%" y="1221" width="0.0142%" height="15" fill="rgb(209,220,15)"/><text x="76.5293%" y="1231.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (41 samples, 0.01%)</title><rect x="76.2793%" y="1205" width="0.0142%" height="15" fill="rgb(206,41,33)"/><text x="76.5293%" y="1215.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (41 samples, 0.01%)</title><rect x="76.2793%" y="1189" width="0.0142%" height="15" fill="rgb(221,225,45)"/><text x="76.5293%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (41 samples, 0.01%)</title><rect x="76.2793%" y="1173" width="0.0142%" height="15" fill="rgb(216,27,18)"/><text x="76.5293%" y="1183.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.02%)</title><rect x="76.2935%" y="1253" width="0.0205%" height="15" fill="rgb(250,193,34)"/><text x="76.5435%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (55 samples, 0.02%)</title><rect x="76.3171%" y="1253" width="0.0191%" height="15" fill="rgb(227,215,20)"/><text x="76.5671%" y="1263.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (55 samples, 0.02%)</title><rect x="76.3171%" y="1237" width="0.0191%" height="15" fill="rgb(242,211,27)"/><text x="76.5671%" y="1247.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.01%)</title><rect x="76.3376%" y="1221" width="0.0104%" height="15" fill="rgb(229,190,30)"/><text x="76.5876%" y="1231.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (164 samples, 0.06%)</title><rect x="76.2935%" y="1285" width="0.0569%" height="15" fill="rgb(253,31,29)"/><text x="76.5435%" y="1295.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (164 samples, 0.06%)</title><rect x="76.2935%" y="1269" width="0.0569%" height="15" fill="rgb(229,177,52)"/><text x="76.5435%" y="1279.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.01%)</title><rect x="76.3362%" y="1253" width="0.0142%" height="15" fill="rgb(226,88,8)"/><text x="76.5862%" y="1263.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.01%)</title><rect x="76.3362%" y="1237" width="0.0142%" height="15" fill="rgb(214,55,27)"/><text x="76.5862%" y="1247.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (44 samples, 0.02%)</title><rect x="76.3504%" y="1189" width="0.0153%" height="15" fill="rgb(233,202,5)"/><text x="76.6004%" y="1199.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (55 samples, 0.02%)</title><rect x="76.3504%" y="1253" width="0.0191%" height="15" fill="rgb(251,49,30)"/><text x="76.6004%" y="1263.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (55 samples, 0.02%)</title><rect x="76.3504%" y="1237" width="0.0191%" height="15" fill="rgb(235,18,52)"/><text x="76.6004%" y="1247.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (55 samples, 0.02%)</title><rect x="76.3504%" y="1221" width="0.0191%" height="15" fill="rgb(250,111,51)"/><text x="76.6004%" y="1231.50"></text></g><g><title>std::io::Write::write_all (55 samples, 0.02%)</title><rect x="76.3504%" y="1205" width="0.0191%" height="15" fill="rgb(218,13,25)"/><text x="76.6004%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1765" width="0.5111%" height="15" fill="rgb(248,96,7)"/><text x="76.1178%" y="1775.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1749" width="0.5111%" height="15" fill="rgb(217,31,15)"/><text x="76.1178%" y="1759.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1733" width="0.5111%" height="15" fill="rgb(228,59,49)"/><text x="76.1178%" y="1743.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1717" width="0.5111%" height="15" fill="rgb(210,152,38)"/><text x="76.1178%" y="1727.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1701" width="0.5111%" height="15" fill="rgb(206,71,11)"/><text x="76.1178%" y="1711.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1685" width="0.5111%" height="15" fill="rgb(244,199,5)"/><text x="76.1178%" y="1695.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1669" width="0.5111%" height="15" fill="rgb(253,49,1)"/><text x="76.1178%" y="1679.50"></text></g><g><title>std::panic::catch_unwind (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1653" width="0.5111%" height="15" fill="rgb(225,206,40)"/><text x="76.1178%" y="1663.50"></text></g><g><title>std::panicking::try (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1637" width="0.5111%" height="15" fill="rgb(243,116,47)"/><text x="76.1178%" y="1647.50"></text></g><g><title>__rust_try (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1621" width="0.5111%" height="15" fill="rgb(219,225,16)"/><text x="76.1178%" y="1631.50"></text></g><g><title>std::panicking::try::do_call (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1605" width="0.5111%" height="15" fill="rgb(233,29,47)"/><text x="76.1178%" y="1615.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1589" width="0.5111%" height="15" fill="rgb(250,179,18)"/><text x="76.1178%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1573" width="0.5111%" height="15" fill="rgb(215,176,6)"/><text x="76.1178%" y="1583.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1557" width="0.5111%" height="15" fill="rgb(214,117,39)"/><text x="76.1178%" y="1567.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1541" width="0.5111%" height="15" fill="rgb(247,183,36)"/><text x="76.1178%" y="1551.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1525" width="0.5111%" height="15" fill="rgb(237,200,3)"/><text x="76.1178%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,473 samples, 0.51%)</title><rect x="75.8678%" y="1509" width="0.5111%" height="15" fill="rgb(212,220,24)"/><text x="76.1178%" y="1519.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (559 samples, 0.19%)</title><rect x="76.1849%" y="1493" width="0.1939%" height="15" fill="rgb(245,216,20)"/><text x="76.4349%" y="1503.50"></text></g><g><title>log::__private_api_log (559 samples, 0.19%)</title><rect x="76.1849%" y="1477" width="0.1939%" height="15" fill="rgb(219,124,7)"/><text x="76.4349%" y="1487.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (559 samples, 0.19%)</title><rect x="76.1849%" y="1461" width="0.1939%" height="15" fill="rgb(227,167,8)"/><text x="76.4349%" y="1471.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (559 samples, 0.19%)</title><rect x="76.1849%" y="1445" width="0.1939%" height="15" fill="rgb(241,37,2)"/><text x="76.4349%" y="1455.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (559 samples, 0.19%)</title><rect x="76.1849%" y="1429" width="0.1939%" height="15" fill="rgb(238,134,33)"/><text x="76.4349%" y="1439.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (559 samples, 0.19%)</title><rect x="76.1849%" y="1413" width="0.1939%" height="15" fill="rgb(248,48,27)"/><text x="76.4349%" y="1423.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (559 samples, 0.19%)</title><rect x="76.1849%" y="1397" width="0.1939%" height="15" fill="rgb(212,14,16)"/><text x="76.4349%" y="1407.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (559 samples, 0.19%)</title><rect x="76.1849%" y="1381" width="0.1939%" height="15" fill="rgb(217,205,37)"/><text x="76.4349%" y="1391.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (559 samples, 0.19%)</title><rect x="76.1849%" y="1365" width="0.1939%" height="15" fill="rgb(233,185,47)"/><text x="76.4349%" y="1375.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (246 samples, 0.09%)</title><rect x="76.2935%" y="1349" width="0.0854%" height="15" fill="rgb(244,88,8)"/><text x="76.5435%" y="1359.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (246 samples, 0.09%)</title><rect x="76.2935%" y="1333" width="0.0854%" height="15" fill="rgb(213,0,20)"/><text x="76.5435%" y="1343.50"></text></g><g><title>std::io::Write::write_fmt (246 samples, 0.09%)</title><rect x="76.2935%" y="1317" width="0.0854%" height="15" fill="rgb(238,159,36)"/><text x="76.5435%" y="1327.50"></text></g><g><title>core::fmt::write (246 samples, 0.09%)</title><rect x="76.2935%" y="1301" width="0.0854%" height="15" fill="rgb(253,173,17)"/><text x="76.5435%" y="1311.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (82 samples, 0.03%)</title><rect x="76.3504%" y="1285" width="0.0285%" height="15" fill="rgb(221,23,28)"/><text x="76.6004%" y="1295.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (82 samples, 0.03%)</title><rect x="76.3504%" y="1269" width="0.0285%" height="15" fill="rgb(218,113,15)"/><text x="76.6004%" y="1279.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (48 samples, 0.02%)</title><rect x="76.3789%" y="1349" width="0.0167%" height="15" fill="rgb(233,58,3)"/><text x="76.6289%" y="1359.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (48 samples, 0.02%)</title><rect x="76.3789%" y="1333" width="0.0167%" height="15" fill="rgb(250,46,35)"/><text x="76.6289%" y="1343.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (48 samples, 0.02%)</title><rect x="76.3789%" y="1317" width="0.0167%" height="15" fill="rgb(210,169,11)"/><text x="76.6289%" y="1327.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (48 samples, 0.02%)</title><rect x="76.3789%" y="1301" width="0.0167%" height="15" fill="rgb(246,88,19)"/><text x="76.6289%" y="1311.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (48 samples, 0.02%)</title><rect x="76.3789%" y="1285" width="0.0167%" height="15" fill="rgb(206,81,49)"/><text x="76.6289%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (35 samples, 0.01%)</title><rect x="76.3955%" y="1269" width="0.0121%" height="15" fill="rgb(232,144,18)"/><text x="76.6455%" y="1279.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.01%)</title><rect x="76.3955%" y="1253" width="0.0121%" height="15" fill="rgb(235,2,27)"/><text x="76.6455%" y="1263.50"></text></g><g><title>alloc::alloc::alloc_zeroed (35 samples, 0.01%)</title><rect x="76.3955%" y="1237" width="0.0121%" height="15" fill="rgb(239,157,39)"/><text x="76.6455%" y="1247.50"></text></g><g><title>__libc_calloc (35 samples, 0.01%)</title><rect x="76.3955%" y="1221" width="0.0121%" height="15" fill="rgb(220,11,17)"/><text x="76.6455%" y="1231.50"></text></g><g><title>_int_malloc (35 samples, 0.01%)</title><rect x="76.3955%" y="1205" width="0.0121%" height="15" fill="rgb(243,94,50)"/><text x="76.6455%" y="1215.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (137 samples, 0.05%)</title><rect x="76.3789%" y="1381" width="0.0475%" height="15" fill="rgb(218,22,0)"/><text x="76.6289%" y="1391.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (137 samples, 0.05%)</title><rect x="76.3789%" y="1365" width="0.0475%" height="15" fill="rgb(249,70,21)"/><text x="76.6289%" y="1375.50"></text></g><g><title>alloc::vec::from_elem (89 samples, 0.03%)</title><rect x="76.3955%" y="1349" width="0.0309%" height="15" fill="rgb(245,111,46)"/><text x="76.6455%" y="1359.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (89 samples, 0.03%)</title><rect x="76.3955%" y="1333" width="0.0309%" height="15" fill="rgb(244,183,12)"/><text x="76.6455%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (89 samples, 0.03%)</title><rect x="76.3955%" y="1317" width="0.0309%" height="15" fill="rgb(207,117,0)"/><text x="76.6455%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (89 samples, 0.03%)</title><rect x="76.3955%" y="1301" width="0.0309%" height="15" fill="rgb(206,20,43)"/><text x="76.6455%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (89 samples, 0.03%)</title><rect x="76.3955%" y="1285" width="0.0309%" height="15" fill="rgb(221,104,11)"/><text x="76.6455%" y="1295.50"></text></g><g><title>core::alloc::layout::Layout::array (54 samples, 0.02%)</title><rect x="76.4077%" y="1269" width="0.0187%" height="15" fill="rgb(254,36,50)"/><text x="76.6577%" y="1279.50"></text></g><g><title>core::alloc::layout::Layout::repeat (49 samples, 0.02%)</title><rect x="76.4094%" y="1253" width="0.0170%" height="15" fill="rgb(252,17,15)"/><text x="76.6594%" y="1263.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (42 samples, 0.01%)</title><rect x="76.4993%" y="1253" width="0.0146%" height="15" fill="rgb(219,129,43)"/><text x="76.7493%" y="1263.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (301 samples, 0.10%)</title><rect x="76.4264%" y="1381" width="0.1044%" height="15" fill="rgb(205,34,45)"/><text x="76.6764%" y="1391.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (301 samples, 0.10%)</title><rect x="76.4264%" y="1365" width="0.1044%" height="15" fill="rgb(251,201,32)"/><text x="76.6764%" y="1375.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (301 samples, 0.10%)</title><rect x="76.4264%" y="1349" width="0.1044%" height="15" fill="rgb(205,56,0)"/><text x="76.6764%" y="1359.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (301 samples, 0.10%)</title><rect x="76.4264%" y="1333" width="0.1044%" height="15" fill="rgb(211,193,27)"/><text x="76.6764%" y="1343.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (301 samples, 0.10%)</title><rect x="76.4264%" y="1317" width="0.1044%" height="15" fill="rgb(231,100,42)"/><text x="76.6764%" y="1327.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (301 samples, 0.10%)</title><rect x="76.4264%" y="1301" width="0.1044%" height="15" fill="rgb(245,85,27)"/><text x="76.6764%" y="1311.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (301 samples, 0.10%)</title><rect x="76.4264%" y="1285" width="0.1044%" height="15" fill="rgb(241,76,24)"/><text x="76.6764%" y="1295.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::{{closure}} (139 samples, 0.05%)</title><rect x="76.4826%" y="1269" width="0.0482%" height="15" fill="rgb(249,157,15)"/><text x="76.7326%" y="1279.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (53 samples, 0.02%)</title><rect x="76.5309%" y="1301" width="0.0184%" height="15" fill="rgb(222,218,25)"/><text x="76.7809%" y="1311.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (53 samples, 0.02%)</title><rect x="76.5309%" y="1285" width="0.0184%" height="15" fill="rgb(252,156,52)"/><text x="76.7809%" y="1295.50"></text></g><g><title>env_logger::fmt::Formatter::print (53 samples, 0.02%)</title><rect x="76.5309%" y="1269" width="0.0184%" height="15" fill="rgb(211,185,7)"/><text x="76.7809%" y="1279.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (112 samples, 0.04%)</title><rect x="76.5309%" y="1317" width="0.0389%" height="15" fill="rgb(234,108,24)"/><text x="76.7809%" y="1327.50"></text></g><g><title>env_logger::fmt::Formatter::clear (59 samples, 0.02%)</title><rect x="76.5492%" y="1301" width="0.0205%" height="15" fill="rgb(227,218,2)"/><text x="76.7992%" y="1311.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::clear (34 samples, 0.01%)</title><rect x="76.5579%" y="1285" width="0.0118%" height="15" fill="rgb(224,0,36)"/><text x="76.8079%" y="1295.50"></text></g><g><title>termcolor::Buffer::clear (34 samples, 0.01%)</title><rect x="76.5579%" y="1269" width="0.0118%" height="15" fill="rgb(233,201,10)"/><text x="76.8079%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::clear (34 samples, 0.01%)</title><rect x="76.5579%" y="1253" width="0.0118%" height="15" fill="rgb(252,209,14)"/><text x="76.8079%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (34 samples, 0.01%)</title><rect x="76.5579%" y="1237" width="0.0118%" height="15" fill="rgb(205,93,49)"/><text x="76.8079%" y="1247.50"></text></g><g><title>log::__private_api_log (143 samples, 0.05%)</title><rect x="76.5309%" y="1381" width="0.0496%" height="15" fill="rgb(234,116,45)"/><text x="76.7809%" y="1391.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (143 samples, 0.05%)</title><rect x="76.5309%" y="1365" width="0.0496%" height="15" fill="rgb(248,89,35)"/><text x="76.7809%" y="1375.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (143 samples, 0.05%)</title><rect x="76.5309%" y="1349" width="0.0496%" height="15" fill="rgb(233,167,45)"/><text x="76.7809%" y="1359.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (143 samples, 0.05%)</title><rect x="76.5309%" y="1333" width="0.0496%" height="15" fill="rgb(248,228,14)"/><text x="76.7809%" y="1343.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (65 samples, 0.02%)</title><rect x="76.5805%" y="1381" width="0.0226%" height="15" fill="rgb(246,91,14)"/><text x="76.8305%" y="1391.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (65 samples, 0.02%)</title><rect x="76.5805%" y="1365" width="0.0226%" height="15" fill="rgb(227,142,5)"/><text x="76.8305%" y="1375.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (65 samples, 0.02%)</title><rect x="76.5805%" y="1349" width="0.0226%" height="15" fill="rgb(221,63,33)"/><text x="76.8305%" y="1359.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (65 samples, 0.02%)</title><rect x="76.5805%" y="1333" width="0.0226%" height="15" fill="rgb(233,49,0)"/><text x="76.8305%" y="1343.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (65 samples, 0.02%)</title><rect x="76.5805%" y="1317" width="0.0226%" height="15" fill="rgb(251,115,38)"/><text x="76.8305%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (65 samples, 0.02%)</title><rect x="76.5805%" y="1301" width="0.0226%" height="15" fill="rgb(231,214,32)"/><text x="76.8305%" y="1311.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (57 samples, 0.02%)</title><rect x="76.5832%" y="1285" width="0.0198%" height="15" fill="rgb(248,73,46)"/><text x="76.8332%" y="1295.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (57 samples, 0.02%)</title><rect x="76.5832%" y="1269" width="0.0198%" height="15" fill="rgb(237,156,4)"/><text x="76.8332%" y="1279.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (57 samples, 0.02%)</title><rect x="76.5832%" y="1253" width="0.0198%" height="15" fill="rgb(227,132,2)"/><text x="76.8332%" y="1263.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (31 samples, 0.01%)</title><rect x="76.5923%" y="1237" width="0.0108%" height="15" fill="rgb(248,161,9)"/><text x="76.8423%" y="1247.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (31 samples, 0.01%)</title><rect x="76.5923%" y="1221" width="0.0108%" height="15" fill="rgb(238,77,38)"/><text x="76.8423%" y="1231.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (80 samples, 0.03%)</title><rect x="76.6072%" y="1141" width="0.0278%" height="15" fill="rgb(222,166,40)"/><text x="76.8572%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (76 samples, 0.03%)</title><rect x="76.6086%" y="1125" width="0.0264%" height="15" fill="rgb(214,168,45)"/><text x="76.8586%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (32 samples, 0.01%)</title><rect x="76.6238%" y="1109" width="0.0111%" height="15" fill="rgb(226,64,37)"/><text x="76.8738%" y="1119.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (37 samples, 0.01%)</title><rect x="76.6454%" y="1125" width="0.0128%" height="15" fill="rgb(232,210,43)"/><text x="76.8954%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="76.6599%" y="1125" width="0.0108%" height="15" fill="rgb(214,76,33)"/><text x="76.9099%" y="1135.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (907 samples, 0.31%)</title><rect x="76.3789%" y="1397" width="0.3147%" height="15" fill="rgb(210,78,5)"/><text x="76.6289%" y="1407.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (249 samples, 0.09%)</title><rect x="76.6072%" y="1381" width="0.0864%" height="15" fill="rgb(211,107,37)"/><text x="76.8572%" y="1391.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (249 samples, 0.09%)</title><rect x="76.6072%" y="1365" width="0.0864%" height="15" fill="rgb(249,67,16)"/><text x="76.8572%" y="1375.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (249 samples, 0.09%)</title><rect x="76.6072%" y="1349" width="0.0864%" height="15" fill="rgb(222,114,31)"/><text x="76.8572%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (249 samples, 0.09%)</title><rect x="76.6072%" y="1333" width="0.0864%" height="15" fill="rgb(242,118,19)"/><text x="76.8572%" y="1343.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (249 samples, 0.09%)</title><rect x="76.6072%" y="1317" width="0.0864%" height="15" fill="rgb(223,115,1)"/><text x="76.8572%" y="1327.50"></text></g><g><title>core::task::wake::Waker::wake (249 samples, 0.09%)</title><rect x="76.6072%" y="1301" width="0.0864%" height="15" fill="rgb(241,182,54)"/><text x="76.8572%" y="1311.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (249 samples, 0.09%)</title><rect x="76.6072%" y="1285" width="0.0864%" height="15" fill="rgb(244,166,36)"/><text x="76.8572%" y="1295.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (249 samples, 0.09%)</title><rect x="76.6072%" y="1269" width="0.0864%" height="15" fill="rgb(241,52,43)"/><text x="76.8572%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (249 samples, 0.09%)</title><rect x="76.6072%" y="1253" width="0.0864%" height="15" fill="rgb(236,82,9)"/><text x="76.8572%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (249 samples, 0.09%)</title><rect x="76.6072%" y="1237" width="0.0864%" height="15" fill="rgb(241,119,0)"/><text x="76.8572%" y="1247.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (249 samples, 0.09%)</title><rect x="76.6072%" y="1221" width="0.0864%" height="15" fill="rgb(221,19,22)"/><text x="76.8572%" y="1231.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule::{{closure}} (249 samples, 0.09%)</title><rect x="76.6072%" y="1205" width="0.0864%" height="15" fill="rgb(254,144,35)"/><text x="76.8572%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (249 samples, 0.09%)</title><rect x="76.6072%" y="1189" width="0.0864%" height="15" fill="rgb(246,132,30)"/><text x="76.8572%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (249 samples, 0.09%)</title><rect x="76.6072%" y="1173" width="0.0864%" height="15" fill="rgb(234,69,28)"/><text x="76.8572%" y="1183.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (249 samples, 0.09%)</title><rect x="76.6072%" y="1157" width="0.0864%" height="15" fill="rgb(219,106,47)"/><text x="76.8572%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (169 samples, 0.06%)</title><rect x="76.6349%" y="1141" width="0.0586%" height="15" fill="rgb(218,79,24)"/><text x="76.8849%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (65 samples, 0.02%)</title><rect x="76.6710%" y="1125" width="0.0226%" height="15" fill="rgb(225,26,21)"/><text x="76.9210%" y="1135.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (52 samples, 0.02%)</title><rect x="76.6936%" y="1205" width="0.0180%" height="15" fill="rgb(217,68,49)"/><text x="76.9436%" y="1215.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (52 samples, 0.02%)</title><rect x="76.6936%" y="1189" width="0.0180%" height="15" fill="rgb(220,204,28)"/><text x="76.9436%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (87 samples, 0.03%)</title><rect x="76.6936%" y="1253" width="0.0302%" height="15" fill="rgb(237,208,43)"/><text x="76.9436%" y="1263.50"></text></g><g><title>std::io::Write::write_fmt (87 samples, 0.03%)</title><rect x="76.6936%" y="1237" width="0.0302%" height="15" fill="rgb(213,97,42)"/><text x="76.9436%" y="1247.50"></text></g><g><title>core::fmt::write (87 samples, 0.03%)</title><rect x="76.6936%" y="1221" width="0.0302%" height="15" fill="rgb(238,96,52)"/><text x="76.9436%" y="1231.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (35 samples, 0.01%)</title><rect x="76.7116%" y="1205" width="0.0121%" height="15" fill="rgb(228,14,13)"/><text x="76.9616%" y="1215.50"></text></g><g><title>std::io::Write::write_all (35 samples, 0.01%)</title><rect x="76.7116%" y="1189" width="0.0121%" height="15" fill="rgb(219,123,13)"/><text x="76.9616%" y="1199.50"></text></g><g><title>&lt;tunneler::streams::error::RecvError as core::fmt::Display&gt;::fmt (41 samples, 0.01%)</title><rect x="76.7283%" y="1141" width="0.0142%" height="15" fill="rgb(216,144,17)"/><text x="76.9783%" y="1151.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (92 samples, 0.03%)</title><rect x="76.7238%" y="1205" width="0.0319%" height="15" fill="rgb(230,228,29)"/><text x="76.9738%" y="1215.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (92 samples, 0.03%)</title><rect x="76.7238%" y="1189" width="0.0319%" height="15" fill="rgb(233,18,5)"/><text x="76.9738%" y="1199.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (92 samples, 0.03%)</title><rect x="76.7238%" y="1173" width="0.0319%" height="15" fill="rgb(233,197,12)"/><text x="76.9738%" y="1183.50"></text></g><g><title>core::fmt::write (92 samples, 0.03%)</title><rect x="76.7238%" y="1157" width="0.0319%" height="15" fill="rgb(234,140,29)"/><text x="76.9738%" y="1167.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (38 samples, 0.01%)</title><rect x="76.7425%" y="1141" width="0.0132%" height="15" fill="rgb(233,113,19)"/><text x="76.9925%" y="1151.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (38 samples, 0.01%)</title><rect x="76.7425%" y="1125" width="0.0132%" height="15" fill="rgb(246,209,13)"/><text x="76.9925%" y="1135.50"></text></g><g><title>core::fmt::Formatter::pad_integral (29 samples, 0.01%)</title><rect x="76.7456%" y="1109" width="0.0101%" height="15" fill="rgb(242,79,54)"/><text x="76.9956%" y="1119.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (118 samples, 0.04%)</title><rect x="76.7238%" y="1253" width="0.0409%" height="15" fill="rgb(219,73,16)"/><text x="76.9738%" y="1263.50"></text></g><g><title>std::io::Write::write_fmt (118 samples, 0.04%)</title><rect x="76.7238%" y="1237" width="0.0409%" height="15" fill="rgb(224,52,10)"/><text x="76.9738%" y="1247.50"></text></g><g><title>core::fmt::write (118 samples, 0.04%)</title><rect x="76.7238%" y="1221" width="0.0409%" height="15" fill="rgb(237,179,5)"/><text x="76.9738%" y="1231.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_module_path (58 samples, 0.02%)</title><rect x="76.7723%" y="1253" width="0.0201%" height="15" fill="rgb(231,20,6)"/><text x="77.0223%" y="1263.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (58 samples, 0.02%)</title><rect x="76.7723%" y="1237" width="0.0201%" height="15" fill="rgb(253,171,45)"/><text x="77.0223%" y="1247.50"></text></g><g><title>std::io::Write::write_fmt (58 samples, 0.02%)</title><rect x="76.7723%" y="1221" width="0.0201%" height="15" fill="rgb(230,75,49)"/><text x="77.0223%" y="1231.50"></text></g><g><title>core::fmt::write (58 samples, 0.02%)</title><rect x="76.7723%" y="1205" width="0.0201%" height="15" fill="rgb(216,83,46)"/><text x="77.0223%" y="1215.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (32 samples, 0.01%)</title><rect x="76.7814%" y="1189" width="0.0111%" height="15" fill="rgb(236,56,9)"/><text x="77.0314%" y="1199.50"></text></g><g><title>std::io::Write::write_all (32 samples, 0.01%)</title><rect x="76.7814%" y="1173" width="0.0111%" height="15" fill="rgb(215,28,34)"/><text x="77.0314%" y="1183.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (41 samples, 0.01%)</title><rect x="76.8306%" y="1157" width="0.0142%" height="15" fill="rgb(230,222,20)"/><text x="77.0806%" y="1167.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (38 samples, 0.01%)</title><rect x="76.8317%" y="1141" width="0.0132%" height="15" fill="rgb(235,209,51)"/><text x="77.0817%" y="1151.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (31 samples, 0.01%)</title><rect x="76.8490%" y="1141" width="0.0108%" height="15" fill="rgb(235,167,1)"/><text x="77.0990%" y="1151.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (45 samples, 0.02%)</title><rect x="76.8452%" y="1157" width="0.0156%" height="15" fill="rgb(248,220,0)"/><text x="77.0952%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (50 samples, 0.02%)</title><rect x="76.8608%" y="1157" width="0.0173%" height="15" fill="rgb(239,0,18)"/><text x="77.1108%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.01%)</title><rect x="76.8639%" y="1141" width="0.0142%" height="15" fill="rgb(229,179,11)"/><text x="77.1139%" y="1151.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (38 samples, 0.01%)</title><rect x="76.8948%" y="1157" width="0.0132%" height="15" fill="rgb(226,116,53)"/><text x="77.1448%" y="1167.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (333 samples, 0.12%)</title><rect x="76.7932%" y="1189" width="0.1155%" height="15" fill="rgb(218,1,49)"/><text x="77.0432%" y="1199.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (333 samples, 0.12%)</title><rect x="76.7932%" y="1173" width="0.1155%" height="15" fill="rgb(208,184,47)"/><text x="77.0432%" y="1183.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (661 samples, 0.23%)</title><rect x="76.6936%" y="1301" width="0.2293%" height="15" fill="rgb(238,174,3)"/><text x="76.9436%" y="1311.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (661 samples, 0.23%)</title><rect x="76.6936%" y="1285" width="0.2293%" height="15" fill="rgb(247,188,6)"/><text x="76.9436%" y="1295.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (661 samples, 0.23%)</title><rect x="76.6936%" y="1269" width="0.2293%" height="15" fill="rgb(211,165,46)"/><text x="76.9436%" y="1279.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (376 samples, 0.13%)</title><rect x="76.7925%" y="1253" width="0.1305%" height="15" fill="rgb(222,190,10)"/><text x="77.0425%" y="1263.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (376 samples, 0.13%)</title><rect x="76.7925%" y="1237" width="0.1305%" height="15" fill="rgb(206,185,3)"/><text x="77.0425%" y="1247.50"></text></g><g><title>std::io::Write::write_fmt (374 samples, 0.13%)</title><rect x="76.7932%" y="1221" width="0.1298%" height="15" fill="rgb(244,125,37)"/><text x="77.0432%" y="1231.50"></text></g><g><title>core::fmt::write (374 samples, 0.13%)</title><rect x="76.7932%" y="1205" width="0.1298%" height="15" fill="rgb(211,43,7)"/><text x="77.0432%" y="1215.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (41 samples, 0.01%)</title><rect x="76.9087%" y="1189" width="0.0142%" height="15" fill="rgb(250,41,42)"/><text x="77.1587%" y="1199.50"></text></g><g><title>std::io::Write::write_all (41 samples, 0.01%)</title><rect x="76.9087%" y="1173" width="0.0142%" height="15" fill="rgb(254,54,42)"/><text x="77.1587%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1765" width="0.5579%" height="15" fill="rgb(213,71,43)"/><text x="76.6289%" y="1775.50"></text></g><g><title>tokio::coop::budget (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1749" width="0.5579%" height="15" fill="rgb(249,3,44)"/><text x="76.6289%" y="1759.50"></text></g><g><title>tokio::coop::with_budget (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1733" width="0.5579%" height="15" fill="rgb(229,80,41)"/><text x="76.6289%" y="1743.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1717" width="0.5579%" height="15" fill="rgb(231,25,28)"/><text x="76.6289%" y="1727.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1701" width="0.5579%" height="15" fill="rgb(208,79,48)"/><text x="76.6289%" y="1711.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1685" width="0.5579%" height="15" fill="rgb(207,196,38)"/><text x="76.6289%" y="1695.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1669" width="0.5579%" height="15" fill="rgb(228,105,49)"/><text x="76.6289%" y="1679.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1653" width="0.5579%" height="15" fill="rgb(237,99,15)"/><text x="76.6289%" y="1663.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1637" width="0.5579%" height="15" fill="rgb(224,207,46)"/><text x="76.6289%" y="1647.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1621" width="0.5579%" height="15" fill="rgb(249,117,50)"/><text x="76.6289%" y="1631.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1605" width="0.5579%" height="15" fill="rgb(248,17,13)"/><text x="76.6289%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1589" width="0.5579%" height="15" fill="rgb(228,187,36)"/><text x="76.6289%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1573" width="0.5579%" height="15" fill="rgb(234,132,20)"/><text x="76.6289%" y="1583.50"></text></g><g><title>std::panic::catch_unwind (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1557" width="0.5579%" height="15" fill="rgb(209,170,46)"/><text x="76.6289%" y="1567.50"></text></g><g><title>std::panicking::try (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1541" width="0.5579%" height="15" fill="rgb(237,23,19)"/><text x="76.6289%" y="1551.50"></text></g><g><title>__rust_try (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1525" width="0.5579%" height="15" fill="rgb(227,21,26)"/><text x="76.6289%" y="1535.50"></text></g><g><title>std::panicking::try::do_call (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1509" width="0.5579%" height="15" fill="rgb(222,220,48)"/><text x="76.6289%" y="1519.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1493" width="0.5579%" height="15" fill="rgb(214,9,16)"/><text x="76.6289%" y="1503.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1477" width="0.5579%" height="15" fill="rgb(209,73,30)"/><text x="76.6289%" y="1487.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1461" width="0.5579%" height="15" fill="rgb(207,20,33)"/><text x="76.6289%" y="1471.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1445" width="0.5579%" height="15" fill="rgb(219,153,12)"/><text x="76.6289%" y="1455.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1429" width="0.5579%" height="15" fill="rgb(235,97,25)"/><text x="76.6289%" y="1439.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,608 samples, 0.56%)</title><rect x="76.3789%" y="1413" width="0.5579%" height="15" fill="rgb(244,30,34)"/><text x="76.6289%" y="1423.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (701 samples, 0.24%)</title><rect x="76.6936%" y="1397" width="0.2432%" height="15" fill="rgb(214,106,45)"/><text x="76.9436%" y="1407.50"></text></g><g><title>log::__private_api_log (701 samples, 0.24%)</title><rect x="76.6936%" y="1381" width="0.2432%" height="15" fill="rgb(226,41,9)"/><text x="76.9436%" y="1391.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (701 samples, 0.24%)</title><rect x="76.6936%" y="1365" width="0.2432%" height="15" fill="rgb(253,139,29)"/><text x="76.9436%" y="1375.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (701 samples, 0.24%)</title><rect x="76.6936%" y="1349" width="0.2432%" height="15" fill="rgb(213,205,39)"/><text x="76.9436%" y="1359.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (701 samples, 0.24%)</title><rect x="76.6936%" y="1333" width="0.2432%" height="15" fill="rgb(209,27,10)"/><text x="76.9436%" y="1343.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (701 samples, 0.24%)</title><rect x="76.6936%" y="1317" width="0.2432%" height="15" fill="rgb(249,142,16)"/><text x="76.9436%" y="1327.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (40 samples, 0.01%)</title><rect x="76.9229%" y="1301" width="0.0139%" height="15" fill="rgb(242,65,12)"/><text x="77.1729%" y="1311.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (40 samples, 0.01%)</title><rect x="76.9229%" y="1285" width="0.0139%" height="15" fill="rgb(232,48,10)"/><text x="77.1729%" y="1295.50"></text></g><g><title>env_logger::fmt::Formatter::print (40 samples, 0.01%)</title><rect x="76.9229%" y="1269" width="0.0139%" height="15" fill="rgb(253,67,19)"/><text x="77.1729%" y="1279.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (40 samples, 0.01%)</title><rect x="76.9229%" y="1253" width="0.0139%" height="15" fill="rgb(227,93,29)"/><text x="77.1729%" y="1263.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (40 samples, 0.01%)</title><rect x="76.9229%" y="1237" width="0.0139%" height="15" fill="rgb(226,189,53)"/><text x="77.1729%" y="1247.50"></text></g><g><title>termcolor::BufferWriter::print (40 samples, 0.01%)</title><rect x="76.9229%" y="1221" width="0.0139%" height="15" fill="rgb(223,224,1)"/><text x="77.1729%" y="1231.50"></text></g><g><title>std::io::Write::write_all (40 samples, 0.01%)</title><rect x="76.9229%" y="1205" width="0.0139%" height="15" fill="rgb(221,84,32)"/><text x="77.1729%" y="1215.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 0.01%)</title><rect x="76.9229%" y="1189" width="0.0139%" height="15" fill="rgb(214,189,28)"/><text x="77.1729%" y="1199.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (40 samples, 0.01%)</title><rect x="76.9229%" y="1173" width="0.0139%" height="15" fill="rgb(234,7,52)"/><text x="77.1729%" y="1183.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (40 samples, 0.01%)</title><rect x="76.9229%" y="1157" width="0.0139%" height="15" fill="rgb(249,73,31)"/><text x="77.1729%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (40 samples, 0.01%)</title><rect x="76.9371%" y="1221" width="0.0139%" height="15" fill="rgb(253,153,41)"/><text x="77.1871%" y="1231.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.01%)</title><rect x="76.9371%" y="1205" width="0.0139%" height="15" fill="rgb(249,52,34)"/><text x="77.1871%" y="1215.50"></text></g><g><title>alloc::vec::from_elem (75 samples, 0.03%)</title><rect x="76.9371%" y="1301" width="0.0260%" height="15" fill="rgb(236,177,47)"/><text x="77.1871%" y="1311.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (75 samples, 0.03%)</title><rect x="76.9371%" y="1285" width="0.0260%" height="15" fill="rgb(252,185,45)"/><text x="77.1871%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (75 samples, 0.03%)</title><rect x="76.9371%" y="1269" width="0.0260%" height="15" fill="rgb(251,15,30)"/><text x="77.1871%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (75 samples, 0.03%)</title><rect x="76.9371%" y="1253" width="0.0260%" height="15" fill="rgb(233,31,4)"/><text x="77.1871%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (75 samples, 0.03%)</title><rect x="76.9371%" y="1237" width="0.0260%" height="15" fill="rgb(254,44,24)"/><text x="77.1871%" y="1247.50"></text></g><g><title>core::alloc::layout::Layout::array (35 samples, 0.01%)</title><rect x="76.9510%" y="1221" width="0.0121%" height="15" fill="rgb(218,54,1)"/><text x="77.2010%" y="1231.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (39 samples, 0.01%)</title><rect x="76.9729%" y="1173" width="0.0135%" height="15" fill="rgb(243,209,39)"/><text x="77.2229%" y="1183.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (71 samples, 0.02%)</title><rect x="76.9729%" y="1253" width="0.0246%" height="15" fill="rgb(206,75,33)"/><text x="77.2229%" y="1263.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (71 samples, 0.02%)</title><rect x="76.9729%" y="1237" width="0.0246%" height="15" fill="rgb(223,108,18)"/><text x="77.2229%" y="1247.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (71 samples, 0.02%)</title><rect x="76.9729%" y="1221" width="0.0246%" height="15" fill="rgb(244,89,31)"/><text x="77.2229%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (71 samples, 0.02%)</title><rect x="76.9729%" y="1205" width="0.0246%" height="15" fill="rgb(222,167,27)"/><text x="77.2229%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (71 samples, 0.02%)</title><rect x="76.9729%" y="1189" width="0.0246%" height="15" fill="rgb(247,41,16)"/><text x="77.2229%" y="1199.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (32 samples, 0.01%)</title><rect x="76.9864%" y="1173" width="0.0111%" height="15" fill="rgb(233,168,40)"/><text x="77.2364%" y="1183.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (89 samples, 0.03%)</title><rect x="76.9729%" y="1301" width="0.0309%" height="15" fill="rgb(205,211,8)"/><text x="77.2229%" y="1311.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (89 samples, 0.03%)</title><rect x="76.9729%" y="1285" width="0.0309%" height="15" fill="rgb(238,105,11)"/><text x="77.2229%" y="1295.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (89 samples, 0.03%)</title><rect x="76.9729%" y="1269" width="0.0309%" height="15" fill="rgb(223,142,52)"/><text x="77.2229%" y="1279.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (258 samples, 0.09%)</title><rect x="76.9368%" y="1317" width="0.0895%" height="15" fill="rgb(238,51,33)"/><text x="77.1868%" y="1327.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (59 samples, 0.02%)</title><rect x="77.0058%" y="1301" width="0.0205%" height="15" fill="rgb(231,188,43)"/><text x="77.2558%" y="1311.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (59 samples, 0.02%)</title><rect x="77.0058%" y="1285" width="0.0205%" height="15" fill="rgb(216,92,17)"/><text x="77.2558%" y="1295.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (59 samples, 0.02%)</title><rect x="77.0058%" y="1269" width="0.0205%" height="15" fill="rgb(228,2,40)"/><text x="77.2558%" y="1279.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (59 samples, 0.02%)</title><rect x="77.0058%" y="1253" width="0.0205%" height="15" fill="rgb(226,73,15)"/><text x="77.2558%" y="1263.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (51 samples, 0.02%)</title><rect x="77.0086%" y="1237" width="0.0177%" height="15" fill="rgb(227,66,46)"/><text x="77.2586%" y="1247.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (286 samples, 0.10%)</title><rect x="76.9368%" y="1765" width="0.0992%" height="15" fill="rgb(209,71,6)"/><text x="77.1868%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (286 samples, 0.10%)</title><rect x="76.9368%" y="1749" width="0.0992%" height="15" fill="rgb(246,100,25)"/><text x="77.1868%" y="1759.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (286 samples, 0.10%)</title><rect x="76.9368%" y="1733" width="0.0992%" height="15" fill="rgb(248,185,27)"/><text x="77.1868%" y="1743.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (286 samples, 0.10%)</title><rect x="76.9368%" y="1717" width="0.0992%" height="15" fill="rgb(225,118,47)"/><text x="77.1868%" y="1727.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (286 samples, 0.10%)</title><rect x="76.9368%" y="1701" width="0.0992%" height="15" fill="rgb(220,185,44)"/><text x="77.1868%" y="1711.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (286 samples, 0.10%)</title><rect x="76.9368%" y="1685" width="0.0992%" height="15" fill="rgb(227,95,24)"/><text x="77.1868%" y="1695.50"></text></g><g><title>tokio::coop::budget (286 samples, 0.10%)</title><rect x="76.9368%" y="1669" width="0.0992%" height="15" fill="rgb(252,84,24)"/><text x="77.1868%" y="1679.50"></text></g><g><title>tokio::coop::with_budget (286 samples, 0.10%)</title><rect x="76.9368%" y="1653" width="0.0992%" height="15" fill="rgb(240,34,44)"/><text x="77.1868%" y="1663.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (286 samples, 0.10%)</title><rect x="76.9368%" y="1637" width="0.0992%" height="15" fill="rgb(209,72,54)"/><text x="77.1868%" y="1647.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (286 samples, 0.10%)</title><rect x="76.9368%" y="1621" width="0.0992%" height="15" fill="rgb(226,19,45)"/><text x="77.1868%" y="1631.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (286 samples, 0.10%)</title><rect x="76.9368%" y="1605" width="0.0992%" height="15" fill="rgb(246,7,45)"/><text x="77.1868%" y="1615.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (286 samples, 0.10%)</title><rect x="76.9368%" y="1589" width="0.0992%" height="15" fill="rgb(225,45,2)"/><text x="77.1868%" y="1599.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (286 samples, 0.10%)</title><rect x="76.9368%" y="1573" width="0.0992%" height="15" fill="rgb(221,80,29)"/><text x="77.1868%" y="1583.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (286 samples, 0.10%)</title><rect x="76.9368%" y="1557" width="0.0992%" height="15" fill="rgb(228,11,19)"/><text x="77.1868%" y="1567.50"></text></g><g><title>tokio::runtime::task::raw::poll (286 samples, 0.10%)</title><rect x="76.9368%" y="1541" width="0.0992%" height="15" fill="rgb(243,17,21)"/><text x="77.1868%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (286 samples, 0.10%)</title><rect x="76.9368%" y="1525" width="0.0992%" height="15" fill="rgb(243,88,8)"/><text x="77.1868%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (286 samples, 0.10%)</title><rect x="76.9368%" y="1509" width="0.0992%" height="15" fill="rgb(214,17,9)"/><text x="77.1868%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (286 samples, 0.10%)</title><rect x="76.9368%" y="1493" width="0.0992%" height="15" fill="rgb(232,169,15)"/><text x="77.1868%" y="1503.50"></text></g><g><title>std::panic::catch_unwind (286 samples, 0.10%)</title><rect x="76.9368%" y="1477" width="0.0992%" height="15" fill="rgb(232,86,53)"/><text x="77.1868%" y="1487.50"></text></g><g><title>std::panicking::try (286 samples, 0.10%)</title><rect x="76.9368%" y="1461" width="0.0992%" height="15" fill="rgb(222,100,4)"/><text x="77.1868%" y="1471.50"></text></g><g><title>__rust_try (286 samples, 0.10%)</title><rect x="76.9368%" y="1445" width="0.0992%" height="15" fill="rgb(253,151,38)"/><text x="77.1868%" y="1455.50"></text></g><g><title>std::panicking::try::do_call (286 samples, 0.10%)</title><rect x="76.9368%" y="1429" width="0.0992%" height="15" fill="rgb(238,215,29)"/><text x="77.1868%" y="1439.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (286 samples, 0.10%)</title><rect x="76.9368%" y="1413" width="0.0992%" height="15" fill="rgb(205,128,53)"/><text x="77.1868%" y="1423.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (286 samples, 0.10%)</title><rect x="76.9368%" y="1397" width="0.0992%" height="15" fill="rgb(248,183,14)"/><text x="77.1868%" y="1407.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (286 samples, 0.10%)</title><rect x="76.9368%" y="1381" width="0.0992%" height="15" fill="rgb(244,172,35)"/><text x="77.1868%" y="1391.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (286 samples, 0.10%)</title><rect x="76.9368%" y="1365" width="0.0992%" height="15" fill="rgb(234,93,19)"/><text x="77.1868%" y="1375.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (286 samples, 0.10%)</title><rect x="76.9368%" y="1349" width="0.0992%" height="15" fill="rgb(227,109,7)"/><text x="77.1868%" y="1359.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (286 samples, 0.10%)</title><rect x="76.9368%" y="1333" width="0.0992%" height="15" fill="rgb(233,136,54)"/><text x="77.1868%" y="1343.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.01%)</title><rect x="77.0360%" y="1349" width="0.0132%" height="15" fill="rgb(233,19,40)"/><text x="77.2860%" y="1359.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (38 samples, 0.01%)</title><rect x="77.0360%" y="1333" width="0.0132%" height="15" fill="rgb(247,41,18)"/><text x="77.2860%" y="1343.50"></text></g><g><title>alloc::vec::from_elem (29 samples, 0.01%)</title><rect x="77.0391%" y="1317" width="0.0101%" height="15" fill="rgb(220,34,34)"/><text x="77.2891%" y="1327.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (29 samples, 0.01%)</title><rect x="77.0391%" y="1301" width="0.0101%" height="15" fill="rgb(222,135,32)"/><text x="77.2891%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (29 samples, 0.01%)</title><rect x="77.0391%" y="1285" width="0.0101%" height="15" fill="rgb(214,80,19)"/><text x="77.2891%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (29 samples, 0.01%)</title><rect x="77.0391%" y="1269" width="0.0101%" height="15" fill="rgb(234,54,46)"/><text x="77.2891%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (29 samples, 0.01%)</title><rect x="77.0391%" y="1253" width="0.0101%" height="15" fill="rgb(251,48,23)"/><text x="77.2891%" y="1263.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (32 samples, 0.01%)</title><rect x="77.0492%" y="1349" width="0.0111%" height="15" fill="rgb(254,109,52)"/><text x="77.2992%" y="1359.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (32 samples, 0.01%)</title><rect x="77.0492%" y="1333" width="0.0111%" height="15" fill="rgb(240,186,19)"/><text x="77.2992%" y="1343.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (32 samples, 0.01%)</title><rect x="77.0492%" y="1317" width="0.0111%" height="15" fill="rgb(246,187,17)"/><text x="77.2992%" y="1327.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (32 samples, 0.01%)</title><rect x="77.0492%" y="1301" width="0.0111%" height="15" fill="rgb(212,21,5)"/><text x="77.2992%" y="1311.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (32 samples, 0.01%)</title><rect x="77.0492%" y="1285" width="0.0111%" height="15" fill="rgb(225,185,18)"/><text x="77.2992%" y="1295.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::advance (32 samples, 0.01%)</title><rect x="77.0492%" y="1269" width="0.0111%" height="15" fill="rgb(245,114,17)"/><text x="77.2992%" y="1279.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.01%)</title><rect x="77.0843%" y="1237" width="0.0114%" height="15" fill="rgb(223,164,24)"/><text x="77.3343%" y="1247.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.02%)</title><rect x="77.0843%" y="1253" width="0.0191%" height="15" fill="rgb(211,228,3)"/><text x="77.3343%" y="1263.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (158 samples, 0.05%)</title><rect x="77.0714%" y="1349" width="0.0548%" height="15" fill="rgb(223,16,38)"/><text x="77.3214%" y="1359.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (158 samples, 0.05%)</title><rect x="77.0714%" y="1333" width="0.0548%" height="15" fill="rgb(207,31,54)"/><text x="77.3214%" y="1343.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (158 samples, 0.05%)</title><rect x="77.0714%" y="1317" width="0.0548%" height="15" fill="rgb(220,39,11)"/><text x="77.3214%" y="1327.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (132 samples, 0.05%)</title><rect x="77.0804%" y="1301" width="0.0458%" height="15" fill="rgb(235,185,0)"/><text x="77.3304%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (132 samples, 0.05%)</title><rect x="77.0804%" y="1285" width="0.0458%" height="15" fill="rgb(249,39,18)"/><text x="77.3304%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (121 samples, 0.04%)</title><rect x="77.0843%" y="1269" width="0.0420%" height="15" fill="rgb(240,110,33)"/><text x="77.3343%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (66 samples, 0.02%)</title><rect x="77.1033%" y="1253" width="0.0229%" height="15" fill="rgb(210,92,42)"/><text x="77.3533%" y="1263.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (66 samples, 0.02%)</title><rect x="77.1033%" y="1237" width="0.0229%" height="15" fill="rgb(218,215,28)"/><text x="77.3533%" y="1247.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (32 samples, 0.01%)</title><rect x="77.1262%" y="1349" width="0.0111%" height="15" fill="rgb(238,215,36)"/><text x="77.3762%" y="1359.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (32 samples, 0.01%)</title><rect x="77.1262%" y="1333" width="0.0111%" height="15" fill="rgb(220,31,10)"/><text x="77.3762%" y="1343.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (32 samples, 0.01%)</title><rect x="77.1262%" y="1317" width="0.0111%" height="15" fill="rgb(212,93,14)"/><text x="77.3762%" y="1327.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (32 samples, 0.01%)</title><rect x="77.1262%" y="1301" width="0.0111%" height="15" fill="rgb(254,207,2)"/><text x="77.3762%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (32 samples, 0.01%)</title><rect x="77.1262%" y="1285" width="0.0111%" height="15" fill="rgb(205,57,44)"/><text x="77.3762%" y="1295.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (351 samples, 0.12%)</title><rect x="77.0360%" y="1365" width="0.1218%" height="15" fill="rgb(226,151,19)"/><text x="77.2860%" y="1375.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (59 samples, 0.02%)</title><rect x="77.1373%" y="1349" width="0.0205%" height="15" fill="rgb(230,72,30)"/><text x="77.3873%" y="1359.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (59 samples, 0.02%)</title><rect x="77.1373%" y="1333" width="0.0205%" height="15" fill="rgb(244,0,8)"/><text x="77.3873%" y="1343.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (59 samples, 0.02%)</title><rect x="77.1373%" y="1317" width="0.0205%" height="15" fill="rgb(230,192,6)"/><text x="77.3873%" y="1327.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (59 samples, 0.02%)</title><rect x="77.1373%" y="1301" width="0.0205%" height="15" fill="rgb(233,207,13)"/><text x="77.3873%" y="1311.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (38 samples, 0.01%)</title><rect x="77.1446%" y="1285" width="0.0132%" height="15" fill="rgb(206,227,7)"/><text x="77.3946%" y="1295.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (40 samples, 0.01%)</title><rect x="77.1592%" y="1173" width="0.0139%" height="15" fill="rgb(213,217,25)"/><text x="77.4092%" y="1183.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (40 samples, 0.01%)</title><rect x="77.1592%" y="1157" width="0.0139%" height="15" fill="rgb(249,75,4)"/><text x="77.4092%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (66 samples, 0.02%)</title><rect x="77.1578%" y="1221" width="0.0229%" height="15" fill="rgb(225,114,18)"/><text x="77.4078%" y="1231.50"></text></g><g><title>std::io::Write::write_fmt (62 samples, 0.02%)</title><rect x="77.1592%" y="1205" width="0.0215%" height="15" fill="rgb(211,162,40)"/><text x="77.4092%" y="1215.50"></text></g><g><title>core::fmt::write (62 samples, 0.02%)</title><rect x="77.1592%" y="1189" width="0.0215%" height="15" fill="rgb(206,49,29)"/><text x="77.4092%" y="1199.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::Style as core::clone::Clone&gt;::clone (30 samples, 0.01%)</title><rect x="77.1928%" y="1173" width="0.0104%" height="15" fill="rgb(244,8,6)"/><text x="77.4428%" y="1183.50"></text></g><g><title>&lt;termcolor::ColorSpec as core::clone::Clone&gt;::clone (30 samples, 0.01%)</title><rect x="77.1928%" y="1157" width="0.0104%" height="15" fill="rgb(231,194,28)"/><text x="77.4428%" y="1167.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (37 samples, 0.01%)</title><rect x="77.1928%" y="1189" width="0.0128%" height="15" fill="rgb(210,69,5)"/><text x="77.4428%" y="1199.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (144 samples, 0.05%)</title><rect x="77.1578%" y="1269" width="0.0500%" height="15" fill="rgb(216,186,12)"/><text x="77.4078%" y="1279.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (144 samples, 0.05%)</title><rect x="77.1578%" y="1253" width="0.0500%" height="15" fill="rgb(238,61,15)"/><text x="77.4078%" y="1263.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (144 samples, 0.05%)</title><rect x="77.1578%" y="1237" width="0.0500%" height="15" fill="rgb(226,104,1)"/><text x="77.4078%" y="1247.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (54 samples, 0.02%)</title><rect x="77.1890%" y="1221" width="0.0187%" height="15" fill="rgb(229,128,15)"/><text x="77.4390%" y="1231.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (54 samples, 0.02%)</title><rect x="77.1890%" y="1205" width="0.0187%" height="15" fill="rgb(247,110,15)"/><text x="77.4390%" y="1215.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (505 samples, 0.18%)</title><rect x="77.0360%" y="1765" width="0.1752%" height="15" fill="rgb(210,74,48)"/><text x="77.2860%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (505 samples, 0.18%)</title><rect x="77.0360%" y="1749" width="0.1752%" height="15" fill="rgb(246,121,10)"/><text x="77.2860%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (505 samples, 0.18%)</title><rect x="77.0360%" y="1733" width="0.1752%" height="15" fill="rgb(214,156,37)"/><text x="77.2860%" y="1743.50"></text></g><g><title>tokio::coop::budget (505 samples, 0.18%)</title><rect x="77.0360%" y="1717" width="0.1752%" height="15" fill="rgb(214,210,34)"/><text x="77.2860%" y="1727.50"></text></g><g><title>tokio::coop::with_budget (505 samples, 0.18%)</title><rect x="77.0360%" y="1701" width="0.1752%" height="15" fill="rgb(237,93,35)"/><text x="77.2860%" y="1711.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (505 samples, 0.18%)</title><rect x="77.0360%" y="1685" width="0.1752%" height="15" fill="rgb(206,36,8)"/><text x="77.2860%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (505 samples, 0.18%)</title><rect x="77.0360%" y="1669" width="0.1752%" height="15" fill="rgb(208,151,12)"/><text x="77.2860%" y="1679.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (505 samples, 0.18%)</title><rect x="77.0360%" y="1653" width="0.1752%" height="15" fill="rgb(225,133,52)"/><text x="77.2860%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (505 samples, 0.18%)</title><rect x="77.0360%" y="1637" width="0.1752%" height="15" fill="rgb(231,71,53)"/><text x="77.2860%" y="1647.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (505 samples, 0.18%)</title><rect x="77.0360%" y="1621" width="0.1752%" height="15" fill="rgb(243,76,21)"/><text x="77.2860%" y="1631.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (505 samples, 0.18%)</title><rect x="77.0360%" y="1605" width="0.1752%" height="15" fill="rgb(252,144,3)"/><text x="77.2860%" y="1615.50"></text></g><g><title>tokio::runtime::task::raw::poll (505 samples, 0.18%)</title><rect x="77.0360%" y="1589" width="0.1752%" height="15" fill="rgb(231,199,10)"/><text x="77.2860%" y="1599.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (505 samples, 0.18%)</title><rect x="77.0360%" y="1573" width="0.1752%" height="15" fill="rgb(215,18,11)"/><text x="77.2860%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (505 samples, 0.18%)</title><rect x="77.0360%" y="1557" width="0.1752%" height="15" fill="rgb(241,65,24)"/><text x="77.2860%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (505 samples, 0.18%)</title><rect x="77.0360%" y="1541" width="0.1752%" height="15" fill="rgb(251,192,38)"/><text x="77.2860%" y="1551.50"></text></g><g><title>std::panic::catch_unwind (505 samples, 0.18%)</title><rect x="77.0360%" y="1525" width="0.1752%" height="15" fill="rgb(205,9,35)"/><text x="77.2860%" y="1535.50"></text></g><g><title>std::panicking::try (505 samples, 0.18%)</title><rect x="77.0360%" y="1509" width="0.1752%" height="15" fill="rgb(229,225,49)"/><text x="77.2860%" y="1519.50"></text></g><g><title>__rust_try (505 samples, 0.18%)</title><rect x="77.0360%" y="1493" width="0.1752%" height="15" fill="rgb(207,125,39)"/><text x="77.2860%" y="1503.50"></text></g><g><title>std::panicking::try::do_call (505 samples, 0.18%)</title><rect x="77.0360%" y="1477" width="0.1752%" height="15" fill="rgb(222,78,19)"/><text x="77.2860%" y="1487.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (505 samples, 0.18%)</title><rect x="77.0360%" y="1461" width="0.1752%" height="15" fill="rgb(248,207,20)"/><text x="77.2860%" y="1471.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (505 samples, 0.18%)</title><rect x="77.0360%" y="1445" width="0.1752%" height="15" fill="rgb(205,103,49)"/><text x="77.2860%" y="1455.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (505 samples, 0.18%)</title><rect x="77.0360%" y="1429" width="0.1752%" height="15" fill="rgb(216,42,28)"/><text x="77.2860%" y="1439.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (505 samples, 0.18%)</title><rect x="77.0360%" y="1413" width="0.1752%" height="15" fill="rgb(213,205,53)"/><text x="77.2860%" y="1423.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (505 samples, 0.18%)</title><rect x="77.0360%" y="1397" width="0.1752%" height="15" fill="rgb(239,140,53)"/><text x="77.2860%" y="1407.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (505 samples, 0.18%)</title><rect x="77.0360%" y="1381" width="0.1752%" height="15" fill="rgb(248,95,9)"/><text x="77.2860%" y="1391.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (154 samples, 0.05%)</title><rect x="77.1578%" y="1365" width="0.0534%" height="15" fill="rgb(254,58,47)"/><text x="77.4078%" y="1375.50"></text></g><g><title>log::__private_api_log (154 samples, 0.05%)</title><rect x="77.1578%" y="1349" width="0.0534%" height="15" fill="rgb(234,227,14)"/><text x="77.4078%" y="1359.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (154 samples, 0.05%)</title><rect x="77.1578%" y="1333" width="0.0534%" height="15" fill="rgb(205,192,45)"/><text x="77.4078%" y="1343.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (154 samples, 0.05%)</title><rect x="77.1578%" y="1317" width="0.0534%" height="15" fill="rgb(253,187,31)"/><text x="77.4078%" y="1327.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (154 samples, 0.05%)</title><rect x="77.1578%" y="1301" width="0.0534%" height="15" fill="rgb(222,6,32)"/><text x="77.4078%" y="1311.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (154 samples, 0.05%)</title><rect x="77.1578%" y="1285" width="0.0534%" height="15" fill="rgb(249,190,19)"/><text x="77.4078%" y="1295.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (32 samples, 0.01%)</title><rect x="77.2112%" y="1285" width="0.0111%" height="15" fill="rgb(251,28,20)"/><text x="77.4612%" y="1295.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (90 samples, 0.03%)</title><rect x="77.2112%" y="1317" width="0.0312%" height="15" fill="rgb(210,223,40)"/><text x="77.4612%" y="1327.50"></text></g><g><title>tunneler::server::client::client::Client::drain::{{closure}} (90 samples, 0.03%)</title><rect x="77.2112%" y="1301" width="0.0312%" height="15" fill="rgb(216,137,22)"/><text x="77.4612%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place (58 samples, 0.02%)</title><rect x="77.2223%" y="1285" width="0.0201%" height="15" fill="rgb(247,39,34)"/><text x="77.4723%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place (58 samples, 0.02%)</title><rect x="77.2223%" y="1269" width="0.0201%" height="15" fill="rgb(239,43,50)"/><text x="77.4723%" y="1279.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.02%)</title><rect x="77.2223%" y="1253" width="0.0201%" height="15" fill="rgb(241,212,9)"/><text x="77.4723%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (40 samples, 0.01%)</title><rect x="77.2286%" y="1237" width="0.0139%" height="15" fill="rgb(205,8,2)"/><text x="77.4786%" y="1247.50"></text></g><g><title>&lt;tokio::io::util::read_exact::ReadExact&lt;A&gt; as core::future::future::Future&gt;::poll (86 samples, 0.03%)</title><rect x="77.2425%" y="1317" width="0.0298%" height="15" fill="rgb(217,173,54)"/><text x="77.4925%" y="1327.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (86 samples, 0.03%)</title><rect x="77.2425%" y="1301" width="0.0298%" height="15" fill="rgb(208,149,52)"/><text x="77.4925%" y="1311.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (86 samples, 0.03%)</title><rect x="77.2425%" y="1285" width="0.0298%" height="15" fill="rgb(239,99,40)"/><text x="77.4925%" y="1295.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (86 samples, 0.03%)</title><rect x="77.2425%" y="1269" width="0.0298%" height="15" fill="rgb(233,214,26)"/><text x="77.4925%" y="1279.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (86 samples, 0.03%)</title><rect x="77.2425%" y="1253" width="0.0298%" height="15" fill="rgb(231,225,37)"/><text x="77.4925%" y="1263.50"></text></g><g><title>__memset_avx2_unaligned_erms (92 samples, 0.03%)</title><rect x="77.2959%" y="1173" width="0.0319%" height="15" fill="rgb(252,55,35)"/><text x="77.5459%" y="1183.50"></text></g><g><title>__libc_calloc (165 samples, 0.06%)</title><rect x="77.2723%" y="1189" width="0.0572%" height="15" fill="rgb(239,43,18)"/><text x="77.5223%" y="1199.50"></text></g><g><title>alloc::alloc::alloc_zeroed (166 samples, 0.06%)</title><rect x="77.2723%" y="1205" width="0.0576%" height="15" fill="rgb(251,125,49)"/><text x="77.5223%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (190 samples, 0.07%)</title><rect x="77.2723%" y="1237" width="0.0659%" height="15" fill="rgb(212,83,54)"/><text x="77.5223%" y="1247.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (190 samples, 0.07%)</title><rect x="77.2723%" y="1221" width="0.0659%" height="15" fill="rgb(250,75,6)"/><text x="77.5223%" y="1231.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (48 samples, 0.02%)</title><rect x="77.3407%" y="1221" width="0.0167%" height="15" fill="rgb(252,36,40)"/><text x="77.5907%" y="1231.50"></text></g><g><title>alloc::vec::from_elem (286 samples, 0.10%)</title><rect x="77.2723%" y="1317" width="0.0992%" height="15" fill="rgb(230,91,51)"/><text x="77.5223%" y="1327.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (286 samples, 0.10%)</title><rect x="77.2723%" y="1301" width="0.0992%" height="15" fill="rgb(212,92,28)"/><text x="77.5223%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (286 samples, 0.10%)</title><rect x="77.2723%" y="1285" width="0.0992%" height="15" fill="rgb(227,13,22)"/><text x="77.5223%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (286 samples, 0.10%)</title><rect x="77.2723%" y="1269" width="0.0992%" height="15" fill="rgb(239,204,32)"/><text x="77.5223%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (286 samples, 0.10%)</title><rect x="77.2723%" y="1253" width="0.0992%" height="15" fill="rgb(228,49,41)"/><text x="77.5223%" y="1263.50"></text></g><g><title>core::alloc::layout::Layout::array (96 samples, 0.03%)</title><rect x="77.3382%" y="1237" width="0.0333%" height="15" fill="rgb(206,95,6)"/><text x="77.5882%" y="1247.50"></text></g><g><title>core::alloc::layout::Layout::repeat (41 samples, 0.01%)</title><rect x="77.3573%" y="1221" width="0.0142%" height="15" fill="rgb(251,20,14)"/><text x="77.6073%" y="1231.50"></text></g><g><title>env_logger::Logger::matches (44 samples, 0.02%)</title><rect x="77.3771%" y="1285" width="0.0153%" height="15" fill="rgb(214,99,28)"/><text x="77.6271%" y="1295.50"></text></g><g><title>env_logger::filter::Filter::matches (44 samples, 0.02%)</title><rect x="77.3771%" y="1269" width="0.0153%" height="15" fill="rgb(239,122,54)"/><text x="77.6271%" y="1279.50"></text></g><g><title>env_logger::filter::Filter::enabled (38 samples, 0.01%)</title><rect x="77.3792%" y="1253" width="0.0132%" height="15" fill="rgb(218,217,46)"/><text x="77.6292%" y="1263.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::FORMATTER::__getit (33 samples, 0.01%)</title><rect x="77.3923%" y="1269" width="0.0114%" height="15" fill="rgb(249,106,28)"/><text x="77.6423%" y="1279.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (33 samples, 0.01%)</title><rect x="77.3923%" y="1253" width="0.0114%" height="15" fill="rgb(250,158,18)"/><text x="77.6423%" y="1263.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (83 samples, 0.03%)</title><rect x="77.3771%" y="1301" width="0.0288%" height="15" fill="rgb(226,137,29)"/><text x="77.6271%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (39 samples, 0.01%)</title><rect x="77.3923%" y="1285" width="0.0135%" height="15" fill="rgb(210,188,1)"/><text x="77.6423%" y="1295.50"></text></g><g><title>log::__private_api_log (104 samples, 0.04%)</title><rect x="77.3771%" y="1317" width="0.0361%" height="15" fill="rgb(227,84,42)"/><text x="77.6271%" y="1327.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (29 samples, 0.01%)</title><rect x="77.4132%" y="1269" width="0.0101%" height="15" fill="rgb(222,147,48)"/><text x="77.6632%" y="1279.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (29 samples, 0.01%)</title><rect x="77.4132%" y="1253" width="0.0101%" height="15" fill="rgb(241,150,43)"/><text x="77.6632%" y="1263.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (29 samples, 0.01%)</title><rect x="77.4132%" y="1237" width="0.0101%" height="15" fill="rgb(206,139,52)"/><text x="77.6632%" y="1247.50"></text></g><g><title>core::hash::Hasher::write_u32 (29 samples, 0.01%)</title><rect x="77.4132%" y="1221" width="0.0101%" height="15" fill="rgb(230,63,14)"/><text x="77.6632%" y="1231.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.01%)</title><rect x="77.4132%" y="1205" width="0.0101%" height="15" fill="rgb(247,8,20)"/><text x="77.6632%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 0.01%)</title><rect x="77.4132%" y="1189" width="0.0101%" height="15" fill="rgb(213,115,4)"/><text x="77.6632%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.01%)</title><rect x="77.4132%" y="1173" width="0.0101%" height="15" fill="rgb(241,79,49)"/><text x="77.6632%" y="1183.50"></text></g><g><title>core::hash::sip::u8to64_le (29 samples, 0.01%)</title><rect x="77.4132%" y="1157" width="0.0101%" height="15" fill="rgb(222,42,35)"/><text x="77.6632%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (125 samples, 0.04%)</title><rect x="77.4232%" y="1221" width="0.0434%" height="15" fill="rgb(247,59,23)"/><text x="77.6732%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (125 samples, 0.04%)</title><rect x="77.4232%" y="1205" width="0.0434%" height="15" fill="rgb(247,93,18)"/><text x="77.6732%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (125 samples, 0.04%)</title><rect x="77.4232%" y="1189" width="0.0434%" height="15" fill="rgb(249,107,47)"/><text x="77.6732%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (108 samples, 0.04%)</title><rect x="77.4291%" y="1173" width="0.0375%" height="15" fill="rgb(219,27,1)"/><text x="77.6791%" y="1183.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.01%)</title><rect x="77.4548%" y="1157" width="0.0118%" height="15" fill="rgb(217,82,32)"/><text x="77.7048%" y="1167.50"></text></g><g><title>hashbrown::map::make_hash (153 samples, 0.05%)</title><rect x="77.4232%" y="1237" width="0.0531%" height="15" fill="rgb(250,129,47)"/><text x="77.6732%" y="1247.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::get (239 samples, 0.08%)</title><rect x="77.4132%" y="1317" width="0.0829%" height="15" fill="rgb(253,88,35)"/><text x="77.6632%" y="1327.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (239 samples, 0.08%)</title><rect x="77.4132%" y="1301" width="0.0829%" height="15" fill="rgb(245,221,14)"/><text x="77.6632%" y="1311.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (239 samples, 0.08%)</title><rect x="77.4132%" y="1285" width="0.0829%" height="15" fill="rgb(217,119,54)"/><text x="77.6632%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_key_value (210 samples, 0.07%)</title><rect x="77.4232%" y="1269" width="0.0729%" height="15" fill="rgb(247,128,31)"/><text x="77.6732%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (210 samples, 0.07%)</title><rect x="77.4232%" y="1253" width="0.0729%" height="15" fill="rgb(211,99,22)"/><text x="77.6732%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (57 samples, 0.02%)</title><rect x="77.4763%" y="1237" width="0.0198%" height="15" fill="rgb(212,20,17)"/><text x="77.7263%" y="1247.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (36 samples, 0.01%)</title><rect x="77.4961%" y="1269" width="0.0125%" height="15" fill="rgb(209,159,29)"/><text x="77.7461%" y="1279.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (36 samples, 0.01%)</title><rect x="77.4961%" y="1253" width="0.0125%" height="15" fill="rgb(222,177,53)"/><text x="77.7461%" y="1263.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (36 samples, 0.01%)</title><rect x="77.4961%" y="1237" width="0.0125%" height="15" fill="rgb(234,46,43)"/><text x="77.7461%" y="1247.50"></text></g><g><title>core::hash::Hasher::write_u32 (36 samples, 0.01%)</title><rect x="77.4961%" y="1221" width="0.0125%" height="15" fill="rgb(208,108,14)"/><text x="77.7461%" y="1231.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.01%)</title><rect x="77.4961%" y="1205" width="0.0125%" height="15" fill="rgb(226,78,53)"/><text x="77.7461%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 0.01%)</title><rect x="77.4961%" y="1189" width="0.0125%" height="15" fill="rgb(230,20,41)"/><text x="77.7461%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.01%)</title><rect x="77.4961%" y="1173" width="0.0125%" height="15" fill="rgb(213,195,35)"/><text x="77.7461%" y="1183.50"></text></g><g><title>core::hash::sip::u8to64_le (36 samples, 0.01%)</title><rect x="77.4961%" y="1157" width="0.0125%" height="15" fill="rgb(242,62,36)"/><text x="77.7461%" y="1167.50"></text></g><g><title>hashbrown::map::make_hash (54 samples, 0.02%)</title><rect x="77.5086%" y="1237" width="0.0187%" height="15" fill="rgb(222,210,37)"/><text x="77.7586%" y="1247.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (54 samples, 0.02%)</title><rect x="77.5086%" y="1221" width="0.0187%" height="15" fill="rgb(232,107,19)"/><text x="77.7586%" y="1231.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (54 samples, 0.02%)</title><rect x="77.5086%" y="1205" width="0.0187%" height="15" fill="rgb(235,85,17)"/><text x="77.7586%" y="1215.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (54 samples, 0.02%)</title><rect x="77.5086%" y="1189" width="0.0187%" height="15" fill="rgb(219,195,31)"/><text x="77.7586%" y="1199.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (54 samples, 0.02%)</title><rect x="77.5086%" y="1173" width="0.0187%" height="15" fill="rgb(231,183,30)"/><text x="77.7586%" y="1183.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.01%)</title><rect x="77.5273%" y="1221" width="0.0125%" height="15" fill="rgb(212,0,11)"/><text x="77.7773%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (87 samples, 0.03%)</title><rect x="77.5273%" y="1237" width="0.0302%" height="15" fill="rgb(249,53,54)"/><text x="77.7773%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (47 samples, 0.02%)</title><rect x="77.5412%" y="1221" width="0.0163%" height="15" fill="rgb(211,118,13)"/><text x="77.7912%" y="1231.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (47 samples, 0.02%)</title><rect x="77.5412%" y="1205" width="0.0163%" height="15" fill="rgb(237,42,9)"/><text x="77.7912%" y="1215.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::remove (204 samples, 0.07%)</title><rect x="77.4961%" y="1317" width="0.0708%" height="15" fill="rgb(227,68,32)"/><text x="77.7461%" y="1327.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::remove (204 samples, 0.07%)</title><rect x="77.4961%" y="1301" width="0.0708%" height="15" fill="rgb(238,10,7)"/><text x="77.7461%" y="1311.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_remove (204 samples, 0.07%)</title><rect x="77.4961%" y="1285" width="0.0708%" height="15" fill="rgb(224,42,12)"/><text x="77.7461%" y="1295.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove_entry (168 samples, 0.06%)</title><rect x="77.5086%" y="1269" width="0.0583%" height="15" fill="rgb(252,190,5)"/><text x="77.7586%" y="1279.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (168 samples, 0.06%)</title><rect x="77.5086%" y="1253" width="0.0583%" height="15" fill="rgb(220,214,39)"/><text x="77.7586%" y="1263.50"></text></g><g><title>&lt;tokio::sync::mpsc::block::Values&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (29 samples, 0.01%)</title><rect x="77.5710%" y="1221" width="0.0101%" height="15" fill="rgb(247,98,4)"/><text x="77.8210%" y="1231.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (86 samples, 0.03%)</title><rect x="77.5669%" y="1237" width="0.0298%" height="15" fill="rgb(211,60,12)"/><text x="77.8169%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (111 samples, 0.04%)</title><rect x="77.5669%" y="1253" width="0.0385%" height="15" fill="rgb(224,42,10)"/><text x="77.8169%" y="1263.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::schedule (31 samples, 0.01%)</title><rect x="77.6151%" y="1173" width="0.0108%" height="15" fill="rgb(217,167,4)"/><text x="77.8651%" y="1183.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (30 samples, 0.01%)</title><rect x="77.6154%" y="1157" width="0.0104%" height="15" fill="rgb(253,18,17)"/><text x="77.8654%" y="1167.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::to_task (44 samples, 0.02%)</title><rect x="77.6356%" y="1173" width="0.0153%" height="15" fill="rgb(249,186,44)"/><text x="77.8856%" y="1183.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::to_task (32 samples, 0.01%)</title><rect x="77.6397%" y="1157" width="0.0111%" height="15" fill="rgb(254,124,54)"/><text x="77.8897%" y="1167.50"></text></g><g><title>core::task::wake::Waker::wake (162 samples, 0.06%)</title><rect x="77.6054%" y="1237" width="0.0562%" height="15" fill="rgb(220,124,39)"/><text x="77.8554%" y="1247.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (162 samples, 0.06%)</title><rect x="77.6054%" y="1221" width="0.0562%" height="15" fill="rgb(225,96,46)"/><text x="77.8554%" y="1231.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (162 samples, 0.06%)</title><rect x="77.6054%" y="1205" width="0.0562%" height="15" fill="rgb(221,106,12)"/><text x="77.8554%" y="1215.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (134 samples, 0.05%)</title><rect x="77.6151%" y="1189" width="0.0465%" height="15" fill="rgb(227,133,23)"/><text x="77.8651%" y="1199.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified (31 samples, 0.01%)</title><rect x="77.6508%" y="1173" width="0.0108%" height="15" fill="rgb(216,44,52)"/><text x="77.9008%" y="1183.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (1,374 samples, 0.48%)</title><rect x="77.2112%" y="1333" width="0.4767%" height="15" fill="rgb(239,149,7)"/><text x="77.4612%" y="1343.50"></text></g><g><title>tunneler::streams::spsc::StreamWriter&lt;T&gt;::send (349 samples, 0.12%)</title><rect x="77.5669%" y="1317" width="0.1211%" height="15" fill="rgb(211,157,31)"/><text x="77.8169%" y="1327.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (349 samples, 0.12%)</title><rect x="77.5669%" y="1301" width="0.1211%" height="15" fill="rgb(206,215,22)"/><text x="77.8169%" y="1311.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (349 samples, 0.12%)</title><rect x="77.5669%" y="1285" width="0.1211%" height="15" fill="rgb(208,113,15)"/><text x="77.8169%" y="1295.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (349 samples, 0.12%)</title><rect x="77.5669%" y="1269" width="0.1211%" height="15" fill="rgb(207,189,15)"/><text x="77.8169%" y="1279.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (238 samples, 0.08%)</title><rect x="77.6054%" y="1253" width="0.0826%" height="15" fill="rgb(231,115,4)"/><text x="77.8554%" y="1263.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (76 samples, 0.03%)</title><rect x="77.6616%" y="1237" width="0.0264%" height="15" fill="rgb(253,117,2)"/><text x="77.9116%" y="1247.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.01%)</title><rect x="77.6758%" y="1221" width="0.0121%" height="15" fill="rgb(248,48,24)"/><text x="77.9258%" y="1231.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker::{{closure}} (31 samples, 0.01%)</title><rect x="77.6772%" y="1205" width="0.0108%" height="15" fill="rgb(241,28,46)"/><text x="77.9272%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (29 samples, 0.01%)</title><rect x="77.6779%" y="1189" width="0.0101%" height="15" fill="rgb(216,165,52)"/><text x="77.9279%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (43 samples, 0.01%)</title><rect x="77.6880%" y="1157" width="0.0149%" height="15" fill="rgb(220,222,34)"/><text x="77.9380%" y="1167.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (43 samples, 0.01%)</title><rect x="77.6880%" y="1141" width="0.0149%" height="15" fill="rgb(247,222,49)"/><text x="77.9380%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (43 samples, 0.01%)</title><rect x="77.6880%" y="1125" width="0.0149%" height="15" fill="rgb(240,10,31)"/><text x="77.9380%" y="1135.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read::{{closure}} (43 samples, 0.01%)</title><rect x="77.6880%" y="1109" width="0.0149%" height="15" fill="rgb(221,199,35)"/><text x="77.9380%" y="1119.50"></text></g><g><title>core::ptr::read (43 samples, 0.01%)</title><rect x="77.6880%" y="1093" width="0.0149%" height="15" fill="rgb(230,223,11)"/><text x="77.9380%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.02%)</title><rect x="77.6880%" y="1317" width="0.0198%" height="15" fill="rgb(218,82,45)"/><text x="77.9380%" y="1327.50"></text></g><g><title>tunneler::streams::spsc::StreamReader&lt;T&gt;::recv::{{closure}} (57 samples, 0.02%)</title><rect x="77.6880%" y="1301" width="0.0198%" height="15" fill="rgb(233,213,33)"/><text x="77.9380%" y="1311.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.02%)</title><rect x="77.6880%" y="1285" width="0.0198%" height="15" fill="rgb(210,143,52)"/><text x="77.9380%" y="1295.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (57 samples, 0.02%)</title><rect x="77.6880%" y="1269" width="0.0198%" height="15" fill="rgb(206,95,4)"/><text x="77.9380%" y="1279.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (57 samples, 0.02%)</title><rect x="77.6880%" y="1253" width="0.0198%" height="15" fill="rgb(246,164,46)"/><text x="77.9380%" y="1263.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (57 samples, 0.02%)</title><rect x="77.6880%" y="1237" width="0.0198%" height="15" fill="rgb(213,210,47)"/><text x="77.9380%" y="1247.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (57 samples, 0.02%)</title><rect x="77.6880%" y="1221" width="0.0198%" height="15" fill="rgb(210,12,38)"/><text x="77.9380%" y="1231.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (57 samples, 0.02%)</title><rect x="77.6880%" y="1205" width="0.0198%" height="15" fill="rgb(252,192,54)"/><text x="77.9380%" y="1215.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (57 samples, 0.02%)</title><rect x="77.6880%" y="1189" width="0.0198%" height="15" fill="rgb(242,92,6)"/><text x="77.9380%" y="1199.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (57 samples, 0.02%)</title><rect x="77.6880%" y="1173" width="0.0198%" height="15" fill="rgb(253,154,15)"/><text x="77.9380%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (35 samples, 0.01%)</title><rect x="77.7077%" y="1189" width="0.0121%" height="15" fill="rgb(209,20,43)"/><text x="77.9577%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (30 samples, 0.01%)</title><rect x="77.7303%" y="1173" width="0.0104%" height="15" fill="rgb(232,28,49)"/><text x="77.9803%" y="1183.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (41 samples, 0.01%)</title><rect x="77.7272%" y="1189" width="0.0142%" height="15" fill="rgb(248,131,53)"/><text x="77.9772%" y="1199.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (37 samples, 0.01%)</title><rect x="77.7639%" y="1125" width="0.0128%" height="15" fill="rgb(214,16,30)"/><text x="78.0139%" y="1135.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::&lt;impl env_logger::fmt::Formatter&gt;::style (58 samples, 0.02%)</title><rect x="77.7598%" y="1141" width="0.0201%" height="15" fill="rgb(245,16,0)"/><text x="78.0098%" y="1151.50"></text></g><g><title>env_logger::fmt::DefaultFormat::subtle_style (119 samples, 0.04%)</title><rect x="77.7508%" y="1157" width="0.0413%" height="15" fill="rgb(245,17,35)"/><text x="78.0008%" y="1167.50"></text></g><g><title>core::fmt::write (38 samples, 0.01%)</title><rect x="77.7993%" y="1141" width="0.0132%" height="15" fill="rgb(249,27,53)"/><text x="78.0493%" y="1151.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (314 samples, 0.11%)</title><rect x="77.7077%" y="1237" width="0.1089%" height="15" fill="rgb(214,73,24)"/><text x="77.9577%" y="1247.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (314 samples, 0.11%)</title><rect x="77.7077%" y="1221" width="0.1089%" height="15" fill="rgb(223,84,37)"/><text x="77.9577%" y="1231.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (314 samples, 0.11%)</title><rect x="77.7077%" y="1205" width="0.1089%" height="15" fill="rgb(210,109,28)"/><text x="77.9577%" y="1215.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (202 samples, 0.07%)</title><rect x="77.7466%" y="1189" width="0.0701%" height="15" fill="rgb(208,186,6)"/><text x="77.9966%" y="1199.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (202 samples, 0.07%)</title><rect x="77.7466%" y="1173" width="0.0701%" height="15" fill="rgb(235,201,30)"/><text x="77.9966%" y="1183.50"></text></g><g><title>std::io::Write::write_fmt (71 samples, 0.02%)</title><rect x="77.7920%" y="1157" width="0.0246%" height="15" fill="rgb(216,198,48)"/><text x="78.0420%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1765" width="0.6370%" height="15" fill="rgb(254,186,25)"/><text x="77.4612%" y="1775.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1749" width="0.6370%" height="15" fill="rgb(227,87,5)"/><text x="77.4612%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1733" width="0.6370%" height="15" fill="rgb(236,205,25)"/><text x="77.4612%" y="1743.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1717" width="0.6370%" height="15" fill="rgb(229,99,32)"/><text x="77.4612%" y="1727.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1701" width="0.6370%" height="15" fill="rgb(231,177,31)"/><text x="77.4612%" y="1711.50"></text></g><g><title>tokio::coop::budget (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1685" width="0.6370%" height="15" fill="rgb(246,15,2)"/><text x="77.4612%" y="1695.50"></text></g><g><title>tokio::coop::with_budget (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1669" width="0.6370%" height="15" fill="rgb(207,39,15)"/><text x="77.4612%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1653" width="0.6370%" height="15" fill="rgb(207,44,9)"/><text x="77.4612%" y="1663.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1637" width="0.6370%" height="15" fill="rgb(225,224,33)"/><text x="77.4612%" y="1647.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1621" width="0.6370%" height="15" fill="rgb(252,151,3)"/><text x="77.4612%" y="1631.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1605" width="0.6370%" height="15" fill="rgb(211,140,13)"/><text x="77.4612%" y="1615.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1589" width="0.6370%" height="15" fill="rgb(239,225,17)"/><text x="77.4612%" y="1599.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1573" width="0.6370%" height="15" fill="rgb(223,170,52)"/><text x="77.4612%" y="1583.50"></text></g><g><title>tokio::runtime::task::raw::poll (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1557" width="0.6370%" height="15" fill="rgb(212,64,21)"/><text x="77.4612%" y="1567.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1541" width="0.6370%" height="15" fill="rgb(236,126,48)"/><text x="77.4612%" y="1551.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1525" width="0.6370%" height="15" fill="rgb(209,135,11)"/><text x="77.4612%" y="1535.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1509" width="0.6370%" height="15" fill="rgb(228,126,40)"/><text x="77.4612%" y="1519.50"></text></g><g><title>std::panic::catch_unwind (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1493" width="0.6370%" height="15" fill="rgb(205,196,36)"/><text x="77.4612%" y="1503.50"></text></g><g><title>std::panicking::try (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1477" width="0.6370%" height="15" fill="rgb(243,160,33)"/><text x="77.4612%" y="1487.50"></text></g><g><title>__rust_try (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1461" width="0.6370%" height="15" fill="rgb(210,84,20)"/><text x="77.4612%" y="1471.50"></text></g><g><title>std::panicking::try::do_call (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1445" width="0.6370%" height="15" fill="rgb(228,213,30)"/><text x="77.4612%" y="1455.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1429" width="0.6370%" height="15" fill="rgb(252,33,45)"/><text x="77.4612%" y="1439.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1413" width="0.6370%" height="15" fill="rgb(254,227,20)"/><text x="77.4612%" y="1423.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1397" width="0.6370%" height="15" fill="rgb(228,192,2)"/><text x="77.4612%" y="1407.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1381" width="0.6370%" height="15" fill="rgb(233,32,8)"/><text x="77.4612%" y="1391.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1365" width="0.6370%" height="15" fill="rgb(220,146,47)"/><text x="77.4612%" y="1375.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,836 samples, 0.64%)</title><rect x="77.2112%" y="1349" width="0.6370%" height="15" fill="rgb(246,194,1)"/><text x="77.4612%" y="1359.50"></text></g><g><title>tunneler::server::client::client::Client::send_user_connection::{{closure}} (462 samples, 0.16%)</title><rect x="77.6880%" y="1333" width="0.1603%" height="15" fill="rgb(218,203,9)"/><text x="77.9380%" y="1343.50"></text></g><g><title>log::__private_api_log (405 samples, 0.14%)</title><rect x="77.7077%" y="1317" width="0.1405%" height="15" fill="rgb(237,97,14)"/><text x="77.9577%" y="1327.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (405 samples, 0.14%)</title><rect x="77.7077%" y="1301" width="0.1405%" height="15" fill="rgb(239,76,15)"/><text x="77.9577%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (405 samples, 0.14%)</title><rect x="77.7077%" y="1285" width="0.1405%" height="15" fill="rgb(222,53,45)"/><text x="77.9577%" y="1295.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (405 samples, 0.14%)</title><rect x="77.7077%" y="1269" width="0.1405%" height="15" fill="rgb(237,88,5)"/><text x="77.9577%" y="1279.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (405 samples, 0.14%)</title><rect x="77.7077%" y="1253" width="0.1405%" height="15" fill="rgb(218,223,35)"/><text x="77.9577%" y="1263.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (91 samples, 0.03%)</title><rect x="77.8167%" y="1237" width="0.0316%" height="15" fill="rgb(243,229,38)"/><text x="78.0667%" y="1247.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}}::{{closure}} (91 samples, 0.03%)</title><rect x="77.8167%" y="1221" width="0.0316%" height="15" fill="rgb(240,75,41)"/><text x="78.0667%" y="1231.50"></text></g><g><title>env_logger::fmt::Formatter::print (91 samples, 0.03%)</title><rect x="77.8167%" y="1205" width="0.0316%" height="15" fill="rgb(209,110,37)"/><text x="78.0667%" y="1215.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (91 samples, 0.03%)</title><rect x="77.8167%" y="1189" width="0.0316%" height="15" fill="rgb(221,130,46)"/><text x="78.0667%" y="1199.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (91 samples, 0.03%)</title><rect x="77.8167%" y="1173" width="0.0316%" height="15" fill="rgb(237,160,20)"/><text x="78.0667%" y="1183.50"></text></g><g><title>termcolor::BufferWriter::print (91 samples, 0.03%)</title><rect x="77.8167%" y="1157" width="0.0316%" height="15" fill="rgb(234,126,24)"/><text x="78.0667%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 0.01%)</title><rect x="77.8635%" y="1397" width="0.0101%" height="15" fill="rgb(207,177,9)"/><text x="78.1135%" y="1407.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (39 samples, 0.01%)</title><rect x="77.8618%" y="1445" width="0.0135%" height="15" fill="rgb(231,191,33)"/><text x="78.1118%" y="1455.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (38 samples, 0.01%)</title><rect x="77.8621%" y="1429" width="0.0132%" height="15" fill="rgb(207,42,1)"/><text x="78.1121%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (36 samples, 0.01%)</title><rect x="77.8628%" y="1413" width="0.0125%" height="15" fill="rgb(218,34,50)"/><text x="78.1128%" y="1423.50"></text></g><g><title>env_logger::fmt::DefaultFormat::finish_header (100 samples, 0.03%)</title><rect x="77.8482%" y="1621" width="0.0347%" height="15" fill="rgb(254,126,39)"/><text x="78.0982%" y="1631.50"></text></g><g><title>std::io::Write::write_fmt (100 samples, 0.03%)</title><rect x="77.8482%" y="1605" width="0.0347%" height="15" fill="rgb(251,17,26)"/><text x="78.0982%" y="1615.50"></text></g><g><title>core::fmt::write (100 samples, 0.03%)</title><rect x="77.8482%" y="1589" width="0.0347%" height="15" fill="rgb(252,215,34)"/><text x="78.0982%" y="1599.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (100 samples, 0.03%)</title><rect x="77.8482%" y="1573" width="0.0347%" height="15" fill="rgb(217,120,44)"/><text x="78.0982%" y="1583.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (100 samples, 0.03%)</title><rect x="77.8482%" y="1557" width="0.0347%" height="15" fill="rgb(211,31,11)"/><text x="78.0982%" y="1567.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (95 samples, 0.03%)</title><rect x="77.8500%" y="1541" width="0.0330%" height="15" fill="rgb(222,69,51)"/><text x="78.1000%" y="1551.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (95 samples, 0.03%)</title><rect x="77.8500%" y="1525" width="0.0330%" height="15" fill="rgb(215,229,42)"/><text x="78.1000%" y="1535.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (95 samples, 0.03%)</title><rect x="77.8500%" y="1509" width="0.0330%" height="15" fill="rgb(212,102,15)"/><text x="78.1000%" y="1519.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (77 samples, 0.03%)</title><rect x="77.8562%" y="1493" width="0.0267%" height="15" fill="rgb(205,179,41)"/><text x="78.1062%" y="1503.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (72 samples, 0.02%)</title><rect x="77.8580%" y="1477" width="0.0250%" height="15" fill="rgb(219,148,46)"/><text x="78.1080%" y="1487.50"></text></g><g><title>std::io::Write::write_all (68 samples, 0.02%)</title><rect x="77.8594%" y="1461" width="0.0236%" height="15" fill="rgb(243,40,19)"/><text x="78.1094%" y="1471.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (69 samples, 0.02%)</title><rect x="77.9610%" y="1413" width="0.0239%" height="15" fill="rgb(208,206,34)"/><text x="78.2110%" y="1423.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (33 samples, 0.01%)</title><rect x="77.9735%" y="1397" width="0.0114%" height="15" fill="rgb(244,184,38)"/><text x="78.2235%" y="1407.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (43 samples, 0.01%)</title><rect x="77.9849%" y="1413" width="0.0149%" height="15" fill="rgb(244,151,47)"/><text x="78.2349%" y="1423.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (269 samples, 0.09%)</title><rect x="77.9416%" y="1429" width="0.0933%" height="15" fill="rgb(236,134,42)"/><text x="78.1916%" y="1439.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (82 samples, 0.03%)</title><rect x="78.0065%" y="1413" width="0.0285%" height="15" fill="rgb(233,93,22)"/><text x="78.2565%" y="1423.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (82 samples, 0.03%)</title><rect x="78.0349%" y="1429" width="0.0285%" height="15" fill="rgb(211,202,10)"/><text x="78.2849%" y="1439.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (466 samples, 0.16%)</title><rect x="77.9048%" y="1445" width="0.1617%" height="15" fill="rgb(240,63,8)"/><text x="78.1548%" y="1455.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (509 samples, 0.18%)</title><rect x="77.8979%" y="1461" width="0.1766%" height="15" fill="rgb(214,9,4)"/><text x="78.1479%" y="1471.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (37 samples, 0.01%)</title><rect x="78.0981%" y="1365" width="0.0128%" height="15" fill="rgb(243,66,45)"/><text x="78.3481%" y="1375.50"></text></g><g><title>core::cell::BorrowRefMut::new (48 samples, 0.02%)</title><rect x="78.0946%" y="1397" width="0.0167%" height="15" fill="rgb(220,50,42)"/><text x="78.3446%" y="1407.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (41 samples, 0.01%)</title><rect x="78.0970%" y="1381" width="0.0142%" height="15" fill="rgb(220,134,27)"/><text x="78.3470%" y="1391.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (58 samples, 0.02%)</title><rect x="78.0915%" y="1413" width="0.0201%" height="15" fill="rgb(246,151,50)"/><text x="78.3415%" y="1423.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (65 samples, 0.02%)</title><rect x="78.0901%" y="1429" width="0.0226%" height="15" fill="rgb(238,216,27)"/><text x="78.3401%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (34 samples, 0.01%)</title><rect x="78.1126%" y="1429" width="0.0118%" height="15" fill="rgb(250,92,11)"/><text x="78.3626%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (33 samples, 0.01%)</title><rect x="78.1130%" y="1413" width="0.0114%" height="15" fill="rgb(248,183,6)"/><text x="78.3630%" y="1423.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (30 samples, 0.01%)</title><rect x="78.1140%" y="1397" width="0.0104%" height="15" fill="rgb(211,204,50)"/><text x="78.3640%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (44 samples, 0.02%)</title><rect x="78.1334%" y="1333" width="0.0153%" height="15" fill="rgb(252,55,47)"/><text x="78.3834%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (62 samples, 0.02%)</title><rect x="78.1310%" y="1349" width="0.0215%" height="15" fill="rgb(240,198,32)"/><text x="78.3810%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (84 samples, 0.03%)</title><rect x="78.1293%" y="1365" width="0.0291%" height="15" fill="rgb(224,203,19)"/><text x="78.3793%" y="1375.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (213 samples, 0.07%)</title><rect x="78.0852%" y="1445" width="0.0739%" height="15" fill="rgb(205,27,16)"/><text x="78.3352%" y="1455.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (100 samples, 0.03%)</title><rect x="78.1244%" y="1429" width="0.0347%" height="15" fill="rgb(224,226,17)"/><text x="78.3744%" y="1439.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (98 samples, 0.03%)</title><rect x="78.1251%" y="1413" width="0.0340%" height="15" fill="rgb(205,216,54)"/><text x="78.3751%" y="1423.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (92 samples, 0.03%)</title><rect x="78.1272%" y="1397" width="0.0319%" height="15" fill="rgb(248,168,46)"/><text x="78.3772%" y="1407.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (88 samples, 0.03%)</title><rect x="78.1286%" y="1381" width="0.0305%" height="15" fill="rgb(226,111,45)"/><text x="78.3786%" y="1391.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (824 samples, 0.29%)</title><rect x="77.8829%" y="1509" width="0.2859%" height="15" fill="rgb(231,15,9)"/><text x="78.1329%" y="1519.50"></text></g><g><title>std::io::Write::write_all (824 samples, 0.29%)</title><rect x="77.8829%" y="1493" width="0.2859%" height="15" fill="rgb(243,168,3)"/><text x="78.1329%" y="1503.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (824 samples, 0.29%)</title><rect x="77.8829%" y="1477" width="0.2859%" height="15" fill="rgb(221,220,54)"/><text x="78.1329%" y="1487.50"></text></g><g><title>std::io::Write::write_all (255 samples, 0.09%)</title><rect x="78.0804%" y="1461" width="0.0885%" height="15" fill="rgb(232,174,38)"/><text x="78.3304%" y="1471.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (33 samples, 0.01%)</title><rect x="78.2070%" y="1381" width="0.0114%" height="15" fill="rgb(205,14,38)"/><text x="78.4570%" y="1391.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.05%)</title><rect x="78.1983%" y="1397" width="0.0513%" height="15" fill="rgb(234,89,19)"/><text x="78.4483%" y="1407.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (52 samples, 0.02%)</title><rect x="78.2316%" y="1381" width="0.0180%" height="15" fill="rgb(216,68,51)"/><text x="78.4816%" y="1391.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (51 samples, 0.02%)</title><rect x="78.2497%" y="1397" width="0.0177%" height="15" fill="rgb(213,49,2)"/><text x="78.4997%" y="1407.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (256 samples, 0.09%)</title><rect x="78.1792%" y="1413" width="0.0888%" height="15" fill="rgb(242,146,30)"/><text x="78.4292%" y="1423.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (276 samples, 0.10%)</title><rect x="78.1768%" y="1429" width="0.0958%" height="15" fill="rgb(224,188,11)"/><text x="78.4268%" y="1439.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (36 samples, 0.01%)</title><rect x="78.2847%" y="1381" width="0.0125%" height="15" fill="rgb(213,159,11)"/><text x="78.5347%" y="1391.50"></text></g><g><title>core::cell::BorrowRefMut::new (33 samples, 0.01%)</title><rect x="78.2858%" y="1365" width="0.0114%" height="15" fill="rgb(229,13,31)"/><text x="78.5358%" y="1375.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (41 samples, 0.01%)</title><rect x="78.2837%" y="1397" width="0.0142%" height="15" fill="rgb(209,103,11)"/><text x="78.5337%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="78.2979%" y="1397" width="0.0108%" height="15" fill="rgb(206,3,4)"/><text x="78.5479%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (33 samples, 0.01%)</title><rect x="78.3180%" y="1301" width="0.0114%" height="15" fill="rgb(252,10,49)"/><text x="78.5680%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (44 samples, 0.02%)</title><rect x="78.3166%" y="1317" width="0.0153%" height="15" fill="rgb(217,160,32)"/><text x="78.5666%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (75 samples, 0.03%)</title><rect x="78.3142%" y="1333" width="0.0260%" height="15" fill="rgb(249,196,0)"/><text x="78.5642%" y="1343.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (176 samples, 0.06%)</title><rect x="78.2799%" y="1413" width="0.0611%" height="15" fill="rgb(213,17,48)"/><text x="78.5299%" y="1423.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (93 samples, 0.03%)</title><rect x="78.3087%" y="1397" width="0.0323%" height="15" fill="rgb(206,42,46)"/><text x="78.5587%" y="1407.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (87 samples, 0.03%)</title><rect x="78.3107%" y="1381" width="0.0302%" height="15" fill="rgb(212,105,24)"/><text x="78.5607%" y="1391.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (84 samples, 0.03%)</title><rect x="78.3118%" y="1365" width="0.0291%" height="15" fill="rgb(243,216,30)"/><text x="78.5618%" y="1375.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (81 samples, 0.03%)</title><rect x="78.3128%" y="1349" width="0.0281%" height="15" fill="rgb(207,121,3)"/><text x="78.5628%" y="1359.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1,344 samples, 0.47%)</title><rect x="77.8829%" y="1573" width="0.4663%" height="15" fill="rgb(249,78,0)"/><text x="78.1329%" y="1583.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (1,344 samples, 0.47%)</title><rect x="77.8829%" y="1557" width="0.4663%" height="15" fill="rgb(244,151,32)"/><text x="78.1329%" y="1567.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (1,344 samples, 0.47%)</title><rect x="77.8829%" y="1541" width="0.4663%" height="15" fill="rgb(228,63,25)"/><text x="78.1329%" y="1551.50"></text></g><g><title>core::fmt::write (1,344 samples, 0.47%)</title><rect x="77.8829%" y="1525" width="0.4663%" height="15" fill="rgb(231,158,23)"/><text x="78.1329%" y="1535.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (520 samples, 0.18%)</title><rect x="78.1688%" y="1509" width="0.1804%" height="15" fill="rgb(248,107,23)"/><text x="78.4188%" y="1519.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (520 samples, 0.18%)</title><rect x="78.1688%" y="1493" width="0.1804%" height="15" fill="rgb(215,168,21)"/><text x="78.4188%" y="1503.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (520 samples, 0.18%)</title><rect x="78.1688%" y="1477" width="0.1804%" height="15" fill="rgb(227,83,22)"/><text x="78.4188%" y="1487.50"></text></g><g><title>std::io::Write::write_all (520 samples, 0.18%)</title><rect x="78.1688%" y="1461" width="0.1804%" height="15" fill="rgb(217,118,43)"/><text x="78.4188%" y="1471.50"></text></g><g><title>&lt;env_logger::fmt::DefaultFormat::write_args::IndentWrapper as std::io::Write&gt;::write (520 samples, 0.18%)</title><rect x="78.1688%" y="1445" width="0.1804%" height="15" fill="rgb(229,220,41)"/><text x="78.4188%" y="1455.50"></text></g><g><title>std::io::Write::write_all (217 samples, 0.08%)</title><rect x="78.2740%" y="1429" width="0.0753%" height="15" fill="rgb(254,146,46)"/><text x="78.5240%" y="1439.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_args (1,348 samples, 0.47%)</title><rect x="77.8829%" y="1621" width="0.4677%" height="15" fill="rgb(233,208,31)"/><text x="78.1329%" y="1631.50"></text></g><g><title>std::io::Write::write_fmt (1,348 samples, 0.47%)</title><rect x="77.8829%" y="1605" width="0.4677%" height="15" fill="rgb(222,162,7)"/><text x="78.1329%" y="1615.50"></text></g><g><title>core::fmt::write (1,348 samples, 0.47%)</title><rect x="77.8829%" y="1589" width="0.4677%" height="15" fill="rgb(230,117,45)"/><text x="78.1329%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (38 samples, 0.01%)</title><rect x="78.3673%" y="1317" width="0.0132%" height="15" fill="rgb(239,163,6)"/><text x="78.6173%" y="1327.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (87 samples, 0.03%)</title><rect x="78.3506%" y="1397" width="0.0302%" height="15" fill="rgb(246,130,17)"/><text x="78.6006%" y="1407.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (45 samples, 0.02%)</title><rect x="78.3652%" y="1381" width="0.0156%" height="15" fill="rgb(216,84,5)"/><text x="78.6152%" y="1391.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (45 samples, 0.02%)</title><rect x="78.3652%" y="1365" width="0.0156%" height="15" fill="rgb(230,200,21)"/><text x="78.6152%" y="1375.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (42 samples, 0.01%)</title><rect x="78.3663%" y="1349" width="0.0146%" height="15" fill="rgb(224,2,8)"/><text x="78.6163%" y="1359.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (41 samples, 0.01%)</title><rect x="78.3666%" y="1333" width="0.0142%" height="15" fill="rgb(238,178,10)"/><text x="78.6166%" y="1343.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (100 samples, 0.03%)</title><rect x="78.3506%" y="1461" width="0.0347%" height="15" fill="rgb(242,153,24)"/><text x="78.6006%" y="1471.50"></text></g><g><title>&lt;log::Level as core::fmt::Display&gt;::fmt (100 samples, 0.03%)</title><rect x="78.3506%" y="1445" width="0.0347%" height="15" fill="rgb(242,32,48)"/><text x="78.6006%" y="1455.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (100 samples, 0.03%)</title><rect x="78.3506%" y="1429" width="0.0347%" height="15" fill="rgb(227,36,0)"/><text x="78.6006%" y="1439.50"></text></g><g><title>std::io::Write::write_all (100 samples, 0.03%)</title><rect x="78.3506%" y="1413" width="0.0347%" height="15" fill="rgb(251,33,35)"/><text x="78.6006%" y="1423.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (31 samples, 0.01%)</title><rect x="78.3878%" y="1349" width="0.0108%" height="15" fill="rgb(232,168,51)"/><text x="78.6378%" y="1359.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (38 samples, 0.01%)</title><rect x="78.3857%" y="1381" width="0.0132%" height="15" fill="rgb(228,56,10)"/><text x="78.6357%" y="1391.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (37 samples, 0.01%)</title><rect x="78.3860%" y="1365" width="0.0128%" height="15" fill="rgb(231,10,26)"/><text x="78.6360%" y="1375.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::reset (53 samples, 0.02%)</title><rect x="78.3857%" y="1461" width="0.0184%" height="15" fill="rgb(226,202,12)"/><text x="78.6357%" y="1471.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::reset (53 samples, 0.02%)</title><rect x="78.3857%" y="1445" width="0.0184%" height="15" fill="rgb(251,49,21)"/><text x="78.6357%" y="1455.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (53 samples, 0.02%)</title><rect x="78.3857%" y="1429" width="0.0184%" height="15" fill="rgb(206,228,28)"/><text x="78.6357%" y="1439.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (53 samples, 0.02%)</title><rect x="78.3857%" y="1413" width="0.0184%" height="15" fill="rgb(205,198,31)"/><text x="78.6357%" y="1423.50"></text></g><g><title>std::io::Write::write_all (53 samples, 0.02%)</title><rect x="78.3857%" y="1397" width="0.0184%" height="15" fill="rgb(213,69,1)"/><text x="78.6357%" y="1407.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (35 samples, 0.01%)</title><rect x="78.4197%" y="1333" width="0.0121%" height="15" fill="rgb(209,177,9)"/><text x="78.6697%" y="1343.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (40 samples, 0.01%)</title><rect x="78.4183%" y="1349" width="0.0139%" height="15" fill="rgb(227,119,30)"/><text x="78.6683%" y="1359.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (42 samples, 0.01%)</title><rect x="78.4180%" y="1365" width="0.0146%" height="15" fill="rgb(234,106,41)"/><text x="78.6680%" y="1375.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (73 samples, 0.03%)</title><rect x="78.4117%" y="1413" width="0.0253%" height="15" fill="rgb(244,103,47)"/><text x="78.6617%" y="1423.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (69 samples, 0.02%)</title><rect x="78.4131%" y="1397" width="0.0239%" height="15" fill="rgb(212,211,25)"/><text x="78.6631%" y="1407.50"></text></g><g><title>std::io::Write::write_all (66 samples, 0.02%)</title><rect x="78.4141%" y="1381" width="0.0229%" height="15" fill="rgb(208,63,53)"/><text x="78.6641%" y="1391.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (41 samples, 0.01%)</title><rect x="78.4415%" y="1381" width="0.0142%" height="15" fill="rgb(213,176,21)"/><text x="78.6915%" y="1391.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (38 samples, 0.01%)</title><rect x="78.4426%" y="1365" width="0.0132%" height="15" fill="rgb(243,124,12)"/><text x="78.6926%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (36 samples, 0.01%)</title><rect x="78.4433%" y="1349" width="0.0125%" height="15" fill="rgb(239,2,35)"/><text x="78.6933%" y="1359.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (321 samples, 0.11%)</title><rect x="78.3506%" y="1557" width="0.1114%" height="15" fill="rgb(253,169,22)"/><text x="78.6006%" y="1567.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (321 samples, 0.11%)</title><rect x="78.3506%" y="1541" width="0.1114%" height="15" fill="rgb(254,51,12)"/><text x="78.6006%" y="1551.50"></text></g><g><title>core::fmt::write (321 samples, 0.11%)</title><rect x="78.3506%" y="1525" width="0.1114%" height="15" fill="rgb(244,17,47)"/><text x="78.6006%" y="1535.50"></text></g><g><title>core::fmt::run (321 samples, 0.11%)</title><rect x="78.3506%" y="1509" width="0.1114%" height="15" fill="rgb(251,45,46)"/><text x="78.6006%" y="1519.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (321 samples, 0.11%)</title><rect x="78.3506%" y="1493" width="0.1114%" height="15" fill="rgb(223,87,43)"/><text x="78.6006%" y="1503.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (321 samples, 0.11%)</title><rect x="78.3506%" y="1477" width="0.1114%" height="15" fill="rgb(230,132,31)"/><text x="78.6006%" y="1487.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (167 samples, 0.06%)</title><rect x="78.4041%" y="1461" width="0.0579%" height="15" fill="rgb(206,99,1)"/><text x="78.6541%" y="1471.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (167 samples, 0.06%)</title><rect x="78.4041%" y="1445" width="0.0579%" height="15" fill="rgb(227,110,25)"/><text x="78.6541%" y="1455.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (167 samples, 0.06%)</title><rect x="78.4041%" y="1429" width="0.0579%" height="15" fill="rgb(217,182,7)"/><text x="78.6541%" y="1439.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (71 samples, 0.02%)</title><rect x="78.4374%" y="1413" width="0.0246%" height="15" fill="rgb(250,176,4)"/><text x="78.6874%" y="1423.50"></text></g><g><title>std::io::Write::write_all (69 samples, 0.02%)</title><rect x="78.4381%" y="1397" width="0.0239%" height="15" fill="rgb(244,98,30)"/><text x="78.6881%" y="1407.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (324 samples, 0.11%)</title><rect x="78.3506%" y="1621" width="0.1124%" height="15" fill="rgb(228,150,42)"/><text x="78.6006%" y="1631.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (324 samples, 0.11%)</title><rect x="78.3506%" y="1605" width="0.1124%" height="15" fill="rgb(231,91,46)"/><text x="78.6006%" y="1615.50"></text></g><g><title>std::io::Write::write_fmt (324 samples, 0.11%)</title><rect x="78.3506%" y="1589" width="0.1124%" height="15" fill="rgb(252,161,32)"/><text x="78.6006%" y="1599.50"></text></g><g><title>core::fmt::write (324 samples, 0.11%)</title><rect x="78.3506%" y="1573" width="0.1124%" height="15" fill="rgb(236,69,41)"/><text x="78.6006%" y="1583.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (86 samples, 0.03%)</title><rect x="78.4641%" y="1493" width="0.0298%" height="15" fill="rgb(212,160,3)"/><text x="78.7141%" y="1503.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (40 samples, 0.01%)</title><rect x="78.4801%" y="1477" width="0.0139%" height="15" fill="rgb(216,5,50)"/><text x="78.7301%" y="1487.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (37 samples, 0.01%)</title><rect x="78.4811%" y="1461" width="0.0128%" height="15" fill="rgb(241,138,25)"/><text x="78.7311%" y="1471.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (35 samples, 0.01%)</title><rect x="78.4818%" y="1445" width="0.0121%" height="15" fill="rgb(239,42,18)"/><text x="78.7318%" y="1455.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (33 samples, 0.01%)</title><rect x="78.4825%" y="1429" width="0.0114%" height="15" fill="rgb(239,40,7)"/><text x="78.7325%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (30 samples, 0.01%)</title><rect x="78.4835%" y="1413" width="0.0104%" height="15" fill="rgb(239,11,31)"/><text x="78.7335%" y="1423.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (102 samples, 0.04%)</title><rect x="78.4641%" y="1525" width="0.0354%" height="15" fill="rgb(224,77,40)"/><text x="78.7141%" y="1535.50"></text></g><g><title>std::io::Write::write_all (102 samples, 0.04%)</title><rect x="78.4641%" y="1509" width="0.0354%" height="15" fill="rgb(226,15,5)"/><text x="78.7141%" y="1519.50"></text></g><g><title>&lt;env_logger::fmt::humantime::imp::Timestamp as core::fmt::Display&gt;::fmt (108 samples, 0.04%)</title><rect x="78.4641%" y="1557" width="0.0375%" height="15" fill="rgb(254,188,5)"/><text x="78.7141%" y="1567.50"></text></g><g><title>&lt;humantime::date::Rfc3339Timestamp as core::fmt::Display&gt;::fmt (108 samples, 0.04%)</title><rect x="78.4641%" y="1541" width="0.0375%" height="15" fill="rgb(241,148,52)"/><text x="78.7141%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.01%)</title><rect x="78.5092%" y="1365" width="0.0104%" height="15" fill="rgb(251,48,36)"/><text x="78.7592%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (37 samples, 0.01%)</title><rect x="78.5092%" y="1381" width="0.0128%" height="15" fill="rgb(243,83,13)"/><text x="78.7592%" y="1391.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt::{{closure}} (60 samples, 0.02%)</title><rect x="78.5016%" y="1525" width="0.0208%" height="15" fill="rgb(210,105,0)"/><text x="78.7516%" y="1535.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (60 samples, 0.02%)</title><rect x="78.5016%" y="1509" width="0.0208%" height="15" fill="rgb(239,60,36)"/><text x="78.7516%" y="1519.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (60 samples, 0.02%)</title><rect x="78.5016%" y="1493" width="0.0208%" height="15" fill="rgb(210,20,0)"/><text x="78.7516%" y="1503.50"></text></g><g><title>std::io::Write::write_all (60 samples, 0.02%)</title><rect x="78.5016%" y="1477" width="0.0208%" height="15" fill="rgb(244,26,53)"/><text x="78.7516%" y="1487.50"></text></g><g><title>&lt;env_logger::fmt::Formatter as std::io::Write&gt;::write (60 samples, 0.02%)</title><rect x="78.5016%" y="1461" width="0.0208%" height="15" fill="rgb(240,100,49)"/><text x="78.7516%" y="1471.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::write (38 samples, 0.01%)</title><rect x="78.5092%" y="1445" width="0.0132%" height="15" fill="rgb(250,46,45)"/><text x="78.7592%" y="1455.50"></text></g><g><title>&lt;termcolor::Buffer as std::io::Write&gt;::write (38 samples, 0.01%)</title><rect x="78.5092%" y="1429" width="0.0132%" height="15" fill="rgb(220,181,29)"/><text x="78.7592%" y="1439.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (38 samples, 0.01%)</title><rect x="78.5092%" y="1413" width="0.0132%" height="15" fill="rgb(213,137,33)"/><text x="78.7592%" y="1423.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (38 samples, 0.01%)</title><rect x="78.5092%" y="1397" width="0.0132%" height="15" fill="rgb(213,27,48)"/><text x="78.7592%" y="1407.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::reset (34 samples, 0.01%)</title><rect x="78.5224%" y="1525" width="0.0118%" height="15" fill="rgb(245,180,39)"/><text x="78.7724%" y="1535.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::reset (34 samples, 0.01%)</title><rect x="78.5224%" y="1509" width="0.0118%" height="15" fill="rgb(212,158,42)"/><text x="78.7724%" y="1519.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (34 samples, 0.01%)</title><rect x="78.5224%" y="1493" width="0.0118%" height="15" fill="rgb(228,193,18)"/><text x="78.7724%" y="1503.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (34 samples, 0.01%)</title><rect x="78.5224%" y="1477" width="0.0118%" height="15" fill="rgb(245,172,29)"/><text x="78.7724%" y="1487.50"></text></g><g><title>std::io::Write::write_all (34 samples, 0.01%)</title><rect x="78.5224%" y="1461" width="0.0118%" height="15" fill="rgb(207,98,24)"/><text x="78.7724%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (29 samples, 0.01%)</title><rect x="78.5796%" y="1349" width="0.0101%" height="15" fill="rgb(249,92,26)"/><text x="78.8296%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (70 samples, 0.02%)</title><rect x="78.5689%" y="1365" width="0.0243%" height="15" fill="rgb(217,176,26)"/><text x="78.8189%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (101 samples, 0.04%)</title><rect x="78.5671%" y="1381" width="0.0350%" height="15" fill="rgb(221,8,39)"/><text x="78.8171%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (152 samples, 0.05%)</title><rect x="78.5651%" y="1397" width="0.0527%" height="15" fill="rgb(208,90,18)"/><text x="78.8151%" y="1407.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (45 samples, 0.02%)</title><rect x="78.6022%" y="1381" width="0.0156%" height="15" fill="rgb(207,202,30)"/><text x="78.8522%" y="1391.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (43 samples, 0.01%)</title><rect x="78.6029%" y="1365" width="0.0149%" height="15" fill="rgb(231,124,22)"/><text x="78.8529%" y="1375.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (163 samples, 0.06%)</title><rect x="78.5623%" y="1429" width="0.0566%" height="15" fill="rgb(206,15,5)"/><text x="78.8123%" y="1439.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write (157 samples, 0.05%)</title><rect x="78.5644%" y="1413" width="0.0545%" height="15" fill="rgb(239,16,52)"/><text x="78.8144%" y="1423.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (32 samples, 0.01%)</title><rect x="78.6313%" y="1381" width="0.0111%" height="15" fill="rgb(245,213,29)"/><text x="78.8813%" y="1391.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (46 samples, 0.02%)</title><rect x="78.6282%" y="1397" width="0.0160%" height="15" fill="rgb(213,203,36)"/><text x="78.8782%" y="1407.50"></text></g><g><title>tunneler::server::client::client::Client::receiver::{{closure}} (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1765" width="0.7966%" height="15" fill="rgb(209,55,18)"/><text x="78.0982%" y="1775.50"></text></g><g><title>log::__private_api_log (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1749" width="0.7966%" height="15" fill="rgb(207,133,49)"/><text x="78.0982%" y="1759.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1733" width="0.7966%" height="15" fill="rgb(240,33,46)"/><text x="78.0982%" y="1743.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1717" width="0.7966%" height="15" fill="rgb(212,35,2)"/><text x="78.0982%" y="1727.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1701" width="0.7966%" height="15" fill="rgb(231,119,28)"/><text x="78.0982%" y="1711.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1685" width="0.7966%" height="15" fill="rgb(252,178,7)"/><text x="78.0982%" y="1695.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1669" width="0.7966%" height="15" fill="rgb(251,91,4)"/><text x="78.0982%" y="1679.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1653" width="0.7966%" height="15" fill="rgb(233,122,19)"/><text x="78.0982%" y="1663.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (2,296 samples, 0.80%)</title><rect x="77.8482%" y="1637" width="0.7966%" height="15" fill="rgb(231,208,46)"/><text x="78.0982%" y="1647.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (521 samples, 0.18%)</title><rect x="78.4641%" y="1621" width="0.1808%" height="15" fill="rgb(243,15,41)"/><text x="78.7141%" y="1631.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (521 samples, 0.18%)</title><rect x="78.4641%" y="1605" width="0.1808%" height="15" fill="rgb(210,32,43)"/><text x="78.7141%" y="1615.50"></text></g><g><title>std::io::Write::write_fmt (521 samples, 0.18%)</title><rect x="78.4641%" y="1589" width="0.1808%" height="15" fill="rgb(222,177,15)"/><text x="78.7141%" y="1599.50"></text></g><g><title>core::fmt::write (521 samples, 0.18%)</title><rect x="78.4641%" y="1573" width="0.1808%" height="15" fill="rgb(244,121,34)"/><text x="78.7141%" y="1583.50"></text></g><g><title>&lt;env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (413 samples, 0.14%)</title><rect x="78.5016%" y="1557" width="0.1433%" height="15" fill="rgb(234,138,4)"/><text x="78.7516%" y="1567.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::StyledValue&lt;T&gt;::write_fmt (413 samples, 0.14%)</title><rect x="78.5016%" y="1541" width="0.1433%" height="15" fill="rgb(240,97,48)"/><text x="78.7516%" y="1551.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::Buffer::set_color (319 samples, 0.11%)</title><rect x="78.5342%" y="1525" width="0.1107%" height="15" fill="rgb(237,65,54)"/><text x="78.7842%" y="1535.50"></text></g><g><title>&lt;termcolor::Buffer as termcolor::WriteColor&gt;::set_color (319 samples, 0.11%)</title><rect x="78.5342%" y="1509" width="0.1107%" height="15" fill="rgb(214,25,24)"/><text x="78.7842%" y="1519.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (319 samples, 0.11%)</title><rect x="78.5342%" y="1493" width="0.1107%" height="15" fill="rgb(213,5,3)"/><text x="78.7842%" y="1503.50"></text></g><g><title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (271 samples, 0.09%)</title><rect x="78.5508%" y="1477" width="0.0940%" height="15" fill="rgb(219,81,29)"/><text x="78.8008%" y="1487.50"></text></g><g><title>termcolor::Ansi&lt;W&gt;::write_str (267 samples, 0.09%)</title><rect x="78.5522%" y="1461" width="0.0926%" height="15" fill="rgb(220,43,48)"/><text x="78.8022%" y="1471.50"></text></g><g><title>std::io::Write::write_all (256 samples, 0.09%)</title><rect x="78.5560%" y="1445" width="0.0888%" height="15" fill="rgb(239,157,2)"/><text x="78.8060%" y="1455.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (70 samples, 0.02%)</title><rect x="78.6206%" y="1429" width="0.0243%" height="15" fill="rgb(213,104,43)"/><text x="78.8706%" y="1439.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (62 samples, 0.02%)</title><rect x="78.6233%" y="1413" width="0.0215%" height="15" fill="rgb(237,84,9)"/><text x="78.8733%" y="1423.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::from_bytes_be (57 samples, 0.02%)</title><rect x="78.6560%" y="1669" width="0.0198%" height="15" fill="rgb(252,6,33)"/><text x="78.9060%" y="1679.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::from_bytes_le (36 samples, 0.01%)</title><rect x="78.6632%" y="1653" width="0.0125%" height="15" fill="rgb(251,172,22)"/><text x="78.9132%" y="1663.50"></text></g><g><title>num_bigint_dig::biguint::from_bitwise_digits_le (36 samples, 0.01%)</title><rect x="78.6632%" y="1637" width="0.0125%" height="15" fill="rgb(244,91,53)"/><text x="78.9132%" y="1647.50"></text></g><g><title>num_bigint_dig::prime::probably_prime (42 samples, 0.01%)</title><rect x="78.6757%" y="1669" width="0.0146%" height="15" fill="rgb(219,29,30)"/><text x="78.9257%" y="1679.50"></text></g><g><title>tunneler::server::server::accept_clients::accept_clients::{{closure}} (134 samples, 0.05%)</title><rect x="78.6449%" y="1765" width="0.0465%" height="15" fill="rgb(213,3,15)"/><text x="78.8949%" y="1775.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (134 samples, 0.05%)</title><rect x="78.6449%" y="1749" width="0.0465%" height="15" fill="rgb(208,25,28)"/><text x="78.8949%" y="1759.50"></text></g><g><title>tunneler::server::server::accept_clients::validate_connection::validate_connection::{{closure}} (134 samples, 0.05%)</title><rect x="78.6449%" y="1733" width="0.0465%" height="15" fill="rgb(252,144,25)"/><text x="78.8949%" y="1743.50"></text></g><g><title>rsa::key::RSAPrivateKey::new (134 samples, 0.05%)</title><rect x="78.6449%" y="1717" width="0.0465%" height="15" fill="rgb(226,220,25)"/><text x="78.8949%" y="1727.50"></text></g><g><title>rsa::algorithms::generate_multi_prime_key (134 samples, 0.05%)</title><rect x="78.6449%" y="1701" width="0.0465%" height="15" fill="rgb(212,131,28)"/><text x="78.8949%" y="1711.50"></text></g><g><title>&lt;R as num_bigint_dig::bigrand::RandPrime&gt;::gen_prime (134 samples, 0.05%)</title><rect x="78.6449%" y="1685" width="0.0465%" height="15" fill="rgb(219,143,52)"/><text x="78.8949%" y="1695.50"></text></g><g><title>rsa::internals::decrypt (42 samples, 0.01%)</title><rect x="78.6914%" y="1669" width="0.0146%" height="15" fill="rgb(215,56,7)"/><text x="78.9414%" y="1679.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (42 samples, 0.01%)</title><rect x="78.6914%" y="1653" width="0.0146%" height="15" fill="rgb(239,59,51)"/><text x="78.9414%" y="1663.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (42 samples, 0.01%)</title><rect x="78.6914%" y="1637" width="0.0146%" height="15" fill="rgb(209,215,4)"/><text x="78.9414%" y="1647.50"></text></g><g><title>num_bigint_dig::biguint::monty::montgomery (41 samples, 0.01%)</title><rect x="78.6917%" y="1621" width="0.0142%" height="15" fill="rgb(221,118,39)"/><text x="78.9417%" y="1631.50"></text></g><g><title>num_bigint_dig::biguint::monty::add_mul_vvw (41 samples, 0.01%)</title><rect x="78.7084%" y="1605" width="0.0142%" height="15" fill="rgb(236,6,44)"/><text x="78.9584%" y="1615.50"></text></g><g><title>rsa::key::RSAPrivateKey::decrypt (91 samples, 0.03%)</title><rect x="78.6914%" y="1749" width="0.0316%" height="15" fill="rgb(216,122,9)"/><text x="78.9414%" y="1759.50"></text></g><g><title>rsa::pkcs1v15::decrypt (91 samples, 0.03%)</title><rect x="78.6914%" y="1733" width="0.0316%" height="15" fill="rgb(244,134,42)"/><text x="78.9414%" y="1743.50"></text></g><g><title>rsa::pkcs1v15::decrypt_inner (91 samples, 0.03%)</title><rect x="78.6914%" y="1717" width="0.0316%" height="15" fill="rgb(209,189,35)"/><text x="78.9414%" y="1727.50"></text></g><g><title>&lt;rsa::key::RSAPrivateKey as rsa::raw::DecryptionPrimitive&gt;::raw_decryption_primitive (91 samples, 0.03%)</title><rect x="78.6914%" y="1701" width="0.0316%" height="15" fill="rgb(250,47,36)"/><text x="78.9414%" y="1711.50"></text></g><g><title>rsa::internals::decrypt_and_check (91 samples, 0.03%)</title><rect x="78.6914%" y="1685" width="0.0316%" height="15" fill="rgb(252,112,4)"/><text x="78.9414%" y="1695.50"></text></g><g><title>rsa::internals::encrypt (49 samples, 0.02%)</title><rect x="78.7059%" y="1669" width="0.0170%" height="15" fill="rgb(221,79,51)"/><text x="78.9559%" y="1679.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (49 samples, 0.02%)</title><rect x="78.7059%" y="1653" width="0.0170%" height="15" fill="rgb(232,65,53)"/><text x="78.9559%" y="1663.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (49 samples, 0.02%)</title><rect x="78.7059%" y="1637" width="0.0170%" height="15" fill="rgb(211,37,7)"/><text x="78.9559%" y="1647.50"></text></g><g><title>num_bigint_dig::biguint::monty::montgomery (49 samples, 0.02%)</title><rect x="78.7059%" y="1621" width="0.0170%" height="15" fill="rgb(234,221,18)"/><text x="78.9559%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.02%)</title><rect x="78.7587%" y="1589" width="0.0239%" height="15" fill="rgb(220,158,26)"/><text x="79.0087%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (51 samples, 0.02%)</title><rect x="78.7649%" y="1573" width="0.0177%" height="15" fill="rgb(220,70,6)"/><text x="79.0149%" y="1583.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac3 (246 samples, 0.09%)</title><rect x="78.7292%" y="1637" width="0.0854%" height="15" fill="rgb(250,39,48)"/><text x="78.9792%" y="1647.50"></text></g><g><title>num_bigint_dig::algorithms::mac::long (245 samples, 0.09%)</title><rect x="78.7295%" y="1621" width="0.0850%" height="15" fill="rgb(206,40,27)"/><text x="78.9795%" y="1631.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_digit (204 samples, 0.07%)</title><rect x="78.7437%" y="1605" width="0.0708%" height="15" fill="rgb(247,80,36)"/><text x="78.9937%" y="1615.50"></text></g><g><title>num_bigint_dig::algorithms::mac::mac_with_carry (70 samples, 0.02%)</title><rect x="78.7902%" y="1589" width="0.0243%" height="15" fill="rgb(222,9,20)"/><text x="79.0402%" y="1599.50"></text></g><g><title>&lt;&amp;num_bigint_dig::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint_dig::biguint::BigUint&gt;&gt;::mul (257 samples, 0.09%)</title><rect x="78.7278%" y="1669" width="0.0892%" height="15" fill="rgb(217,26,45)"/><text x="78.9778%" y="1679.50"></text></g><g><title>num_bigint_dig::algorithms::mul::mul3 (253 samples, 0.09%)</title><rect x="78.7292%" y="1653" width="0.0878%" height="15" fill="rgb(221,67,14)"/><text x="78.9792%" y="1663.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_lucas (305 samples, 0.11%)</title><rect x="78.7278%" y="1685" width="0.1058%" height="15" fill="rgb(248,100,24)"/><text x="78.9778%" y="1695.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.01%)</title><rect x="78.8697%" y="1637" width="0.0135%" height="15" fill="rgb(230,187,16)"/><text x="79.1197%" y="1647.50"></text></g><g><title>num_bigint_dig::biguint::BigUint::modpow (183 samples, 0.06%)</title><rect x="78.8534%" y="1669" width="0.0635%" height="15" fill="rgb(205,108,13)"/><text x="79.1034%" y="1679.50"></text></g><g><title>num_bigint_dig::biguint::monty::monty_modpow (182 samples, 0.06%)</title><rect x="78.8537%" y="1653" width="0.0631%" height="15" fill="rgb(235,71,51)"/><text x="79.1037%" y="1663.50"></text></g><g><title>[unknown] (227,240 samples, 78.84%)</title><rect x="0.0753%" y="1781" width="78.8423%" height="15" fill="rgb(251,172,48)"/><text x="0.3253%" y="1791.50">[unknown]</text></g><g><title>tunneler::server::server::accept_clients::validate_connection::validate_connection::{{closure}} (652 samples, 0.23%)</title><rect x="78.6914%" y="1765" width="0.2262%" height="15" fill="rgb(240,96,49)"/><text x="78.9414%" y="1775.50"></text></g><g><title>rsa::key::RSAPrivateKey::new (561 samples, 0.19%)</title><rect x="78.7229%" y="1749" width="0.1946%" height="15" fill="rgb(235,46,36)"/><text x="78.9729%" y="1759.50"></text></g><g><title>rsa::algorithms::generate_multi_prime_key (561 samples, 0.19%)</title><rect x="78.7229%" y="1733" width="0.1946%" height="15" fill="rgb(244,3,49)"/><text x="78.9729%" y="1743.50"></text></g><g><title>&lt;R as num_bigint_dig::bigrand::RandPrime&gt;::gen_prime (561 samples, 0.19%)</title><rect x="78.7229%" y="1717" width="0.1946%" height="15" fill="rgb(206,78,54)"/><text x="78.9729%" y="1727.50"></text></g><g><title>num_bigint_dig::prime::probably_prime (556 samples, 0.19%)</title><rect x="78.7247%" y="1701" width="0.1929%" height="15" fill="rgb(208,85,42)"/><text x="78.9747%" y="1711.50"></text></g><g><title>num_bigint_dig::prime::probably_prime_miller_rabin (242 samples, 0.08%)</title><rect x="78.8336%" y="1685" width="0.0840%" height="15" fill="rgb(219,196,21)"/><text x="79.0836%" y="1695.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (110 samples, 0.04%)</title><rect x="79.0217%" y="1189" width="0.0382%" height="15" fill="rgb(238,19,9)"/><text x="79.2717%" y="1199.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (85 samples, 0.03%)</title><rect x="79.0303%" y="1173" width="0.0295%" height="15" fill="rgb(206,86,13)"/><text x="79.2803%" y="1183.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (40 samples, 0.01%)</title><rect x="79.0459%" y="1157" width="0.0139%" height="15" fill="rgb(214,123,40)"/><text x="79.2959%" y="1167.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (37 samples, 0.01%)</title><rect x="79.0983%" y="1157" width="0.0128%" height="15" fill="rgb(243,53,5)"/><text x="79.3483%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (112 samples, 0.04%)</title><rect x="79.0952%" y="1173" width="0.0389%" height="15" fill="rgb(254,186,31)"/><text x="79.3452%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::maintenance (236 samples, 0.08%)</title><rect x="79.0706%" y="1189" width="0.0819%" height="15" fill="rgb(221,216,25)"/><text x="79.3206%" y="1199.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (53 samples, 0.02%)</title><rect x="79.1341%" y="1173" width="0.0184%" height="15" fill="rgb(248,107,42)"/><text x="79.3841%" y="1183.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (173 samples, 0.06%)</title><rect x="79.2097%" y="1173" width="0.0600%" height="15" fill="rgb(221,85,43)"/><text x="79.4597%" y="1183.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (130 samples, 0.05%)</title><rect x="79.2246%" y="1157" width="0.0451%" height="15" fill="rgb(225,34,24)"/><text x="79.4746%" y="1167.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (73 samples, 0.03%)</title><rect x="79.2444%" y="1141" width="0.0253%" height="15" fill="rgb(211,119,1)"/><text x="79.4944%" y="1151.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (35 samples, 0.01%)</title><rect x="79.2576%" y="1125" width="0.0121%" height="15" fill="rgb(254,216,46)"/><text x="79.5076%" y="1135.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (37 samples, 0.01%)</title><rect x="79.3665%" y="1157" width="0.0128%" height="15" fill="rgb(238,11,38)"/><text x="79.6165%" y="1167.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (31 samples, 0.01%)</title><rect x="79.4411%" y="1093" width="0.0108%" height="15" fill="rgb(233,50,15)"/><text x="79.6911%" y="1103.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (67 samples, 0.02%)</title><rect x="79.4290%" y="1109" width="0.0232%" height="15" fill="rgb(217,181,29)"/><text x="79.6790%" y="1119.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (114 samples, 0.04%)</title><rect x="79.4130%" y="1125" width="0.0396%" height="15" fill="rgb(214,56,3)"/><text x="79.6630%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (162 samples, 0.06%)</title><rect x="79.3967%" y="1141" width="0.0562%" height="15" fill="rgb(230,69,45)"/><text x="79.6467%" y="1151.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (42 samples, 0.01%)</title><rect x="79.5463%" y="1125" width="0.0146%" height="15" fill="rgb(224,201,50)"/><text x="79.7963%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (146 samples, 0.05%)</title><rect x="79.5608%" y="1125" width="0.0507%" height="15" fill="rgb(217,228,18)"/><text x="79.8108%" y="1135.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (106 samples, 0.04%)</title><rect x="79.5747%" y="1109" width="0.0368%" height="15" fill="rgb(239,33,44)"/><text x="79.8247%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (65 samples, 0.02%)</title><rect x="79.5889%" y="1093" width="0.0226%" height="15" fill="rgb(248,210,23)"/><text x="79.8389%" y="1103.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (30 samples, 0.01%)</title><rect x="79.6011%" y="1077" width="0.0104%" height="15" fill="rgb(253,135,8)"/><text x="79.8511%" y="1087.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (47 samples, 0.02%)</title><rect x="79.6115%" y="1125" width="0.0163%" height="15" fill="rgb(217,98,21)"/><text x="79.8615%" y="1135.50"></text></g><g><title>__switch_to (34 samples, 0.01%)</title><rect x="79.6767%" y="1109" width="0.0118%" height="15" fill="rgb(253,130,21)"/><text x="79.9267%" y="1119.50"></text></g><g><title>entry_SYSCALL_64 (92 samples, 0.03%)</title><rect x="79.6979%" y="1109" width="0.0319%" height="15" fill="rgb(207,81,54)"/><text x="79.9479%" y="1119.50"></text></g><g><title>_raw_spin_lock (53 samples, 0.02%)</title><rect x="79.7947%" y="1061" width="0.0184%" height="15" fill="rgb(232,48,33)"/><text x="80.0447%" y="1071.50"></text></g><g><title>__perf_event_task_sched_out (44 samples, 0.02%)</title><rect x="79.9168%" y="1013" width="0.0153%" height="15" fill="rgb(211,9,35)"/><text x="80.1668%" y="1023.50"></text></g><g><title>clear_buddies (35 samples, 0.01%)</title><rect x="80.0476%" y="997" width="0.0121%" height="15" fill="rgb(205,152,21)"/><text x="80.2976%" y="1007.50"></text></g><g><title>pick_next_entity (85 samples, 0.03%)</title><rect x="80.0632%" y="997" width="0.0295%" height="15" fill="rgb(249,21,27)"/><text x="80.3132%" y="1007.50"></text></g><g><title>put_prev_entity (35 samples, 0.01%)</title><rect x="80.0927%" y="997" width="0.0121%" height="15" fill="rgb(252,29,24)"/><text x="80.3427%" y="1007.50"></text></g><g><title>__calc_delta (79 samples, 0.03%)</title><rect x="80.1666%" y="981" width="0.0274%" height="15" fill="rgb(230,130,50)"/><text x="80.4166%" y="991.50"></text></g><g><title>cpuacct_charge (115 samples, 0.04%)</title><rect x="80.2030%" y="981" width="0.0399%" height="15" fill="rgb(239,144,14)"/><text x="80.4530%" y="991.50"></text></g><g><title>update_curr (388 samples, 0.13%)</title><rect x="80.1173%" y="997" width="0.1346%" height="15" fill="rgb(227,111,50)"/><text x="80.3673%" y="1007.50"></text></g><g><title>pick_next_task_fair (873 samples, 0.30%)</title><rect x="79.9605%" y="1013" width="0.3029%" height="15" fill="rgb(254,84,20)"/><text x="80.2105%" y="1023.50"></text></g><g><title>update_min_vruntime (29 samples, 0.01%)</title><rect x="80.2533%" y="997" width="0.0101%" height="15" fill="rgb(232,90,48)"/><text x="80.5033%" y="1007.50"></text></g><g><title>native_sched_clock (75 samples, 0.03%)</title><rect x="80.2877%" y="981" width="0.0260%" height="15" fill="rgb(253,63,47)"/><text x="80.5377%" y="991.50"></text></g><g><title>__sched_text_start (1,341 samples, 0.47%)</title><rect x="79.8488%" y="1029" width="0.4653%" height="15" fill="rgb(251,146,35)"/><text x="80.0988%" y="1039.50"></text></g><g><title>update_rq_clock (107 samples, 0.04%)</title><rect x="80.2769%" y="1013" width="0.0371%" height="15" fill="rgb(229,192,35)"/><text x="80.5269%" y="1023.50"></text></g><g><title>sched_clock_cpu (81 samples, 0.03%)</title><rect x="80.2860%" y="997" width="0.0281%" height="15" fill="rgb(225,68,9)"/><text x="80.5360%" y="1007.50"></text></g><g><title>schedule (1,464 samples, 0.51%)</title><rect x="79.8353%" y="1045" width="0.5079%" height="15" fill="rgb(214,97,34)"/><text x="80.0853%" y="1055.50"></text></g><g><title>update_curr (40 samples, 0.01%)</title><rect x="80.3616%" y="1029" width="0.0139%" height="15" fill="rgb(253,31,26)"/><text x="80.6116%" y="1039.50"></text></g><g><title>do_sched_yield (1,631 samples, 0.57%)</title><rect x="79.8131%" y="1061" width="0.5659%" height="15" fill="rgb(225,151,47)"/><text x="80.0631%" y="1071.50"></text></g><g><title>yield_task_fair (101 samples, 0.04%)</title><rect x="80.3439%" y="1045" width="0.0350%" height="15" fill="rgb(206,185,9)"/><text x="80.5939%" y="1055.50"></text></g><g><title>__x64_sys_sched_yield (1,751 samples, 0.61%)</title><rect x="79.7818%" y="1077" width="0.6075%" height="15" fill="rgb(249,65,17)"/><text x="80.0318%" y="1087.50"></text></g><g><title>do_syscall_64 (1,872 samples, 0.65%)</title><rect x="79.7593%" y="1093" width="0.6495%" height="15" fill="rgb(220,110,10)"/><text x="80.0093%" y="1103.50"></text></g><g><title>switch_fpu_return (37 samples, 0.01%)</title><rect x="80.3959%" y="1077" width="0.0128%" height="15" fill="rgb(222,198,49)"/><text x="80.6459%" y="1087.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,967 samples, 0.68%)</title><rect x="79.7298%" y="1109" width="0.6825%" height="15" fill="rgb(239,81,13)"/><text x="79.9798%" y="1119.50"></text></g><g><title>native_load_gs_index (39 samples, 0.01%)</title><rect x="80.4126%" y="1109" width="0.0135%" height="15" fill="rgb(216,128,11)"/><text x="80.6626%" y="1119.50"></text></g><g><title>__GI___sched_yield (2,338 samples, 0.81%)</title><rect x="79.6358%" y="1125" width="0.8112%" height="15" fill="rgb(247,156,8)"/><text x="79.8858%" y="1135.50"></text></g><g><title>syscall_return_via_sysret (40 samples, 0.01%)</title><rect x="80.4331%" y="1109" width="0.0139%" height="15" fill="rgb(219,173,1)"/><text x="80.6831%" y="1119.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (78 samples, 0.03%)</title><rect x="80.5129%" y="1109" width="0.0271%" height="15" fill="rgb(227,42,24)"/><text x="80.7629%" y="1119.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (50 samples, 0.02%)</title><rect x="80.5226%" y="1093" width="0.0173%" height="15" fill="rgb(253,219,50)"/><text x="80.7726%" y="1103.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for i32&gt;::clone (31 samples, 0.01%)</title><rect x="80.5399%" y="1109" width="0.0108%" height="15" fill="rgb(215,191,54)"/><text x="80.7899%" y="1119.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (31 samples, 0.01%)</title><rect x="80.5507%" y="1109" width="0.0108%" height="15" fill="rgb(238,83,12)"/><text x="80.8007%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.02%)</title><rect x="80.6707%" y="1045" width="0.0246%" height="15" fill="rgb(205,124,9)"/><text x="80.9207%" y="1055.50"></text></g><g><title>core::ptr::read (151 samples, 0.05%)</title><rect x="80.6444%" y="1061" width="0.0524%" height="15" fill="rgb(253,174,7)"/><text x="80.8944%" y="1071.50"></text></g><g><title>core::mem::swap (337 samples, 0.12%)</title><rect x="80.5854%" y="1093" width="0.1169%" height="15" fill="rgb(206,134,49)"/><text x="80.8354%" y="1103.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (306 samples, 0.11%)</title><rect x="80.5961%" y="1077" width="0.1062%" height="15" fill="rgb(221,89,20)"/><text x="80.8461%" y="1087.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (736 samples, 0.26%)</title><rect x="80.4473%" y="1125" width="0.2554%" height="15" fill="rgb(240,205,13)"/><text x="80.6973%" y="1135.50"></text></g><g><title>core::mem::replace (407 samples, 0.14%)</title><rect x="80.5614%" y="1109" width="0.1412%" height="15" fill="rgb(237,174,32)"/><text x="80.8114%" y="1119.50"></text></g><g><title>&lt;tokio::util::try_lock::LockGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.04%)</title><rect x="80.7096%" y="1109" width="0.0354%" height="15" fill="rgb(226,12,15)"/><text x="80.9596%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (68 samples, 0.02%)</title><rect x="80.7214%" y="1093" width="0.0236%" height="15" fill="rgb(245,160,52)"/><text x="80.9714%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_store (49 samples, 0.02%)</title><rect x="80.7280%" y="1077" width="0.0170%" height="15" fill="rgb(253,80,21)"/><text x="80.9780%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (123 samples, 0.04%)</title><rect x="80.7027%" y="1125" width="0.0427%" height="15" fill="rgb(231,225,22)"/><text x="80.9527%" y="1135.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (66 samples, 0.02%)</title><rect x="80.7453%" y="1125" width="0.0229%" height="15" fill="rgb(253,185,12)"/><text x="80.9953%" y="1135.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (32 samples, 0.01%)</title><rect x="80.7793%" y="1109" width="0.0111%" height="15" fill="rgb(234,197,21)"/><text x="81.0293%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (123 samples, 0.04%)</title><rect x="80.7904%" y="1109" width="0.0427%" height="15" fill="rgb(210,47,30)"/><text x="81.0404%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (188 samples, 0.07%)</title><rect x="80.7682%" y="1125" width="0.0652%" height="15" fill="rgb(246,139,27)"/><text x="81.0182%" y="1135.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (29 samples, 0.01%)</title><rect x="80.8640%" y="1109" width="0.0101%" height="15" fill="rgb(226,130,16)"/><text x="81.1140%" y="1119.50"></text></g><g><title>get_futex_key (29 samples, 0.01%)</title><rect x="80.9400%" y="933" width="0.0101%" height="15" fill="rgb(237,208,20)"/><text x="81.1900%" y="943.50"></text></g><g><title>futex_wake (71 samples, 0.02%)</title><rect x="80.9264%" y="949" width="0.0246%" height="15" fill="rgb(245,186,28)"/><text x="81.1764%" y="959.50"></text></g><g><title>do_futex (95 samples, 0.03%)</title><rect x="80.9226%" y="965" width="0.0330%" height="15" fill="rgb(238,105,39)"/><text x="81.1726%" y="975.50"></text></g><g><title>__x64_sys_futex (107 samples, 0.04%)</title><rect x="80.9198%" y="981" width="0.0371%" height="15" fill="rgb(253,228,11)"/><text x="81.1698%" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (146 samples, 0.05%)</title><rect x="80.9077%" y="1013" width="0.0507%" height="15" fill="rgb(224,136,38)"/><text x="81.1577%" y="1023.50"></text></g><g><title>do_syscall_64 (124 samples, 0.04%)</title><rect x="80.9153%" y="997" width="0.0430%" height="15" fill="rgb(211,3,25)"/><text x="81.1653%" y="1007.50"></text></g><g><title>__GI___pthread_mutex_unlock (168 samples, 0.06%)</title><rect x="80.9011%" y="1045" width="0.0583%" height="15" fill="rgb(238,66,34)"/><text x="81.1511%" y="1055.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (165 samples, 0.06%)</title><rect x="80.9022%" y="1029" width="0.0572%" height="15" fill="rgb(223,188,11)"/><text x="81.1522%" y="1039.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (226 samples, 0.08%)</title><rect x="80.8917%" y="1077" width="0.0784%" height="15" fill="rgb(221,10,35)"/><text x="81.1417%" y="1087.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (212 samples, 0.07%)</title><rect x="80.8966%" y="1061" width="0.0736%" height="15" fill="rgb(223,18,44)"/><text x="81.1466%" y="1071.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (338 samples, 0.12%)</title><rect x="80.8831%" y="1093" width="0.1173%" height="15" fill="rgb(220,97,41)"/><text x="81.1331%" y="1103.50"></text></g><g><title>std::sys_common::poison::Flag::done (87 samples, 0.03%)</title><rect x="80.9702%" y="1077" width="0.0302%" height="15" fill="rgb(206,95,45)"/><text x="81.2202%" y="1087.50"></text></g><g><title>std::thread::panicking (75 samples, 0.03%)</title><rect x="80.9743%" y="1061" width="0.0260%" height="15" fill="rgb(209,96,13)"/><text x="81.2243%" y="1071.50"></text></g><g><title>std::panicking::panicking (61 samples, 0.02%)</title><rect x="80.9792%" y="1045" width="0.0212%" height="15" fill="rgb(237,39,34)"/><text x="81.2292%" y="1055.50"></text></g><g><title>std::panicking::panic_count::is_zero (45 samples, 0.02%)</title><rect x="80.9847%" y="1029" width="0.0156%" height="15" fill="rgb(213,49,47)"/><text x="81.2347%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (38 samples, 0.01%)</title><rect x="80.9872%" y="1013" width="0.0132%" height="15" fill="rgb(205,107,27)"/><text x="81.2372%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.01%)</title><rect x="80.9892%" y="997" width="0.0111%" height="15" fill="rgb(212,142,9)"/><text x="81.2392%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (367 samples, 0.13%)</title><rect x="80.8741%" y="1109" width="0.1273%" height="15" fill="rgb(226,182,0)"/><text x="81.1241%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.02%)</title><rect x="81.0284%" y="1093" width="0.0167%" height="15" fill="rgb(231,3,53)"/><text x="81.2784%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (92 samples, 0.03%)</title><rect x="81.0135%" y="1109" width="0.0319%" height="15" fill="rgb(246,111,28)"/><text x="81.2635%" y="1119.50"></text></g><g><title>__condvar_dec_grefs (37 samples, 0.01%)</title><rect x="81.1266%" y="1029" width="0.0128%" height="15" fill="rgb(254,183,7)"/><text x="81.3766%" y="1039.50"></text></g><g><title>__pthread_disable_asynccancel (29 samples, 0.01%)</title><rect x="81.1610%" y="1013" width="0.0101%" height="15" fill="rgb(247,177,28)"/><text x="81.4110%" y="1023.50"></text></g><g><title>native_write_msr (129 samples, 0.04%)</title><rect x="81.3636%" y="789" width="0.0448%" height="15" fill="rgb(244,43,1)"/><text x="81.6136%" y="799.50"></text></g><g><title>amd_pmu_disable_all (335 samples, 0.12%)</title><rect x="81.3438%" y="805" width="0.1162%" height="15" fill="rgb(207,2,35)"/><text x="81.5938%" y="815.50"></text></g><g><title>x86_pmu_disable_all (149 samples, 0.05%)</title><rect x="81.4084%" y="789" width="0.0517%" height="15" fill="rgb(213,83,22)"/><text x="81.6584%" y="799.50"></text></g><g><title>native_read_msr (94 samples, 0.03%)</title><rect x="81.4274%" y="773" width="0.0326%" height="15" fill="rgb(246,212,13)"/><text x="81.6774%" y="783.50"></text></g><g><title>perf_pmu_disable.part.0 (352 samples, 0.12%)</title><rect x="81.3417%" y="837" width="0.1221%" height="15" fill="rgb(213,127,46)"/><text x="81.5917%" y="847.50"></text></g><g><title>x86_pmu_disable (346 samples, 0.12%)</title><rect x="81.3438%" y="821" width="0.1200%" height="15" fill="rgb(219,215,39)"/><text x="81.5938%" y="831.50"></text></g><g><title>ctx_sched_out (411 samples, 0.14%)</title><rect x="81.3317%" y="853" width="0.1426%" height="15" fill="rgb(227,99,17)"/><text x="81.5817%" y="863.50"></text></g><g><title>__perf_event_task_sched_out (456 samples, 0.16%)</title><rect x="81.3185%" y="885" width="0.1582%" height="15" fill="rgb(208,155,18)"/><text x="81.5685%" y="895.50"></text></g><g><title>task_ctx_sched_out (418 samples, 0.15%)</title><rect x="81.3317%" y="869" width="0.1450%" height="15" fill="rgb(223,204,38)"/><text x="81.5817%" y="879.50"></text></g><g><title>update_load_avg (85 samples, 0.03%)</title><rect x="81.5315%" y="837" width="0.0295%" height="15" fill="rgb(212,114,21)"/><text x="81.7815%" y="847.50"></text></g><g><title>dequeue_entity (170 samples, 0.06%)</title><rect x="81.5041%" y="853" width="0.0590%" height="15" fill="rgb(250,74,13)"/><text x="81.7541%" y="863.50"></text></g><g><title>dequeue_task_fair (236 samples, 0.08%)</title><rect x="81.4934%" y="869" width="0.0819%" height="15" fill="rgb(234,7,1)"/><text x="81.7434%" y="879.50"></text></g><g><title>psi_task_change (244 samples, 0.08%)</title><rect x="81.5752%" y="869" width="0.0847%" height="15" fill="rgb(207,138,31)"/><text x="81.8252%" y="879.50"></text></g><g><title>record_times (30 samples, 0.01%)</title><rect x="81.6495%" y="853" width="0.0104%" height="15" fill="rgb(215,186,42)"/><text x="81.8995%" y="863.50"></text></g><g><title>deactivate_task (506 samples, 0.18%)</title><rect x="81.4847%" y="885" width="0.1756%" height="15" fill="rgb(229,205,49)"/><text x="81.7347%" y="895.50"></text></g><g><title>__perf_event_task_sched_in (296 samples, 0.10%)</title><rect x="81.7272%" y="869" width="0.1027%" height="15" fill="rgb(216,156,32)"/><text x="81.9772%" y="879.50"></text></g><g><title>perf_pmu_enable.part.0 (131 samples, 0.05%)</title><rect x="81.7845%" y="853" width="0.0455%" height="15" fill="rgb(238,7,21)"/><text x="82.0345%" y="863.50"></text></g><g><title>x86_pmu_enable (123 samples, 0.04%)</title><rect x="81.7872%" y="837" width="0.0427%" height="15" fill="rgb(249,190,22)"/><text x="82.0372%" y="847.50"></text></g><g><title>x86_pmu_enable_all (57 samples, 0.02%)</title><rect x="81.8101%" y="821" width="0.0198%" height="15" fill="rgb(253,51,31)"/><text x="82.0601%" y="831.50"></text></g><g><title>hrtimer_interrupt (32 samples, 0.01%)</title><rect x="81.8299%" y="837" width="0.0111%" height="15" fill="rgb(237,90,54)"/><text x="82.0799%" y="847.50"></text></g><g><title>apic_timer_interrupt (40 samples, 0.01%)</title><rect x="81.8299%" y="869" width="0.0139%" height="15" fill="rgb(250,214,33)"/><text x="82.0799%" y="879.50"></text></g><g><title>smp_apic_timer_interrupt (40 samples, 0.01%)</title><rect x="81.8299%" y="853" width="0.0139%" height="15" fill="rgb(237,10,49)"/><text x="82.0799%" y="863.50"></text></g><g><title>perf_pmu_enable.part.0 (117 samples, 0.04%)</title><rect x="81.8448%" y="869" width="0.0406%" height="15" fill="rgb(241,56,36)"/><text x="82.0948%" y="879.50"></text></g><g><title>finish_task_switch (652 samples, 0.23%)</title><rect x="81.6627%" y="885" width="0.2262%" height="15" fill="rgb(227,164,12)"/><text x="81.9127%" y="895.50"></text></g><g><title>newidle_balance (46 samples, 0.02%)</title><rect x="81.8976%" y="869" width="0.0160%" height="15" fill="rgb(249,149,35)"/><text x="82.1476%" y="879.50"></text></g><g><title>pick_next_task_fair (73 samples, 0.03%)</title><rect x="81.8920%" y="885" width="0.0253%" height="15" fill="rgb(238,227,50)"/><text x="82.1420%" y="895.50"></text></g><g><title>__update_idle_core (30 samples, 0.01%)</title><rect x="81.9323%" y="853" width="0.0104%" height="15" fill="rgb(235,102,45)"/><text x="82.1823%" y="863.50"></text></g><g><title>pick_next_task_idle (79 samples, 0.03%)</title><rect x="81.9173%" y="885" width="0.0274%" height="15" fill="rgb(211,10,38)"/><text x="82.1673%" y="895.50"></text></g><g><title>set_next_task_idle (40 samples, 0.01%)</title><rect x="81.9309%" y="869" width="0.0139%" height="15" fill="rgb(219,77,48)"/><text x="82.1809%" y="879.50"></text></g><g><title>__sched_text_start (1,927 samples, 0.67%)</title><rect x="81.2828%" y="901" width="0.6686%" height="15" fill="rgb(246,6,15)"/><text x="81.5328%" y="911.50"></text></g><g><title>futex_wait_queue_me (2,070 samples, 0.72%)</title><rect x="81.2436%" y="933" width="0.7182%" height="15" fill="rgb(207,220,2)"/><text x="81.4936%" y="943.50"></text></g><g><title>schedule (2,013 samples, 0.70%)</title><rect x="81.2633%" y="917" width="0.6984%" height="15" fill="rgb(242,48,14)"/><text x="81.5133%" y="927.50"></text></g><g><title>futex_wait_setup (86 samples, 0.03%)</title><rect x="81.9618%" y="933" width="0.0298%" height="15" fill="rgb(218,19,27)"/><text x="82.2118%" y="943.50"></text></g><g><title>futex_wait (2,279 samples, 0.79%)</title><rect x="81.2092%" y="949" width="0.7907%" height="15" fill="rgb(228,0,35)"/><text x="81.4592%" y="959.50"></text></g><g><title>do_futex (2,309 samples, 0.80%)</title><rect x="81.2005%" y="965" width="0.8011%" height="15" fill="rgb(244,142,54)"/><text x="81.4505%" y="975.50"></text></g><g><title>__x64_sys_futex (2,331 samples, 0.81%)</title><rect x="81.1943%" y="981" width="0.8088%" height="15" fill="rgb(243,217,40)"/><text x="81.4443%" y="991.50"></text></g><g><title>do_syscall_64 (2,424 samples, 0.84%)</title><rect x="81.1870%" y="997" width="0.8410%" height="15" fill="rgb(207,114,16)"/><text x="81.4370%" y="1007.50"></text></g><g><title>switch_fpu_return (64 samples, 0.02%)</title><rect x="82.0058%" y="981" width="0.0222%" height="15" fill="rgb(224,33,25)"/><text x="82.2558%" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2,454 samples, 0.85%)</title><rect x="81.1801%" y="1013" width="0.8514%" height="15" fill="rgb(230,93,54)"/><text x="81.4301%" y="1023.50"></text></g><g><title>futex_wait_cancelable (2,555 samples, 0.89%)</title><rect x="81.1530%" y="1029" width="0.8865%" height="15" fill="rgb(224,56,24)"/><text x="81.4030%" y="1039.50"></text></g><g><title>__pthread_cond_wait (2,711 samples, 0.94%)</title><rect x="81.0996%" y="1061" width="0.9406%" height="15" fill="rgb(235,189,50)"/><text x="81.3496%" y="1071.50"></text></g><g><title>__pthread_cond_wait_common (2,670 samples, 0.93%)</title><rect x="81.1138%" y="1045" width="0.9264%" height="15" fill="rgb(242,173,8)"/><text x="81.3638%" y="1055.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (2,746 samples, 0.95%)</title><rect x="81.0926%" y="1077" width="0.9527%" height="15" fill="rgb(209,206,10)"/><text x="81.3426%" y="1087.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (2,785 samples, 0.97%)</title><rect x="81.0867%" y="1093" width="0.9663%" height="15" fill="rgb(213,182,44)"/><text x="81.3367%" y="1103.50"></text></g><g><title>std::sync::condvar::Condvar::wait (2,996 samples, 1.04%)</title><rect x="81.0454%" y="1109" width="1.0395%" height="15" fill="rgb(243,51,15)"/><text x="81.2954%" y="1119.50"></text></g><g><title>std::sys_common::poison::Flag::get (92 samples, 0.03%)</title><rect x="82.0530%" y="1093" width="0.0319%" height="15" fill="rgb(241,13,14)"/><text x="82.3030%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (85 samples, 0.03%)</title><rect x="82.0554%" y="1077" width="0.0295%" height="15" fill="rgb(239,147,24)"/><text x="82.3054%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_load (44 samples, 0.02%)</title><rect x="82.0697%" y="1061" width="0.0153%" height="15" fill="rgb(223,129,16)"/><text x="82.3197%" y="1071.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (48 samples, 0.02%)</title><rect x="82.1016%" y="1061" width="0.0167%" height="15" fill="rgb(209,169,13)"/><text x="82.3516%" y="1071.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (83 samples, 0.03%)</title><rect x="82.0974%" y="1077" width="0.0288%" height="15" fill="rgb(235,159,41)"/><text x="82.3474%" y="1087.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (3,741 samples, 1.30%)</title><rect x="80.8407%" y="1125" width="1.2980%" height="15" fill="rgb(223,219,48)"/><text x="81.0907%" y="1135.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (153 samples, 0.05%)</title><rect x="82.0856%" y="1109" width="0.0531%" height="15" fill="rgb(236,80,13)"/><text x="82.3356%" y="1119.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (138 samples, 0.05%)</title><rect x="82.0908%" y="1093" width="0.0479%" height="15" fill="rgb(213,5,6)"/><text x="82.3408%" y="1103.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (36 samples, 0.01%)</title><rect x="82.1262%" y="1077" width="0.0125%" height="15" fill="rgb(205,59,21)"/><text x="82.3762%" y="1087.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (30 samples, 0.01%)</title><rect x="82.1283%" y="1061" width="0.0104%" height="15" fill="rgb(247,137,35)"/><text x="82.3783%" y="1071.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (42 samples, 0.01%)</title><rect x="82.2136%" y="1077" width="0.0146%" height="15" fill="rgb(242,208,28)"/><text x="82.4636%" y="1087.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (32 samples, 0.01%)</title><rect x="82.2282%" y="1077" width="0.0111%" height="15" fill="rgb(245,62,25)"/><text x="82.4782%" y="1087.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (181 samples, 0.06%)</title><rect x="82.1769%" y="1109" width="0.0628%" height="15" fill="rgb(233,99,54)"/><text x="82.4269%" y="1119.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (136 samples, 0.05%)</title><rect x="82.1925%" y="1093" width="0.0472%" height="15" fill="rgb(213,10,37)"/><text x="82.4425%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (49 samples, 0.02%)</title><rect x="82.2570%" y="1109" width="0.0170%" height="15" fill="rgb(235,143,30)"/><text x="82.5070%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_swap (36 samples, 0.01%)</title><rect x="82.2615%" y="1093" width="0.0125%" height="15" fill="rgb(250,146,33)"/><text x="82.5115%" y="1103.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (391 samples, 0.14%)</title><rect x="82.1387%" y="1125" width="0.1357%" height="15" fill="rgb(226,198,42)"/><text x="82.3887%" y="1135.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (106 samples, 0.04%)</title><rect x="82.2810%" y="1109" width="0.0368%" height="15" fill="rgb(222,55,6)"/><text x="82.5310%" y="1119.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (57 samples, 0.02%)</title><rect x="82.2980%" y="1093" width="0.0198%" height="15" fill="rgb(213,224,31)"/><text x="82.5480%" y="1103.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (8,617 samples, 2.99%)</title><rect x="79.3794%" y="1157" width="2.9897%" height="15" fill="rgb(226,103,35)"/><text x="79.6294%" y="1167.50">&lt;to..</text></g><g><title>tokio::runtime::park::Inner::park (8,403 samples, 2.92%)</title><rect x="79.4536%" y="1141" width="2.9155%" height="15" fill="rgb(205,66,45)"/><text x="79.7036%" y="1151.50">to..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (273 samples, 0.09%)</title><rect x="82.2744%" y="1125" width="0.0947%" height="15" fill="rgb(226,51,42)"/><text x="82.5244%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (148 samples, 0.05%)</title><rect x="82.3177%" y="1109" width="0.0513%" height="15" fill="rgb(206,69,1)"/><text x="82.5677%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (101 samples, 0.04%)</title><rect x="82.3340%" y="1093" width="0.0350%" height="15" fill="rgb(213,228,47)"/><text x="82.5840%" y="1103.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (73 samples, 0.03%)</title><rect x="82.4340%" y="1109" width="0.0253%" height="15" fill="rgb(224,204,18)"/><text x="82.6840%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.02%)</title><rect x="82.5668%" y="1013" width="0.0194%" height="15" fill="rgb(253,187,47)"/><text x="82.8168%" y="1023.50"></text></g><g><title>core::ptr::read (117 samples, 0.04%)</title><rect x="82.5464%" y="1029" width="0.0406%" height="15" fill="rgb(232,61,2)"/><text x="82.7964%" y="1039.50"></text></g><g><title>core::mem::swap (272 samples, 0.09%)</title><rect x="82.4978%" y="1061" width="0.0944%" height="15" fill="rgb(213,132,35)"/><text x="82.7478%" y="1071.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (250 samples, 0.09%)</title><rect x="82.5054%" y="1045" width="0.0867%" height="15" fill="rgb(247,33,21)"/><text x="82.7554%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (360 samples, 0.12%)</title><rect x="82.4676%" y="1093" width="0.1249%" height="15" fill="rgb(233,71,46)"/><text x="82.7176%" y="1103.50"></text></g><g><title>core::mem::replace (305 samples, 0.11%)</title><rect x="82.4867%" y="1077" width="0.1058%" height="15" fill="rgb(222,173,43)"/><text x="82.7367%" y="1087.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (408 samples, 0.14%)</title><rect x="82.4593%" y="1109" width="0.1416%" height="15" fill="rgb(249,218,47)"/><text x="82.7093%" y="1119.50"></text></g><g><title>core::cell::BorrowRefMut::new (535 samples, 0.19%)</title><rect x="82.4156%" y="1125" width="0.1856%" height="15" fill="rgb(254,185,48)"/><text x="82.6656%" y="1135.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (618 samples, 0.21%)</title><rect x="82.3913%" y="1141" width="0.2144%" height="15" fill="rgb(252,165,50)"/><text x="82.6413%" y="1151.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (42 samples, 0.01%)</title><rect x="82.6057%" y="1141" width="0.0146%" height="15" fill="rgb(206,219,6)"/><text x="82.8557%" y="1151.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (720 samples, 0.25%)</title><rect x="82.3708%" y="1157" width="0.2498%" height="15" fill="rgb(212,212,45)"/><text x="82.6208%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (68 samples, 0.02%)</title><rect x="82.6206%" y="1157" width="0.0236%" height="15" fill="rgb(221,31,9)"/><text x="82.8706%" y="1167.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (81 samples, 0.03%)</title><rect x="82.6966%" y="1125" width="0.0281%" height="15" fill="rgb(234,198,39)"/><text x="82.9466%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (59 samples, 0.02%)</title><rect x="82.8670%" y="1061" width="0.0205%" height="15" fill="rgb(252,145,46)"/><text x="83.1170%" y="1071.50"></text></g><g><title>core::ptr::read (172 samples, 0.06%)</title><rect x="82.8288%" y="1077" width="0.0597%" height="15" fill="rgb(237,149,0)"/><text x="83.0788%" y="1087.50"></text></g><g><title>core::mem::replace (500 samples, 0.17%)</title><rect x="82.7251%" y="1125" width="0.1735%" height="15" fill="rgb(229,65,5)"/><text x="82.9751%" y="1135.50"></text></g><g><title>core::mem::swap (430 samples, 0.15%)</title><rect x="82.7493%" y="1109" width="0.1492%" height="15" fill="rgb(235,60,36)"/><text x="82.9993%" y="1119.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (391 samples, 0.14%)</title><rect x="82.7629%" y="1093" width="0.1357%" height="15" fill="rgb(222,47,18)"/><text x="83.0129%" y="1103.50"></text></g><g><title>core::ptr::write (29 samples, 0.01%)</title><rect x="82.8885%" y="1077" width="0.0101%" height="15" fill="rgb(235,114,22)"/><text x="83.1385%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (734 samples, 0.25%)</title><rect x="82.6442%" y="1157" width="0.2547%" height="15" fill="rgb(209,167,11)"/><text x="82.8942%" y="1167.50"></text></g><g><title>core::mem::take (679 samples, 0.24%)</title><rect x="82.6633%" y="1141" width="0.2356%" height="15" fill="rgb(251,73,18)"/><text x="82.9133%" y="1151.50"></text></g><g><title>core::ptr::read (42 samples, 0.01%)</title><rect x="83.0057%" y="1029" width="0.0146%" height="15" fill="rgb(217,60,17)"/><text x="83.2557%" y="1039.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (127 samples, 0.04%)</title><rect x="82.9780%" y="1093" width="0.0441%" height="15" fill="rgb(224,36,37)"/><text x="83.2280%" y="1103.50"></text></g><g><title>core::mem::replace (106 samples, 0.04%)</title><rect x="82.9853%" y="1077" width="0.0368%" height="15" fill="rgb(211,21,32)"/><text x="83.2353%" y="1087.50"></text></g><g><title>core::mem::swap (98 samples, 0.03%)</title><rect x="82.9881%" y="1061" width="0.0340%" height="15" fill="rgb(231,55,48)"/><text x="83.2381%" y="1071.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (94 samples, 0.03%)</title><rect x="82.9894%" y="1045" width="0.0326%" height="15" fill="rgb(227,42,18)"/><text x="83.2394%" y="1055.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (192 samples, 0.07%)</title><rect x="82.9572%" y="1125" width="0.0666%" height="15" fill="rgb(217,2,27)"/><text x="83.2072%" y="1135.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (143 samples, 0.05%)</title><rect x="82.9742%" y="1109" width="0.0496%" height="15" fill="rgb(251,138,23)"/><text x="83.2242%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place (362 samples, 0.13%)</title><rect x="82.8989%" y="1157" width="0.1256%" height="15" fill="rgb(226,184,11)"/><text x="83.1489%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place (247 samples, 0.09%)</title><rect x="82.9388%" y="1141" width="0.0857%" height="15" fill="rgb(242,142,12)"/><text x="83.1888%" y="1151.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (30 samples, 0.01%)</title><rect x="83.0245%" y="1157" width="0.0104%" height="15" fill="rgb(234,187,18)"/><text x="83.2745%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (133 samples, 0.05%)</title><rect x="83.0554%" y="1141" width="0.0461%" height="15" fill="rgb(237,44,42)"/><text x="83.3054%" y="1151.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (98 samples, 0.03%)</title><rect x="83.0675%" y="1125" width="0.0340%" height="15" fill="rgb(211,90,23)"/><text x="83.3175%" y="1135.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (50 samples, 0.02%)</title><rect x="83.0842%" y="1109" width="0.0173%" height="15" fill="rgb(207,81,18)"/><text x="83.3342%" y="1119.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (34 samples, 0.01%)</title><rect x="83.1268%" y="1109" width="0.0118%" height="15" fill="rgb(222,107,28)"/><text x="83.3768%" y="1119.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u16::AtomicU16 as core::ops::deref::Deref&gt;::deref (61 samples, 0.02%)</title><rect x="83.1178%" y="1125" width="0.0212%" height="15" fill="rgb(237,83,52)"/><text x="83.3678%" y="1135.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u32::AtomicU32 as core::ops::deref::Deref&gt;::deref (62 samples, 0.02%)</title><rect x="83.1390%" y="1125" width="0.0215%" height="15" fill="rgb(208,67,11)"/><text x="83.3890%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (44 samples, 0.02%)</title><rect x="83.1744%" y="1109" width="0.0153%" height="15" fill="rgb(249,157,49)"/><text x="83.4244%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU16::load (83 samples, 0.03%)</title><rect x="83.1612%" y="1125" width="0.0288%" height="15" fill="rgb(243,200,1)"/><text x="83.4112%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (50 samples, 0.02%)</title><rect x="83.2039%" y="1109" width="0.0173%" height="15" fill="rgb(225,162,37)"/><text x="83.4539%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (91 samples, 0.03%)</title><rect x="83.1900%" y="1125" width="0.0316%" height="15" fill="rgb(242,92,13)"/><text x="83.4400%" y="1135.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::is_stealable (576 samples, 0.20%)</title><rect x="83.0352%" y="1157" width="0.1998%" height="15" fill="rgb(220,43,36)"/><text x="83.2852%" y="1167.50"></text></g><g><title>tokio::runtime::queue::Inner&lt;T&gt;::is_empty (385 samples, 0.13%)</title><rect x="83.1015%" y="1141" width="0.1336%" height="15" fill="rgb(213,165,48)"/><text x="83.3515%" y="1151.50"></text></g><g><title>tokio::runtime::queue::unpack (39 samples, 0.01%)</title><rect x="83.2216%" y="1125" width="0.0135%" height="15" fill="rgb(227,200,9)"/><text x="83.4716%" y="1135.50"></text></g><g><title>__pthread_cond_signal (48 samples, 0.02%)</title><rect x="83.2403%" y="1093" width="0.0167%" height="15" fill="rgb(221,222,28)"/><text x="83.4903%" y="1103.50"></text></g><g><title>futex_wake (46 samples, 0.02%)</title><rect x="83.2410%" y="1077" width="0.0160%" height="15" fill="rgb(223,142,26)"/><text x="83.4910%" y="1087.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (46 samples, 0.02%)</title><rect x="83.2410%" y="1061" width="0.0160%" height="15" fill="rgb(243,46,9)"/><text x="83.4910%" y="1071.50"></text></g><g><title>do_syscall_64 (46 samples, 0.02%)</title><rect x="83.2410%" y="1045" width="0.0160%" height="15" fill="rgb(250,56,11)"/><text x="83.4910%" y="1055.50"></text></g><g><title>__x64_sys_futex (44 samples, 0.02%)</title><rect x="83.2417%" y="1029" width="0.0153%" height="15" fill="rgb(229,113,5)"/><text x="83.4917%" y="1039.50"></text></g><g><title>do_futex (44 samples, 0.02%)</title><rect x="83.2417%" y="1013" width="0.0153%" height="15" fill="rgb(244,108,28)"/><text x="83.4917%" y="1023.50"></text></g><g><title>futex_wake (43 samples, 0.01%)</title><rect x="83.2420%" y="997" width="0.0149%" height="15" fill="rgb(242,119,50)"/><text x="83.4920%" y="1007.50"></text></g><g><title>wake_up_q (38 samples, 0.01%)</title><rect x="83.2438%" y="981" width="0.0132%" height="15" fill="rgb(224,164,23)"/><text x="83.4938%" y="991.50"></text></g><g><title>try_to_wake_up (36 samples, 0.01%)</title><rect x="83.2445%" y="965" width="0.0125%" height="15" fill="rgb(214,227,44)"/><text x="83.4945%" y="975.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (67 samples, 0.02%)</title><rect x="83.2365%" y="1141" width="0.0232%" height="15" fill="rgb(238,202,4)"/><text x="83.4865%" y="1151.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (60 samples, 0.02%)</title><rect x="83.2389%" y="1125" width="0.0208%" height="15" fill="rgb(213,190,30)"/><text x="83.4889%" y="1135.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (57 samples, 0.02%)</title><rect x="83.2399%" y="1109" width="0.0198%" height="15" fill="rgb(239,15,2)"/><text x="83.4899%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (11,551 samples, 4.01%)</title><rect x="79.2711%" y="1173" width="4.0077%" height="15" fill="rgb(249,229,4)"/><text x="79.5211%" y="1183.50">toki..</text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (126 samples, 0.04%)</title><rect x="83.2351%" y="1157" width="0.0437%" height="15" fill="rgb(239,75,44)"/><text x="83.4851%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (55 samples, 0.02%)</title><rect x="83.2597%" y="1141" width="0.0191%" height="15" fill="rgb(251,206,23)"/><text x="83.5097%" y="1151.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (56 samples, 0.02%)</title><rect x="83.3218%" y="1141" width="0.0194%" height="15" fill="rgb(215,208,0)"/><text x="83.5718%" y="1151.50"></text></g><g><title>__GI___pthread_mutex_unlock (42 samples, 0.01%)</title><rect x="83.3673%" y="1077" width="0.0146%" height="15" fill="rgb(230,75,50)"/><text x="83.6173%" y="1087.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (41 samples, 0.01%)</title><rect x="83.3676%" y="1061" width="0.0142%" height="15" fill="rgb(246,180,39)"/><text x="83.6176%" y="1071.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (65 samples, 0.02%)</title><rect x="83.3631%" y="1109" width="0.0226%" height="15" fill="rgb(249,175,24)"/><text x="83.6131%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (62 samples, 0.02%)</title><rect x="83.3642%" y="1093" width="0.0215%" height="15" fill="rgb(247,176,22)"/><text x="83.6142%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (195 samples, 0.07%)</title><rect x="83.3413%" y="1141" width="0.0677%" height="15" fill="rgb(241,100,24)"/><text x="83.5913%" y="1151.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 samples, 0.06%)</title><rect x="83.3520%" y="1125" width="0.0569%" height="15" fill="rgb(233,4,35)"/><text x="83.6020%" y="1135.50"></text></g><g><title>std::sys_common::poison::Flag::done (67 samples, 0.02%)</title><rect x="83.3857%" y="1109" width="0.0232%" height="15" fill="rgb(211,164,46)"/><text x="83.6357%" y="1119.50"></text></g><g><title>std::thread::panicking (58 samples, 0.02%)</title><rect x="83.3888%" y="1093" width="0.0201%" height="15" fill="rgb(242,99,53)"/><text x="83.6388%" y="1103.50"></text></g><g><title>std::panicking::panicking (48 samples, 0.02%)</title><rect x="83.3923%" y="1077" width="0.0167%" height="15" fill="rgb(243,45,33)"/><text x="83.6423%" y="1087.50"></text></g><g><title>std::panicking::panic_count::is_zero (33 samples, 0.01%)</title><rect x="83.3975%" y="1061" width="0.0114%" height="15" fill="rgb(217,55,21)"/><text x="83.6475%" y="1071.50"></text></g><g><title>std::sys_common::poison::Flag::get (41 samples, 0.01%)</title><rect x="83.4610%" y="1077" width="0.0142%" height="15" fill="rgb(245,145,46)"/><text x="83.7110%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (34 samples, 0.01%)</title><rect x="83.4634%" y="1061" width="0.0118%" height="15" fill="rgb(215,112,45)"/><text x="83.7134%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.01%)</title><rect x="83.4963%" y="1013" width="0.0101%" height="15" fill="rgb(228,104,16)"/><text x="83.7463%" y="1023.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (149 samples, 0.05%)</title><rect x="83.4551%" y="1093" width="0.0517%" height="15" fill="rgb(239,186,38)"/><text x="83.7051%" y="1103.50"></text></g><g><title>std::thread::panicking (91 samples, 0.03%)</title><rect x="83.4752%" y="1077" width="0.0316%" height="15" fill="rgb(228,38,35)"/><text x="83.7252%" y="1087.50"></text></g><g><title>std::panicking::panicking (79 samples, 0.03%)</title><rect x="83.4793%" y="1061" width="0.0274%" height="15" fill="rgb(251,42,40)"/><text x="83.7293%" y="1071.50"></text></g><g><title>std::panicking::panic_count::is_zero (59 samples, 0.02%)</title><rect x="83.4863%" y="1045" width="0.0205%" height="15" fill="rgb(210,51,19)"/><text x="83.7363%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (46 samples, 0.02%)</title><rect x="83.4908%" y="1029" width="0.0160%" height="15" fill="rgb(236,94,42)"/><text x="83.7408%" y="1039.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (234 samples, 0.08%)</title><rect x="83.4443%" y="1109" width="0.0812%" height="15" fill="rgb(239,167,16)"/><text x="83.6943%" y="1119.50"></text></g><g><title>std::sys_common::poison::map_result (54 samples, 0.02%)</title><rect x="83.5068%" y="1093" width="0.0187%" height="15" fill="rgb(252,175,31)"/><text x="83.7568%" y="1103.50"></text></g><g><title>futex_wait_queue_me (62 samples, 0.02%)</title><rect x="83.5619%" y="965" width="0.0215%" height="15" fill="rgb(206,166,30)"/><text x="83.8119%" y="975.50"></text></g><g><title>schedule (62 samples, 0.02%)</title><rect x="83.5619%" y="949" width="0.0215%" height="15" fill="rgb(206,209,37)"/><text x="83.8119%" y="959.50"></text></g><g><title>__sched_text_start (62 samples, 0.02%)</title><rect x="83.5619%" y="933" width="0.0215%" height="15" fill="rgb(226,91,4)"/><text x="83.8119%" y="943.50"></text></g><g><title>__x64_sys_futex (72 samples, 0.02%)</title><rect x="83.5612%" y="1013" width="0.0250%" height="15" fill="rgb(222,167,0)"/><text x="83.8112%" y="1023.50"></text></g><g><title>do_futex (71 samples, 0.02%)</title><rect x="83.5616%" y="997" width="0.0246%" height="15" fill="rgb(211,70,14)"/><text x="83.8116%" y="1007.50"></text></g><g><title>futex_wait (71 samples, 0.02%)</title><rect x="83.5616%" y="981" width="0.0246%" height="15" fill="rgb(214,84,42)"/><text x="83.8116%" y="991.50"></text></g><g><title>__lll_lock_wait (82 samples, 0.03%)</title><rect x="83.5581%" y="1061" width="0.0285%" height="15" fill="rgb(235,157,37)"/><text x="83.8081%" y="1071.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (76 samples, 0.03%)</title><rect x="83.5602%" y="1045" width="0.0264%" height="15" fill="rgb(225,13,6)"/><text x="83.8102%" y="1055.50"></text></g><g><title>do_syscall_64 (73 samples, 0.03%)</title><rect x="83.5612%" y="1029" width="0.0253%" height="15" fill="rgb(205,202,1)"/><text x="83.8112%" y="1039.50"></text></g><g><title>__GI___pthread_mutex_lock (148 samples, 0.05%)</title><rect x="83.5359%" y="1077" width="0.0513%" height="15" fill="rgb(232,195,26)"/><text x="83.7859%" y="1087.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (207 samples, 0.07%)</title><rect x="83.5255%" y="1109" width="0.0718%" height="15" fill="rgb(208,102,26)"/><text x="83.7755%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (185 samples, 0.06%)</title><rect x="83.5331%" y="1093" width="0.0642%" height="15" fill="rgb(215,41,39)"/><text x="83.7831%" y="1103.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_closed (850 samples, 0.29%)</title><rect x="83.3027%" y="1157" width="0.2949%" height="15" fill="rgb(247,139,11)"/><text x="83.5527%" y="1167.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (543 samples, 0.19%)</title><rect x="83.4093%" y="1141" width="0.1884%" height="15" fill="rgb(243,99,6)"/><text x="83.6593%" y="1151.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (497 samples, 0.17%)</title><rect x="83.4252%" y="1125" width="0.1724%" height="15" fill="rgb(230,168,48)"/><text x="83.6752%" y="1135.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (37 samples, 0.01%)</title><rect x="83.6736%" y="1125" width="0.0128%" height="15" fill="rgb(238,227,13)"/><text x="83.9236%" y="1135.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::from_error (34 samples, 0.01%)</title><rect x="83.6865%" y="1125" width="0.0118%" height="15" fill="rgb(209,109,13)"/><text x="83.9365%" y="1135.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (63 samples, 0.02%)</title><rect x="83.7097%" y="1109" width="0.0219%" height="15" fill="rgb(228,195,1)"/><text x="83.9597%" y="1119.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (97 samples, 0.03%)</title><rect x="83.6983%" y="1125" width="0.0337%" height="15" fill="rgb(230,218,0)"/><text x="83.9483%" y="1135.50"></text></g><g><title>&lt;tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (261 samples, 0.09%)</title><rect x="83.6570%" y="1141" width="0.0906%" height="15" fill="rgb(206,1,45)"/><text x="83.9070%" y="1151.50"></text></g><g><title>&lt;tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain::Iter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.02%)</title><rect x="83.7684%" y="1125" width="0.0243%" height="15" fill="rgb(209,124,26)"/><text x="84.0184%" y="1135.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (37 samples, 0.01%)</title><rect x="83.7798%" y="1109" width="0.0128%" height="15" fill="rgb(220,59,8)"/><text x="84.0298%" y="1119.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.01%)</title><rect x="83.8506%" y="997" width="0.0108%" height="15" fill="rgb(251,41,37)"/><text x="84.1006%" y="1007.50"></text></g><g><title>_int_free (48 samples, 0.02%)</title><rect x="83.8804%" y="965" width="0.0167%" height="15" fill="rgb(239,152,21)"/><text x="84.1304%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (103 samples, 0.04%)</title><rect x="83.8641%" y="981" width="0.0357%" height="15" fill="rgb(226,32,1)"/><text x="84.1141%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (119 samples, 0.04%)</title><rect x="83.8613%" y="997" width="0.0413%" height="15" fill="rgb(230,154,36)"/><text x="84.1113%" y="1007.50"></text></g><g><title>alloc::alloc::box_free (229 samples, 0.08%)</title><rect x="83.8409%" y="1013" width="0.0795%" height="15" fill="rgb(208,228,43)"/><text x="84.0909%" y="1023.50"></text></g><g><title>core::mem::drop (437 samples, 0.15%)</title><rect x="83.8343%" y="1045" width="0.1516%" height="15" fill="rgb(214,203,3)"/><text x="84.0843%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (435 samples, 0.15%)</title><rect x="83.8350%" y="1029" width="0.1509%" height="15" fill="rgb(207,149,29)"/><text x="84.0850%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (188 samples, 0.07%)</title><rect x="83.9207%" y="1013" width="0.0652%" height="15" fill="rgb(250,105,7)"/><text x="84.1707%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place (179 samples, 0.06%)</title><rect x="83.9238%" y="997" width="0.0621%" height="15" fill="rgb(232,222,16)"/><text x="84.1738%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (159 samples, 0.06%)</title><rect x="83.9307%" y="981" width="0.0552%" height="15" fill="rgb(209,32,24)"/><text x="84.1807%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (138 samples, 0.05%)</title><rect x="83.9380%" y="965" width="0.0479%" height="15" fill="rgb(225,13,6)"/><text x="84.1880%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (111 samples, 0.04%)</title><rect x="83.9474%" y="949" width="0.0385%" height="15" fill="rgb(245,226,26)"/><text x="84.1974%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (74 samples, 0.03%)</title><rect x="83.9602%" y="933" width="0.0257%" height="15" fill="rgb(229,178,27)"/><text x="84.2102%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (46 samples, 0.02%)</title><rect x="83.9699%" y="917" width="0.0160%" height="15" fill="rgb(205,227,28)"/><text x="84.2199%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.01%)</title><rect x="83.9720%" y="901" width="0.0139%" height="15" fill="rgb(210,191,45)"/><text x="84.2220%" y="911.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::with_mut (76 samples, 0.03%)</title><rect x="83.9967%" y="1045" width="0.0264%" height="15" fill="rgb(206,124,16)"/><text x="84.2467%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (65 samples, 0.02%)</title><rect x="84.0005%" y="1029" width="0.0226%" height="15" fill="rgb(210,162,0)"/><text x="84.2505%" y="1039.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::with_mut (38 samples, 0.01%)</title><rect x="84.0230%" y="1045" width="0.0132%" height="15" fill="rgb(211,54,38)"/><text x="84.2730%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (34 samples, 0.01%)</title><rect x="84.0244%" y="1029" width="0.0118%" height="15" fill="rgb(248,192,3)"/><text x="84.2744%" y="1039.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (667 samples, 0.23%)</title><rect x="83.8180%" y="1061" width="0.2314%" height="15" fill="rgb(233,187,18)"/><text x="84.0680%" y="1071.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::dealloc (739 samples, 0.26%)</title><rect x="83.8041%" y="1093" width="0.2564%" height="15" fill="rgb(237,208,14)"/><text x="84.0541%" y="1103.50"></text></g><g><title>tokio::runtime::task::raw::dealloc (714 samples, 0.25%)</title><rect x="83.8128%" y="1077" width="0.2477%" height="15" fill="rgb(212,77,1)"/><text x="84.0628%" y="1087.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::from_raw (32 samples, 0.01%)</title><rect x="84.0494%" y="1061" width="0.0111%" height="15" fill="rgb(210,163,22)"/><text x="84.2994%" y="1071.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as core::ops::drop::Drop&gt;::drop (803 samples, 0.28%)</title><rect x="83.7958%" y="1109" width="0.2786%" height="15" fill="rgb(250,58,28)"/><text x="84.0458%" y="1119.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (40 samples, 0.01%)</title><rect x="84.0605%" y="1093" width="0.0139%" height="15" fill="rgb(254,28,41)"/><text x="84.3105%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (813 samples, 0.28%)</title><rect x="83.7926%" y="1125" width="0.2821%" height="15" fill="rgb(237,162,36)"/><text x="84.0426%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place (941 samples, 0.33%)</title><rect x="83.7493%" y="1141" width="0.3265%" height="15" fill="rgb(232,56,6)"/><text x="83.9993%" y="1151.50"></text></g><g><title>&lt;tokio::loom::std::atomic_ptr::AtomicPtr&lt;T&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.01%)</title><rect x="84.0962%" y="1125" width="0.0114%" height="15" fill="rgb(216,127,42)"/><text x="84.3462%" y="1135.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (69 samples, 0.02%)</title><rect x="84.1170%" y="1109" width="0.0239%" height="15" fill="rgb(241,69,15)"/><text x="84.3670%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (99 samples, 0.03%)</title><rect x="84.1077%" y="1125" width="0.0343%" height="15" fill="rgb(227,180,19)"/><text x="84.3577%" y="1135.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (30 samples, 0.01%)</title><rect x="84.1524%" y="1109" width="0.0104%" height="15" fill="rgb(231,188,29)"/><text x="84.4024%" y="1119.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::drain (315 samples, 0.11%)</title><rect x="84.0803%" y="1141" width="0.1093%" height="15" fill="rgb(224,176,27)"/><text x="84.3303%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (137 samples, 0.05%)</title><rect x="84.1420%" y="1125" width="0.0475%" height="15" fill="rgb(249,214,19)"/><text x="84.3920%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_swap (77 samples, 0.03%)</title><rect x="84.1628%" y="1109" width="0.0267%" height="15" fill="rgb(240,0,4)"/><text x="84.4128%" y="1119.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (121 samples, 0.04%)</title><rect x="84.2052%" y="1125" width="0.0420%" height="15" fill="rgb(233,28,41)"/><text x="84.4552%" y="1135.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (79 samples, 0.03%)</title><rect x="84.2197%" y="1109" width="0.0274%" height="15" fill="rgb(220,90,51)"/><text x="84.4697%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (51 samples, 0.02%)</title><rect x="84.2295%" y="1093" width="0.0177%" height="15" fill="rgb(250,52,22)"/><text x="84.4795%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::remote (168 samples, 0.06%)</title><rect x="84.1896%" y="1141" width="0.0583%" height="15" fill="rgb(231,152,36)"/><text x="84.4396%" y="1151.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (42 samples, 0.01%)</title><rect x="84.2638%" y="1125" width="0.0146%" height="15" fill="rgb(250,218,4)"/><text x="84.5138%" y="1135.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::pointers (118 samples, 0.04%)</title><rect x="84.2891%" y="1125" width="0.0409%" height="15" fill="rgb(210,38,21)"/><text x="84.5391%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (46 samples, 0.02%)</title><rect x="84.3141%" y="1109" width="0.0160%" height="15" fill="rgb(230,75,13)"/><text x="84.5641%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (29 samples, 0.01%)</title><rect x="84.3332%" y="1125" width="0.0101%" height="15" fill="rgb(250,68,53)"/><text x="84.5832%" y="1135.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::drain_pending_drop (2,150 samples, 0.75%)</title><rect x="83.5977%" y="1157" width="0.7460%" height="15" fill="rgb(250,210,16)"/><text x="83.8477%" y="1167.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (276 samples, 0.10%)</title><rect x="84.2479%" y="1141" width="0.0958%" height="15" fill="rgb(240,132,5)"/><text x="84.4979%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (3,118 samples, 1.08%)</title><rect x="83.2788%" y="1173" width="1.0818%" height="15" fill="rgb(222,148,48)"/><text x="83.5288%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::inject (49 samples, 0.02%)</title><rect x="84.3436%" y="1157" width="0.0170%" height="15" fill="rgb(247,181,24)"/><text x="84.5936%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.01%)</title><rect x="84.3478%" y="1141" width="0.0128%" height="15" fill="rgb(239,5,31)"/><text x="84.5978%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.01%)</title><rect x="84.3814%" y="1157" width="0.0101%" height="15" fill="rgb(241,152,38)"/><text x="84.6314%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (44 samples, 0.02%)</title><rect x="84.4428%" y="1109" width="0.0153%" height="15" fill="rgb(246,200,37)"/><text x="84.6928%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (40 samples, 0.01%)</title><rect x="84.4591%" y="1109" width="0.0139%" height="15" fill="rgb(243,210,26)"/><text x="84.7091%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (127 samples, 0.04%)</title><rect x="84.4304%" y="1125" width="0.0441%" height="15" fill="rgb(222,22,22)"/><text x="84.6804%" y="1135.50"></text></g><g><title>core::slice::raw::from_raw_parts (68 samples, 0.02%)</title><rect x="84.4744%" y="1125" width="0.0236%" height="15" fill="rgb(208,129,28)"/><text x="84.7244%" y="1135.50"></text></g><g><title>core::ptr::slice_from_raw_parts (39 samples, 0.01%)</title><rect x="84.4845%" y="1109" width="0.0135%" height="15" fill="rgb(254,169,28)"/><text x="84.7345%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (222 samples, 0.08%)</title><rect x="84.4213%" y="1141" width="0.0770%" height="15" fill="rgb(225,45,17)"/><text x="84.6713%" y="1151.50"></text></g><g><title>activate_task (42 samples, 0.01%)</title><rect x="84.5844%" y="917" width="0.0146%" height="15" fill="rgb(232,199,2)"/><text x="84.8344%" y="927.50"></text></g><g><title>ttwu_do_activate (44 samples, 0.02%)</title><rect x="84.5844%" y="933" width="0.0153%" height="15" fill="rgb(235,33,40)"/><text x="84.8344%" y="943.50"></text></g><g><title>futex_wake (183 samples, 0.06%)</title><rect x="84.5379%" y="981" width="0.0635%" height="15" fill="rgb(237,89,50)"/><text x="84.7879%" y="991.50"></text></g><g><title>wake_up_q (174 samples, 0.06%)</title><rect x="84.5410%" y="965" width="0.0604%" height="15" fill="rgb(238,126,5)"/><text x="84.7910%" y="975.50"></text></g><g><title>try_to_wake_up (172 samples, 0.06%)</title><rect x="84.5417%" y="949" width="0.0597%" height="15" fill="rgb(247,214,42)"/><text x="84.7917%" y="959.50"></text></g><g><title>do_futex (186 samples, 0.06%)</title><rect x="84.5372%" y="997" width="0.0645%" height="15" fill="rgb(238,60,45)"/><text x="84.7872%" y="1007.50"></text></g><g><title>__x64_sys_futex (190 samples, 0.07%)</title><rect x="84.5362%" y="1013" width="0.0659%" height="15" fill="rgb(225,69,44)"/><text x="84.7862%" y="1023.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (194 samples, 0.07%)</title><rect x="84.5355%" y="1045" width="0.0673%" height="15" fill="rgb(241,13,44)"/><text x="84.7855%" y="1055.50"></text></g><g><title>do_syscall_64 (194 samples, 0.07%)</title><rect x="84.5355%" y="1029" width="0.0673%" height="15" fill="rgb(227,121,22)"/><text x="84.7855%" y="1039.50"></text></g><g><title>__GI___pthread_mutex_unlock (210 samples, 0.07%)</title><rect x="84.5306%" y="1077" width="0.0729%" height="15" fill="rgb(231,160,23)"/><text x="84.7806%" y="1087.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (209 samples, 0.07%)</title><rect x="84.5310%" y="1061" width="0.0725%" height="15" fill="rgb(250,179,43)"/><text x="84.7810%" y="1071.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (227 samples, 0.08%)</title><rect x="84.5275%" y="1109" width="0.0788%" height="15" fill="rgb(233,54,46)"/><text x="84.7775%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (224 samples, 0.08%)</title><rect x="84.5285%" y="1093" width="0.0777%" height="15" fill="rgb(247,120,42)"/><text x="84.7785%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (343 samples, 0.12%)</title><rect x="84.5091%" y="1141" width="0.1190%" height="15" fill="rgb(221,219,12)"/><text x="84.7591%" y="1151.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (309 samples, 0.11%)</title><rect x="84.5209%" y="1125" width="0.1072%" height="15" fill="rgb(211,126,8)"/><text x="84.7709%" y="1135.50"></text></g><g><title>std::sys_common::poison::Flag::done (63 samples, 0.02%)</title><rect x="84.6063%" y="1109" width="0.0219%" height="15" fill="rgb(218,154,33)"/><text x="84.8563%" y="1119.50"></text></g><g><title>std::thread::panicking (56 samples, 0.02%)</title><rect x="84.6087%" y="1093" width="0.0194%" height="15" fill="rgb(212,199,16)"/><text x="84.8587%" y="1103.50"></text></g><g><title>std::panicking::panicking (40 samples, 0.01%)</title><rect x="84.6142%" y="1077" width="0.0139%" height="15" fill="rgb(236,215,46)"/><text x="84.8642%" y="1087.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (113 samples, 0.04%)</title><rect x="84.7280%" y="1093" width="0.0392%" height="15" fill="rgb(232,32,22)"/><text x="84.9780%" y="1103.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (43 samples, 0.01%)</title><rect x="84.7523%" y="1077" width="0.0149%" height="15" fill="rgb(234,79,15)"/><text x="85.0023%" y="1087.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (69 samples, 0.02%)</title><rect x="84.8370%" y="1061" width="0.0239%" height="15" fill="rgb(235,187,47)"/><text x="85.0870%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (132 samples, 0.05%)</title><rect x="84.8155%" y="1077" width="0.0458%" height="15" fill="rgb(244,69,37)"/><text x="85.0655%" y="1087.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (63 samples, 0.02%)</title><rect x="84.8804%" y="1061" width="0.0219%" height="15" fill="rgb(249,140,25)"/><text x="85.1304%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (119 samples, 0.04%)</title><rect x="84.8613%" y="1077" width="0.0413%" height="15" fill="rgb(213,69,8)"/><text x="85.1113%" y="1087.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (41 samples, 0.01%)</title><rect x="84.9026%" y="1077" width="0.0142%" height="15" fill="rgb(220,136,2)"/><text x="85.1526%" y="1087.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (47 samples, 0.02%)</title><rect x="84.9265%" y="1061" width="0.0163%" height="15" fill="rgb(237,50,36)"/><text x="85.1765%" y="1071.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (45 samples, 0.02%)</title><rect x="84.9428%" y="1061" width="0.0156%" height="15" fill="rgb(226,18,11)"/><text x="85.1928%" y="1071.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (188 samples, 0.07%)</title><rect x="84.9168%" y="1077" width="0.0652%" height="15" fill="rgb(243,156,2)"/><text x="85.1668%" y="1087.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (68 samples, 0.02%)</title><rect x="84.9584%" y="1061" width="0.0236%" height="15" fill="rgb(218,8,34)"/><text x="85.2084%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (620 samples, 0.22%)</title><rect x="84.7672%" y="1093" width="0.2151%" height="15" fill="rgb(250,94,35)"/><text x="85.0172%" y="1103.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (982 samples, 0.34%)</title><rect x="84.6427%" y="1109" width="0.3407%" height="15" fill="rgb(229,127,21)"/><text x="84.8927%" y="1119.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (51 samples, 0.02%)</title><rect x="85.0157%" y="1077" width="0.0177%" height="15" fill="rgb(234,49,5)"/><text x="85.2657%" y="1087.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (29 samples, 0.01%)</title><rect x="85.0233%" y="1061" width="0.0101%" height="15" fill="rgb(248,12,16)"/><text x="85.2733%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (44 samples, 0.02%)</title><rect x="85.0334%" y="1077" width="0.0153%" height="15" fill="rgb(208,220,31)"/><text x="85.2834%" y="1087.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (239 samples, 0.08%)</title><rect x="84.9834%" y="1109" width="0.0829%" height="15" fill="rgb(243,184,0)"/><text x="85.2334%" y="1119.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (229 samples, 0.08%)</title><rect x="84.9869%" y="1093" width="0.0795%" height="15" fill="rgb(217,38,21)"/><text x="85.2369%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1,264 samples, 0.44%)</title><rect x="84.6281%" y="1141" width="0.4386%" height="15" fill="rgb(239,120,45)"/><text x="84.8781%" y="1151.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1,253 samples, 0.43%)</title><rect x="84.6319%" y="1125" width="0.4347%" height="15" fill="rgb(235,33,2)"/><text x="84.8819%" y="1135.50"></text></g><g><title>std::sys_common::poison::Flag::get (40 samples, 0.01%)</title><rect x="85.1041%" y="1077" width="0.0139%" height="15" fill="rgb(249,161,5)"/><text x="85.3541%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (32 samples, 0.01%)</title><rect x="85.1069%" y="1061" width="0.0111%" height="15" fill="rgb(250,165,48)"/><text x="85.3569%" y="1071.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (99 samples, 0.03%)</title><rect x="85.1000%" y="1093" width="0.0343%" height="15" fill="rgb(221,23,45)"/><text x="85.3500%" y="1103.50"></text></g><g><title>std::thread::panicking (47 samples, 0.02%)</title><rect x="85.1180%" y="1077" width="0.0163%" height="15" fill="rgb(217,108,46)"/><text x="85.3680%" y="1087.50"></text></g><g><title>std::panicking::panicking (41 samples, 0.01%)</title><rect x="85.1201%" y="1061" width="0.0142%" height="15" fill="rgb(254,26,35)"/><text x="85.3701%" y="1071.50"></text></g><g><title>std::panicking::panic_count::is_zero (34 samples, 0.01%)</title><rect x="85.1225%" y="1045" width="0.0118%" height="15" fill="rgb(218,223,28)"/><text x="85.3725%" y="1055.50"></text></g><g><title>std::sys_common::poison::map_result (47 samples, 0.02%)</title><rect x="85.1343%" y="1093" width="0.0163%" height="15" fill="rgb(242,27,47)"/><text x="85.3843%" y="1103.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (171 samples, 0.06%)</title><rect x="85.0916%" y="1109" width="0.0593%" height="15" fill="rgb(218,39,35)"/><text x="85.3416%" y="1119.50"></text></g><g><title>__sched_text_start (61 samples, 0.02%)</title><rect x="85.1676%" y="933" width="0.0212%" height="15" fill="rgb(232,127,16)"/><text x="85.4176%" y="943.50"></text></g><g><title>futex_wait_queue_me (63 samples, 0.02%)</title><rect x="85.1673%" y="965" width="0.0219%" height="15" fill="rgb(231,219,51)"/><text x="85.4173%" y="975.50"></text></g><g><title>schedule (62 samples, 0.02%)</title><rect x="85.1676%" y="949" width="0.0215%" height="15" fill="rgb(217,220,46)"/><text x="85.4176%" y="959.50"></text></g><g><title>futex_wait (77 samples, 0.03%)</title><rect x="85.1656%" y="981" width="0.0267%" height="15" fill="rgb(230,75,1)"/><text x="85.4156%" y="991.50"></text></g><g><title>do_syscall_64 (81 samples, 0.03%)</title><rect x="85.1645%" y="1029" width="0.0281%" height="15" fill="rgb(218,2,8)"/><text x="85.4145%" y="1039.50"></text></g><g><title>__x64_sys_futex (80 samples, 0.03%)</title><rect x="85.1649%" y="1013" width="0.0278%" height="15" fill="rgb(206,111,30)"/><text x="85.4149%" y="1023.50"></text></g><g><title>do_futex (79 samples, 0.03%)</title><rect x="85.1652%" y="997" width="0.0274%" height="15" fill="rgb(209,135,6)"/><text x="85.4152%" y="1007.50"></text></g><g><title>__GI___pthread_mutex_lock (111 samples, 0.04%)</title><rect x="85.1544%" y="1077" width="0.0385%" height="15" fill="rgb(205,169,10)"/><text x="85.4044%" y="1087.50"></text></g><g><title>__lll_lock_wait (87 samples, 0.03%)</title><rect x="85.1628%" y="1061" width="0.0302%" height="15" fill="rgb(212,204,38)"/><text x="85.4128%" y="1071.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (83 samples, 0.03%)</title><rect x="85.1642%" y="1045" width="0.0288%" height="15" fill="rgb(205,199,14)"/><text x="85.4142%" y="1055.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (127 samples, 0.04%)</title><rect x="85.1510%" y="1109" width="0.0441%" height="15" fill="rgb(212,4,6)"/><text x="85.4010%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (122 samples, 0.04%)</title><rect x="85.1527%" y="1093" width="0.0423%" height="15" fill="rgb(250,15,10)"/><text x="85.4027%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (2,300 samples, 0.80%)</title><rect x="84.3974%" y="1157" width="0.7980%" height="15" fill="rgb(212,49,51)"/><text x="84.6474%" y="1167.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (371 samples, 0.13%)</title><rect x="85.0667%" y="1141" width="0.1287%" height="15" fill="rgb(235,21,9)"/><text x="85.3167%" y="1151.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (332 samples, 0.12%)</title><rect x="85.0802%" y="1125" width="0.1152%" height="15" fill="rgb(251,31,32)"/><text x="85.3302%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (36 samples, 0.01%)</title><rect x="85.2603%" y="1093" width="0.0125%" height="15" fill="rgb(246,23,9)"/><text x="85.5103%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (151 samples, 0.05%)</title><rect x="85.2502%" y="1109" width="0.0524%" height="15" fill="rgb(225,216,14)"/><text x="85.5002%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (86 samples, 0.03%)</title><rect x="85.2728%" y="1093" width="0.0298%" height="15" fill="rgb(215,200,26)"/><text x="85.5228%" y="1103.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (49 samples, 0.02%)</title><rect x="85.2856%" y="1077" width="0.0170%" height="15" fill="rgb(237,130,47)"/><text x="85.5356%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (198 samples, 0.07%)</title><rect x="85.2412%" y="1125" width="0.0687%" height="15" fill="rgb(247,74,14)"/><text x="85.4912%" y="1135.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.01%)</title><rect x="85.3241%" y="1109" width="0.0114%" height="15" fill="rgb(254,97,46)"/><text x="85.5741%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (305 samples, 0.11%)</title><rect x="85.2301%" y="1141" width="0.1058%" height="15" fill="rgb(234,191,1)"/><text x="85.4801%" y="1151.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (75 samples, 0.03%)</title><rect x="85.3099%" y="1125" width="0.0260%" height="15" fill="rgb(215,165,14)"/><text x="85.5599%" y="1135.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.01%)</title><rect x="85.3359%" y="1141" width="0.0108%" height="15" fill="rgb(230,182,6)"/><text x="85.5859%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::swap_remove (117 samples, 0.04%)</title><rect x="85.3539%" y="1141" width="0.0406%" height="15" fill="rgb(210,127,39)"/><text x="85.6039%" y="1151.50"></text></g><g><title>core::ptr::read (70 samples, 0.02%)</title><rect x="85.4448%" y="1077" width="0.0243%" height="15" fill="rgb(223,212,51)"/><text x="85.6948%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.01%)</title><rect x="85.4563%" y="1061" width="0.0128%" height="15" fill="rgb(226,176,43)"/><text x="85.7063%" y="1071.50"></text></g><g><title>core::mem::replace (129 samples, 0.04%)</title><rect x="85.4268%" y="1125" width="0.0448%" height="15" fill="rgb(222,155,4)"/><text x="85.6768%" y="1135.50"></text></g><g><title>core::mem::swap (124 samples, 0.04%)</title><rect x="85.4285%" y="1109" width="0.0430%" height="15" fill="rgb(215,149,7)"/><text x="85.6785%" y="1119.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (115 samples, 0.04%)</title><rect x="85.4317%" y="1093" width="0.0399%" height="15" fill="rgb(252,199,23)"/><text x="85.6817%" y="1103.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (220 samples, 0.08%)</title><rect x="85.3956%" y="1141" width="0.0763%" height="15" fill="rgb(245,52,29)"/><text x="85.6456%" y="1151.50"></text></g><g><title>__x64_sys_futex (128 samples, 0.04%)</title><rect x="85.4809%" y="1013" width="0.0444%" height="15" fill="rgb(221,228,19)"/><text x="85.7309%" y="1023.50"></text></g><g><title>do_futex (127 samples, 0.04%)</title><rect x="85.4813%" y="997" width="0.0441%" height="15" fill="rgb(253,101,6)"/><text x="85.7313%" y="1007.50"></text></g><g><title>futex_wake (127 samples, 0.04%)</title><rect x="85.4813%" y="981" width="0.0441%" height="15" fill="rgb(211,130,8)"/><text x="85.7313%" y="991.50"></text></g><g><title>wake_up_q (116 samples, 0.04%)</title><rect x="85.4851%" y="965" width="0.0402%" height="15" fill="rgb(238,37,53)"/><text x="85.7351%" y="975.50"></text></g><g><title>try_to_wake_up (115 samples, 0.04%)</title><rect x="85.4854%" y="949" width="0.0399%" height="15" fill="rgb(235,145,5)"/><text x="85.7354%" y="959.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (133 samples, 0.05%)</title><rect x="85.4802%" y="1045" width="0.0461%" height="15" fill="rgb(244,12,43)"/><text x="85.7302%" y="1055.50"></text></g><g><title>do_syscall_64 (132 samples, 0.05%)</title><rect x="85.4806%" y="1029" width="0.0458%" height="15" fill="rgb(246,195,24)"/><text x="85.7306%" y="1039.50"></text></g><g><title>__GI___pthread_mutex_unlock (138 samples, 0.05%)</title><rect x="85.4795%" y="1077" width="0.0479%" height="15" fill="rgb(235,163,6)"/><text x="85.7295%" y="1087.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (137 samples, 0.05%)</title><rect x="85.4799%" y="1061" width="0.0475%" height="15" fill="rgb(236,218,17)"/><text x="85.7299%" y="1071.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (142 samples, 0.05%)</title><rect x="85.4789%" y="1109" width="0.0493%" height="15" fill="rgb(235,12,38)"/><text x="85.7289%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (142 samples, 0.05%)</title><rect x="85.4789%" y="1093" width="0.0493%" height="15" fill="rgb(225,195,33)"/><text x="85.7289%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (177 samples, 0.06%)</title><rect x="85.4719%" y="1141" width="0.0614%" height="15" fill="rgb(238,54,35)"/><text x="85.7219%" y="1151.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (161 samples, 0.06%)</title><rect x="85.4775%" y="1125" width="0.0559%" height="15" fill="rgb(238,33,7)"/><text x="85.7275%" y="1135.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (31 samples, 0.01%)</title><rect x="85.5434%" y="1093" width="0.0108%" height="15" fill="rgb(245,5,14)"/><text x="85.7934%" y="1103.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (44 samples, 0.02%)</title><rect x="85.5413%" y="1109" width="0.0153%" height="15" fill="rgb(251,95,31)"/><text x="85.7913%" y="1119.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.01%)</title><rect x="85.5569%" y="1077" width="0.0132%" height="15" fill="rgb(222,15,46)"/><text x="85.8069%" y="1087.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (106 samples, 0.04%)</title><rect x="85.5337%" y="1141" width="0.0368%" height="15" fill="rgb(226,182,24)"/><text x="85.7837%" y="1151.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (88 samples, 0.03%)</title><rect x="85.5399%" y="1125" width="0.0305%" height="15" fill="rgb(229,105,41)"/><text x="85.7899%" y="1135.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.01%)</title><rect x="85.5566%" y="1109" width="0.0139%" height="15" fill="rgb(216,99,53)"/><text x="85.8066%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (40 samples, 0.01%)</title><rect x="85.5566%" y="1093" width="0.0139%" height="15" fill="rgb(253,26,20)"/><text x="85.8066%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (3,508 samples, 1.22%)</title><rect x="84.3606%" y="1173" width="1.2171%" height="15" fill="rgb(249,155,28)"/><text x="84.6106%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::unpark_worker_by_id (1,102 samples, 0.38%)</title><rect x="85.1954%" y="1157" width="0.3823%" height="15" fill="rgb(241,221,2)"/><text x="85.4454%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.01%)</title><rect x="85.5909%" y="1157" width="0.0121%" height="15" fill="rgb(219,124,6)"/><text x="85.8409%" y="1167.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (41 samples, 0.01%)</title><rect x="85.6273%" y="1141" width="0.0142%" height="15" fill="rgb(233,37,6)"/><text x="85.8773%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (51 samples, 0.02%)</title><rect x="85.6759%" y="1109" width="0.0177%" height="15" fill="rgb(238,20,14)"/><text x="85.9259%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (119 samples, 0.04%)</title><rect x="85.6655%" y="1125" width="0.0413%" height="15" fill="rgb(232,106,27)"/><text x="85.9155%" y="1135.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (38 samples, 0.01%)</title><rect x="85.6936%" y="1109" width="0.0132%" height="15" fill="rgb(246,157,24)"/><text x="85.9436%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (33 samples, 0.01%)</title><rect x="85.7075%" y="1125" width="0.0114%" height="15" fill="rgb(214,153,10)"/><text x="85.9575%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (229 samples, 0.08%)</title><rect x="85.6416%" y="1141" width="0.0795%" height="15" fill="rgb(212,94,6)"/><text x="85.8916%" y="1151.50"></text></g><g><title>ttwu_do_activate (31 samples, 0.01%)</title><rect x="85.7922%" y="933" width="0.0108%" height="15" fill="rgb(254,25,27)"/><text x="86.0422%" y="943.50"></text></g><g><title>futex_wake (133 samples, 0.05%)</title><rect x="85.7575%" y="981" width="0.0461%" height="15" fill="rgb(250,43,52)"/><text x="86.0075%" y="991.50"></text></g><g><title>wake_up_q (120 samples, 0.04%)</title><rect x="85.7620%" y="965" width="0.0416%" height="15" fill="rgb(221,226,40)"/><text x="86.0120%" y="975.50"></text></g><g><title>try_to_wake_up (120 samples, 0.04%)</title><rect x="85.7620%" y="949" width="0.0416%" height="15" fill="rgb(235,162,34)"/><text x="86.0120%" y="959.50"></text></g><g><title>do_futex (140 samples, 0.05%)</title><rect x="85.7557%" y="997" width="0.0486%" height="15" fill="rgb(239,24,26)"/><text x="86.0057%" y="1007.50"></text></g><g><title>__x64_sys_futex (142 samples, 0.05%)</title><rect x="85.7554%" y="1013" width="0.0493%" height="15" fill="rgb(244,226,11)"/><text x="86.0054%" y="1023.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (148 samples, 0.05%)</title><rect x="85.7540%" y="1045" width="0.0513%" height="15" fill="rgb(225,23,10)"/><text x="86.0040%" y="1055.50"></text></g><g><title>do_syscall_64 (148 samples, 0.05%)</title><rect x="85.7540%" y="1029" width="0.0513%" height="15" fill="rgb(249,125,6)"/><text x="86.0040%" y="1039.50"></text></g><g><title>__GI___pthread_mutex_unlock (167 samples, 0.06%)</title><rect x="85.7477%" y="1077" width="0.0579%" height="15" fill="rgb(246,212,12)"/><text x="85.9977%" y="1087.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (166 samples, 0.06%)</title><rect x="85.7481%" y="1061" width="0.0576%" height="15" fill="rgb(230,43,32)"/><text x="85.9981%" y="1071.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (187 samples, 0.06%)</title><rect x="85.7453%" y="1109" width="0.0649%" height="15" fill="rgb(210,95,23)"/><text x="85.9953%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (183 samples, 0.06%)</title><rect x="85.7467%" y="1093" width="0.0635%" height="15" fill="rgb(229,103,33)"/><text x="85.9967%" y="1103.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (274 samples, 0.10%)</title><rect x="85.7384%" y="1125" width="0.0951%" height="15" fill="rgb(222,104,27)"/><text x="85.9884%" y="1135.50"></text></g><g><title>std::sys_common::poison::Flag::done (67 samples, 0.02%)</title><rect x="85.8102%" y="1109" width="0.0232%" height="15" fill="rgb(239,221,23)"/><text x="86.0602%" y="1119.50"></text></g><g><title>std::thread::panicking (58 samples, 0.02%)</title><rect x="85.8133%" y="1093" width="0.0201%" height="15" fill="rgb(222,98,21)"/><text x="86.0633%" y="1103.50"></text></g><g><title>std::panicking::panicking (49 samples, 0.02%)</title><rect x="85.8164%" y="1077" width="0.0170%" height="15" fill="rgb(231,101,20)"/><text x="86.0664%" y="1087.50"></text></g><g><title>std::panicking::panic_count::is_zero (35 samples, 0.01%)</title><rect x="85.8213%" y="1061" width="0.0121%" height="15" fill="rgb(215,150,22)"/><text x="86.0713%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (32 samples, 0.01%)</title><rect x="85.8223%" y="1045" width="0.0111%" height="15" fill="rgb(248,3,34)"/><text x="86.0723%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place (325 samples, 0.11%)</title><rect x="85.7210%" y="1141" width="0.1128%" height="15" fill="rgb(220,141,21)"/><text x="85.9710%" y="1151.50"></text></g><g><title>std::sys_common::poison::Flag::get (66 samples, 0.02%)</title><rect x="85.8702%" y="1077" width="0.0229%" height="15" fill="rgb(223,41,48)"/><text x="86.1202%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (54 samples, 0.02%)</title><rect x="85.8744%" y="1061" width="0.0187%" height="15" fill="rgb(247,12,5)"/><text x="86.1244%" y="1071.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (163 samples, 0.06%)</title><rect x="85.8650%" y="1093" width="0.0566%" height="15" fill="rgb(206,173,10)"/><text x="86.1150%" y="1103.50"></text></g><g><title>std::thread::panicking (82 samples, 0.03%)</title><rect x="85.8931%" y="1077" width="0.0285%" height="15" fill="rgb(233,214,37)"/><text x="86.1431%" y="1087.50"></text></g><g><title>std::panicking::panicking (69 samples, 0.02%)</title><rect x="85.8976%" y="1061" width="0.0239%" height="15" fill="rgb(238,86,43)"/><text x="86.1476%" y="1071.50"></text></g><g><title>std::panicking::panic_count::is_zero (54 samples, 0.02%)</title><rect x="85.9028%" y="1045" width="0.0187%" height="15" fill="rgb(212,182,8)"/><text x="86.1528%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (39 samples, 0.01%)</title><rect x="85.9080%" y="1029" width="0.0135%" height="15" fill="rgb(240,91,47)"/><text x="86.1580%" y="1039.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (238 samples, 0.08%)</title><rect x="85.8556%" y="1109" width="0.0826%" height="15" fill="rgb(209,138,26)"/><text x="86.1056%" y="1119.50"></text></g><g><title>std::sys_common::poison::map_result (48 samples, 0.02%)</title><rect x="85.9216%" y="1093" width="0.0167%" height="15" fill="rgb(231,163,20)"/><text x="86.1716%" y="1103.50"></text></g><g><title>__perf_event_task_sched_out (36 samples, 0.01%)</title><rect x="85.9618%" y="917" width="0.0125%" height="15" fill="rgb(214,91,54)"/><text x="86.2118%" y="927.50"></text></g><g><title>task_ctx_sched_out (33 samples, 0.01%)</title><rect x="85.9629%" y="901" width="0.0114%" height="15" fill="rgb(230,32,17)"/><text x="86.2129%" y="911.50"></text></g><g><title>ctx_sched_out (33 samples, 0.01%)</title><rect x="85.9629%" y="885" width="0.0114%" height="15" fill="rgb(231,34,34)"/><text x="86.2129%" y="895.50"></text></g><g><title>deactivate_task (60 samples, 0.02%)</title><rect x="85.9750%" y="917" width="0.0208%" height="15" fill="rgb(224,228,27)"/><text x="86.2250%" y="927.50"></text></g><g><title>__sched_text_start (154 samples, 0.05%)</title><rect x="85.9590%" y="933" width="0.0534%" height="15" fill="rgb(219,35,40)"/><text x="86.2090%" y="943.50"></text></g><g><title>futex_wait_queue_me (162 samples, 0.06%)</title><rect x="85.9573%" y="965" width="0.0562%" height="15" fill="rgb(234,42,8)"/><text x="86.2073%" y="975.50"></text></g><g><title>schedule (158 samples, 0.05%)</title><rect x="85.9587%" y="949" width="0.0548%" height="15" fill="rgb(226,75,22)"/><text x="86.2087%" y="959.50"></text></g><g><title>__x64_sys_futex (183 samples, 0.06%)</title><rect x="85.9549%" y="1013" width="0.0635%" height="15" fill="rgb(242,203,28)"/><text x="86.2049%" y="1023.50"></text></g><g><title>do_futex (183 samples, 0.06%)</title><rect x="85.9549%" y="997" width="0.0635%" height="15" fill="rgb(221,3,9)"/><text x="86.2049%" y="1007.50"></text></g><g><title>futex_wait (180 samples, 0.06%)</title><rect x="85.9559%" y="981" width="0.0625%" height="15" fill="rgb(214,34,31)"/><text x="86.2059%" y="991.50"></text></g><g><title>do_syscall_64 (186 samples, 0.06%)</title><rect x="85.9542%" y="1029" width="0.0645%" height="15" fill="rgb(252,119,15)"/><text x="86.2042%" y="1039.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (190 samples, 0.07%)</title><rect x="85.9531%" y="1045" width="0.0659%" height="15" fill="rgb(244,224,31)"/><text x="86.2031%" y="1055.50"></text></g><g><title>__lll_lock_wait (195 samples, 0.07%)</title><rect x="85.9521%" y="1061" width="0.0677%" height="15" fill="rgb(215,8,51)"/><text x="86.2021%" y="1071.50"></text></g><g><title>__GI___pthread_mutex_lock (227 samples, 0.08%)</title><rect x="85.9413%" y="1077" width="0.0788%" height="15" fill="rgb(207,24,1)"/><text x="86.1913%" y="1087.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (561 samples, 0.19%)</title><rect x="85.8338%" y="1141" width="0.1946%" height="15" fill="rgb(245,90,0)"/><text x="86.0838%" y="1151.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (531 samples, 0.18%)</title><rect x="85.8442%" y="1125" width="0.1842%" height="15" fill="rgb(246,43,48)"/><text x="86.0942%" y="1135.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (260 samples, 0.09%)</title><rect x="85.9382%" y="1109" width="0.0902%" height="15" fill="rgb(252,218,10)"/><text x="86.1882%" y="1119.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (254 samples, 0.09%)</title><rect x="85.9403%" y="1093" width="0.0881%" height="15" fill="rgb(231,24,35)"/><text x="86.1903%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (85 samples, 0.03%)</title><rect x="86.0538%" y="1125" width="0.0295%" height="15" fill="rgb(225,66,19)"/><text x="86.3038%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_sub (71 samples, 0.02%)</title><rect x="86.0586%" y="1109" width="0.0246%" height="15" fill="rgb(214,96,51)"/><text x="86.3086%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (1,391 samples, 0.48%)</title><rect x="85.6038%" y="1157" width="0.4826%" height="15" fill="rgb(251,151,47)"/><text x="85.8538%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::dec_num_unparked (167 samples, 0.06%)</title><rect x="86.0284%" y="1141" width="0.0579%" height="15" fill="rgb(236,79,14)"/><text x="86.2784%" y="1151.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (108 samples, 0.04%)</title><rect x="86.1776%" y="1125" width="0.0375%" height="15" fill="rgb(210,205,11)"/><text x="86.4276%" y="1135.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (52 samples, 0.02%)</title><rect x="86.1971%" y="1109" width="0.0180%" height="15" fill="rgb(233,142,53)"/><text x="86.4471%" y="1119.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (113 samples, 0.04%)</title><rect x="86.2151%" y="1125" width="0.0392%" height="15" fill="rgb(212,116,48)"/><text x="86.4651%" y="1135.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (48 samples, 0.02%)</title><rect x="86.2376%" y="1109" width="0.0167%" height="15" fill="rgb(234,55,33)"/><text x="86.4876%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (54 samples, 0.02%)</title><rect x="86.2543%" y="1125" width="0.0187%" height="15" fill="rgb(253,92,27)"/><text x="86.5043%" y="1135.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (50 samples, 0.02%)</title><rect x="86.2838%" y="1109" width="0.0173%" height="15" fill="rgb(220,7,35)"/><text x="86.5338%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (47 samples, 0.02%)</title><rect x="86.3011%" y="1109" width="0.0163%" height="15" fill="rgb(246,124,6)"/><text x="86.5511%" y="1119.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (169 samples, 0.06%)</title><rect x="86.2730%" y="1125" width="0.0586%" height="15" fill="rgb(212,111,51)"/><text x="86.5230%" y="1135.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (41 samples, 0.01%)</title><rect x="86.3174%" y="1109" width="0.0142%" height="15" fill="rgb(253,116,7)"/><text x="86.5674%" y="1119.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (570 samples, 0.20%)</title><rect x="86.1343%" y="1141" width="0.1978%" height="15" fill="rgb(213,145,18)"/><text x="86.3843%" y="1151.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (47 samples, 0.02%)</title><rect x="86.3324%" y="1141" width="0.0163%" height="15" fill="rgb(219,149,7)"/><text x="86.5824%" y="1151.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.01%)</title><rect x="86.3386%" y="1125" width="0.0101%" height="15" fill="rgb(225,156,20)"/><text x="86.5886%" y="1135.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (40 samples, 0.01%)</title><rect x="86.3737%" y="1093" width="0.0139%" height="15" fill="rgb(211,98,19)"/><text x="86.6237%" y="1103.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (42 samples, 0.01%)</title><rect x="86.3875%" y="1093" width="0.0146%" height="15" fill="rgb(231,192,31)"/><text x="86.6375%" y="1103.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (188 samples, 0.07%)</title><rect x="86.3487%" y="1141" width="0.0652%" height="15" fill="rgb(249,95,19)"/><text x="86.5987%" y="1151.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (177 samples, 0.06%)</title><rect x="86.3525%" y="1125" width="0.0614%" height="15" fill="rgb(247,101,36)"/><text x="86.6025%" y="1135.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (153 samples, 0.05%)</title><rect x="86.3608%" y="1109" width="0.0531%" height="15" fill="rgb(221,45,43)"/><text x="86.6108%" y="1119.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (35 samples, 0.01%)</title><rect x="86.4149%" y="1141" width="0.0121%" height="15" fill="rgb(220,42,1)"/><text x="86.6649%" y="1151.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (99 samples, 0.03%)</title><rect x="86.4770%" y="1109" width="0.0343%" height="15" fill="rgb(236,19,24)"/><text x="86.7270%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (55 samples, 0.02%)</title><rect x="86.4923%" y="1093" width="0.0191%" height="15" fill="rgb(225,192,6)"/><text x="86.7423%" y="1103.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (158 samples, 0.05%)</title><rect x="86.4573%" y="1125" width="0.0548%" height="15" fill="rgb(242,30,19)"/><text x="86.7073%" y="1135.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u16::AtomicU16 as core::ops::deref::Deref&gt;::deref (46 samples, 0.02%)</title><rect x="86.5673%" y="1109" width="0.0160%" height="15" fill="rgb(240,36,6)"/><text x="86.8173%" y="1119.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u32::AtomicU32 as core::ops::deref::Deref&gt;::deref (51 samples, 0.02%)</title><rect x="86.5832%" y="1109" width="0.0177%" height="15" fill="rgb(246,40,28)"/><text x="86.8332%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU16::load (163 samples, 0.06%)</title><rect x="86.6009%" y="1109" width="0.0566%" height="15" fill="rgb(225,155,33)"/><text x="86.8509%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_load (97 samples, 0.03%)</title><rect x="86.6238%" y="1093" width="0.0337%" height="15" fill="rgb(240,65,18)"/><text x="86.8738%" y="1103.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (36 samples, 0.01%)</title><rect x="86.6769%" y="1093" width="0.0125%" height="15" fill="rgb(217,0,48)"/><text x="86.9269%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (205 samples, 0.07%)</title><rect x="86.6575%" y="1109" width="0.0711%" height="15" fill="rgb(217,80,15)"/><text x="86.9075%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_load (113 samples, 0.04%)</title><rect x="86.6894%" y="1093" width="0.0392%" height="15" fill="rgb(253,43,51)"/><text x="86.9394%" y="1103.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::is_empty (988 samples, 0.34%)</title><rect x="86.4271%" y="1141" width="0.3428%" height="15" fill="rgb(246,60,4)"/><text x="86.6771%" y="1151.50"></text></g><g><title>tokio::runtime::queue::Inner&lt;T&gt;::is_empty (743 samples, 0.26%)</title><rect x="86.5121%" y="1125" width="0.2578%" height="15" fill="rgb(230,40,54)"/><text x="86.7621%" y="1135.50"></text></g><g><title>tokio::runtime::queue::unpack (119 samples, 0.04%)</title><rect x="86.7286%" y="1109" width="0.0413%" height="15" fill="rgb(208,20,44)"/><text x="86.9786%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (21,978 samples, 7.63%)</title><rect x="79.1525%" y="1189" width="7.6254%" height="15" fill="rgb(230,22,22)"/><text x="79.4025%" y="1199.50">tokio::run..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (3,459 samples, 1.20%)</title><rect x="85.5777%" y="1173" width="1.2001%" height="15" fill="rgb(207,57,4)"/><text x="85.8277%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_if_work_pending (1,993 samples, 0.69%)</title><rect x="86.0864%" y="1157" width="0.6915%" height="15" fill="rgb(242,130,33)"/><text x="86.3364%" y="1167.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (93 samples, 0.03%)</title><rect x="86.8431%" y="1109" width="0.0323%" height="15" fill="rgb(218,66,43)"/><text x="87.0931%" y="1119.50"></text></g><g><title>core::mem::replace (73 samples, 0.03%)</title><rect x="86.8500%" y="1093" width="0.0253%" height="15" fill="rgb(236,105,16)"/><text x="87.1000%" y="1103.50"></text></g><g><title>core::mem::swap (62 samples, 0.02%)</title><rect x="86.8538%" y="1077" width="0.0215%" height="15" fill="rgb(230,46,15)"/><text x="87.1038%" y="1087.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (62 samples, 0.02%)</title><rect x="86.8538%" y="1061" width="0.0215%" height="15" fill="rgb(251,172,40)"/><text x="87.1038%" y="1071.50"></text></g><g><title>core::cell::BorrowRefMut::new (135 samples, 0.05%)</title><rect x="86.8320%" y="1141" width="0.0468%" height="15" fill="rgb(225,217,32)"/><text x="87.0820%" y="1151.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (115 samples, 0.04%)</title><rect x="86.8389%" y="1125" width="0.0399%" height="15" fill="rgb(243,10,29)"/><text x="87.0889%" y="1135.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (163 samples, 0.06%)</title><rect x="86.8240%" y="1157" width="0.0566%" height="15" fill="rgb(207,102,10)"/><text x="87.0740%" y="1167.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (197 samples, 0.07%)</title><rect x="86.8188%" y="1173" width="0.0684%" height="15" fill="rgb(241,125,5)"/><text x="87.0688%" y="1183.50"></text></g><g><title>core::mem::swap (31 samples, 0.01%)</title><rect x="86.9173%" y="1077" width="0.0108%" height="15" fill="rgb(230,125,29)"/><text x="87.1673%" y="1087.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (30 samples, 0.01%)</title><rect x="86.9177%" y="1061" width="0.0104%" height="15" fill="rgb(223,65,44)"/><text x="87.1677%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (43 samples, 0.01%)</title><rect x="86.9135%" y="1109" width="0.0149%" height="15" fill="rgb(224,188,28)"/><text x="87.1635%" y="1119.50"></text></g><g><title>core::mem::replace (32 samples, 0.01%)</title><rect x="86.9173%" y="1093" width="0.0111%" height="15" fill="rgb(254,197,27)"/><text x="87.1673%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place (124 samples, 0.04%)</title><rect x="86.8871%" y="1173" width="0.0430%" height="15" fill="rgb(220,200,25)"/><text x="87.1371%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (85 samples, 0.03%)</title><rect x="86.9007%" y="1157" width="0.0295%" height="15" fill="rgb(239,225,54)"/><text x="87.1507%" y="1167.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (72 samples, 0.02%)</title><rect x="86.9052%" y="1141" width="0.0250%" height="15" fill="rgb(211,59,40)"/><text x="87.1552%" y="1151.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (51 samples, 0.02%)</title><rect x="86.9125%" y="1125" width="0.0177%" height="15" fill="rgb(213,176,46)"/><text x="87.1625%" y="1135.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (29 samples, 0.01%)</title><rect x="86.9676%" y="1125" width="0.0101%" height="15" fill="rgb(226,99,4)"/><text x="87.2176%" y="1135.50"></text></g><g><title>tokio::coop::CURRENT::__getit (132 samples, 0.05%)</title><rect x="87.0388%" y="1109" width="0.0458%" height="15" fill="rgb(239,203,43)"/><text x="87.2888%" y="1119.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (100 samples, 0.03%)</title><rect x="87.0499%" y="1093" width="0.0347%" height="15" fill="rgb(246,1,45)"/><text x="87.2999%" y="1103.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (69 samples, 0.02%)</title><rect x="87.0606%" y="1077" width="0.0239%" height="15" fill="rgb(231,42,52)"/><text x="87.3106%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (33 samples, 0.01%)</title><rect x="87.0731%" y="1061" width="0.0114%" height="15" fill="rgb(240,13,50)"/><text x="87.3231%" y="1071.50"></text></g><g><title>core::ptr::read (58 samples, 0.02%)</title><rect x="87.1658%" y="1013" width="0.0201%" height="15" fill="rgb(225,81,14)"/><text x="87.4158%" y="1023.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (186 samples, 0.06%)</title><rect x="87.1241%" y="1077" width="0.0645%" height="15" fill="rgb(216,182,23)"/><text x="87.3741%" y="1087.50"></text></g><g><title>core::mem::replace (146 samples, 0.05%)</title><rect x="87.1380%" y="1061" width="0.0507%" height="15" fill="rgb(233,137,19)"/><text x="87.3880%" y="1071.50"></text></g><g><title>core::mem::swap (129 samples, 0.04%)</title><rect x="87.1439%" y="1045" width="0.0448%" height="15" fill="rgb(242,61,46)"/><text x="87.3939%" y="1055.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (115 samples, 0.04%)</title><rect x="87.1488%" y="1029" width="0.0399%" height="15" fill="rgb(221,168,51)"/><text x="87.3988%" y="1039.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (222 samples, 0.08%)</title><rect x="87.1158%" y="1093" width="0.0770%" height="15" fill="rgb(238,48,15)"/><text x="87.3658%" y="1103.50"></text></g><g><title>core::ptr::read (50 samples, 0.02%)</title><rect x="87.2476%" y="981" width="0.0173%" height="15" fill="rgb(216,13,16)"/><text x="87.4976%" y="991.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (135 samples, 0.05%)</title><rect x="87.2220%" y="1045" width="0.0468%" height="15" fill="rgb(223,185,34)"/><text x="87.4720%" y="1055.50"></text></g><g><title>core::mem::replace (105 samples, 0.04%)</title><rect x="87.2324%" y="1029" width="0.0364%" height="15" fill="rgb(228,94,42)"/><text x="87.4824%" y="1039.50"></text></g><g><title>core::mem::swap (95 samples, 0.03%)</title><rect x="87.2358%" y="1013" width="0.0330%" height="15" fill="rgb(218,166,43)"/><text x="87.4858%" y="1023.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (88 samples, 0.03%)</title><rect x="87.2383%" y="997" width="0.0305%" height="15" fill="rgb(232,30,50)"/><text x="87.4883%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (231 samples, 0.08%)</title><rect x="87.1928%" y="1093" width="0.0801%" height="15" fill="rgb(245,206,45)"/><text x="87.4428%" y="1103.50"></text></g><g><title>&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (204 samples, 0.07%)</title><rect x="87.2022%" y="1077" width="0.0708%" height="15" fill="rgb(220,56,22)"/><text x="87.4522%" y="1087.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (172 samples, 0.06%)</title><rect x="87.2133%" y="1061" width="0.0597%" height="15" fill="rgb(239,129,38)"/><text x="87.4633%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (43 samples, 0.01%)</title><rect x="87.3864%" y="1029" width="0.0149%" height="15" fill="rgb(207,68,41)"/><text x="87.6364%" y="1039.50"></text></g><g><title>core::ptr::read (75 samples, 0.03%)</title><rect x="87.4579%" y="949" width="0.0260%" height="15" fill="rgb(221,21,7)"/><text x="87.7079%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.01%)</title><rect x="87.4697%" y="933" width="0.0142%" height="15" fill="rgb(240,33,25)"/><text x="87.7197%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (224 samples, 0.08%)</title><rect x="87.4093%" y="1013" width="0.0777%" height="15" fill="rgb(242,119,10)"/><text x="87.6593%" y="1023.50"></text></g><g><title>core::mem::replace (202 samples, 0.07%)</title><rect x="87.4169%" y="997" width="0.0701%" height="15" fill="rgb(214,149,40)"/><text x="87.6669%" y="1007.50"></text></g><g><title>core::mem::swap (173 samples, 0.06%)</title><rect x="87.4270%" y="981" width="0.0600%" height="15" fill="rgb(228,25,36)"/><text x="87.6770%" y="991.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (158 samples, 0.05%)</title><rect x="87.4322%" y="965" width="0.0548%" height="15" fill="rgb(222,59,15)"/><text x="87.6822%" y="975.50"></text></g><g><title>core::cell::BorrowRefMut::new (342 samples, 0.12%)</title><rect x="87.3753%" y="1045" width="0.1187%" height="15" fill="rgb(218,170,0)"/><text x="87.6253%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (267 samples, 0.09%)</title><rect x="87.4013%" y="1029" width="0.0926%" height="15" fill="rgb(232,173,23)"/><text x="87.6513%" y="1039.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (389 samples, 0.13%)</title><rect x="87.3614%" y="1061" width="0.1350%" height="15" fill="rgb(218,116,1)"/><text x="87.6114%" y="1071.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (437 samples, 0.15%)</title><rect x="87.3514%" y="1077" width="0.1516%" height="15" fill="rgb(207,34,4)"/><text x="87.6014%" y="1087.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (61 samples, 0.02%)</title><rect x="87.5502%" y="1045" width="0.0212%" height="15" fill="rgb(229,54,52)"/><text x="87.8002%" y="1055.50"></text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 0.01%)</title><rect x="87.6959%" y="965" width="0.0108%" height="15" fill="rgb(211,86,23)"/><text x="87.9459%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (78 samples, 0.03%)</title><rect x="87.6799%" y="981" width="0.0271%" height="15" fill="rgb(254,153,34)"/><text x="87.9299%" y="991.50"></text></g><g><title>core::ptr::read (156 samples, 0.05%)</title><rect x="87.6546%" y="997" width="0.0541%" height="15" fill="rgb(219,220,14)"/><text x="87.9046%" y="1007.50"></text></g><g><title>core::ptr::write (35 samples, 0.01%)</title><rect x="87.7087%" y="997" width="0.0121%" height="15" fill="rgb(247,8,26)"/><text x="87.9587%" y="1007.50"></text></g><g><title>core::mem::replace (432 samples, 0.15%)</title><rect x="87.5713%" y="1045" width="0.1499%" height="15" fill="rgb(213,129,42)"/><text x="87.8213%" y="1055.50"></text></g><g><title>core::mem::swap (372 samples, 0.13%)</title><rect x="87.5922%" y="1029" width="0.1291%" height="15" fill="rgb(225,95,41)"/><text x="87.8422%" y="1039.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (338 samples, 0.12%)</title><rect x="87.6040%" y="1013" width="0.1173%" height="15" fill="rgb(215,134,24)"/><text x="87.8540%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (630 samples, 0.22%)</title><rect x="87.5030%" y="1077" width="0.2186%" height="15" fill="rgb(235,23,54)"/><text x="87.7530%" y="1087.50"></text></g><g><title>core::mem::take (566 samples, 0.20%)</title><rect x="87.5252%" y="1061" width="0.1964%" height="15" fill="rgb(229,96,31)"/><text x="87.7752%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (91 samples, 0.03%)</title><rect x="87.7636%" y="1013" width="0.0316%" height="15" fill="rgb(206,111,12)"/><text x="88.0136%" y="1023.50"></text></g><g><title>core::mem::replace (76 samples, 0.03%)</title><rect x="87.7688%" y="997" width="0.0264%" height="15" fill="rgb(222,177,8)"/><text x="88.0188%" y="1007.50"></text></g><g><title>core::mem::swap (72 samples, 0.02%)</title><rect x="87.7701%" y="981" width="0.0250%" height="15" fill="rgb(251,36,52)"/><text x="88.0201%" y="991.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (68 samples, 0.02%)</title><rect x="87.7715%" y="965" width="0.0236%" height="15" fill="rgb(216,182,29)"/><text x="88.0215%" y="975.50"></text></g><g><title>core::ptr::read (34 samples, 0.01%)</title><rect x="87.7833%" y="949" width="0.0118%" height="15" fill="rgb(241,145,50)"/><text x="88.0333%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (186 samples, 0.06%)</title><rect x="87.7330%" y="1061" width="0.0645%" height="15" fill="rgb(231,71,35)"/><text x="87.9830%" y="1071.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (154 samples, 0.05%)</title><rect x="87.7441%" y="1045" width="0.0534%" height="15" fill="rgb(218,22,17)"/><text x="87.9941%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (115 samples, 0.04%)</title><rect x="87.7577%" y="1029" width="0.0399%" height="15" fill="rgb(225,227,6)"/><text x="88.0077%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place (220 samples, 0.08%)</title><rect x="87.7216%" y="1077" width="0.0763%" height="15" fill="rgb(224,204,17)"/><text x="87.9716%" y="1087.50"></text></g><g><title>tokio::coop::has_budget_remaining (157 samples, 0.05%)</title><rect x="87.7979%" y="1077" width="0.0545%" height="15" fill="rgb(227,61,28)"/><text x="88.0479%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (156 samples, 0.05%)</title><rect x="87.7983%" y="1061" width="0.0541%" height="15" fill="rgb(242,148,23)"/><text x="88.0483%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (131 samples, 0.05%)</title><rect x="87.8069%" y="1045" width="0.0455%" height="15" fill="rgb(237,105,33)"/><text x="88.0569%" y="1055.50"></text></g><g><title>tokio::coop::has_budget_remaining::{{closure}} (75 samples, 0.03%)</title><rect x="87.8264%" y="1029" width="0.0260%" height="15" fill="rgb(238,218,40)"/><text x="88.0764%" y="1039.50"></text></g><g><title>tokio::coop::Budget::has_remaining (58 samples, 0.02%)</title><rect x="87.8323%" y="1013" width="0.0201%" height="15" fill="rgb(209,126,11)"/><text x="88.0823%" y="1023.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header (72 samples, 0.02%)</title><rect x="87.9301%" y="1045" width="0.0250%" height="15" fill="rgb(245,90,11)"/><text x="88.1801%" y="1055.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (48 samples, 0.02%)</title><rect x="87.9384%" y="1029" width="0.0167%" height="15" fill="rgb(211,195,10)"/><text x="88.1884%" y="1039.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (71 samples, 0.02%)</title><rect x="88.0016%" y="1013" width="0.0246%" height="15" fill="rgb(231,45,45)"/><text x="88.2516%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::from_raw (125 samples, 0.04%)</title><rect x="87.9832%" y="1029" width="0.0434%" height="15" fill="rgb(246,100,43)"/><text x="88.2332%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (56 samples, 0.02%)</title><rect x="88.0994%" y="949" width="0.0194%" height="15" fill="rgb(241,193,8)"/><text x="88.3494%" y="959.50"></text></g><g><title>core::mem::drop (130 samples, 0.05%)</title><rect x="88.0970%" y="981" width="0.0451%" height="15" fill="rgb(208,76,19)"/><text x="88.3470%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (126 samples, 0.04%)</title><rect x="88.0984%" y="965" width="0.0437%" height="15" fill="rgb(223,69,40)"/><text x="88.3484%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (67 samples, 0.02%)</title><rect x="88.1188%" y="949" width="0.0232%" height="15" fill="rgb(207,120,39)"/><text x="88.3688%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="88.1192%" y="933" width="0.0229%" height="15" fill="rgb(212,209,28)"/><text x="88.3692%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (62 samples, 0.02%)</title><rect x="88.1206%" y="917" width="0.0215%" height="15" fill="rgb(246,82,29)"/><text x="88.3706%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (50 samples, 0.02%)</title><rect x="88.1247%" y="901" width="0.0173%" height="15" fill="rgb(239,6,40)"/><text x="88.3747%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (38 samples, 0.01%)</title><rect x="88.1289%" y="885" width="0.0132%" height="15" fill="rgb(228,181,35)"/><text x="88.3789%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (182 samples, 0.06%)</title><rect x="88.0935%" y="997" width="0.0631%" height="15" fill="rgb(238,151,2)"/><text x="88.3435%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::scheduler_view (64 samples, 0.02%)</title><rect x="88.1567%" y="997" width="0.0222%" height="15" fill="rgb(236,94,18)"/><text x="88.4067%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::header (35 samples, 0.01%)</title><rect x="88.1667%" y="981" width="0.0121%" height="15" fill="rgb(208,38,14)"/><text x="88.4167%" y="991.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound (79 samples, 0.03%)</title><rect x="88.1993%" y="981" width="0.0274%" height="15" fill="rgb(234,215,27)"/><text x="88.4493%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (51 samples, 0.02%)</title><rect x="88.2090%" y="965" width="0.0177%" height="15" fill="rgb(254,211,53)"/><text x="88.4590%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (142 samples, 0.05%)</title><rect x="88.3027%" y="901" width="0.0493%" height="15" fill="rgb(216,175,11)"/><text x="88.5527%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (112 samples, 0.04%)</title><rect x="88.3131%" y="885" width="0.0389%" height="15" fill="rgb(246,179,26)"/><text x="88.5631%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (46 samples, 0.02%)</title><rect x="88.3655%" y="885" width="0.0160%" height="15" fill="rgb(249,19,52)"/><text x="88.6155%" y="895.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (308 samples, 0.11%)</title><rect x="88.2805%" y="917" width="0.1069%" height="15" fill="rgb(230,42,52)"/><text x="88.5305%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release::{{closure}} (102 samples, 0.04%)</title><rect x="88.3520%" y="901" width="0.0354%" height="15" fill="rgb(221,171,0)"/><text x="88.6020%" y="911.50"></text></g><g><title>__GI___pthread_mutex_unlock (32 samples, 0.01%)</title><rect x="88.4106%" y="837" width="0.0111%" height="15" fill="rgb(222,177,40)"/><text x="88.6606%" y="847.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (31 samples, 0.01%)</title><rect x="88.4110%" y="821" width="0.0108%" height="15" fill="rgb(247,34,16)"/><text x="88.6610%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (42 samples, 0.01%)</title><rect x="88.4089%" y="869" width="0.0146%" height="15" fill="rgb(213,217,37)"/><text x="88.6589%" y="879.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (40 samples, 0.01%)</title><rect x="88.4096%" y="853" width="0.0139%" height="15" fill="rgb(231,189,24)"/><text x="88.6596%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (91 samples, 0.03%)</title><rect x="88.4002%" y="901" width="0.0316%" height="15" fill="rgb(214,22,9)"/><text x="88.6502%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.03%)</title><rect x="88.4051%" y="885" width="0.0267%" height="15" fill="rgb(212,70,22)"/><text x="88.6551%" y="895.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (36 samples, 0.01%)</title><rect x="88.4474%" y="853" width="0.0125%" height="15" fill="rgb(249,64,51)"/><text x="88.6974%" y="863.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (67 samples, 0.02%)</title><rect x="88.4443%" y="869" width="0.0232%" height="15" fill="rgb(249,148,20)"/><text x="88.6943%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.01%)</title><rect x="88.4693%" y="837" width="0.0132%" height="15" fill="rgb(246,46,48)"/><text x="88.7193%" y="847.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_closed (283 samples, 0.10%)</title><rect x="88.3874%" y="917" width="0.0982%" height="15" fill="rgb(217,34,48)"/><text x="88.6374%" y="927.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (155 samples, 0.05%)</title><rect x="88.4318%" y="901" width="0.0538%" height="15" fill="rgb(222,45,26)"/><text x="88.6818%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (129 samples, 0.04%)</title><rect x="88.4408%" y="885" width="0.0448%" height="15" fill="rgb(230,201,36)"/><text x="88.6908%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (52 samples, 0.02%)</title><rect x="88.4675%" y="869" width="0.0180%" height="15" fill="rgb(217,30,43)"/><text x="88.7175%" y="879.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (49 samples, 0.02%)</title><rect x="88.4686%" y="853" width="0.0170%" height="15" fill="rgb(230,197,40)"/><text x="88.7186%" y="863.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::header (36 samples, 0.01%)</title><rect x="88.4904%" y="917" width="0.0125%" height="15" fill="rgb(239,181,18)"/><text x="88.7404%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (50 samples, 0.02%)</title><rect x="88.5171%" y="901" width="0.0173%" height="15" fill="rgb(222,60,39)"/><text x="88.7671%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.01%)</title><rect x="88.5241%" y="885" width="0.0104%" height="15" fill="rgb(210,60,22)"/><text x="88.7741%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (39 samples, 0.01%)</title><rect x="88.5345%" y="901" width="0.0135%" height="15" fill="rgb(239,213,48)"/><text x="88.7845%" y="911.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (70 samples, 0.02%)</title><rect x="88.5480%" y="901" width="0.0243%" height="15" fill="rgb(253,214,23)"/><text x="88.7980%" y="911.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::push::{{closure}} (50 samples, 0.02%)</title><rect x="88.5550%" y="885" width="0.0173%" height="15" fill="rgb(211,98,45)"/><text x="88.8050%" y="895.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (39 samples, 0.01%)</title><rect x="88.5588%" y="869" width="0.0135%" height="15" fill="rgb(239,130,44)"/><text x="88.8088%" y="879.50"></text></g><g><title>tokio::runtime::task::stack::TransferStack&lt;T&gt;::push (235 samples, 0.08%)</title><rect x="88.5029%" y="917" width="0.0815%" height="15" fill="rgb(222,181,35)"/><text x="88.7529%" y="927.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::into_raw (35 samples, 0.01%)</title><rect x="88.5723%" y="901" width="0.0121%" height="15" fill="rgb(219,219,49)"/><text x="88.8223%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release (1,056 samples, 0.37%)</title><rect x="88.2267%" y="981" width="0.3664%" height="15" fill="rgb(227,161,51)"/><text x="88.4767%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1,041 samples, 0.36%)</title><rect x="88.2319%" y="965" width="0.3612%" height="15" fill="rgb(239,112,27)"/><text x="88.4819%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::release::{{closure}} (1,013 samples, 0.35%)</title><rect x="88.2417%" y="949" width="0.3515%" height="15" fill="rgb(248,122,18)"/><text x="88.4917%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::release (989 samples, 0.34%)</title><rect x="88.2500%" y="933" width="0.3431%" height="15" fill="rgb(245,130,23)"/><text x="88.5000%" y="943.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (32 samples, 0.01%)</title><rect x="88.5987%" y="965" width="0.0111%" height="15" fill="rgb(211,225,28)"/><text x="88.8487%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::to_task (79 samples, 0.03%)</title><rect x="88.5931%" y="981" width="0.0274%" height="15" fill="rgb(242,105,44)"/><text x="88.8431%" y="991.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (31 samples, 0.01%)</title><rect x="88.6098%" y="965" width="0.0108%" height="15" fill="rgb(216,183,46)"/><text x="88.8598%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (50 samples, 0.02%)</title><rect x="88.6473%" y="949" width="0.0173%" height="15" fill="rgb(227,112,9)"/><text x="88.8973%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.01%)</title><rect x="88.6514%" y="933" width="0.0132%" height="15" fill="rgb(244,21,0)"/><text x="88.9014%" y="943.50"></text></g><g><title>tokio::runtime::task::state::State::load (51 samples, 0.02%)</title><rect x="88.6646%" y="949" width="0.0177%" height="15" fill="rgb(236,185,14)"/><text x="88.9146%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1,787 samples, 0.62%)</title><rect x="88.0734%" y="1013" width="0.6200%" height="15" fill="rgb(236,170,30)"/><text x="88.3234%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_terminal (1,483 samples, 0.51%)</title><rect x="88.1789%" y="997" width="0.5145%" height="15" fill="rgb(209,198,51)"/><text x="88.4289%" y="1007.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (208 samples, 0.07%)</title><rect x="88.6212%" y="981" width="0.0722%" height="15" fill="rgb(205,171,26)"/><text x="88.8712%" y="991.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (182 samples, 0.06%)</title><rect x="88.6303%" y="965" width="0.0631%" height="15" fill="rgb(246,41,49)"/><text x="88.8803%" y="975.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal::{{closure}} (32 samples, 0.01%)</title><rect x="88.6823%" y="949" width="0.0111%" height="15" fill="rgb(240,229,12)"/><text x="88.9323%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::header (64 samples, 0.02%)</title><rect x="88.7701%" y="997" width="0.0222%" height="15" fill="rgb(212,8,54)"/><text x="89.0201%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::core (39 samples, 0.01%)</title><rect x="88.8062%" y="981" width="0.0135%" height="15" fill="rgb(230,114,13)"/><text x="89.0562%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::scheduler_view (155 samples, 0.05%)</title><rect x="88.7923%" y="997" width="0.0538%" height="15" fill="rgb(229,130,28)"/><text x="89.0423%" y="1007.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::header (76 samples, 0.03%)</title><rect x="88.8197%" y="981" width="0.0264%" height="15" fill="rgb(206,139,15)"/><text x="89.0697%" y="991.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (49 samples, 0.02%)</title><rect x="88.8291%" y="965" width="0.0170%" height="15" fill="rgb(241,188,35)"/><text x="89.0791%" y="975.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (36 samples, 0.01%)</title><rect x="88.8839%" y="965" width="0.0125%" height="15" fill="rgb(208,224,26)"/><text x="89.1339%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (136 samples, 0.05%)</title><rect x="88.9200%" y="933" width="0.0472%" height="15" fill="rgb(251,131,28)"/><text x="89.1700%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (119 samples, 0.04%)</title><rect x="88.9259%" y="917" width="0.0413%" height="15" fill="rgb(208,153,1)"/><text x="89.1759%" y="927.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (53 samples, 0.02%)</title><rect x="88.9488%" y="901" width="0.0184%" height="15" fill="rgb(234,33,36)"/><text x="89.1988%" y="911.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (46 samples, 0.02%)</title><rect x="88.9512%" y="885" width="0.0160%" height="15" fill="rgb(246,42,29)"/><text x="89.2012%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (52 samples, 0.02%)</title><rect x="88.9765%" y="917" width="0.0180%" height="15" fill="rgb(251,114,16)"/><text x="89.2265%" y="927.50"></text></g><g><title>core::cell::BorrowRefMut::new (34 samples, 0.01%)</title><rect x="89.0022%" y="885" width="0.0118%" height="15" fill="rgb(233,13,38)"/><text x="89.2522%" y="895.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (42 samples, 0.01%)</title><rect x="88.9998%" y="901" width="0.0146%" height="15" fill="rgb(247,120,19)"/><text x="89.2498%" y="911.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (54 samples, 0.02%)</title><rect x="88.9963%" y="917" width="0.0187%" height="15" fill="rgb(205,11,16)"/><text x="89.2463%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="89.0251%" y="917" width="0.0139%" height="15" fill="rgb(228,185,19)"/><text x="89.2751%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.01%)</title><rect x="89.0261%" y="901" width="0.0128%" height="15" fill="rgb(239,88,52)"/><text x="89.2761%" y="911.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (35 samples, 0.01%)</title><rect x="89.0268%" y="885" width="0.0121%" height="15" fill="rgb(219,23,1)"/><text x="89.2768%" y="895.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::as_raw (29 samples, 0.01%)</title><rect x="89.0657%" y="901" width="0.0101%" height="15" fill="rgb(253,177,16)"/><text x="89.3157%" y="911.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::pointers (60 samples, 0.02%)</title><rect x="89.0757%" y="901" width="0.0208%" height="15" fill="rgb(225,150,40)"/><text x="89.3257%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::bind_scheduler (665 samples, 0.23%)</title><rect x="88.8759%" y="981" width="0.2307%" height="15" fill="rgb(208,108,30)"/><text x="89.1259%" y="991.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind (593 samples, 0.21%)</title><rect x="88.9009%" y="965" width="0.2057%" height="15" fill="rgb(214,122,4)"/><text x="89.1509%" y="975.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (586 samples, 0.20%)</title><rect x="88.9033%" y="949" width="0.2033%" height="15" fill="rgb(229,74,37)"/><text x="89.1533%" y="959.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::bind::{{closure}} (402 samples, 0.14%)</title><rect x="88.9671%" y="933" width="0.1395%" height="15" fill="rgb(233,61,41)"/><text x="89.2171%" y="943.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (195 samples, 0.07%)</title><rect x="89.0390%" y="917" width="0.0677%" height="15" fill="rgb(238,191,5)"/><text x="89.2890%" y="927.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound (206 samples, 0.07%)</title><rect x="89.1066%" y="981" width="0.0715%" height="15" fill="rgb(233,78,24)"/><text x="89.3566%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (144 samples, 0.05%)</title><rect x="89.1281%" y="965" width="0.0500%" height="15" fill="rgb(211,142,8)"/><text x="89.3781%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Scheduler&lt;S&gt;::is_bound::{{closure}} (62 samples, 0.02%)</title><rect x="89.1566%" y="949" width="0.0215%" height="15" fill="rgb(253,38,53)"/><text x="89.4066%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (47 samples, 0.02%)</title><rect x="89.1618%" y="933" width="0.0163%" height="15" fill="rgb(234,63,51)"/><text x="89.4118%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::to_task (35 samples, 0.01%)</title><rect x="89.1781%" y="981" width="0.0121%" height="15" fill="rgb(205,23,31)"/><text x="89.4281%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (92 samples, 0.03%)</title><rect x="89.2360%" y="949" width="0.0319%" height="15" fill="rgb(210,184,50)"/><text x="89.4860%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.02%)</title><rect x="89.2454%" y="933" width="0.0226%" height="15" fill="rgb(222,112,26)"/><text x="89.4954%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (55 samples, 0.02%)</title><rect x="89.2829%" y="933" width="0.0191%" height="15" fill="rgb(250,98,18)"/><text x="89.5329%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (34 samples, 0.01%)</title><rect x="89.2902%" y="917" width="0.0118%" height="15" fill="rgb(250,34,12)"/><text x="89.5402%" y="927.50"></text></g><g><title>tokio::runtime::task::state::State::load (99 samples, 0.03%)</title><rect x="89.2680%" y="949" width="0.0343%" height="15" fill="rgb(236,141,30)"/><text x="89.5180%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::SchedulerView&lt;S&gt;::transition_to_running (1,427 samples, 0.50%)</title><rect x="88.8461%" y="997" width="0.4951%" height="15" fill="rgb(246,134,38)"/><text x="89.0961%" y="1007.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (435 samples, 0.15%)</title><rect x="89.1902%" y="981" width="0.1509%" height="15" fill="rgb(240,114,4)"/><text x="89.4402%" y="991.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (412 samples, 0.14%)</title><rect x="89.1982%" y="965" width="0.1429%" height="15" fill="rgb(243,113,39)"/><text x="89.4482%" y="975.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::{{closure}} (112 samples, 0.04%)</title><rect x="89.3023%" y="949" width="0.0389%" height="15" fill="rgb(239,215,4)"/><text x="89.5523%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned (32 samples, 0.01%)</title><rect x="89.4980%" y="949" width="0.0111%" height="15" fill="rgb(236,229,45)"/><text x="89.7480%" y="959.50"></text></g><g><title>__rust_try (46 samples, 0.02%)</title><rect x="89.5091%" y="949" width="0.0160%" height="15" fill="rgb(242,2,6)"/><text x="89.7591%" y="959.50"></text></g><g><title>std::panic::catch_unwind (318 samples, 0.11%)</title><rect x="89.4269%" y="981" width="0.1103%" height="15" fill="rgb(239,108,21)"/><text x="89.6769%" y="991.50"></text></g><g><title>std::panicking::try (250 samples, 0.09%)</title><rect x="89.4505%" y="965" width="0.0867%" height="15" fill="rgb(215,168,34)"/><text x="89.7005%" y="975.50"></text></g><g><title>tokio::runtime::task::state::State::load (52 samples, 0.02%)</title><rect x="89.5917%" y="949" width="0.0180%" height="15" fill="rgb(238,31,17)"/><text x="89.8417%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (860 samples, 0.30%)</title><rect x="89.3412%" y="997" width="0.2984%" height="15" fill="rgb(220,133,11)"/><text x="89.5912%" y="1007.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (270 samples, 0.09%)</title><rect x="89.5459%" y="981" width="0.0937%" height="15" fill="rgb(212,158,23)"/><text x="89.7959%" y="991.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update (248 samples, 0.09%)</title><rect x="89.5535%" y="965" width="0.0860%" height="15" fill="rgb(223,172,7)"/><text x="89.8035%" y="975.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::{{closure}} (86 samples, 0.03%)</title><rect x="89.6097%" y="949" width="0.0298%" height="15" fill="rgb(244,3,52)"/><text x="89.8597%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,894 samples, 1.00%)</title><rect x="88.6937%" y="1013" width="1.0041%" height="15" fill="rgb(207,69,27)"/><text x="88.9437%" y="1023.50"></text></g><g><title>tokio::runtime::task::waker::waker_ref (168 samples, 0.06%)</title><rect x="89.6395%" y="997" width="0.0583%" height="15" fill="rgb(213,136,45)"/><text x="89.8895%" y="1007.50"></text></g><g><title>tokio::runtime::task::waker::raw_waker (83 samples, 0.03%)</title><rect x="89.6690%" y="981" width="0.0288%" height="15" fill="rgb(218,79,17)"/><text x="89.9190%" y="991.50"></text></g><g><title>tokio::coop::budget (7,975 samples, 2.77%)</title><rect x="86.9312%" y="1173" width="2.7670%" height="15" fill="rgb(216,106,36)"/><text x="87.1812%" y="1183.50">to..</text></g><g><title>tokio::coop::with_budget (7,948 samples, 2.76%)</title><rect x="86.9406%" y="1157" width="2.7576%" height="15" fill="rgb(251,27,45)"/><text x="87.1906%" y="1167.50">to..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7,933 samples, 2.75%)</title><rect x="86.9458%" y="1141" width="2.7524%" height="15" fill="rgb(232,21,34)"/><text x="87.1958%" y="1151.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7,840 samples, 2.72%)</title><rect x="86.9780%" y="1125" width="2.7201%" height="15" fill="rgb(249,191,16)"/><text x="87.2280%" y="1135.50">st..</text></g><g><title>tokio::coop::with_budget::{{closure}} (7,533 samples, 2.61%)</title><rect x="87.0846%" y="1109" width="2.6136%" height="15" fill="rgb(224,88,20)"/><text x="87.3346%" y="1119.50">to..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::{{closure}} (6,990 samples, 2.43%)</title><rect x="87.2730%" y="1093" width="2.4252%" height="15" fill="rgb(237,93,27)"/><text x="87.5230%" y="1103.50">to..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (5,320 samples, 1.85%)</title><rect x="87.8524%" y="1077" width="1.8458%" height="15" fill="rgb(226,198,48)"/><text x="88.1024%" y="1087.50">t..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (5,207 samples, 1.81%)</title><rect x="87.8916%" y="1061" width="1.8066%" height="15" fill="rgb(207,162,53)"/><text x="88.1416%" y="1071.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (5,024 samples, 1.74%)</title><rect x="87.9551%" y="1045" width="1.7431%" height="15" fill="rgb(207,169,9)"/><text x="88.2051%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4,818 samples, 1.67%)</title><rect x="88.0265%" y="1029" width="1.6716%" height="15" fill="rgb(224,166,46)"/><text x="88.2765%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (59 samples, 0.02%)</title><rect x="89.7443%" y="1109" width="0.0205%" height="15" fill="rgb(233,26,6)"/><text x="89.9943%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_sub (44 samples, 0.02%)</title><rect x="89.7495%" y="1093" width="0.0153%" height="15" fill="rgb(218,106,45)"/><text x="89.9995%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_from_searching (113 samples, 0.04%)</title><rect x="89.7270%" y="1141" width="0.0392%" height="15" fill="rgb(240,217,4)"/><text x="89.9770%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::dec_num_searching (97 samples, 0.03%)</title><rect x="89.7325%" y="1125" width="0.0337%" height="15" fill="rgb(246,171,10)"/><text x="89.9825%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (46 samples, 0.02%)</title><rect x="89.7849%" y="1109" width="0.0160%" height="15" fill="rgb(223,197,30)"/><text x="90.0349%" y="1119.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (36 samples, 0.01%)</title><rect x="89.7884%" y="1093" width="0.0125%" height="15" fill="rgb(207,92,16)"/><text x="90.0384%" y="1103.50"></text></g><g><title>mark_wake_futex (41 samples, 0.01%)</title><rect x="89.9053%" y="965" width="0.0142%" height="15" fill="rgb(211,6,44)"/><text x="90.1553%" y="975.50"></text></g><g><title>available_idle_cpu (32 samples, 0.01%)</title><rect x="90.0073%" y="901" width="0.0111%" height="15" fill="rgb(219,139,2)"/><text x="90.2573%" y="911.50"></text></g><g><title>select_idle_sibling (110 samples, 0.04%)</title><rect x="90.0042%" y="917" width="0.0382%" height="15" fill="rgb(224,103,21)"/><text x="90.2542%" y="927.50"></text></g><g><title>select_idle_sibling.part.0 (57 samples, 0.02%)</title><rect x="90.0226%" y="901" width="0.0198%" height="15" fill="rgb(254,110,48)"/><text x="90.2726%" y="911.50"></text></g><g><title>select_task_rq_fair (198 samples, 0.07%)</title><rect x="89.9751%" y="933" width="0.0687%" height="15" fill="rgb(212,88,19)"/><text x="90.2251%" y="943.50"></text></g><g><title>enqueue_entity (176 samples, 0.06%)</title><rect x="90.0812%" y="885" width="0.0611%" height="15" fill="rgb(248,103,6)"/><text x="90.3312%" y="895.50"></text></g><g><title>update_load_avg (87 samples, 0.03%)</title><rect x="90.1121%" y="869" width="0.0302%" height="15" fill="rgb(214,53,46)"/><text x="90.3621%" y="879.50"></text></g><g><title>enqueue_task_fair (254 samples, 0.09%)</title><rect x="90.0649%" y="901" width="0.0881%" height="15" fill="rgb(236,190,24)"/><text x="90.3149%" y="911.50"></text></g><g><title>psi_task_change (221 samples, 0.08%)</title><rect x="90.1530%" y="901" width="0.0767%" height="15" fill="rgb(254,58,28)"/><text x="90.4030%" y="911.50"></text></g><g><title>activate_task (501 samples, 0.17%)</title><rect x="90.0569%" y="917" width="0.1738%" height="15" fill="rgb(243,63,27)"/><text x="90.3069%" y="927.50"></text></g><g><title>resched_curr (42 samples, 0.01%)</title><rect x="90.2478%" y="885" width="0.0146%" height="15" fill="rgb(206,81,20)"/><text x="90.4978%" y="895.50"></text></g><g><title>native_smp_send_reschedule (38 samples, 0.01%)</title><rect x="90.2491%" y="869" width="0.0132%" height="15" fill="rgb(252,69,51)"/><text x="90.4991%" y="879.50"></text></g><g><title>default_send_IPI_single_phys (30 samples, 0.01%)</title><rect x="90.2519%" y="853" width="0.0104%" height="15" fill="rgb(222,213,4)"/><text x="90.5019%" y="863.50"></text></g><g><title>check_preempt_curr (82 samples, 0.03%)</title><rect x="90.2349%" y="901" width="0.0285%" height="15" fill="rgb(226,198,12)"/><text x="90.4849%" y="911.50"></text></g><g><title>ttwu_do_activate (606 samples, 0.21%)</title><rect x="90.0535%" y="933" width="0.2103%" height="15" fill="rgb(248,115,11)"/><text x="90.3035%" y="943.50"></text></g><g><title>ttwu_do_wakeup (84 samples, 0.03%)</title><rect x="90.2346%" y="917" width="0.0291%" height="15" fill="rgb(221,148,54)"/><text x="90.4846%" y="927.50"></text></g><g><title>try_to_wake_up (974 samples, 0.34%)</title><rect x="89.9369%" y="949" width="0.3379%" height="15" fill="rgb(214,209,51)"/><text x="90.1869%" y="959.50"></text></g><g><title>futex_wake (1,128 samples, 0.39%)</title><rect x="89.8838%" y="981" width="0.3914%" height="15" fill="rgb(249,116,53)"/><text x="90.1338%" y="991.50"></text></g><g><title>wake_up_q (1,002 samples, 0.35%)</title><rect x="89.9275%" y="965" width="0.3476%" height="15" fill="rgb(248,170,1)"/><text x="90.1775%" y="975.50"></text></g><g><title>do_futex (1,157 samples, 0.40%)</title><rect x="89.8786%" y="997" width="0.4014%" height="15" fill="rgb(244,105,10)"/><text x="90.1286%" y="1007.50"></text></g><g><title>__x64_sys_futex (1,171 samples, 0.41%)</title><rect x="89.8769%" y="1013" width="0.4063%" height="15" fill="rgb(229,100,5)"/><text x="90.1269%" y="1023.50"></text></g><g><title>do_syscall_64 (1,233 samples, 0.43%)</title><rect x="89.8665%" y="1029" width="0.4278%" height="15" fill="rgb(233,221,39)"/><text x="90.1165%" y="1039.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,251 samples, 0.43%)</title><rect x="89.8606%" y="1045" width="0.4340%" height="15" fill="rgb(233,88,21)"/><text x="90.1106%" y="1055.50"></text></g><g><title>__pthread_cond_signal (1,362 samples, 0.47%)</title><rect x="89.8314%" y="1077" width="0.4726%" height="15" fill="rgb(206,13,0)"/><text x="90.0814%" y="1087.50"></text></g><g><title>futex_wake (1,297 samples, 0.45%)</title><rect x="89.8540%" y="1061" width="0.4500%" height="15" fill="rgb(242,15,35)"/><text x="90.1040%" y="1071.50"></text></g><g><title>core::mem::drop (52 samples, 0.02%)</title><rect x="90.3040%" y="1077" width="0.0180%" height="15" fill="rgb(247,142,41)"/><text x="90.5540%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (49 samples, 0.02%)</title><rect x="90.3050%" y="1061" width="0.0170%" height="15" fill="rgb(245,51,29)"/><text x="90.5550%" y="1071.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="90.3109%" y="1045" width="0.0111%" height="15" fill="rgb(228,209,43)"/><text x="90.5609%" y="1055.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (52 samples, 0.02%)</title><rect x="90.3390%" y="1045" width="0.0180%" height="15" fill="rgb(233,185,9)"/><text x="90.5890%" y="1055.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (1,550 samples, 0.54%)</title><rect x="89.8252%" y="1093" width="0.5378%" height="15" fill="rgb(226,93,0)"/><text x="90.0752%" y="1103.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (101 samples, 0.04%)</title><rect x="90.3279%" y="1077" width="0.0350%" height="15" fill="rgb(245,194,43)"/><text x="90.5779%" y="1087.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.03%)</title><rect x="90.3348%" y="1061" width="0.0281%" height="15" fill="rgb(211,145,34)"/><text x="90.5848%" y="1071.50"></text></g><g><title>activate_task (49 samples, 0.02%)</title><rect x="90.4282%" y="629" width="0.0170%" height="15" fill="rgb(231,228,28)"/><text x="90.6782%" y="639.50"></text></g><g><title>ttwu_do_activate (55 samples, 0.02%)</title><rect x="90.4282%" y="645" width="0.0191%" height="15" fill="rgb(236,149,4)"/><text x="90.6782%" y="655.50"></text></g><g><title>__wake_up_common (109 samples, 0.04%)</title><rect x="90.4112%" y="709" width="0.0378%" height="15" fill="rgb(234,114,38)"/><text x="90.6612%" y="719.50"></text></g><g><title>autoremove_wake_function (107 samples, 0.04%)</title><rect x="90.4119%" y="693" width="0.0371%" height="15" fill="rgb(246,132,51)"/><text x="90.6619%" y="703.50"></text></g><g><title>default_wake_function (103 samples, 0.04%)</title><rect x="90.4133%" y="677" width="0.0357%" height="15" fill="rgb(251,137,22)"/><text x="90.6633%" y="687.50"></text></g><g><title>try_to_wake_up (100 samples, 0.03%)</title><rect x="90.4143%" y="661" width="0.0347%" height="15" fill="rgb(243,59,52)"/><text x="90.6643%" y="671.50"></text></g><g><title>__wake_up_common_lock (115 samples, 0.04%)</title><rect x="90.4105%" y="725" width="0.0399%" height="15" fill="rgb(239,56,28)"/><text x="90.6605%" y="735.50"></text></g><g><title>__wake_up (117 samples, 0.04%)</title><rect x="90.4101%" y="741" width="0.0406%" height="15" fill="rgb(218,168,27)"/><text x="90.6601%" y="751.50"></text></g><g><title>__wake_up_common (138 samples, 0.05%)</title><rect x="90.4060%" y="773" width="0.0479%" height="15" fill="rgb(232,165,11)"/><text x="90.6560%" y="783.50"></text></g><g><title>ep_poll_callback (130 samples, 0.05%)</title><rect x="90.4087%" y="757" width="0.0451%" height="15" fill="rgb(253,55,41)"/><text x="90.6587%" y="767.50"></text></g><g><title>__wake_up_locked_key (141 samples, 0.05%)</title><rect x="90.4060%" y="789" width="0.0489%" height="15" fill="rgb(233,206,24)"/><text x="90.6560%" y="799.50"></text></g><g><title>__vfs_write (159 samples, 0.06%)</title><rect x="90.4046%" y="821" width="0.0552%" height="15" fill="rgb(220,199,8)"/><text x="90.6546%" y="831.50"></text></g><g><title>eventfd_write (158 samples, 0.05%)</title><rect x="90.4049%" y="805" width="0.0548%" height="15" fill="rgb(254,65,26)"/><text x="90.6549%" y="815.50"></text></g><g><title>__x64_sys_write (217 samples, 0.08%)</title><rect x="90.3935%" y="869" width="0.0753%" height="15" fill="rgb(253,102,23)"/><text x="90.6435%" y="879.50"></text></g><g><title>ksys_write (215 samples, 0.07%)</title><rect x="90.3942%" y="853" width="0.0746%" height="15" fill="rgb(231,103,35)"/><text x="90.6442%" y="863.50"></text></g><g><title>vfs_write (191 samples, 0.07%)</title><rect x="90.4025%" y="837" width="0.0663%" height="15" fill="rgb(238,26,10)"/><text x="90.6525%" y="847.50"></text></g><g><title>__GI___libc_write (238 samples, 0.08%)</title><rect x="90.3869%" y="933" width="0.0826%" height="15" fill="rgb(234,191,34)"/><text x="90.6369%" y="943.50"></text></g><g><title>__GI___libc_write (234 samples, 0.08%)</title><rect x="90.3883%" y="917" width="0.0812%" height="15" fill="rgb(206,210,9)"/><text x="90.6383%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (227 samples, 0.08%)</title><rect x="90.3907%" y="901" width="0.0788%" height="15" fill="rgb(219,155,3)"/><text x="90.6407%" y="911.50"></text></g><g><title>do_syscall_64 (223 samples, 0.08%)</title><rect x="90.3921%" y="885" width="0.0774%" height="15" fill="rgb(221,62,52)"/><text x="90.6421%" y="895.50"></text></g><g><title>mio::waker::Waker::wake (258 samples, 0.09%)</title><rect x="90.3806%" y="1013" width="0.0895%" height="15" fill="rgb(215,197,36)"/><text x="90.6306%" y="1023.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (254 samples, 0.09%)</title><rect x="90.3820%" y="997" width="0.0881%" height="15" fill="rgb(226,222,6)"/><text x="90.6320%" y="1007.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (245 samples, 0.09%)</title><rect x="90.3852%" y="981" width="0.0850%" height="15" fill="rgb(215,58,28)"/><text x="90.6352%" y="991.50"></text></g><g><title>std::sys::unix::fs::File::write (240 samples, 0.08%)</title><rect x="90.3869%" y="965" width="0.0833%" height="15" fill="rgb(212,148,2)"/><text x="90.6369%" y="975.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (240 samples, 0.08%)</title><rect x="90.3869%" y="949" width="0.0833%" height="15" fill="rgb(208,21,42)"/><text x="90.6369%" y="959.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (1,970 samples, 0.68%)</title><rect x="89.8009%" y="1109" width="0.6835%" height="15" fill="rgb(209,107,26)"/><text x="90.0509%" y="1119.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_driver (350 samples, 0.12%)</title><rect x="90.3630%" y="1093" width="0.1214%" height="15" fill="rgb(254,60,47)"/><text x="90.6130%" y="1103.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (341 samples, 0.12%)</title><rect x="90.3661%" y="1077" width="0.1183%" height="15" fill="rgb(207,226,45)"/><text x="90.6161%" y="1087.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (338 samples, 0.12%)</title><rect x="90.3671%" y="1061" width="0.1173%" height="15" fill="rgb(223,124,22)"/><text x="90.6171%" y="1071.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (335 samples, 0.12%)</title><rect x="90.3682%" y="1045" width="0.1162%" height="15" fill="rgb(240,162,13)"/><text x="90.6182%" y="1055.50"></text></g><g><title>tokio::io::driver::Handle::wakeup (332 samples, 0.12%)</title><rect x="90.3692%" y="1029" width="0.1152%" height="15" fill="rgb(244,199,31)"/><text x="90.6192%" y="1039.50"></text></g><g><title>tokio::io::driver::Handle::inner (41 samples, 0.01%)</title><rect x="90.4702%" y="1013" width="0.0142%" height="15" fill="rgb(207,92,16)"/><text x="90.7202%" y="1023.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (40 samples, 0.01%)</title><rect x="90.4705%" y="997" width="0.0139%" height="15" fill="rgb(215,31,19)"/><text x="90.7205%" y="1007.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (2,054 samples, 0.71%)</title><rect x="89.7724%" y="1125" width="0.7126%" height="15" fill="rgb(245,118,14)"/><text x="90.0224%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (34 samples, 0.01%)</title><rect x="90.5132%" y="1093" width="0.0118%" height="15" fill="rgb(248,12,46)"/><text x="90.7632%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (104 samples, 0.04%)</title><rect x="90.5055%" y="1109" width="0.0361%" height="15" fill="rgb(209,119,0)"/><text x="90.7555%" y="1119.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.01%)</title><rect x="90.5507%" y="1077" width="0.0101%" height="15" fill="rgb(254,51,44)"/><text x="90.8007%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (72 samples, 0.02%)</title><rect x="90.5454%" y="1109" width="0.0250%" height="15" fill="rgb(253,182,35)"/><text x="90.7954%" y="1119.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.02%)</title><rect x="90.5489%" y="1093" width="0.0215%" height="15" fill="rgb(205,198,39)"/><text x="90.7989%" y="1103.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (42 samples, 0.01%)</title><rect x="90.5763%" y="1061" width="0.0146%" height="15" fill="rgb(251,175,48)"/><text x="90.8263%" y="1071.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (60 samples, 0.02%)</title><rect x="90.5739%" y="1077" width="0.0208%" height="15" fill="rgb(239,38,17)"/><text x="90.8239%" y="1087.50"></text></g><g><title>__GI___pthread_mutex_lock (30 samples, 0.01%)</title><rect x="90.5968%" y="1045" width="0.0104%" height="15" fill="rgb(212,101,8)"/><text x="90.8468%" y="1055.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (115 samples, 0.04%)</title><rect x="90.5708%" y="1109" width="0.0399%" height="15" fill="rgb(228,35,17)"/><text x="90.8208%" y="1119.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (111 samples, 0.04%)</title><rect x="90.5722%" y="1093" width="0.0385%" height="15" fill="rgb(214,95,8)"/><text x="90.8222%" y="1103.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (46 samples, 0.02%)</title><rect x="90.5947%" y="1077" width="0.0160%" height="15" fill="rgb(210,176,35)"/><text x="90.8447%" y="1087.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (44 samples, 0.02%)</title><rect x="90.5954%" y="1061" width="0.0153%" height="15" fill="rgb(226,4,3)"/><text x="90.8454%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (36 samples, 0.01%)</title><rect x="90.6291%" y="1093" width="0.0125%" height="15" fill="rgb(232,133,14)"/><text x="90.8791%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (95 samples, 0.03%)</title><rect x="90.6107%" y="1109" width="0.0330%" height="15" fill="rgb(250,191,8)"/><text x="90.8607%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (11,157 samples, 3.87%)</title><rect x="86.7779%" y="1189" width="3.8710%" height="15" fill="rgb(213,12,45)"/><text x="87.0279%" y="1199.50">toki..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_searching (2,740 samples, 0.95%)</title><rect x="89.6982%" y="1173" width="0.9507%" height="15" fill="rgb(233,78,26)"/><text x="89.9482%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::transition_worker_from_searching (2,682 samples, 0.93%)</title><rect x="89.7183%" y="1157" width="0.9305%" height="15" fill="rgb(245,222,11)"/><text x="89.9683%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (2,544 samples, 0.88%)</title><rect x="89.7662%" y="1141" width="0.8827%" height="15" fill="rgb(216,174,12)"/><text x="90.0162%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (472 samples, 0.16%)</title><rect x="90.4851%" y="1125" width="0.1638%" height="15" fill="rgb(213,15,9)"/><text x="90.7351%" y="1135.50"></text></g><g><title>ttwu_do_activate (30 samples, 0.01%)</title><rect x="90.8529%" y="917" width="0.0104%" height="15" fill="rgb(238,103,32)"/><text x="91.1029%" y="927.50"></text></g><g><title>futex_wake (166 samples, 0.06%)</title><rect x="90.8067%" y="965" width="0.0576%" height="15" fill="rgb(245,85,15)"/><text x="91.0567%" y="975.50"></text></g><g><title>wake_up_q (153 samples, 0.05%)</title><rect x="90.8112%" y="949" width="0.0531%" height="15" fill="rgb(254,204,5)"/><text x="91.0612%" y="959.50"></text></g><g><title>try_to_wake_up (151 samples, 0.05%)</title><rect x="90.8119%" y="933" width="0.0524%" height="15" fill="rgb(231,178,15)"/><text x="91.0619%" y="943.50"></text></g><g><title>__x64_sys_futex (168 samples, 0.06%)</title><rect x="90.8064%" y="997" width="0.0583%" height="15" fill="rgb(248,151,3)"/><text x="91.0564%" y="1007.50"></text></g><g><title>do_futex (168 samples, 0.06%)</title><rect x="90.8064%" y="981" width="0.0583%" height="15" fill="rgb(250,139,13)"/><text x="91.0564%" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (172 samples, 0.06%)</title><rect x="90.8053%" y="1029" width="0.0597%" height="15" fill="rgb(243,107,53)"/><text x="91.0553%" y="1039.50"></text></g><g><title>do_syscall_64 (170 samples, 0.06%)</title><rect x="90.8060%" y="1013" width="0.0590%" height="15" fill="rgb(232,81,15)"/><text x="91.0560%" y="1023.50"></text></g><g><title>__GI___pthread_mutex_unlock (182 samples, 0.06%)</title><rect x="90.8022%" y="1061" width="0.0631%" height="15" fill="rgb(225,187,48)"/><text x="91.0522%" y="1071.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (182 samples, 0.06%)</title><rect x="90.8022%" y="1045" width="0.0631%" height="15" fill="rgb(205,116,12)"/><text x="91.0522%" y="1055.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (191 samples, 0.07%)</title><rect x="90.8012%" y="1093" width="0.0663%" height="15" fill="rgb(220,222,31)"/><text x="91.0512%" y="1103.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (190 samples, 0.07%)</title><rect x="90.8015%" y="1077" width="0.0659%" height="15" fill="rgb(233,187,49)"/><text x="91.0515%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place (219 samples, 0.08%)</title><rect x="90.7977%" y="1125" width="0.0760%" height="15" fill="rgb(211,168,53)"/><text x="91.0477%" y="1135.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (214 samples, 0.07%)</title><rect x="90.7994%" y="1109" width="0.0742%" height="15" fill="rgb(206,160,16)"/><text x="91.0494%" y="1119.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (55 samples, 0.02%)</title><rect x="90.8976%" y="1077" width="0.0191%" height="15" fill="rgb(254,164,13)"/><text x="91.1476%" y="1087.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (72 samples, 0.02%)</title><rect x="90.8945%" y="1093" width="0.0250%" height="15" fill="rgb(229,45,30)"/><text x="91.1445%" y="1103.50"></text></g><g><title>__sched_text_start (44 samples, 0.02%)</title><rect x="90.9271%" y="917" width="0.0153%" height="15" fill="rgb(237,32,10)"/><text x="91.1771%" y="927.50"></text></g><g><title>futex_wait_queue_me (46 samples, 0.02%)</title><rect x="90.9268%" y="949" width="0.0160%" height="15" fill="rgb(251,20,47)"/><text x="91.1768%" y="959.50"></text></g><g><title>schedule (46 samples, 0.02%)</title><rect x="90.9268%" y="933" width="0.0160%" height="15" fill="rgb(251,116,12)"/><text x="91.1768%" y="943.50"></text></g><g><title>__x64_sys_futex (57 samples, 0.02%)</title><rect x="90.9254%" y="997" width="0.0198%" height="15" fill="rgb(214,227,27)"/><text x="91.1754%" y="1007.50"></text></g><g><title>do_futex (57 samples, 0.02%)</title><rect x="90.9254%" y="981" width="0.0198%" height="15" fill="rgb(248,10,53)"/><text x="91.1754%" y="991.50"></text></g><g><title>futex_wait (56 samples, 0.02%)</title><rect x="90.9257%" y="965" width="0.0194%" height="15" fill="rgb(221,176,25)"/><text x="91.1757%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (59 samples, 0.02%)</title><rect x="90.9250%" y="1029" width="0.0205%" height="15" fill="rgb(205,70,46)"/><text x="91.1750%" y="1039.50"></text></g><g><title>do_syscall_64 (58 samples, 0.02%)</title><rect x="90.9254%" y="1013" width="0.0201%" height="15" fill="rgb(217,45,38)"/><text x="91.1754%" y="1023.50"></text></g><g><title>__lll_lock_wait (62 samples, 0.02%)</title><rect x="90.9243%" y="1045" width="0.0215%" height="15" fill="rgb(243,6,54)"/><text x="91.1743%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_lock (78 samples, 0.03%)</title><rect x="90.9198%" y="1061" width="0.0271%" height="15" fill="rgb(242,76,23)"/><text x="91.1698%" y="1071.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (177 samples, 0.06%)</title><rect x="90.8882%" y="1125" width="0.0614%" height="15" fill="rgb(239,166,0)"/><text x="91.1382%" y="1135.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (165 samples, 0.06%)</title><rect x="90.8924%" y="1109" width="0.0572%" height="15" fill="rgb(238,174,32)"/><text x="91.1424%" y="1119.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (87 samples, 0.03%)</title><rect x="90.9195%" y="1093" width="0.0302%" height="15" fill="rgb(238,124,44)"/><text x="91.1695%" y="1103.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (87 samples, 0.03%)</title><rect x="90.9195%" y="1077" width="0.0302%" height="15" fill="rgb(206,185,9)"/><text x="91.1695%" y="1087.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (33 samples, 0.01%)</title><rect x="90.9774%" y="1093" width="0.0114%" height="15" fill="rgb(215,157,17)"/><text x="91.2274%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.02%)</title><rect x="90.9889%" y="1093" width="0.0167%" height="15" fill="rgb(251,17,29)"/><text x="91.2389%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.01%)</title><rect x="90.9944%" y="1077" width="0.0111%" height="15" fill="rgb(227,113,27)"/><text x="91.2444%" y="1087.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (162 samples, 0.06%)</title><rect x="90.9497%" y="1125" width="0.0562%" height="15" fill="rgb(217,226,24)"/><text x="91.1997%" y="1135.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::len (117 samples, 0.04%)</title><rect x="90.9653%" y="1109" width="0.0406%" height="15" fill="rgb(251,99,38)"/><text x="91.2153%" y="1119.50"></text></g><g><title>tokio::runtime::queue::get_next (52 samples, 0.02%)</title><rect x="91.0059%" y="1125" width="0.0180%" height="15" fill="rgb(231,147,19)"/><text x="91.2559%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (34 samples, 0.01%)</title><rect x="91.0121%" y="1109" width="0.0118%" height="15" fill="rgb(230,86,8)"/><text x="91.2621%" y="1119.50"></text></g><g><title>tokio::runtime::queue::set_next (31 samples, 0.01%)</title><rect x="91.0239%" y="1125" width="0.0108%" height="15" fill="rgb(237,159,39)"/><text x="91.2739%" y="1135.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::pop (888 samples, 0.31%)</title><rect x="90.7356%" y="1141" width="0.3081%" height="15" fill="rgb(247,179,47)"/><text x="90.9856%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.01%)</title><rect x="91.0565%" y="1125" width="0.0142%" height="15" fill="rgb(253,152,26)"/><text x="91.3065%" y="1135.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (30 samples, 0.01%)</title><rect x="91.0603%" y="1109" width="0.0104%" height="15" fill="rgb(222,211,15)"/><text x="91.3103%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1,140 samples, 0.40%)</title><rect x="90.6756%" y="1173" width="0.3955%" height="15" fill="rgb(236,193,6)"/><text x="90.9256%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task::{{closure}} (1,000 samples, 0.35%)</title><rect x="90.7241%" y="1157" width="0.3470%" height="15" fill="rgb(226,206,10)"/><text x="90.9741%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::inject (61 samples, 0.02%)</title><rect x="91.0499%" y="1141" width="0.0212%" height="15" fill="rgb(213,125,22)"/><text x="91.2999%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.01%)</title><rect x="91.1283%" y="1141" width="0.0128%" height="15" fill="rgb(221,66,28)"/><text x="91.3783%" y="1151.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (77 samples, 0.03%)</title><rect x="91.2154%" y="1093" width="0.0267%" height="15" fill="rgb(222,84,53)"/><text x="91.4654%" y="1103.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (43 samples, 0.01%)</title><rect x="91.2272%" y="1077" width="0.0149%" height="15" fill="rgb(243,50,15)"/><text x="91.4772%" y="1087.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (122 samples, 0.04%)</title><rect x="91.2002%" y="1109" width="0.0423%" height="15" fill="rgb(208,184,23)"/><text x="91.4502%" y="1119.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u32::AtomicU32 as core::ops::deref::Deref&gt;::deref (39 samples, 0.01%)</title><rect x="91.2425%" y="1109" width="0.0135%" height="15" fill="rgb(221,83,2)"/><text x="91.4925%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (87 samples, 0.03%)</title><rect x="91.2591%" y="1109" width="0.0302%" height="15" fill="rgb(236,53,24)"/><text x="91.5091%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.01%)</title><rect x="91.2772%" y="1093" width="0.0121%" height="15" fill="rgb(244,171,29)"/><text x="91.5272%" y="1103.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (29 samples, 0.01%)</title><rect x="91.3067%" y="1093" width="0.0101%" height="15" fill="rgb(205,19,11)"/><text x="91.5567%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU16::get_mut (87 samples, 0.03%)</title><rect x="91.3167%" y="1093" width="0.0302%" height="15" fill="rgb(207,108,29)"/><text x="91.5667%" y="1103.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get_mut (63 samples, 0.02%)</title><rect x="91.3251%" y="1077" width="0.0219%" height="15" fill="rgb(236,215,43)"/><text x="91.5751%" y="1087.50"></text></g><g><title>tokio::loom::std::atomic_u16::AtomicU16::unsync_load (167 samples, 0.06%)</title><rect x="91.2893%" y="1109" width="0.0579%" height="15" fill="rgb(213,58,35)"/><text x="91.5393%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (794 samples, 0.28%)</title><rect x="91.0860%" y="1157" width="0.2755%" height="15" fill="rgb(220,211,46)"/><text x="91.3360%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task::{{closure}} (635 samples, 0.22%)</title><rect x="91.1412%" y="1141" width="0.2203%" height="15" fill="rgb(212,134,16)"/><text x="91.3912%" y="1151.50"></text></g><g><title>tokio::runtime::queue::Local&lt;T&gt;::pop (599 samples, 0.21%)</title><rect x="91.1537%" y="1125" width="0.2078%" height="15" fill="rgb(232,90,44)"/><text x="91.4037%" y="1135.50"></text></g><g><title>tokio::runtime::queue::unpack (31 samples, 0.01%)</title><rect x="91.3507%" y="1109" width="0.0108%" height="15" fill="rgb(212,18,36)"/><text x="91.6007%" y="1119.50"></text></g><g><title>core::ptr::read (76 samples, 0.03%)</title><rect x="91.4350%" y="1077" width="0.0264%" height="15" fill="rgb(206,112,24)"/><text x="91.6850%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.01%)</title><rect x="91.4493%" y="1061" width="0.0121%" height="15" fill="rgb(238,223,40)"/><text x="91.6993%" y="1071.50"></text></g><g><title>core::mem::replace (197 samples, 0.07%)</title><rect x="91.3979%" y="1125" width="0.0684%" height="15" fill="rgb(226,169,20)"/><text x="91.6479%" y="1135.50"></text></g><g><title>core::mem::swap (168 samples, 0.06%)</title><rect x="91.4080%" y="1109" width="0.0583%" height="15" fill="rgb(241,64,52)"/><text x="91.6580%" y="1119.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (155 samples, 0.05%)</title><rect x="91.4125%" y="1093" width="0.0538%" height="15" fill="rgb(228,120,25)"/><text x="91.6625%" y="1103.50"></text></g><g><title>core::mem::take (251 samples, 0.09%)</title><rect x="91.3795%" y="1141" width="0.0871%" height="15" fill="rgb(234,108,19)"/><text x="91.6295%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_local_task (1,123 samples, 0.39%)</title><rect x="91.0773%" y="1173" width="0.3896%" height="15" fill="rgb(236,133,29)"/><text x="91.3273%" y="1183.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (304 samples, 0.11%)</title><rect x="91.3615%" y="1157" width="0.1055%" height="15" fill="rgb(246,174,53)"/><text x="91.6115%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task (2,359 samples, 0.82%)</title><rect x="90.6488%" y="1189" width="0.8185%" height="15" fill="rgb(210,105,35)"/><text x="90.8988%" y="1199.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.01%)</title><rect x="91.6214%" y="1173" width="0.0118%" height="15" fill="rgb(225,27,26)"/><text x="91.8714%" y="1183.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (45 samples, 0.02%)</title><rect x="91.7102%" y="1125" width="0.0156%" height="15" fill="rgb(233,2,39)"/><text x="91.9602%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (268 samples, 0.09%)</title><rect x="91.6332%" y="1173" width="0.0930%" height="15" fill="rgb(219,164,26)"/><text x="91.8832%" y="1183.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (179 samples, 0.06%)</title><rect x="91.6640%" y="1157" width="0.0621%" height="15" fill="rgb(236,211,5)"/><text x="91.9140%" y="1167.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (104 samples, 0.04%)</title><rect x="91.6901%" y="1141" width="0.0361%" height="15" fill="rgb(244,227,23)"/><text x="91.9401%" y="1151.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (117 samples, 0.04%)</title><rect x="91.8618%" y="1141" width="0.0406%" height="15" fill="rgb(230,184,8)"/><text x="92.1118%" y="1151.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (188 samples, 0.07%)</title><rect x="91.8375%" y="1157" width="0.0652%" height="15" fill="rgb(217,125,48)"/><text x="92.0875%" y="1167.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (41 samples, 0.01%)</title><rect x="91.9034%" y="1157" width="0.0142%" height="15" fill="rgb(223,192,47)"/><text x="92.1534%" y="1167.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (52 samples, 0.02%)</title><rect x="91.9177%" y="1157" width="0.0180%" height="15" fill="rgb(226,119,10)"/><text x="92.1677%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (65 samples, 0.02%)</title><rect x="92.0401%" y="1109" width="0.0226%" height="15" fill="rgb(221,49,29)"/><text x="92.2901%" y="1119.50"></text></g><g><title>__memmove_avx_unaligned_erms (44 samples, 0.02%)</title><rect x="92.1730%" y="1077" width="0.0153%" height="15" fill="rgb(217,205,19)"/><text x="92.4230%" y="1087.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (166 samples, 0.06%)</title><rect x="92.1317%" y="1093" width="0.0576%" height="15" fill="rgb(242,104,7)"/><text x="92.3817%" y="1103.50"></text></g><g><title>core::ptr::read (362 samples, 0.13%)</title><rect x="92.0662%" y="1109" width="0.1256%" height="15" fill="rgb(209,154,48)"/><text x="92.3162%" y="1119.50"></text></g><g><title>core::ptr::write (36 samples, 0.01%)</title><rect x="92.1918%" y="1109" width="0.0125%" height="15" fill="rgb(219,213,46)"/><text x="92.4418%" y="1119.50"></text></g><g><title>core::mem::replace (775 samples, 0.27%)</title><rect x="91.9357%" y="1157" width="0.2689%" height="15" fill="rgb(229,105,38)"/><text x="92.1857%" y="1167.50"></text></g><g><title>core::mem::swap (686 samples, 0.24%)</title><rect x="91.9666%" y="1141" width="0.2380%" height="15" fill="rgb(205,151,5)"/><text x="92.2166%" y="1151.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (647 samples, 0.22%)</title><rect x="91.9801%" y="1125" width="0.2245%" height="15" fill="rgb(248,115,40)"/><text x="92.2301%" y="1135.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,378 samples, 0.48%)</title><rect x="91.7275%" y="1173" width="0.4781%" height="15" fill="rgb(206,179,2)"/><text x="91.9775%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.01%)</title><rect x="92.2056%" y="1173" width="0.0101%" height="15" fill="rgb(230,103,24)"/><text x="92.4556%" y="1183.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (44 samples, 0.02%)</title><rect x="92.2157%" y="1173" width="0.0153%" height="15" fill="rgb(218,152,4)"/><text x="92.4657%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.01%)</title><rect x="92.2400%" y="1157" width="0.0111%" height="15" fill="rgb(236,161,54)"/><text x="92.4900%" y="1167.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="92.2403%" y="1141" width="0.0108%" height="15" fill="rgb(226,65,17)"/><text x="92.4903%" y="1151.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::is_empty (61 samples, 0.02%)</title><rect x="92.2556%" y="1157" width="0.0212%" height="15" fill="rgb(221,134,44)"/><text x="92.5056%" y="1167.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::len (56 samples, 0.02%)</title><rect x="92.2573%" y="1141" width="0.0194%" height="15" fill="rgb(251,129,4)"/><text x="92.5073%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (34 samples, 0.01%)</title><rect x="92.2650%" y="1125" width="0.0118%" height="15" fill="rgb(244,32,34)"/><text x="92.5150%" y="1135.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::pop (136 samples, 0.05%)</title><rect x="92.2330%" y="1173" width="0.0472%" height="15" fill="rgb(251,224,37)"/><text x="92.4830%" y="1183.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (90 samples, 0.03%)</title><rect x="92.5463%" y="1109" width="0.0312%" height="15" fill="rgb(248,117,31)"/><text x="92.7963%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (175 samples, 0.06%)</title><rect x="92.5172%" y="1125" width="0.0607%" height="15" fill="rgb(222,208,37)"/><text x="92.7672%" y="1135.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (283 samples, 0.10%)</title><rect x="92.4804%" y="1141" width="0.0982%" height="15" fill="rgb(234,211,25)"/><text x="92.7304%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (422 samples, 0.15%)</title><rect x="92.4329%" y="1157" width="0.1464%" height="15" fill="rgb(211,72,6)"/><text x="92.6829%" y="1167.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (42 samples, 0.01%)</title><rect x="92.5949%" y="1141" width="0.0146%" height="15" fill="rgb(249,198,38)"/><text x="92.8449%" y="1151.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u32::AtomicU32 as core::ops::deref::Deref&gt;::deref (88 samples, 0.03%)</title><rect x="92.5793%" y="1157" width="0.0305%" height="15" fill="rgb(221,86,51)"/><text x="92.8293%" y="1167.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_sub (212 samples, 0.07%)</title><rect x="92.6116%" y="1157" width="0.0736%" height="15" fill="rgb(226,178,43)"/><text x="92.8616%" y="1167.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (49 samples, 0.02%)</title><rect x="92.7150%" y="1141" width="0.0170%" height="15" fill="rgb(215,145,7)"/><text x="92.9650%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (310 samples, 0.11%)</title><rect x="92.6851%" y="1157" width="0.1076%" height="15" fill="rgb(250,202,36)"/><text x="92.9351%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_load (175 samples, 0.06%)</title><rect x="92.7320%" y="1141" width="0.0607%" height="15" fill="rgb(215,86,13)"/><text x="92.9820%" y="1151.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (34 samples, 0.01%)</title><rect x="92.8364%" y="1141" width="0.0118%" height="15" fill="rgb(221,134,12)"/><text x="93.0864%" y="1151.50"></text></g><g><title>tokio::loom::std::atomic_u16::AtomicU16::unsync_load (324 samples, 0.11%)</title><rect x="92.7944%" y="1157" width="0.1124%" height="15" fill="rgb(213,82,10)"/><text x="93.0444%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicU16::get_mut (169 samples, 0.06%)</title><rect x="92.8482%" y="1141" width="0.0586%" height="15" fill="rgb(214,142,0)"/><text x="93.0982%" y="1151.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get_mut (94 samples, 0.03%)</title><rect x="92.8742%" y="1125" width="0.0326%" height="15" fill="rgb(205,145,9)"/><text x="93.1242%" y="1135.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (56 samples, 0.02%)</title><rect x="92.8874%" y="1109" width="0.0194%" height="15" fill="rgb(244,214,8)"/><text x="93.1374%" y="1119.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (55 samples, 0.02%)</title><rect x="93.2146%" y="1093" width="0.0191%" height="15" fill="rgb(224,72,51)"/><text x="93.4646%" y="1103.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (189 samples, 0.07%)</title><rect x="93.1684%" y="1109" width="0.0656%" height="15" fill="rgb(233,137,37)"/><text x="93.4184%" y="1119.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (264 samples, 0.09%)</title><rect x="93.1428%" y="1125" width="0.0916%" height="15" fill="rgb(208,71,28)"/><text x="93.3928%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (377 samples, 0.13%)</title><rect x="93.1039%" y="1141" width="0.1308%" height="15" fill="rgb(226,31,7)"/><text x="93.3539%" y="1151.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u16::AtomicU16 as core::ops::deref::Deref&gt;::deref (83 samples, 0.03%)</title><rect x="93.2347%" y="1141" width="0.0288%" height="15" fill="rgb(229,62,18)"/><text x="93.4847%" y="1151.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (36 samples, 0.01%)</title><rect x="93.2510%" y="1125" width="0.0125%" height="15" fill="rgb(226,74,28)"/><text x="93.5010%" y="1135.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (45 samples, 0.02%)</title><rect x="93.2750%" y="1125" width="0.0156%" height="15" fill="rgb(214,170,18)"/><text x="93.5250%" y="1135.50"></text></g><g><title>&lt;tokio::loom::std::atomic_u32::AtomicU32 as core::ops::deref::Deref&gt;::deref (79 samples, 0.03%)</title><rect x="93.2635%" y="1141" width="0.0274%" height="15" fill="rgb(227,229,35)"/><text x="93.5135%" y="1151.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (89 samples, 0.03%)</title><rect x="93.2930%" y="1141" width="0.0309%" height="15" fill="rgb(225,181,39)"/><text x="93.5430%" y="1151.50"></text></g><g><title>core::mem::replace (59 samples, 0.02%)</title><rect x="93.3034%" y="1125" width="0.0205%" height="15" fill="rgb(253,124,44)"/><text x="93.5534%" y="1135.50"></text></g><g><title>core::mem::swap (54 samples, 0.02%)</title><rect x="93.3051%" y="1109" width="0.0187%" height="15" fill="rgb(220,75,18)"/><text x="93.5551%" y="1119.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (49 samples, 0.02%)</title><rect x="93.3069%" y="1093" width="0.0170%" height="15" fill="rgb(239,175,43)"/><text x="93.5569%" y="1103.50"></text></g><g><title>core::num::&lt;impl u16&gt;::wrapping_sub (183 samples, 0.06%)</title><rect x="93.3273%" y="1141" width="0.0635%" height="15" fill="rgb(228,112,50)"/><text x="93.5773%" y="1151.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (51 samples, 0.02%)</title><rect x="93.4127%" y="1125" width="0.0177%" height="15" fill="rgb(232,105,36)"/><text x="93.6627%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (138 samples, 0.05%)</title><rect x="93.4304%" y="1125" width="0.0479%" height="15" fill="rgb(227,137,47)"/><text x="93.6804%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU16::load (253 samples, 0.09%)</title><rect x="93.3908%" y="1141" width="0.0878%" height="15" fill="rgb(217,51,9)"/><text x="93.6408%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (37 samples, 0.01%)</title><rect x="93.4786%" y="1141" width="0.0128%" height="15" fill="rgb(245,117,0)"/><text x="93.7286%" y="1151.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (45 samples, 0.02%)</title><rect x="93.5144%" y="1125" width="0.0156%" height="15" fill="rgb(252,52,30)"/><text x="93.7644%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (363 samples, 0.13%)</title><rect x="93.5300%" y="1125" width="0.1259%" height="15" fill="rgb(227,85,33)"/><text x="93.7800%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (475 samples, 0.16%)</title><rect x="93.4915%" y="1141" width="0.1648%" height="15" fill="rgb(220,157,20)"/><text x="93.7415%" y="1151.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (45 samples, 0.02%)</title><rect x="93.6570%" y="1141" width="0.0156%" height="15" fill="rgb(254,14,34)"/><text x="93.9070%" y="1151.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into2 (2,409 samples, 0.84%)</title><rect x="92.9134%" y="1157" width="0.8358%" height="15" fill="rgb(216,103,41)"/><text x="93.1634%" y="1167.50"></text></g><g><title>tokio::runtime::queue::unpack (195 samples, 0.07%)</title><rect x="93.6816%" y="1141" width="0.0677%" height="15" fill="rgb(245,221,9)"/><text x="93.9316%" y="1151.50"></text></g><g><title>tokio::runtime::queue::Steal&lt;T&gt;::steal_into (4,427 samples, 1.54%)</title><rect x="92.2802%" y="1173" width="1.5360%" height="15" fill="rgb(254,136,47)"/><text x="92.5302%" y="1183.50"></text></g><g><title>tokio::runtime::queue::unpack (193 samples, 0.07%)</title><rect x="93.7492%" y="1157" width="0.0670%" height="15" fill="rgb(235,71,46)"/><text x="93.9992%" y="1167.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::inc_num_searching (56 samples, 0.02%)</title><rect x="93.8450%" y="1141" width="0.0194%" height="15" fill="rgb(242,154,29)"/><text x="94.0950%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (45 samples, 0.02%)</title><rect x="93.8488%" y="1125" width="0.0156%" height="15" fill="rgb(210,65,31)"/><text x="94.0988%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_add (35 samples, 0.01%)</title><rect x="93.8523%" y="1109" width="0.0121%" height="15" fill="rgb(244,9,50)"/><text x="94.1023%" y="1119.50"></text></g><g><title>tokio::runtime::thread_pool::idle::State::load (51 samples, 0.02%)</title><rect x="93.8644%" y="1141" width="0.0177%" height="15" fill="rgb(215,141,38)"/><text x="94.1144%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_searching (197 samples, 0.07%)</title><rect x="93.8162%" y="1173" width="0.0684%" height="15" fill="rgb(241,129,6)"/><text x="94.0662%" y="1183.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_searching (142 samples, 0.05%)</title><rect x="93.8353%" y="1157" width="0.0493%" height="15" fill="rgb(253,169,4)"/><text x="94.0853%" y="1167.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (54 samples, 0.02%)</title><rect x="93.9179%" y="1141" width="0.0187%" height="15" fill="rgb(237,82,36)"/><text x="94.1679%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (78 samples, 0.03%)</title><rect x="94.0556%" y="1045" width="0.0271%" height="15" fill="rgb(209,171,11)"/><text x="94.3056%" y="1055.50"></text></g><g><title>core::ptr::read (131 samples, 0.05%)</title><rect x="94.0383%" y="1061" width="0.0455%" height="15" fill="rgb(242,19,22)"/><text x="94.2883%" y="1071.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (392 samples, 0.14%)</title><rect x="93.9522%" y="1125" width="0.1360%" height="15" fill="rgb(251,122,24)"/><text x="94.2022%" y="1135.50"></text></g><g><title>core::mem::replace (333 samples, 0.12%)</title><rect x="93.9727%" y="1109" width="0.1155%" height="15" fill="rgb(226,166,42)"/><text x="94.2227%" y="1119.50"></text></g><g><title>core::mem::swap (303 samples, 0.11%)</title><rect x="93.9831%" y="1093" width="0.1051%" height="15" fill="rgb(244,101,48)"/><text x="94.2331%" y="1103.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (281 samples, 0.10%)</title><rect x="93.9907%" y="1077" width="0.0975%" height="15" fill="rgb(227,125,1)"/><text x="94.2407%" y="1087.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (453 samples, 0.16%)</title><rect x="93.9366%" y="1141" width="0.1572%" height="15" fill="rgb(206,79,43)"/><text x="94.1866%" y="1151.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::steal_work (7,592 samples, 2.63%)</title><rect x="91.4673%" y="1189" width="2.6341%" height="15" fill="rgb(241,109,41)"/><text x="91.7173%" y="1199.50">to..</text></g><g><title>tokio::util::rand::FastRand::fastrand_n (625 samples, 0.22%)</title><rect x="93.8846%" y="1173" width="0.2168%" height="15" fill="rgb(219,73,4)"/><text x="94.1346%" y="1183.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (583 samples, 0.20%)</title><rect x="93.8991%" y="1157" width="0.2023%" height="15" fill="rgb(239,25,41)"/><text x="94.1491%" y="1167.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (43,822 samples, 15.20%)</title><rect x="78.9183%" y="1237" width="15.2043%" height="15" fill="rgb(208,88,46)"/><text x="79.1683%" y="1247.50">tokio::macros::scoped_t..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (43,822 samples, 15.20%)</title><rect x="78.9183%" y="1221" width="15.2043%" height="15" fill="rgb(239,184,9)"/><text x="79.1683%" y="1231.50">tokio::runtime::thread_..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (43,822 samples, 15.20%)</title><rect x="78.9183%" y="1205" width="15.2043%" height="15" fill="rgb(223,114,13)"/><text x="79.1683%" y="1215.50">tokio::runtime::thread_..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::tick (61 samples, 0.02%)</title><rect x="94.1014%" y="1189" width="0.0212%" height="15" fill="rgb(214,28,42)"/><text x="94.3514%" y="1199.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add (33 samples, 0.01%)</title><rect x="94.1111%" y="1173" width="0.0114%" height="15" fill="rgb(252,32,44)"/><text x="94.3611%" y="1183.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43,825 samples, 15.21%)</title><rect x="78.9176%" y="1541" width="15.2053%" height="15" fill="rgb(231,159,4)"/><text x="79.1676%" y="1551.50">tokio::runtime::blockin..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (43,824 samples, 15.20%)</title><rect x="78.9179%" y="1525" width="15.2050%" height="15" fill="rgb(210,35,26)"/><text x="79.1679%" y="1535.50">tokio::runtime::task::N..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (43,824 samples, 15.20%)</title><rect x="78.9179%" y="1509" width="15.2050%" height="15" fill="rgb(208,190,37)"/><text x="79.1679%" y="1519.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::raw::poll (43,824 samples, 15.20%)</title><rect x="78.9179%" y="1493" width="15.2050%" height="15" fill="rgb(226,148,22)"/><text x="79.1679%" y="1503.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (43,824 samples, 15.20%)</title><rect x="78.9179%" y="1477" width="15.2050%" height="15" fill="rgb(242,153,24)"/><text x="79.1679%" y="1487.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (43,824 samples, 15.20%)</title><rect x="78.9179%" y="1461" width="15.2050%" height="15" fill="rgb(213,133,7)"/><text x="79.1679%" y="1471.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::poll_future (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1445" width="15.2047%" height="15" fill="rgb(248,206,18)"/><text x="79.1683%" y="1455.50">tokio::runtime::task::h..</text></g><g><title>std::panic::catch_unwind (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1429" width="15.2047%" height="15" fill="rgb(233,157,4)"/><text x="79.1683%" y="1439.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1413" width="15.2047%" height="15" fill="rgb(249,179,32)"/><text x="79.1683%" y="1423.50">std::panicking::try</text></g><g><title>__rust_try (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1397" width="15.2047%" height="15" fill="rgb(248,69,35)"/><text x="79.1683%" y="1407.50">__rust_try</text></g><g><title>std::panicking::try::do_call (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1381" width="15.2047%" height="15" fill="rgb(249,158,38)"/><text x="79.1683%" y="1391.50">std::panicking::try::do..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1365" width="15.2047%" height="15" fill="rgb(223,18,43)"/><text x="79.1683%" y="1375.50">&lt;std::panic::AssertUnwi..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1349" width="15.2047%" height="15" fill="rgb(238,42,45)"/><text x="79.1683%" y="1359.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1333" width="15.2047%" height="15" fill="rgb(219,65,47)"/><text x="79.1683%" y="1343.50">tokio::runtime::task::c..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1317" width="15.2047%" height="15" fill="rgb(248,153,12)"/><text x="79.1683%" y="1327.50">tokio::loom::std::unsaf..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1301" width="15.2047%" height="15" fill="rgb(240,118,4)"/><text x="79.1683%" y="1311.50">tokio::runtime::task::c..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1285" width="15.2047%" height="15" fill="rgb(250,96,34)"/><text x="79.1683%" y="1295.50">&lt;tokio::runtime::blocki..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1269" width="15.2047%" height="15" fill="rgb(221,15,4)"/><text x="79.1683%" y="1279.50">tokio::runtime::thread_..</text></g><g><title>tokio::runtime::thread_pool::worker::run (43,823 samples, 15.20%)</title><rect x="78.9183%" y="1253" width="15.2047%" height="15" fill="rgb(217,149,33)"/><text x="79.1683%" y="1263.50">tokio::runtime::thread_..</text></g><g><title>std::panic::catch_unwind (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1669" width="15.2057%" height="15" fill="rgb(213,58,29)"/><text x="79.1676%" y="1679.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1653" width="15.2057%" height="15" fill="rgb(236,218,9)"/><text x="79.1676%" y="1663.50">std::panicking::try</text></g><g><title>__rust_try (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1637" width="15.2057%" height="15" fill="rgb(248,40,19)"/><text x="79.1676%" y="1647.50">__rust_try</text></g><g><title>std::panicking::try::do_call (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1621" width="15.2057%" height="15" fill="rgb(212,17,6)"/><text x="79.1676%" y="1631.50">std::panicking::try::do..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1605" width="15.2057%" height="15" fill="rgb(206,212,20)"/><text x="79.1676%" y="1615.50">&lt;std::panic::AssertUnwi..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1589" width="15.2057%" height="15" fill="rgb(229,80,37)"/><text x="79.1676%" y="1599.50">std::thread::Builder::s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1573" width="15.2057%" height="15" fill="rgb(253,8,37)"/><text x="79.1676%" y="1583.50">std::sys_common::backtr..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (43,826 samples, 15.21%)</title><rect x="78.9176%" y="1557" width="15.2057%" height="15" fill="rgb(215,16,43)"/><text x="79.1676%" y="1567.50">tokio::runtime::blockin..</text></g><g><title>__GI___clone (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1781" width="15.2064%" height="15" fill="rgb(236,219,16)"/><text x="79.1676%" y="1791.50">__GI___clone</text></g><g><title>start_thread (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1765" width="15.2064%" height="15" fill="rgb(251,0,3)"/><text x="79.1676%" y="1775.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1749" width="15.2064%" height="15" fill="rgb(207,133,37)"/><text x="79.1676%" y="1759.50">std::sys::unix::thread:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1733" width="15.2064%" height="15" fill="rgb(250,143,20)"/><text x="79.1676%" y="1743.50">&lt;alloc::boxed::Box&lt;F&gt; a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1717" width="15.2064%" height="15" fill="rgb(242,19,50)"/><text x="79.1676%" y="1727.50">&lt;alloc::boxed::Box&lt;F&gt; a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1701" width="15.2064%" height="15" fill="rgb(206,124,43)"/><text x="79.1676%" y="1711.50">core::ops::function::Fn..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (43,828 samples, 15.21%)</title><rect x="78.9176%" y="1685" width="15.2064%" height="15" fill="rgb(229,4,38)"/><text x="79.1676%" y="1695.50">std::thread::Builder::s..</text></g><g><title>compiler_builtins::int::udiv::__udivmodti4 (222 samples, 0.08%)</title><rect x="94.1337%" y="1781" width="0.0770%" height="15" fill="rgb(247,220,45)"/><text x="94.3837%" y="1791.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_sub (30 samples, 0.01%)</title><rect x="94.2003%" y="1765" width="0.0104%" height="15" fill="rgb(247,195,0)"/><text x="94.4503%" y="1775.50"></text></g><g><title>entry_SYSCALL_64 (111 samples, 0.04%)</title><rect x="94.2110%" y="1781" width="0.0385%" height="15" fill="rgb(252,12,19)"/><text x="94.4610%" y="1791.50"></text></g><g><title>tokio-runtime-w (271,705 samples, 94.27%)</title><rect x="0.0028%" y="1797" width="94.2697%" height="15" fill="rgb(222,49,50)"/><text x="0.2528%" y="1807.50">tokio-runtime-w</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="94.2992%" y="1509" width="0.0101%" height="15" fill="rgb(209,157,28)"/><text x="94.5492%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place (45 samples, 0.02%)</title><rect x="94.2943%" y="1525" width="0.0156%" height="15" fill="rgb(238,174,24)"/><text x="94.5443%" y="1535.50"></text></g><g><title>&lt;tokio::io::driver::scheduled_io::Readiness as core::ops::drop::Drop&gt;::drop (104 samples, 0.04%)</title><rect x="94.2804%" y="1541" width="0.0361%" height="15" fill="rgb(224,17,28)"/><text x="94.5304%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place (110 samples, 0.04%)</title><rect x="94.2804%" y="1557" width="0.0382%" height="15" fill="rgb(249,7,29)"/><text x="94.5304%" y="1567.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (141 samples, 0.05%)</title><rect x="94.2804%" y="1701" width="0.0489%" height="15" fill="rgb(243,178,4)"/><text x="94.5304%" y="1711.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (141 samples, 0.05%)</title><rect x="94.2804%" y="1685" width="0.0489%" height="15" fill="rgb(246,138,35)"/><text x="94.5304%" y="1695.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (141 samples, 0.05%)</title><rect x="94.2804%" y="1669" width="0.0489%" height="15" fill="rgb(251,85,18)"/><text x="94.5304%" y="1679.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (141 samples, 0.05%)</title><rect x="94.2804%" y="1653" width="0.0489%" height="15" fill="rgb(254,55,9)"/><text x="94.5304%" y="1663.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (141 samples, 0.05%)</title><rect x="94.2804%" y="1637" width="0.0489%" height="15" fill="rgb(248,4,50)"/><text x="94.5304%" y="1647.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (141 samples, 0.05%)</title><rect x="94.2804%" y="1621" width="0.0489%" height="15" fill="rgb(215,208,14)"/><text x="94.5304%" y="1631.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (141 samples, 0.05%)</title><rect x="94.2804%" y="1605" width="0.0489%" height="15" fill="rgb(218,37,18)"/><text x="94.5304%" y="1615.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (141 samples, 0.05%)</title><rect x="94.2804%" y="1589" width="0.0489%" height="15" fill="rgb(206,104,13)"/><text x="94.5304%" y="1599.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::readiness::{{closure}} (141 samples, 0.05%)</title><rect x="94.2804%" y="1573" width="0.0489%" height="15" fill="rgb(248,94,22)"/><text x="94.5304%" y="1583.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::readiness_fut (31 samples, 0.01%)</title><rect x="94.3186%" y="1557" width="0.0108%" height="15" fill="rgb(235,42,46)"/><text x="94.5686%" y="1567.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (174 samples, 0.06%)</title><rect x="94.2804%" y="1733" width="0.0604%" height="15" fill="rgb(220,228,48)"/><text x="94.5304%" y="1743.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (174 samples, 0.06%)</title><rect x="94.2804%" y="1717" width="0.0604%" height="15" fill="rgb(216,58,12)"/><text x="94.5304%" y="1727.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (33 samples, 0.01%)</title><rect x="94.3294%" y="1701" width="0.0114%" height="15" fill="rgb(223,97,52)"/><text x="94.5794%" y="1711.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (33 samples, 0.01%)</title><rect x="94.3294%" y="1685" width="0.0114%" height="15" fill="rgb(208,159,17)"/><text x="94.5794%" y="1695.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (33 samples, 0.01%)</title><rect x="94.3294%" y="1669" width="0.0114%" height="15" fill="rgb(215,172,9)"/><text x="94.5794%" y="1679.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (33 samples, 0.01%)</title><rect x="94.3294%" y="1653" width="0.0114%" height="15" fill="rgb(252,175,30)"/><text x="94.5794%" y="1663.50"></text></g><g><title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (33 samples, 0.01%)</title><rect x="94.3294%" y="1637" width="0.0114%" height="15" fill="rgb(209,159,10)"/><text x="94.5794%" y="1647.50"></text></g><g><title>tokio::io::driver::Inner::add_source (33 samples, 0.01%)</title><rect x="94.3294%" y="1621" width="0.0114%" height="15" fill="rgb(229,73,51)"/><text x="94.5794%" y="1631.50"></text></g><g><title>mio::poll::Registry::register (33 samples, 0.01%)</title><rect x="94.3294%" y="1605" width="0.0114%" height="15" fill="rgb(208,212,43)"/><text x="94.5794%" y="1615.50"></text></g><g><title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (33 samples, 0.01%)</title><rect x="94.3294%" y="1589" width="0.0114%" height="15" fill="rgb(254,123,53)"/><text x="94.5794%" y="1599.50"></text></g><g><title>&lt;mio::io_source::IoSource&lt;T&gt; as mio::event::source::Source&gt;::register (33 samples, 0.01%)</title><rect x="94.3294%" y="1573" width="0.0114%" height="15" fill="rgb(254,128,49)"/><text x="94.5794%" y="1583.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.01%)</title><rect x="94.3460%" y="1557" width="0.0104%" height="15" fill="rgb(246,16,16)"/><text x="94.5960%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (83 samples, 0.03%)</title><rect x="94.3408%" y="1589" width="0.0288%" height="15" fill="rgb(209,200,1)"/><text x="94.5908%" y="1599.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.03%)</title><rect x="94.3408%" y="1573" width="0.0288%" height="15" fill="rgb(235,9,3)"/><text x="94.5908%" y="1583.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (84 samples, 0.03%)</title><rect x="94.3408%" y="1621" width="0.0291%" height="15" fill="rgb(233,121,54)"/><text x="94.5908%" y="1631.50"></text></g><g><title>alloc::alloc::exchange_malloc (84 samples, 0.03%)</title><rect x="94.3408%" y="1605" width="0.0291%" height="15" fill="rgb(236,80,25)"/><text x="94.5908%" y="1615.50"></text></g><g><title>tokio::task::spawn::spawn (108 samples, 0.04%)</title><rect x="94.3408%" y="1717" width="0.0375%" height="15" fill="rgb(220,44,24)"/><text x="94.5908%" y="1727.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (108 samples, 0.04%)</title><rect x="94.3408%" y="1701" width="0.0375%" height="15" fill="rgb(236,225,16)"/><text x="94.5908%" y="1711.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (108 samples, 0.04%)</title><rect x="94.3408%" y="1685" width="0.0375%" height="15" fill="rgb(237,140,0)"/><text x="94.5908%" y="1695.50"></text></g><g><title>tokio::runtime::task::joinable (108 samples, 0.04%)</title><rect x="94.3408%" y="1669" width="0.0375%" height="15" fill="rgb(243,225,53)"/><text x="94.5908%" y="1679.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (108 samples, 0.04%)</title><rect x="94.3408%" y="1653" width="0.0375%" height="15" fill="rgb(240,140,30)"/><text x="94.5908%" y="1663.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (108 samples, 0.04%)</title><rect x="94.3408%" y="1637" width="0.0375%" height="15" fill="rgb(217,51,16)"/><text x="94.5908%" y="1647.50"></text></g><g><title>tokio::loom::std::atomic_ptr::AtomicPtr&lt;T&gt;::new (29 samples, 0.01%)</title><rect x="94.3887%" y="1637" width="0.0101%" height="15" fill="rgb(245,75,50)"/><text x="94.6387%" y="1647.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (353 samples, 0.12%)</title><rect x="94.2804%" y="1765" width="0.1225%" height="15" fill="rgb(208,174,22)"/><text x="94.5304%" y="1775.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (353 samples, 0.12%)</title><rect x="94.2804%" y="1749" width="0.1225%" height="15" fill="rgb(219,98,50)"/><text x="94.5304%" y="1759.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (179 samples, 0.06%)</title><rect x="94.3408%" y="1733" width="0.0621%" height="15" fill="rgb(243,138,3)"/><text x="94.5908%" y="1743.50"></text></g><g><title>tunneler::streams::spsc::stream (71 samples, 0.02%)</title><rect x="94.3783%" y="1717" width="0.0246%" height="15" fill="rgb(243,132,26)"/><text x="94.6283%" y="1727.50"></text></g><g><title>tokio::sync::mpsc::unbounded::unbounded_channel (71 samples, 0.02%)</title><rect x="94.3783%" y="1701" width="0.0246%" height="15" fill="rgb(250,201,8)"/><text x="94.6283%" y="1711.50"></text></g><g><title>tokio::sync::mpsc::chan::channel (71 samples, 0.02%)</title><rect x="94.3783%" y="1685" width="0.0246%" height="15" fill="rgb(213,91,26)"/><text x="94.6283%" y="1695.50"></text></g><g><title>tokio::sync::mpsc::list::channel (71 samples, 0.02%)</title><rect x="94.3783%" y="1669" width="0.0246%" height="15" fill="rgb(229,117,1)"/><text x="94.6283%" y="1679.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::new (71 samples, 0.02%)</title><rect x="94.3783%" y="1653" width="0.0246%" height="15" fill="rgb(229,24,6)"/><text x="94.6283%" y="1663.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (35 samples, 0.01%)</title><rect x="94.4442%" y="1701" width="0.0121%" height="15" fill="rgb(206,69,11)"/><text x="94.6942%" y="1711.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (33 samples, 0.01%)</title><rect x="94.4449%" y="1685" width="0.0114%" height="15" fill="rgb(234,111,34)"/><text x="94.6949%" y="1695.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (31 samples, 0.01%)</title><rect x="94.4456%" y="1669" width="0.0108%" height="15" fill="rgb(213,187,51)"/><text x="94.6956%" y="1679.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x4_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (31 samples, 0.01%)</title><rect x="94.4563%" y="1701" width="0.0108%" height="15" fill="rgb(207,45,11)"/><text x="94.7063%" y="1711.50"></text></g><g><title>rand_chacha::guts::round (130 samples, 0.05%)</title><rect x="94.4421%" y="1717" width="0.0451%" height="15" fill="rgb(225,151,47)"/><text x="94.6921%" y="1727.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (231 samples, 0.08%)</title><rect x="94.4119%" y="1765" width="0.0801%" height="15" fill="rgb(211,226,5)"/><text x="94.6619%" y="1775.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (231 samples, 0.08%)</title><rect x="94.4119%" y="1749" width="0.0801%" height="15" fill="rgb(214,83,52)"/><text x="94.6619%" y="1759.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (231 samples, 0.08%)</title><rect x="94.4119%" y="1733" width="0.0801%" height="15" fill="rgb(229,49,53)"/><text x="94.6619%" y="1743.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (29 samples, 0.01%)</title><rect x="94.5014%" y="1525" width="0.0101%" height="15" fill="rgb(246,8,28)"/><text x="94.7514%" y="1535.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::inner (34 samples, 0.01%)</title><rect x="94.5115%" y="1525" width="0.0118%" height="15" fill="rgb(207,28,41)"/><text x="94.7615%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (120 samples, 0.04%)</title><rect x="94.4924%" y="1621" width="0.0416%" height="15" fill="rgb(254,22,25)"/><text x="94.7424%" y="1631.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (120 samples, 0.04%)</title><rect x="94.4924%" y="1605" width="0.0416%" height="15" fill="rgb(209,120,42)"/><text x="94.7424%" y="1615.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (120 samples, 0.04%)</title><rect x="94.4924%" y="1589" width="0.0416%" height="15" fill="rgb(216,194,18)"/><text x="94.7424%" y="1599.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (120 samples, 0.04%)</title><rect x="94.4924%" y="1573" width="0.0416%" height="15" fill="rgb(213,70,17)"/><text x="94.7424%" y="1583.50"></text></g><g><title>tokio::io::driver::Handle::inner (94 samples, 0.03%)</title><rect x="94.5014%" y="1557" width="0.0326%" height="15" fill="rgb(228,66,19)"/><text x="94.7514%" y="1567.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (94 samples, 0.03%)</title><rect x="94.5014%" y="1541" width="0.0326%" height="15" fill="rgb(236,221,54)"/><text x="94.7514%" y="1551.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (158 samples, 0.05%)</title><rect x="94.4924%" y="1653" width="0.0548%" height="15" fill="rgb(207,175,15)"/><text x="94.7424%" y="1663.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (158 samples, 0.05%)</title><rect x="94.4924%" y="1637" width="0.0548%" height="15" fill="rgb(234,76,8)"/><text x="94.7424%" y="1647.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}}::{{closure}} (38 samples, 0.01%)</title><rect x="94.5341%" y="1621" width="0.0132%" height="15" fill="rgb(243,106,0)"/><text x="94.7841%" y="1631.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept (38 samples, 0.01%)</title><rect x="94.5341%" y="1605" width="0.0132%" height="15" fill="rgb(208,48,19)"/><text x="94.7841%" y="1615.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (38 samples, 0.01%)</title><rect x="94.5341%" y="1589" width="0.0132%" height="15" fill="rgb(251,50,29)"/><text x="94.7841%" y="1599.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (38 samples, 0.01%)</title><rect x="94.5341%" y="1573" width="0.0132%" height="15" fill="rgb(222,31,49)"/><text x="94.7841%" y="1583.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept::{{closure}} (38 samples, 0.01%)</title><rect x="94.5341%" y="1557" width="0.0132%" height="15" fill="rgb(232,33,18)"/><text x="94.7841%" y="1567.50"></text></g><g><title>mio::sys::unix::tcp::accept (38 samples, 0.01%)</title><rect x="94.5341%" y="1541" width="0.0132%" height="15" fill="rgb(209,1,44)"/><text x="94.7841%" y="1551.50"></text></g><g><title>mio::sys::unix::net::to_socket_addr (36 samples, 0.01%)</title><rect x="94.5347%" y="1525" width="0.0125%" height="15" fill="rgb(211,7,1)"/><text x="94.7847%" y="1535.50"></text></g><g><title>mio::poll::Registry::register (39 samples, 0.01%)</title><rect x="94.5472%" y="1557" width="0.0135%" height="15" fill="rgb(224,111,27)"/><text x="94.7972%" y="1567.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.02%)</title><rect x="94.5646%" y="1541" width="0.0180%" height="15" fill="rgb(252,195,39)"/><text x="94.8146%" y="1551.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (305 samples, 0.11%)</title><rect x="94.4924%" y="1685" width="0.1058%" height="15" fill="rgb(237,198,5)"/><text x="94.7424%" y="1695.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (305 samples, 0.11%)</title><rect x="94.4924%" y="1669" width="0.1058%" height="15" fill="rgb(232,148,1)"/><text x="94.7424%" y="1679.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (147 samples, 0.05%)</title><rect x="94.5472%" y="1653" width="0.0510%" height="15" fill="rgb(249,41,3)"/><text x="94.7972%" y="1663.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (147 samples, 0.05%)</title><rect x="94.5472%" y="1637" width="0.0510%" height="15" fill="rgb(215,14,33)"/><text x="94.7972%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (147 samples, 0.05%)</title><rect x="94.5472%" y="1621" width="0.0510%" height="15" fill="rgb(209,146,24)"/><text x="94.7972%" y="1631.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (147 samples, 0.05%)</title><rect x="94.5472%" y="1605" width="0.0510%" height="15" fill="rgb(219,51,47)"/><text x="94.7972%" y="1615.50"></text></g><g><title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (147 samples, 0.05%)</title><rect x="94.5472%" y="1589" width="0.0510%" height="15" fill="rgb(234,217,40)"/><text x="94.7972%" y="1599.50"></text></g><g><title>tokio::io::driver::Inner::add_source (147 samples, 0.05%)</title><rect x="94.5472%" y="1573" width="0.0510%" height="15" fill="rgb(228,34,26)"/><text x="94.7972%" y="1583.50"></text></g><g><title>tokio::util::slab::Allocator&lt;T&gt;::allocate (97 samples, 0.03%)</title><rect x="94.5646%" y="1557" width="0.0337%" height="15" fill="rgb(224,50,29)"/><text x="94.8146%" y="1567.50"></text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.01%)</title><rect x="94.6191%" y="1573" width="0.0114%" height="15" fill="rgb(205,79,51)"/><text x="94.8691%" y="1583.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::new (46 samples, 0.02%)</title><rect x="94.6385%" y="1573" width="0.0160%" height="15" fill="rgb(218,136,28)"/><text x="94.8885%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (477 samples, 0.17%)</title><rect x="94.4924%" y="1765" width="0.1655%" height="15" fill="rgb(220,150,10)"/><text x="94.7424%" y="1775.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (477 samples, 0.17%)</title><rect x="94.4924%" y="1749" width="0.1655%" height="15" fill="rgb(242,158,47)"/><text x="94.7424%" y="1759.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (477 samples, 0.17%)</title><rect x="94.4924%" y="1733" width="0.1655%" height="15" fill="rgb(209,68,0)"/><text x="94.7424%" y="1743.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (477 samples, 0.17%)</title><rect x="94.4924%" y="1717" width="0.1655%" height="15" fill="rgb(208,13,41)"/><text x="94.7424%" y="1727.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (477 samples, 0.17%)</title><rect x="94.4924%" y="1701" width="0.1655%" height="15" fill="rgb(226,201,7)"/><text x="94.7424%" y="1711.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (172 samples, 0.06%)</title><rect x="94.5982%" y="1685" width="0.0597%" height="15" fill="rgb(236,103,26)"/><text x="94.8482%" y="1695.50"></text></g><g><title>tokio::task::spawn::spawn (172 samples, 0.06%)</title><rect x="94.5982%" y="1669" width="0.0597%" height="15" fill="rgb(243,162,8)"/><text x="94.8482%" y="1679.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (172 samples, 0.06%)</title><rect x="94.5982%" y="1653" width="0.0597%" height="15" fill="rgb(237,225,11)"/><text x="94.8482%" y="1663.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (172 samples, 0.06%)</title><rect x="94.5982%" y="1637" width="0.0597%" height="15" fill="rgb(247,186,32)"/><text x="94.8482%" y="1647.50"></text></g><g><title>tokio::runtime::task::joinable (172 samples, 0.06%)</title><rect x="94.5982%" y="1621" width="0.0597%" height="15" fill="rgb(215,26,28)"/><text x="94.8482%" y="1631.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (172 samples, 0.06%)</title><rect x="94.5982%" y="1605" width="0.0597%" height="15" fill="rgb(208,121,6)"/><text x="94.8482%" y="1615.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (172 samples, 0.06%)</title><rect x="94.5982%" y="1589" width="0.0597%" height="15" fill="rgb(225,91,3)"/><text x="94.8482%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.01%)</title><rect x="94.6649%" y="1541" width="0.0142%" height="15" fill="rgb(246,119,36)"/><text x="94.9149%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.01%)</title><rect x="94.6649%" y="1525" width="0.0142%" height="15" fill="rgb(254,173,2)"/><text x="94.9149%" y="1535.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.01%)</title><rect x="94.6649%" y="1509" width="0.0142%" height="15" fill="rgb(209,87,54)"/><text x="94.9149%" y="1519.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (30 samples, 0.01%)</title><rect x="94.6687%" y="1493" width="0.0104%" height="15" fill="rgb(223,216,20)"/><text x="94.9187%" y="1503.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (133 samples, 0.05%)</title><rect x="94.6579%" y="1605" width="0.0461%" height="15" fill="rgb(220,31,8)"/><text x="94.9079%" y="1615.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (133 samples, 0.05%)</title><rect x="94.6579%" y="1589" width="0.0461%" height="15" fill="rgb(220,185,15)"/><text x="94.9079%" y="1599.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (133 samples, 0.05%)</title><rect x="94.6579%" y="1573" width="0.0461%" height="15" fill="rgb(247,190,50)"/><text x="94.9079%" y="1583.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (133 samples, 0.05%)</title><rect x="94.6579%" y="1557" width="0.0461%" height="15" fill="rgb(239,173,47)"/><text x="94.9079%" y="1567.50"></text></g><g><title>tokio::io::driver::Handle::inner (55 samples, 0.02%)</title><rect x="94.6850%" y="1541" width="0.0191%" height="15" fill="rgb(218,190,42)"/><text x="94.9350%" y="1551.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (55 samples, 0.02%)</title><rect x="94.6850%" y="1525" width="0.0191%" height="15" fill="rgb(251,207,16)"/><text x="94.9350%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (161 samples, 0.06%)</title><rect x="94.6579%" y="1637" width="0.0559%" height="15" fill="rgb(222,199,47)"/><text x="94.9079%" y="1647.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (161 samples, 0.06%)</title><rect x="94.6579%" y="1621" width="0.0559%" height="15" fill="rgb(245,190,7)"/><text x="94.9079%" y="1631.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (222 samples, 0.08%)</title><rect x="94.6579%" y="1765" width="0.0770%" height="15" fill="rgb(239,85,38)"/><text x="94.9079%" y="1775.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (222 samples, 0.08%)</title><rect x="94.6579%" y="1749" width="0.0770%" height="15" fill="rgb(229,69,51)"/><text x="94.9079%" y="1759.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (222 samples, 0.08%)</title><rect x="94.6579%" y="1733" width="0.0770%" height="15" fill="rgb(231,104,51)"/><text x="94.9079%" y="1743.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (222 samples, 0.08%)</title><rect x="94.6579%" y="1717" width="0.0770%" height="15" fill="rgb(235,49,4)"/><text x="94.9079%" y="1727.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (222 samples, 0.08%)</title><rect x="94.6579%" y="1701" width="0.0770%" height="15" fill="rgb(246,166,20)"/><text x="94.9079%" y="1711.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (222 samples, 0.08%)</title><rect x="94.6579%" y="1685" width="0.0770%" height="15" fill="rgb(230,119,37)"/><text x="94.9079%" y="1695.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (222 samples, 0.08%)</title><rect x="94.6579%" y="1669" width="0.0770%" height="15" fill="rgb(234,77,34)"/><text x="94.9079%" y="1679.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (222 samples, 0.08%)</title><rect x="94.6579%" y="1653" width="0.0770%" height="15" fill="rgb(211,222,33)"/><text x="94.9079%" y="1663.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (61 samples, 0.02%)</title><rect x="94.7138%" y="1637" width="0.0212%" height="15" fill="rgb(226,45,42)"/><text x="94.9638%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (61 samples, 0.02%)</title><rect x="94.7138%" y="1621" width="0.0212%" height="15" fill="rgb(215,174,28)"/><text x="94.9638%" y="1631.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (61 samples, 0.02%)</title><rect x="94.7138%" y="1605" width="0.0212%" height="15" fill="rgb(254,173,49)"/><text x="94.9638%" y="1615.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (61 samples, 0.02%)</title><rect x="94.7138%" y="1589" width="0.0212%" height="15" fill="rgb(229,191,6)"/><text x="94.9638%" y="1599.50"></text></g><g><title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (61 samples, 0.02%)</title><rect x="94.7138%" y="1573" width="0.0212%" height="15" fill="rgb(212,145,22)"/><text x="94.9638%" y="1583.50"></text></g><g><title>tokio::io::driver::Inner::add_source (61 samples, 0.02%)</title><rect x="94.7138%" y="1557" width="0.0212%" height="15" fill="rgb(226,6,51)"/><text x="94.9638%" y="1567.50"></text></g><g><title>tokio::util::slab::Allocator&lt;T&gt;::allocate (35 samples, 0.01%)</title><rect x="94.7228%" y="1541" width="0.0121%" height="15" fill="rgb(227,128,8)"/><text x="94.9728%" y="1551.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (60 samples, 0.02%)</title><rect x="94.7349%" y="1573" width="0.0208%" height="15" fill="rgb(205,24,10)"/><text x="94.9849%" y="1583.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.02%)</title><rect x="94.7349%" y="1557" width="0.0208%" height="15" fill="rgb(217,147,27)"/><text x="94.9849%" y="1567.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::readiness::{{closure}} (60 samples, 0.02%)</title><rect x="94.7349%" y="1541" width="0.0208%" height="15" fill="rgb(250,82,42)"/><text x="94.9849%" y="1551.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (89 samples, 0.03%)</title><rect x="94.7349%" y="1669" width="0.0309%" height="15" fill="rgb(248,93,17)"/><text x="94.9849%" y="1679.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (89 samples, 0.03%)</title><rect x="94.7349%" y="1653" width="0.0309%" height="15" fill="rgb(254,212,40)"/><text x="94.9849%" y="1663.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (89 samples, 0.03%)</title><rect x="94.7349%" y="1637" width="0.0309%" height="15" fill="rgb(229,209,2)"/><text x="94.9849%" y="1647.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (89 samples, 0.03%)</title><rect x="94.7349%" y="1621" width="0.0309%" height="15" fill="rgb(211,50,43)"/><text x="94.9849%" y="1631.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (89 samples, 0.03%)</title><rect x="94.7349%" y="1605" width="0.0309%" height="15" fill="rgb(245,196,29)"/><text x="94.9849%" y="1615.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (89 samples, 0.03%)</title><rect x="94.7349%" y="1589" width="0.0309%" height="15" fill="rgb(216,132,13)"/><text x="94.9849%" y="1599.50"></text></g><g><title>tokio::io::driver::Handle::inner (29 samples, 0.01%)</title><rect x="94.7558%" y="1573" width="0.0101%" height="15" fill="rgb(251,108,21)"/><text x="95.0058%" y="1583.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (29 samples, 0.01%)</title><rect x="94.7558%" y="1557" width="0.0101%" height="15" fill="rgb(229,174,54)"/><text x="95.0058%" y="1567.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (29 samples, 0.01%)</title><rect x="94.7558%" y="1541" width="0.0101%" height="15" fill="rgb(211,175,47)"/><text x="95.0058%" y="1551.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (29 samples, 0.01%)</title><rect x="94.7558%" y="1525" width="0.0101%" height="15" fill="rgb(234,5,37)"/><text x="95.0058%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.05%)</title><rect x="94.7349%" y="1701" width="0.0541%" height="15" fill="rgb(244,150,43)"/><text x="94.9849%" y="1711.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (156 samples, 0.05%)</title><rect x="94.7349%" y="1685" width="0.0541%" height="15" fill="rgb(242,172,38)"/><text x="94.9849%" y="1695.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (67 samples, 0.02%)</title><rect x="94.7658%" y="1669" width="0.0232%" height="15" fill="rgb(205,27,8)"/><text x="95.0158%" y="1679.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (67 samples, 0.02%)</title><rect x="94.7658%" y="1653" width="0.0232%" height="15" fill="rgb(217,57,3)"/><text x="95.0158%" y="1663.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (67 samples, 0.02%)</title><rect x="94.7658%" y="1637" width="0.0232%" height="15" fill="rgb(242,21,38)"/><text x="95.0158%" y="1647.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (67 samples, 0.02%)</title><rect x="94.7658%" y="1621" width="0.0232%" height="15" fill="rgb(209,64,43)"/><text x="95.0158%" y="1631.50"></text></g><g><title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (67 samples, 0.02%)</title><rect x="94.7658%" y="1605" width="0.0232%" height="15" fill="rgb(222,2,46)"/><text x="95.0158%" y="1615.50"></text></g><g><title>tokio::io::driver::Inner::add_source (67 samples, 0.02%)</title><rect x="94.7658%" y="1589" width="0.0232%" height="15" fill="rgb(218,19,44)"/><text x="95.0158%" y="1599.50"></text></g><g><title>tokio::util::slab::Allocator&lt;T&gt;::allocate (67 samples, 0.02%)</title><rect x="94.7658%" y="1573" width="0.0232%" height="15" fill="rgb(240,203,42)"/><text x="95.0158%" y="1583.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (67 samples, 0.02%)</title><rect x="94.7658%" y="1557" width="0.0232%" height="15" fill="rgb(229,23,45)"/><text x="95.0158%" y="1567.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (67 samples, 0.02%)</title><rect x="94.7658%" y="1541" width="0.0232%" height="15" fill="rgb(205,228,51)"/><text x="95.0158%" y="1551.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (67 samples, 0.02%)</title><rect x="94.7658%" y="1525" width="0.0232%" height="15" fill="rgb(239,36,20)"/><text x="95.0158%" y="1535.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::new (32 samples, 0.01%)</title><rect x="94.7970%" y="1589" width="0.0111%" height="15" fill="rgb(248,172,27)"/><text x="95.0470%" y="1599.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (213 samples, 0.07%)</title><rect x="94.7349%" y="1765" width="0.0739%" height="15" fill="rgb(244,55,32)"/><text x="94.9849%" y="1775.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (213 samples, 0.07%)</title><rect x="94.7349%" y="1749" width="0.0739%" height="15" fill="rgb(215,97,16)"/><text x="94.9849%" y="1759.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (213 samples, 0.07%)</title><rect x="94.7349%" y="1733" width="0.0739%" height="15" fill="rgb(224,80,29)"/><text x="94.9849%" y="1743.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (213 samples, 0.07%)</title><rect x="94.7349%" y="1717" width="0.0739%" height="15" fill="rgb(216,93,47)"/><text x="94.9849%" y="1727.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (57 samples, 0.02%)</title><rect x="94.7891%" y="1701" width="0.0198%" height="15" fill="rgb(238,159,10)"/><text x="95.0391%" y="1711.50"></text></g><g><title>tokio::task::spawn::spawn (57 samples, 0.02%)</title><rect x="94.7891%" y="1685" width="0.0198%" height="15" fill="rgb(223,98,29)"/><text x="95.0391%" y="1695.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (57 samples, 0.02%)</title><rect x="94.7891%" y="1669" width="0.0198%" height="15" fill="rgb(210,176,23)"/><text x="95.0391%" y="1679.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (57 samples, 0.02%)</title><rect x="94.7891%" y="1653" width="0.0198%" height="15" fill="rgb(242,162,27)"/><text x="95.0391%" y="1663.50"></text></g><g><title>tokio::runtime::task::joinable (57 samples, 0.02%)</title><rect x="94.7891%" y="1637" width="0.0198%" height="15" fill="rgb(245,109,32)"/><text x="95.0391%" y="1647.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (57 samples, 0.02%)</title><rect x="94.7891%" y="1621" width="0.0198%" height="15" fill="rgb(248,87,8)"/><text x="95.0391%" y="1631.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (57 samples, 0.02%)</title><rect x="94.7891%" y="1605" width="0.0198%" height="15" fill="rgb(250,160,50)"/><text x="95.0391%" y="1615.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="94.8088%" y="1717" width="0.0163%" height="15" fill="rgb(246,165,25)"/><text x="95.0588%" y="1727.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (47 samples, 0.02%)</title><rect x="94.8088%" y="1701" width="0.0163%" height="15" fill="rgb(249,219,3)"/><text x="95.0588%" y="1711.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="94.8088%" y="1685" width="0.0163%" height="15" fill="rgb(226,66,5)"/><text x="95.0588%" y="1695.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (47 samples, 0.02%)</title><rect x="94.8088%" y="1669" width="0.0163%" height="15" fill="rgb(250,220,43)"/><text x="95.0588%" y="1679.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="94.8088%" y="1653" width="0.0163%" height="15" fill="rgb(225,111,31)"/><text x="95.0588%" y="1663.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (47 samples, 0.02%)</title><rect x="94.8088%" y="1637" width="0.0163%" height="15" fill="rgb(248,106,18)"/><text x="95.0588%" y="1647.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="94.8088%" y="1621" width="0.0163%" height="15" fill="rgb(220,226,45)"/><text x="95.0588%" y="1631.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (47 samples, 0.02%)</title><rect x="94.8088%" y="1605" width="0.0163%" height="15" fill="rgb(208,58,53)"/><text x="95.0588%" y="1615.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="94.8088%" y="1589" width="0.0163%" height="15" fill="rgb(209,133,1)"/><text x="95.0588%" y="1599.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="94.8088%" y="1573" width="0.0163%" height="15" fill="rgb(228,216,27)"/><text x="95.0588%" y="1583.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::readiness::{{closure}} (47 samples, 0.02%)</title><rect x="94.8088%" y="1557" width="0.0163%" height="15" fill="rgb(238,155,2)"/><text x="95.0588%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place (47 samples, 0.02%)</title><rect x="94.8088%" y="1541" width="0.0163%" height="15" fill="rgb(244,99,37)"/><text x="95.0588%" y="1551.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (61 samples, 0.02%)</title><rect x="94.8088%" y="1765" width="0.0212%" height="15" fill="rgb(254,32,3)"/><text x="95.0588%" y="1775.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.02%)</title><rect x="94.8088%" y="1749" width="0.0212%" height="15" fill="rgb(234,46,50)"/><text x="95.0588%" y="1759.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (61 samples, 0.02%)</title><rect x="94.8088%" y="1733" width="0.0212%" height="15" fill="rgb(232,118,51)"/><text x="95.0588%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place (69 samples, 0.02%)</title><rect x="94.9102%" y="1493" width="0.0239%" height="15" fill="rgb(207,24,32)"/><text x="95.1602%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.01%)</title><rect x="94.9192%" y="1477" width="0.0149%" height="15" fill="rgb(208,107,43)"/><text x="95.1692%" y="1487.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.01%)</title><rect x="94.9233%" y="1461" width="0.0108%" height="15" fill="rgb(231,28,9)"/><text x="95.1733%" y="1471.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (35 samples, 0.01%)</title><rect x="94.9341%" y="1493" width="0.0121%" height="15" fill="rgb(241,204,15)"/><text x="95.1841%" y="1503.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (242 samples, 0.08%)</title><rect x="94.8706%" y="1525" width="0.0840%" height="15" fill="rgb(214,54,15)"/><text x="95.1206%" y="1535.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (209 samples, 0.07%)</title><rect x="94.8821%" y="1509" width="0.0725%" height="15" fill="rgb(230,12,28)"/><text x="95.1321%" y="1519.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (427 samples, 0.15%)</title><rect x="94.8300%" y="1557" width="0.1482%" height="15" fill="rgb(221,171,5)"/><text x="95.0800%" y="1567.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (358 samples, 0.12%)</title><rect x="94.8539%" y="1541" width="0.1242%" height="15" fill="rgb(207,72,25)"/><text x="95.1039%" y="1551.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::readiness (32 samples, 0.01%)</title><rect x="94.9671%" y="1525" width="0.0111%" height="15" fill="rgb(249,79,37)"/><text x="95.2171%" y="1535.50"></text></g><g><title>tokio::io::driver::registration::Registration::clear_readiness (73 samples, 0.03%)</title><rect x="94.9806%" y="1557" width="0.0253%" height="15" fill="rgb(209,98,49)"/><text x="95.2306%" y="1567.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::clear_readiness (73 samples, 0.03%)</title><rect x="94.9806%" y="1541" width="0.0253%" height="15" fill="rgb(221,62,13)"/><text x="95.2306%" y="1551.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (67 samples, 0.02%)</title><rect x="94.9827%" y="1525" width="0.0232%" height="15" fill="rgb(223,39,6)"/><text x="95.2327%" y="1535.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (91 samples, 0.03%)</title><rect x="95.0226%" y="1477" width="0.0316%" height="15" fill="rgb(246,163,20)"/><text x="95.2726%" y="1487.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept::{{closure}}::{{closure}} (49 samples, 0.02%)</title><rect x="95.0371%" y="1461" width="0.0170%" height="15" fill="rgb(211,111,29)"/><text x="95.2871%" y="1471.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::from_std (46 samples, 0.02%)</title><rect x="95.0382%" y="1445" width="0.0160%" height="15" fill="rgb(243,118,5)"/><text x="95.2882%" y="1455.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::new (40 samples, 0.01%)</title><rect x="95.0403%" y="1429" width="0.0139%" height="15" fill="rgb(240,144,52)"/><text x="95.2903%" y="1439.50"></text></g><g><title>__alloc_fd (35 samples, 0.01%)</title><rect x="95.1555%" y="1365" width="0.0121%" height="15" fill="rgb(244,158,36)"/><text x="95.4055%" y="1375.50"></text></g><g><title>get_unused_fd_flags (56 samples, 0.02%)</title><rect x="95.1530%" y="1381" width="0.0194%" height="15" fill="rgb(241,109,37)"/><text x="95.4030%" y="1391.50"></text></g><g><title>kmem_cache_free (62 samples, 0.02%)</title><rect x="95.2224%" y="1349" width="0.0215%" height="15" fill="rgb(213,95,32)"/><text x="95.4724%" y="1359.50"></text></g><g><title>inet_csk_accept (196 samples, 0.07%)</title><rect x="95.1919%" y="1365" width="0.0680%" height="15" fill="rgb(252,193,9)"/><text x="95.4419%" y="1375.50"></text></g><g><title>inet_accept (309 samples, 0.11%)</title><rect x="95.1725%" y="1381" width="0.1072%" height="15" fill="rgb(225,213,21)"/><text x="95.4225%" y="1391.50"></text></g><g><title>move_addr_to_user (60 samples, 0.02%)</title><rect x="95.2831%" y="1381" width="0.0208%" height="15" fill="rgb(220,172,46)"/><text x="95.5331%" y="1391.50"></text></g><g><title>inode_init_always (88 samples, 0.03%)</title><rect x="95.3341%" y="1333" width="0.0305%" height="15" fill="rgb(235,75,41)"/><text x="95.5841%" y="1343.50"></text></g><g><title>memcg_kmem_get_cache (53 samples, 0.02%)</title><rect x="95.3876%" y="1301" width="0.0184%" height="15" fill="rgb(213,86,9)"/><text x="95.6376%" y="1311.50"></text></g><g><title>kmem_cache_alloc (101 samples, 0.04%)</title><rect x="95.3716%" y="1317" width="0.0350%" height="15" fill="rgb(238,127,51)"/><text x="95.6216%" y="1327.50"></text></g><g><title>alloc_inode (239 samples, 0.08%)</title><rect x="95.3251%" y="1349" width="0.0829%" height="15" fill="rgb(215,2,54)"/><text x="95.5751%" y="1359.50"></text></g><g><title>sock_alloc_inode (111 samples, 0.04%)</title><rect x="95.3695%" y="1333" width="0.0385%" height="15" fill="rgb(245,80,6)"/><text x="95.6195%" y="1343.50"></text></g><g><title>sock_alloc (296 samples, 0.10%)</title><rect x="95.3130%" y="1381" width="0.1027%" height="15" fill="rgb(233,106,42)"/><text x="95.5630%" y="1391.50"></text></g><g><title>new_inode_pseudo (265 samples, 0.09%)</title><rect x="95.3237%" y="1365" width="0.0919%" height="15" fill="rgb(244,86,38)"/><text x="95.5737%" y="1375.50"></text></g><g><title>kmem_cache_alloc (55 samples, 0.02%)</title><rect x="95.4583%" y="1301" width="0.0191%" height="15" fill="rgb(242,167,7)"/><text x="95.7083%" y="1311.50"></text></g><g><title>apparmor_file_alloc_security (49 samples, 0.02%)</title><rect x="95.4861%" y="1285" width="0.0170%" height="15" fill="rgb(218,216,3)"/><text x="95.7361%" y="1295.50"></text></g><g><title>kmem_cache_alloc (29 samples, 0.01%)</title><rect x="95.5031%" y="1285" width="0.0101%" height="15" fill="rgb(206,136,36)"/><text x="95.7531%" y="1295.50"></text></g><g><title>security_file_alloc (95 samples, 0.03%)</title><rect x="95.4823%" y="1301" width="0.0330%" height="15" fill="rgb(206,206,15)"/><text x="95.7323%" y="1311.50"></text></g><g><title>__alloc_file (189 samples, 0.07%)</title><rect x="95.4500%" y="1317" width="0.0656%" height="15" fill="rgb(207,163,34)"/><text x="95.7000%" y="1327.50"></text></g><g><title>alloc_empty_file (214 samples, 0.07%)</title><rect x="95.4476%" y="1333" width="0.0742%" height="15" fill="rgb(240,127,22)"/><text x="95.6976%" y="1343.50"></text></g><g><title>alloc_file (255 samples, 0.09%)</title><rect x="95.4344%" y="1349" width="0.0885%" height="15" fill="rgb(227,49,5)"/><text x="95.6844%" y="1359.50"></text></g><g><title>kmem_cache_alloc (75 samples, 0.03%)</title><rect x="95.5388%" y="1317" width="0.0260%" height="15" fill="rgb(231,8,6)"/><text x="95.7888%" y="1327.50"></text></g><g><title>__d_alloc (131 samples, 0.05%)</title><rect x="95.5232%" y="1333" width="0.0455%" height="15" fill="rgb(223,21,24)"/><text x="95.7732%" y="1343.50"></text></g><g><title>d_alloc_pseudo (151 samples, 0.05%)</title><rect x="95.5229%" y="1349" width="0.0524%" height="15" fill="rgb(244,44,52)"/><text x="95.7729%" y="1359.50"></text></g><g><title>d_instantiate (34 samples, 0.01%)</title><rect x="95.5753%" y="1349" width="0.0118%" height="15" fill="rgb(207,73,28)"/><text x="95.8253%" y="1359.50"></text></g><g><title>alloc_file_pseudo (502 samples, 0.17%)</title><rect x="95.4198%" y="1365" width="0.1742%" height="15" fill="rgb(234,215,10)"/><text x="95.6698%" y="1375.50"></text></g><g><title>sock_alloc_file (538 samples, 0.19%)</title><rect x="95.4157%" y="1381" width="0.1867%" height="15" fill="rgb(236,85,3)"/><text x="95.6657%" y="1391.50"></text></g><g><title>__sys_accept4 (1,485 samples, 0.52%)</title><rect x="95.1058%" y="1397" width="0.5152%" height="15" fill="rgb(236,102,39)"/><text x="95.3558%" y="1407.50"></text></g><g><title>sockfd_lookup_light (54 samples, 0.02%)</title><rect x="95.6023%" y="1381" width="0.0187%" height="15" fill="rgb(243,50,8)"/><text x="95.8523%" y="1391.50"></text></g><g><title>__x64_sys_accept4 (1,544 samples, 0.54%)</title><rect x="95.1051%" y="1413" width="0.5357%" height="15" fill="rgb(207,111,4)"/><text x="95.3551%" y="1423.50"></text></g><g><title>__destroy_inode (30 samples, 0.01%)</title><rect x="95.7016%" y="1253" width="0.0104%" height="15" fill="rgb(230,52,42)"/><text x="95.9516%" y="1263.50"></text></g><g><title>destroy_inode (51 samples, 0.02%)</title><rect x="95.7002%" y="1269" width="0.0177%" height="15" fill="rgb(252,178,50)"/><text x="95.9502%" y="1279.50"></text></g><g><title>evict (102 samples, 0.04%)</title><rect x="95.6932%" y="1285" width="0.0354%" height="15" fill="rgb(234,46,35)"/><text x="95.9432%" y="1295.50"></text></g><g><title>dentry_unlink_inode (132 samples, 0.05%)</title><rect x="95.6846%" y="1317" width="0.0458%" height="15" fill="rgb(228,69,37)"/><text x="95.9346%" y="1327.50"></text></g><g><title>iput (125 samples, 0.04%)</title><rect x="95.6870%" y="1301" width="0.0434%" height="15" fill="rgb(221,21,11)"/><text x="95.9370%" y="1311.50"></text></g><g><title>__dentry_kill (176 samples, 0.06%)</title><rect x="95.6717%" y="1333" width="0.0611%" height="15" fill="rgb(223,56,9)"/><text x="95.9217%" y="1343.50"></text></g><g><title>dput (204 samples, 0.07%)</title><rect x="95.6676%" y="1349" width="0.0708%" height="15" fill="rgb(234,30,19)"/><text x="95.9176%" y="1359.50"></text></g><g><title>__fput (294 samples, 0.10%)</title><rect x="95.6533%" y="1365" width="0.1020%" height="15" fill="rgb(211,64,54)"/><text x="95.9033%" y="1375.50"></text></g><g><title>____fput (325 samples, 0.11%)</title><rect x="95.6533%" y="1381" width="0.1128%" height="15" fill="rgb(250,189,5)"/><text x="95.9033%" y="1391.50"></text></g><g><title>exit_to_usermode_loop (361 samples, 0.13%)</title><rect x="95.6426%" y="1413" width="0.1253%" height="15" fill="rgb(214,180,13)"/><text x="95.8926%" y="1423.50"></text></g><g><title>task_work_run (336 samples, 0.12%)</title><rect x="95.6513%" y="1397" width="0.1166%" height="15" fill="rgb(238,40,40)"/><text x="95.9013%" y="1407.50"></text></g><g><title>do_syscall_64 (1,943 samples, 0.67%)</title><rect x="95.0961%" y="1429" width="0.6741%" height="15" fill="rgb(214,101,38)"/><text x="95.3461%" y="1439.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,977 samples, 0.69%)</title><rect x="95.0864%" y="1445" width="0.6859%" height="15" fill="rgb(242,65,53)"/><text x="95.3364%" y="1455.50"></text></g><g><title>accept4 (2,028 samples, 0.70%)</title><rect x="95.0729%" y="1461" width="0.7036%" height="15" fill="rgb(230,22,45)"/><text x="95.3229%" y="1471.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (41 samples, 0.01%)</title><rect x="95.7772%" y="1461" width="0.0142%" height="15" fill="rgb(223,77,1)"/><text x="96.0272%" y="1471.50"></text></g><g><title>mio::sys::unix::tcp::accept (2,158 samples, 0.75%)</title><rect x="95.0541%" y="1477" width="0.7487%" height="15" fill="rgb(227,33,37)"/><text x="95.3041%" y="1487.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (2,270 samples, 0.79%)</title><rect x="95.0156%" y="1509" width="0.7876%" height="15" fill="rgb(224,148,39)"/><text x="95.2656%" y="1519.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept::{{closure}} (2,257 samples, 0.78%)</title><rect x="95.0201%" y="1493" width="0.7831%" height="15" fill="rgb(232,212,39)"/><text x="95.2701%" y="1503.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,806 samples, 0.97%)</title><rect x="94.8300%" y="1589" width="0.9736%" height="15" fill="rgb(251,172,7)"/><text x="95.0800%" y="1599.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (2,806 samples, 0.97%)</title><rect x="94.8300%" y="1573" width="0.9736%" height="15" fill="rgb(219,39,9)"/><text x="95.0800%" y="1583.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}}::{{closure}} (2,271 samples, 0.79%)</title><rect x="95.0156%" y="1557" width="0.7879%" height="15" fill="rgb(228,118,14)"/><text x="95.2656%" y="1567.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept (2,271 samples, 0.79%)</title><rect x="95.0156%" y="1541" width="0.7879%" height="15" fill="rgb(207,140,10)"/><text x="95.2656%" y="1551.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (2,271 samples, 0.79%)</title><rect x="95.0156%" y="1525" width="0.7879%" height="15" fill="rgb(227,111,53)"/><text x="95.2656%" y="1535.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.02%)</title><rect x="95.8036%" y="1461" width="0.0156%" height="15" fill="rgb(216,165,16)"/><text x="96.0536%" y="1471.50"></text></g><g><title>&lt;tokio::io::driver::Handle as core::clone::Clone&gt;::clone (45 samples, 0.02%)</title><rect x="95.8036%" y="1445" width="0.0156%" height="15" fill="rgb(226,111,18)"/><text x="96.0536%" y="1455.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.02%)</title><rect x="95.8036%" y="1429" width="0.0156%" height="15" fill="rgb(251,27,17)"/><text x="96.0536%" y="1439.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (44 samples, 0.02%)</title><rect x="95.8317%" y="1397" width="0.0153%" height="15" fill="rgb(254,69,9)"/><text x="96.0817%" y="1407.50"></text></g><g><title>core::mem::replace (37 samples, 0.01%)</title><rect x="95.8341%" y="1381" width="0.0128%" height="15" fill="rgb(234,140,37)"/><text x="96.0841%" y="1391.50"></text></g><g><title>core::mem::swap (31 samples, 0.01%)</title><rect x="95.8362%" y="1365" width="0.0108%" height="15" fill="rgb(220,93,8)"/><text x="96.0862%" y="1375.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (56 samples, 0.02%)</title><rect x="95.8285%" y="1413" width="0.0194%" height="15" fill="rgb(236,113,3)"/><text x="96.0785%" y="1423.50"></text></g><g><title>core::cell::BorrowRef::new (75 samples, 0.03%)</title><rect x="95.8223%" y="1429" width="0.0260%" height="15" fill="rgb(234,108,23)"/><text x="96.0723%" y="1439.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (89 samples, 0.03%)</title><rect x="95.8192%" y="1445" width="0.0309%" height="15" fill="rgb(205,114,34)"/><text x="96.0692%" y="1455.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (93 samples, 0.03%)</title><rect x="95.8192%" y="1461" width="0.0323%" height="15" fill="rgb(236,200,45)"/><text x="96.0692%" y="1471.50"></text></g><g><title>tokio::io::driver::Handle::current (152 samples, 0.05%)</title><rect x="95.8036%" y="1541" width="0.0527%" height="15" fill="rgb(227,194,29)"/><text x="96.0536%" y="1551.50"></text></g><g><title>tokio::runtime::context::io_handle (152 samples, 0.05%)</title><rect x="95.8036%" y="1525" width="0.0527%" height="15" fill="rgb(250,76,42)"/><text x="96.0536%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (152 samples, 0.05%)</title><rect x="95.8036%" y="1509" width="0.0527%" height="15" fill="rgb(208,128,8)"/><text x="96.0536%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (152 samples, 0.05%)</title><rect x="95.8036%" y="1493" width="0.0527%" height="15" fill="rgb(229,209,35)"/><text x="96.0536%" y="1503.50"></text></g><g><title>tokio::runtime::context::io_handle::{{closure}} (152 samples, 0.05%)</title><rect x="95.8036%" y="1477" width="0.0527%" height="15" fill="rgb(215,39,53)"/><text x="96.0536%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.01%)</title><rect x="95.8740%" y="1509" width="0.0101%" height="15" fill="rgb(219,123,41)"/><text x="96.1240%" y="1519.50"></text></g><g><title>tokio::io::driver::Handle::inner (52 samples, 0.02%)</title><rect x="95.8844%" y="1509" width="0.0180%" height="15" fill="rgb(212,158,18)"/><text x="96.1344%" y="1519.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (49 samples, 0.02%)</title><rect x="95.8854%" y="1493" width="0.0170%" height="15" fill="rgb(234,196,53)"/><text x="96.1354%" y="1503.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,160 samples, 1.10%)</title><rect x="94.8300%" y="1621" width="1.0964%" height="15" fill="rgb(210,139,12)"/><text x="95.0800%" y="1631.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (3,160 samples, 1.10%)</title><rect x="94.8300%" y="1605" width="1.0964%" height="15" fill="rgb(220,116,54)"/><text x="95.0800%" y="1615.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (354 samples, 0.12%)</title><rect x="95.8036%" y="1589" width="0.1228%" height="15" fill="rgb(247,103,28)"/><text x="96.0536%" y="1599.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (354 samples, 0.12%)</title><rect x="95.8036%" y="1573" width="0.1228%" height="15" fill="rgb(253,156,45)"/><text x="96.0536%" y="1583.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (354 samples, 0.12%)</title><rect x="95.8036%" y="1557" width="0.1228%" height="15" fill="rgb(237,157,52)"/><text x="96.0536%" y="1567.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (202 samples, 0.07%)</title><rect x="95.8563%" y="1541" width="0.0701%" height="15" fill="rgb(253,112,16)"/><text x="96.1063%" y="1551.50"></text></g><g><title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (202 samples, 0.07%)</title><rect x="95.8563%" y="1525" width="0.0701%" height="15" fill="rgb(234,70,18)"/><text x="96.1063%" y="1535.50"></text></g><g><title>tokio::io::driver::Inner::add_source (69 samples, 0.02%)</title><rect x="95.9024%" y="1509" width="0.0239%" height="15" fill="rgb(247,138,19)"/><text x="96.1524%" y="1519.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (43 samples, 0.01%)</title><rect x="95.9267%" y="1445" width="0.0149%" height="15" fill="rgb(207,171,1)"/><text x="96.1767%" y="1455.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (63 samples, 0.02%)</title><rect x="95.9267%" y="1461" width="0.0219%" height="15" fill="rgb(239,213,3)"/><text x="96.1767%" y="1471.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::push (106 samples, 0.04%)</title><rect x="95.9264%" y="1509" width="0.0368%" height="15" fill="rgb(226,112,4)"/><text x="96.1764%" y="1519.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.04%)</title><rect x="95.9267%" y="1493" width="0.0364%" height="15" fill="rgb(252,170,12)"/><text x="96.1767%" y="1503.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.04%)</title><rect x="95.9267%" y="1477" width="0.0364%" height="15" fill="rgb(241,106,13)"/><text x="96.1767%" y="1487.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.01%)</title><rect x="95.9486%" y="1461" width="0.0146%" height="15" fill="rgb(225,73,23)"/><text x="96.1986%" y="1471.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (42 samples, 0.01%)</title><rect x="95.9486%" y="1445" width="0.0146%" height="15" fill="rgb(251,227,29)"/><text x="96.1986%" y="1455.50"></text></g><g><title>__GI___pthread_mutex_lock (42 samples, 0.01%)</title><rect x="95.9486%" y="1429" width="0.0146%" height="15" fill="rgb(237,144,13)"/><text x="96.1986%" y="1439.50"></text></g><g><title>__lll_lock_wait (35 samples, 0.01%)</title><rect x="95.9510%" y="1413" width="0.0121%" height="15" fill="rgb(232,106,46)"/><text x="96.2010%" y="1423.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (35 samples, 0.01%)</title><rect x="95.9510%" y="1397" width="0.0121%" height="15" fill="rgb(245,154,53)"/><text x="96.2010%" y="1407.50"></text></g><g><title>do_syscall_64 (34 samples, 0.01%)</title><rect x="95.9514%" y="1381" width="0.0118%" height="15" fill="rgb(212,119,47)"/><text x="96.2014%" y="1391.50"></text></g><g><title>__x64_sys_futex (33 samples, 0.01%)</title><rect x="95.9517%" y="1365" width="0.0114%" height="15" fill="rgb(253,135,25)"/><text x="96.2017%" y="1375.50"></text></g><g><title>do_futex (33 samples, 0.01%)</title><rect x="95.9517%" y="1349" width="0.0114%" height="15" fill="rgb(253,208,39)"/><text x="96.2017%" y="1359.50"></text></g><g><title>futex_wait (33 samples, 0.01%)</title><rect x="95.9517%" y="1333" width="0.0114%" height="15" fill="rgb(226,64,12)"/><text x="96.2017%" y="1343.50"></text></g><g><title>mio::waker::Waker::wake (53 samples, 0.02%)</title><rect x="95.9680%" y="1381" width="0.0184%" height="15" fill="rgb(214,162,37)"/><text x="96.2180%" y="1391.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (53 samples, 0.02%)</title><rect x="95.9680%" y="1365" width="0.0184%" height="15" fill="rgb(250,104,5)"/><text x="96.2180%" y="1375.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (51 samples, 0.02%)</title><rect x="95.9687%" y="1349" width="0.0177%" height="15" fill="rgb(220,202,50)"/><text x="96.2187%" y="1359.50"></text></g><g><title>std::sys::unix::fs::File::write (50 samples, 0.02%)</title><rect x="95.9691%" y="1333" width="0.0173%" height="15" fill="rgb(248,67,38)"/><text x="96.2191%" y="1343.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (50 samples, 0.02%)</title><rect x="95.9691%" y="1317" width="0.0173%" height="15" fill="rgb(242,94,35)"/><text x="96.2191%" y="1327.50"></text></g><g><title>__GI___libc_write (50 samples, 0.02%)</title><rect x="95.9691%" y="1301" width="0.0173%" height="15" fill="rgb(209,78,37)"/><text x="96.2191%" y="1311.50"></text></g><g><title>__GI___libc_write (48 samples, 0.02%)</title><rect x="95.9698%" y="1285" width="0.0167%" height="15" fill="rgb(230,126,47)"/><text x="96.2198%" y="1295.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (48 samples, 0.02%)</title><rect x="95.9698%" y="1269" width="0.0167%" height="15" fill="rgb(222,110,35)"/><text x="96.2198%" y="1279.50"></text></g><g><title>do_syscall_64 (47 samples, 0.02%)</title><rect x="95.9701%" y="1253" width="0.0163%" height="15" fill="rgb(233,154,20)"/><text x="96.2201%" y="1263.50"></text></g><g><title>__x64_sys_write (46 samples, 0.02%)</title><rect x="95.9705%" y="1237" width="0.0160%" height="15" fill="rgb(223,53,50)"/><text x="96.2205%" y="1247.50"></text></g><g><title>ksys_write (46 samples, 0.02%)</title><rect x="95.9705%" y="1221" width="0.0160%" height="15" fill="rgb(251,27,26)"/><text x="96.2205%" y="1231.50"></text></g><g><title>vfs_write (42 samples, 0.01%)</title><rect x="95.9718%" y="1205" width="0.0146%" height="15" fill="rgb(223,189,16)"/><text x="96.2218%" y="1215.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (77 samples, 0.03%)</title><rect x="95.9632%" y="1493" width="0.0267%" height="15" fill="rgb(207,5,54)"/><text x="96.2132%" y="1503.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (77 samples, 0.03%)</title><rect x="95.9632%" y="1477" width="0.0267%" height="15" fill="rgb(254,124,50)"/><text x="96.2132%" y="1487.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_driver (71 samples, 0.02%)</title><rect x="95.9652%" y="1461" width="0.0246%" height="15" fill="rgb(253,193,24)"/><text x="96.2152%" y="1471.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (71 samples, 0.02%)</title><rect x="95.9652%" y="1445" width="0.0246%" height="15" fill="rgb(235,170,24)"/><text x="96.2152%" y="1455.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (71 samples, 0.02%)</title><rect x="95.9652%" y="1429" width="0.0246%" height="15" fill="rgb(222,212,52)"/><text x="96.2152%" y="1439.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (71 samples, 0.02%)</title><rect x="95.9652%" y="1413" width="0.0246%" height="15" fill="rgb(223,17,45)"/><text x="96.2152%" y="1423.50"></text></g><g><title>tokio::io::driver::Handle::wakeup (71 samples, 0.02%)</title><rect x="95.9652%" y="1397" width="0.0246%" height="15" fill="rgb(227,103,26)"/><text x="96.2152%" y="1407.50"></text></g><g><title>tokio::task::spawn::spawn (192 samples, 0.07%)</title><rect x="95.9264%" y="1605" width="0.0666%" height="15" fill="rgb(251,151,25)"/><text x="96.1764%" y="1615.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (192 samples, 0.07%)</title><rect x="95.9264%" y="1589" width="0.0666%" height="15" fill="rgb(248,144,29)"/><text x="96.1764%" y="1599.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (192 samples, 0.07%)</title><rect x="95.9264%" y="1573" width="0.0666%" height="15" fill="rgb(245,97,16)"/><text x="96.1764%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (192 samples, 0.07%)</title><rect x="95.9264%" y="1557" width="0.0666%" height="15" fill="rgb(220,200,29)"/><text x="96.1764%" y="1567.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (192 samples, 0.07%)</title><rect x="95.9264%" y="1541" width="0.0666%" height="15" fill="rgb(206,38,29)"/><text x="96.1764%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (192 samples, 0.07%)</title><rect x="95.9264%" y="1525" width="0.0666%" height="15" fill="rgb(245,19,52)"/><text x="96.1764%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (86 samples, 0.03%)</title><rect x="95.9632%" y="1509" width="0.0298%" height="15" fill="rgb(205,67,43)"/><text x="96.2132%" y="1519.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::into_raw (42 samples, 0.01%)</title><rect x="95.9982%" y="1541" width="0.0146%" height="15" fill="rgb(217,128,23)"/><text x="96.2482%" y="1551.50"></text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.01%)</title><rect x="96.0152%" y="1525" width="0.0114%" height="15" fill="rgb(210,109,28)"/><text x="96.2652%" y="1535.50"></text></g><g><title>malloc_consolidate (48 samples, 0.02%)</title><rect x="96.0732%" y="1429" width="0.0167%" height="15" fill="rgb(233,181,7)"/><text x="96.3232%" y="1439.50"></text></g><g><title>_int_malloc (125 samples, 0.04%)</title><rect x="96.0489%" y="1445" width="0.0434%" height="15" fill="rgb(244,11,22)"/><text x="96.2989%" y="1455.50"></text></g><g><title>__GI___libc_malloc (145 samples, 0.05%)</title><rect x="96.0437%" y="1461" width="0.0503%" height="15" fill="rgb(205,124,54)"/><text x="96.2937%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (164 samples, 0.06%)</title><rect x="96.0405%" y="1477" width="0.0569%" height="15" fill="rgb(218,21,27)"/><text x="96.2905%" y="1487.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (38 samples, 0.01%)</title><rect x="96.1009%" y="1477" width="0.0132%" height="15" fill="rgb(224,153,33)"/><text x="96.3509%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (263 samples, 0.09%)</title><rect x="96.0298%" y="1509" width="0.0912%" height="15" fill="rgb(240,219,28)"/><text x="96.2798%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (254 samples, 0.09%)</title><rect x="96.0329%" y="1493" width="0.0881%" height="15" fill="rgb(214,80,29)"/><text x="96.2829%" y="1503.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (359 samples, 0.12%)</title><rect x="96.0128%" y="1541" width="0.1246%" height="15" fill="rgb(247,148,44)"/><text x="96.2628%" y="1551.50"></text></g><g><title>alloc::alloc::exchange_malloc (319 samples, 0.11%)</title><rect x="96.0267%" y="1525" width="0.1107%" height="15" fill="rgb(243,110,30)"/><text x="96.2767%" y="1535.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (35 samples, 0.01%)</title><rect x="96.1252%" y="1509" width="0.0121%" height="15" fill="rgb(243,173,41)"/><text x="96.3752%" y="1519.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1765" width="1.3292%" height="15" fill="rgb(225,160,47)"/><text x="95.0800%" y="1775.50"></text></g><g><title>tokio::coop::budget (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1749" width="1.3292%" height="15" fill="rgb(215,44,21)"/><text x="95.0800%" y="1759.50"></text></g><g><title>tokio::coop::with_budget (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1733" width="1.3292%" height="15" fill="rgb(248,90,3)"/><text x="95.0800%" y="1743.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1717" width="1.3292%" height="15" fill="rgb(220,196,49)"/><text x="95.0800%" y="1727.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1701" width="1.3292%" height="15" fill="rgb(217,138,14)"/><text x="95.0800%" y="1711.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1685" width="1.3292%" height="15" fill="rgb(219,111,20)"/><text x="95.0800%" y="1695.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1669" width="1.3292%" height="15" fill="rgb(218,114,4)"/><text x="95.0800%" y="1679.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1653" width="1.3292%" height="15" fill="rgb(238,133,3)"/><text x="95.0800%" y="1663.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (3,831 samples, 1.33%)</title><rect x="94.8300%" y="1637" width="1.3292%" height="15" fill="rgb(224,95,0)"/><text x="95.0800%" y="1647.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (671 samples, 0.23%)</title><rect x="95.9264%" y="1621" width="0.2328%" height="15" fill="rgb(220,169,35)"/><text x="96.1764%" y="1631.50"></text></g><g><title>tunneler::streams::spsc::stream (478 samples, 0.17%)</title><rect x="95.9934%" y="1605" width="0.1658%" height="15" fill="rgb(242,116,47)"/><text x="96.2434%" y="1615.50"></text></g><g><title>tokio::sync::mpsc::unbounded::unbounded_channel (478 samples, 0.17%)</title><rect x="95.9934%" y="1589" width="0.1658%" height="15" fill="rgb(251,42,20)"/><text x="96.2434%" y="1599.50"></text></g><g><title>tokio::sync::mpsc::chan::channel (478 samples, 0.17%)</title><rect x="95.9934%" y="1573" width="0.1658%" height="15" fill="rgb(234,7,34)"/><text x="96.2434%" y="1583.50"></text></g><g><title>tokio::sync::mpsc::list::channel (478 samples, 0.17%)</title><rect x="95.9934%" y="1557" width="0.1658%" height="15" fill="rgb(243,208,13)"/><text x="96.2434%" y="1567.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (131 samples, 0.05%)</title><rect x="96.1592%" y="1573" width="0.0455%" height="15" fill="rgb(227,33,28)"/><text x="96.4092%" y="1583.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (131 samples, 0.05%)</title><rect x="96.1592%" y="1557" width="0.0455%" height="15" fill="rgb(250,47,37)"/><text x="96.4092%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place (44 samples, 0.02%)</title><rect x="96.2123%" y="1557" width="0.0153%" height="15" fill="rgb(235,111,52)"/><text x="96.4623%" y="1567.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.02%)</title><rect x="96.2123%" y="1541" width="0.0153%" height="15" fill="rgb(223,64,28)"/><text x="96.4623%" y="1551.50"></text></g><g><title>__GI___libc_malloc (78 samples, 0.03%)</title><rect x="96.2511%" y="1445" width="0.0271%" height="15" fill="rgb(236,67,22)"/><text x="96.5011%" y="1455.50"></text></g><g><title>alloc::alloc::alloc (106 samples, 0.04%)</title><rect x="96.2484%" y="1461" width="0.0368%" height="15" fill="rgb(243,79,24)"/><text x="96.4984%" y="1471.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (35 samples, 0.01%)</title><rect x="96.2903%" y="1461" width="0.0121%" height="15" fill="rgb(241,225,22)"/><text x="96.5403%" y="1471.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (208 samples, 0.07%)</title><rect x="96.2387%" y="1493" width="0.0722%" height="15" fill="rgb(228,214,26)"/><text x="96.4887%" y="1503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (203 samples, 0.07%)</title><rect x="96.2404%" y="1477" width="0.0704%" height="15" fill="rgb(219,84,52)"/><text x="96.4904%" y="1487.50"></text></g><g><title>alloc::alloc::exchange_malloc (271 samples, 0.09%)</title><rect x="96.2334%" y="1509" width="0.0940%" height="15" fill="rgb(220,12,22)"/><text x="96.4834%" y="1519.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (37 samples, 0.01%)</title><rect x="96.3146%" y="1493" width="0.0128%" height="15" fill="rgb(219,9,49)"/><text x="96.5646%" y="1503.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::into_split (311 samples, 0.11%)</title><rect x="96.2275%" y="1557" width="0.1079%" height="15" fill="rgb(237,40,43)"/><text x="96.4775%" y="1567.50"></text></g><g><title>tokio::net::tcp::split_owned::split_owned (311 samples, 0.11%)</title><rect x="96.2275%" y="1541" width="0.1079%" height="15" fill="rgb(212,189,32)"/><text x="96.4775%" y="1551.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (310 samples, 0.11%)</title><rect x="96.2279%" y="1525" width="0.1076%" height="15" fill="rgb(247,48,9)"/><text x="96.4779%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place (81 samples, 0.03%)</title><rect x="96.3604%" y="1541" width="0.0281%" height="15" fill="rgb(247,112,3)"/><text x="96.6104%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 0.02%)</title><rect x="96.3656%" y="1525" width="0.0229%" height="15" fill="rgb(243,110,18)"/><text x="96.6156%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place (59 samples, 0.02%)</title><rect x="96.3681%" y="1509" width="0.0205%" height="15" fill="rgb(233,223,44)"/><text x="96.6181%" y="1519.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.02%)</title><rect x="96.3691%" y="1493" width="0.0194%" height="15" fill="rgb(245,160,20)"/><text x="96.6191%" y="1503.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (38 samples, 0.01%)</title><rect x="96.4146%" y="1493" width="0.0132%" height="15" fill="rgb(225,37,1)"/><text x="96.6646%" y="1503.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (33 samples, 0.01%)</title><rect x="96.4163%" y="1477" width="0.0114%" height="15" fill="rgb(253,227,39)"/><text x="96.6663%" y="1487.50"></text></g><g><title>&lt;tokio::runtime::spawner::Spawner as core::clone::Clone&gt;::clone (85 samples, 0.03%)</title><rect x="96.4333%" y="1477" width="0.0295%" height="15" fill="rgb(240,179,26)"/><text x="96.6833%" y="1487.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::Spawner as core::clone::Clone&gt;::clone (78 samples, 0.03%)</title><rect x="96.4357%" y="1461" width="0.0271%" height="15" fill="rgb(237,212,23)"/><text x="96.6857%" y="1471.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (72 samples, 0.02%)</title><rect x="96.4378%" y="1445" width="0.0250%" height="15" fill="rgb(221,38,11)"/><text x="96.6878%" y="1455.50"></text></g><g><title>core::cell::BorrowRef::new (37 samples, 0.01%)</title><rect x="96.4739%" y="1445" width="0.0128%" height="15" fill="rgb(215,85,6)"/><text x="96.7239%" y="1455.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (63 samples, 0.02%)</title><rect x="96.4656%" y="1461" width="0.0219%" height="15" fill="rgb(239,64,14)"/><text x="96.7156%" y="1471.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (80 samples, 0.03%)</title><rect x="96.4628%" y="1477" width="0.0278%" height="15" fill="rgb(215,150,32)"/><text x="96.7128%" y="1487.50"></text></g><g><title>tokio::runtime::context::spawn_handle (331 samples, 0.11%)</title><rect x="96.3885%" y="1541" width="0.1148%" height="15" fill="rgb(238,15,13)"/><text x="96.6385%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (321 samples, 0.11%)</title><rect x="96.3920%" y="1525" width="0.1114%" height="15" fill="rgb(251,87,8)"/><text x="96.6420%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (294 samples, 0.10%)</title><rect x="96.4014%" y="1509" width="0.1020%" height="15" fill="rgb(206,86,1)"/><text x="96.6514%" y="1519.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (218 samples, 0.08%)</title><rect x="96.4277%" y="1493" width="0.0756%" height="15" fill="rgb(208,151,45)"/><text x="96.6777%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.01%)</title><rect x="96.4905%" y="1477" width="0.0128%" height="15" fill="rgb(231,181,24)"/><text x="96.7405%" y="1487.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (74 samples, 0.03%)</title><rect x="96.5034%" y="1541" width="0.0257%" height="15" fill="rgb(240,106,29)"/><text x="96.7534%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (50 samples, 0.02%)</title><rect x="96.5117%" y="1525" width="0.0173%" height="15" fill="rgb(227,166,11)"/><text x="96.7617%" y="1535.50"></text></g><g><title>tokio::task::spawn::spawn (566 samples, 0.20%)</title><rect x="96.3355%" y="1557" width="0.1964%" height="15" fill="rgb(254,14,34)"/><text x="96.5855%" y="1567.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (36 samples, 0.01%)</title><rect x="96.5339%" y="1493" width="0.0125%" height="15" fill="rgb(223,222,6)"/><text x="96.7839%" y="1503.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (31 samples, 0.01%)</title><rect x="96.5356%" y="1477" width="0.0108%" height="15" fill="rgb(245,69,24)"/><text x="96.7856%" y="1487.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (175 samples, 0.06%)</title><rect x="96.5318%" y="1509" width="0.0607%" height="15" fill="rgb(213,193,7)"/><text x="96.7818%" y="1519.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::write (128 samples, 0.04%)</title><rect x="96.5481%" y="1493" width="0.0444%" height="15" fill="rgb(237,92,51)"/><text x="96.7981%" y="1503.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::try_write_internal (115 samples, 0.04%)</title><rect x="96.5526%" y="1477" width="0.0399%" height="15" fill="rgb(225,194,6)"/><text x="96.8026%" y="1487.50"></text></g><g><title>dashmap::lock::compare_exchange (80 samples, 0.03%)</title><rect x="96.5648%" y="1461" width="0.0278%" height="15" fill="rgb(205,159,49)"/><text x="96.8148%" y="1471.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (67 samples, 0.02%)</title><rect x="96.5693%" y="1445" width="0.0232%" height="15" fill="rgb(219,69,2)"/><text x="96.8193%" y="1455.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (53 samples, 0.02%)</title><rect x="96.5742%" y="1429" width="0.0184%" height="15" fill="rgb(215,107,24)"/><text x="96.8242%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (48 samples, 0.02%)</title><rect x="96.5974%" y="1509" width="0.0167%" height="15" fill="rgb(249,208,29)"/><text x="96.8474%" y="1519.50"></text></g><g><title>&lt;dashmap::lock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.02%)</title><rect x="96.5974%" y="1493" width="0.0167%" height="15" fill="rgb(213,147,10)"/><text x="96.8474%" y="1503.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (106 samples, 0.04%)</title><rect x="96.6206%" y="1493" width="0.0368%" height="15" fill="rgb(254,140,42)"/><text x="96.8706%" y="1503.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (100 samples, 0.03%)</title><rect x="96.6227%" y="1477" width="0.0347%" height="15" fill="rgb(249,9,15)"/><text x="96.8727%" y="1487.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (98 samples, 0.03%)</title><rect x="96.6234%" y="1461" width="0.0340%" height="15" fill="rgb(210,19,33)"/><text x="96.8734%" y="1471.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (62 samples, 0.02%)</title><rect x="96.6359%" y="1445" width="0.0215%" height="15" fill="rgb(241,121,22)"/><text x="96.8859%" y="1455.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (33 samples, 0.01%)</title><rect x="96.6574%" y="1493" width="0.0114%" height="15" fill="rgb(244,69,52)"/><text x="96.9074%" y="1503.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (30 samples, 0.01%)</title><rect x="96.7008%" y="1381" width="0.0104%" height="15" fill="rgb(244,191,54)"/><text x="96.9508%" y="1391.50"></text></g><g><title>core::hash::sip::u8to64_le (69 samples, 0.02%)</title><rect x="96.6876%" y="1413" width="0.0239%" height="15" fill="rgb(250,3,53)"/><text x="96.9376%" y="1423.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (40 samples, 0.01%)</title><rect x="96.6977%" y="1397" width="0.0139%" height="15" fill="rgb(205,77,3)"/><text x="96.9477%" y="1407.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (109 samples, 0.04%)</title><rect x="96.6765%" y="1461" width="0.0378%" height="15" fill="rgb(207,155,3)"/><text x="96.9265%" y="1471.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (104 samples, 0.04%)</title><rect x="96.6782%" y="1445" width="0.0361%" height="15" fill="rgb(224,79,2)"/><text x="96.9282%" y="1455.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (92 samples, 0.03%)</title><rect x="96.6824%" y="1429" width="0.0319%" height="15" fill="rgb(243,172,5)"/><text x="96.9324%" y="1439.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (294 samples, 0.10%)</title><rect x="96.6141%" y="1509" width="0.1020%" height="15" fill="rgb(217,23,43)"/><text x="96.8641%" y="1519.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (136 samples, 0.05%)</title><rect x="96.6689%" y="1493" width="0.0472%" height="15" fill="rgb(223,109,20)"/><text x="96.9189%" y="1503.50"></text></g><g><title>core::hash::Hasher::write_u32 (122 samples, 0.04%)</title><rect x="96.6737%" y="1477" width="0.0423%" height="15" fill="rgb(232,159,21)"/><text x="96.9237%" y="1487.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (101 samples, 0.04%)</title><rect x="96.7247%" y="1461" width="0.0350%" height="15" fill="rgb(219,58,2)"/><text x="96.9747%" y="1471.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (98 samples, 0.03%)</title><rect x="96.7258%" y="1445" width="0.0340%" height="15" fill="rgb(241,56,8)"/><text x="96.9758%" y="1455.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (96 samples, 0.03%)</title><rect x="96.7265%" y="1429" width="0.0333%" height="15" fill="rgb(249,10,27)"/><text x="96.9765%" y="1439.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (62 samples, 0.02%)</title><rect x="96.7383%" y="1413" width="0.0215%" height="15" fill="rgb(248,177,5)"/><text x="96.9883%" y="1423.50"></text></g><g><title>hashbrown::map::make_hash (161 samples, 0.06%)</title><rect x="96.7216%" y="1477" width="0.0559%" height="15" fill="rgb(239,12,30)"/><text x="96.9716%" y="1487.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.01%)</title><rect x="96.7858%" y="1461" width="0.0142%" height="15" fill="rgb(229,164,25)"/><text x="97.0358%" y="1471.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (171 samples, 0.06%)</title><rect x="96.7775%" y="1477" width="0.0593%" height="15" fill="rgb(231,217,50)"/><text x="97.0275%" y="1487.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (101 samples, 0.04%)</title><rect x="96.8018%" y="1461" width="0.0350%" height="15" fill="rgb(247,99,32)"/><text x="97.0518%" y="1471.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (93 samples, 0.03%)</title><rect x="96.8045%" y="1445" width="0.0323%" height="15" fill="rgb(240,74,50)"/><text x="97.0545%" y="1455.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (40 samples, 0.01%)</title><rect x="96.8465%" y="1461" width="0.0139%" height="15" fill="rgb(218,54,8)"/><text x="97.0965%" y="1471.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (40 samples, 0.01%)</title><rect x="96.8642%" y="1445" width="0.0139%" height="15" fill="rgb(227,132,20)"/><text x="97.1142%" y="1455.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (78 samples, 0.03%)</title><rect x="96.8604%" y="1461" width="0.0271%" height="15" fill="rgb(232,134,12)"/><text x="97.1104%" y="1471.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (70 samples, 0.02%)</title><rect x="96.8882%" y="1461" width="0.0243%" height="15" fill="rgb(250,129,18)"/><text x="97.1382%" y="1471.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::set (1,135 samples, 0.39%)</title><rect x="96.5318%" y="1557" width="0.3938%" height="15" fill="rgb(232,129,47)"/><text x="96.7818%" y="1567.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (1,135 samples, 0.39%)</title><rect x="96.5318%" y="1541" width="0.3938%" height="15" fill="rgb(230,31,40)"/><text x="96.7818%" y="1551.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (1,135 samples, 0.39%)</title><rect x="96.5318%" y="1525" width="0.3938%" height="15" fill="rgb(232,126,10)"/><text x="96.7818%" y="1535.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (604 samples, 0.21%)</title><rect x="96.7161%" y="1509" width="0.2096%" height="15" fill="rgb(205,46,31)"/><text x="96.9661%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (604 samples, 0.21%)</title><rect x="96.7161%" y="1493" width="0.2096%" height="15" fill="rgb(232,37,37)"/><text x="96.9661%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (256 samples, 0.09%)</title><rect x="96.8368%" y="1477" width="0.0888%" height="15" fill="rgb(240,91,16)"/><text x="97.0868%" y="1487.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (57 samples, 0.02%)</title><rect x="96.9516%" y="1509" width="0.0198%" height="15" fill="rgb(224,160,9)"/><text x="97.2016%" y="1519.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.01%)</title><rect x="96.9954%" y="1445" width="0.0111%" height="15" fill="rgb(215,116,14)"/><text x="97.2454%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (32 samples, 0.01%)</title><rect x="96.9954%" y="1429" width="0.0111%" height="15" fill="rgb(235,46,36)"/><text x="97.2454%" y="1439.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.01%)</title><rect x="96.9954%" y="1413" width="0.0111%" height="15" fill="rgb(238,39,28)"/><text x="97.2454%" y="1423.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.01%)</title><rect x="96.9954%" y="1397" width="0.0111%" height="15" fill="rgb(242,125,29)"/><text x="97.2454%" y="1407.50"></text></g><g><title>std::sys::unix::mutex::Mutex::init (35 samples, 0.01%)</title><rect x="97.0065%" y="1445" width="0.0121%" height="15" fill="rgb(238,211,30)"/><text x="97.2565%" y="1455.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::new (71 samples, 0.02%)</title><rect x="96.9943%" y="1461" width="0.0246%" height="15" fill="rgb(227,201,28)"/><text x="97.2443%" y="1471.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::new (101 samples, 0.04%)</title><rect x="96.9853%" y="1493" width="0.0350%" height="15" fill="rgb(238,77,29)"/><text x="97.2353%" y="1503.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (93 samples, 0.03%)</title><rect x="96.9881%" y="1477" width="0.0323%" height="15" fill="rgb(213,221,40)"/><text x="97.2381%" y="1487.50"></text></g><g><title>tokio::sync::notify::Notify::new (117 samples, 0.04%)</title><rect x="96.9815%" y="1509" width="0.0406%" height="15" fill="rgb(226,220,44)"/><text x="97.2315%" y="1519.50"></text></g><g><title>tokio::runtime::Runtime::block_on (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1765" width="0.8736%" height="15" fill="rgb(228,90,23)"/><text x="96.4092%" y="1775.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1749" width="0.8736%" height="15" fill="rgb(235,72,29)"/><text x="96.4092%" y="1759.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1733" width="0.8736%" height="15" fill="rgb(248,117,39)"/><text x="96.4092%" y="1743.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1717" width="0.8736%" height="15" fill="rgb(225,43,28)"/><text x="96.4092%" y="1727.50"></text></g><g><title>tokio::coop::budget (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1701" width="0.8736%" height="15" fill="rgb(240,93,4)"/><text x="96.4092%" y="1711.50"></text></g><g><title>tokio::coop::with_budget (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1685" width="0.8736%" height="15" fill="rgb(234,178,27)"/><text x="96.4092%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1669" width="0.8736%" height="15" fill="rgb(254,88,22)"/><text x="96.4092%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1653" width="0.8736%" height="15" fill="rgb(240,206,50)"/><text x="96.4092%" y="1663.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1637" width="0.8736%" height="15" fill="rgb(249,103,8)"/><text x="96.4092%" y="1647.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1621" width="0.8736%" height="15" fill="rgb(241,178,36)"/><text x="96.4092%" y="1631.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1605" width="0.8736%" height="15" fill="rgb(246,110,15)"/><text x="96.4092%" y="1615.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (2,518 samples, 0.87%)</title><rect x="96.1592%" y="1589" width="0.8736%" height="15" fill="rgb(207,14,43)"/><text x="96.4092%" y="1599.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (2,365 samples, 0.82%)</title><rect x="96.2123%" y="1573" width="0.8206%" height="15" fill="rgb(253,219,19)"/><text x="96.4623%" y="1583.50"></text></g><g><title>tunneler::streams::spsc::stream (274 samples, 0.10%)</title><rect x="96.9378%" y="1557" width="0.0951%" height="15" fill="rgb(216,126,5)"/><text x="97.1878%" y="1567.50"></text></g><g><title>tokio::sync::mpsc::unbounded::unbounded_channel (274 samples, 0.10%)</title><rect x="96.9378%" y="1541" width="0.0951%" height="15" fill="rgb(218,78,42)"/><text x="97.1878%" y="1551.50"></text></g><g><title>tokio::sync::mpsc::chan::channel (274 samples, 0.10%)</title><rect x="96.9378%" y="1525" width="0.0951%" height="15" fill="rgb(215,154,40)"/><text x="97.1878%" y="1535.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::new (31 samples, 0.01%)</title><rect x="97.0221%" y="1509" width="0.0108%" height="15" fill="rgb(235,129,32)"/><text x="97.2721%" y="1519.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.01%)</title><rect x="97.0991%" y="1525" width="0.0118%" height="15" fill="rgb(218,51,8)"/><text x="97.3491%" y="1535.50"></text></g><g><title>mio::net::tcp::listener::TcpListener::accept (39 samples, 0.01%)</title><rect x="97.1109%" y="1525" width="0.0135%" height="15" fill="rgb(245,48,4)"/><text x="97.3609%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (263 samples, 0.09%)</title><rect x="97.0335%" y="1573" width="0.0912%" height="15" fill="rgb(250,175,12)"/><text x="97.2835%" y="1583.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (263 samples, 0.09%)</title><rect x="97.0335%" y="1557" width="0.0912%" height="15" fill="rgb(237,95,40)"/><text x="97.2835%" y="1567.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}}::{{closure}} (93 samples, 0.03%)</title><rect x="97.0925%" y="1541" width="0.0323%" height="15" fill="rgb(244,120,0)"/><text x="97.3425%" y="1551.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (34 samples, 0.01%)</title><rect x="97.1480%" y="1461" width="0.0118%" height="15" fill="rgb(241,19,42)"/><text x="97.3980%" y="1471.50"></text></g><g><title>tokio::io::driver::Handle::current (201 samples, 0.07%)</title><rect x="97.1248%" y="1525" width="0.0697%" height="15" fill="rgb(217,174,48)"/><text x="97.3748%" y="1535.50"></text></g><g><title>tokio::runtime::context::io_handle (192 samples, 0.07%)</title><rect x="97.1279%" y="1509" width="0.0666%" height="15" fill="rgb(239,36,38)"/><text x="97.3779%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (192 samples, 0.07%)</title><rect x="97.1279%" y="1493" width="0.0666%" height="15" fill="rgb(220,63,49)"/><text x="97.3779%" y="1503.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (175 samples, 0.06%)</title><rect x="97.1338%" y="1477" width="0.0607%" height="15" fill="rgb(240,101,13)"/><text x="97.3838%" y="1487.50"></text></g><g><title>tokio::runtime::context::io_handle::{{closure}} (100 samples, 0.03%)</title><rect x="97.1598%" y="1461" width="0.0347%" height="15" fill="rgb(209,184,51)"/><text x="97.4098%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.01%)</title><rect x="97.1845%" y="1445" width="0.0101%" height="15" fill="rgb(206,136,39)"/><text x="97.4345%" y="1455.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (492 samples, 0.17%)</title><rect x="97.0335%" y="1605" width="0.1707%" height="15" fill="rgb(254,47,45)"/><text x="97.2835%" y="1615.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (492 samples, 0.17%)</title><rect x="97.0335%" y="1589" width="0.1707%" height="15" fill="rgb(252,103,20)"/><text x="97.2835%" y="1599.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (229 samples, 0.08%)</title><rect x="97.1248%" y="1573" width="0.0795%" height="15" fill="rgb(230,69,12)"/><text x="97.3748%" y="1583.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (229 samples, 0.08%)</title><rect x="97.1248%" y="1557" width="0.0795%" height="15" fill="rgb(219,2,28)"/><text x="97.3748%" y="1567.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (229 samples, 0.08%)</title><rect x="97.1248%" y="1541" width="0.0795%" height="15" fill="rgb(210,9,12)"/><text x="97.3748%" y="1551.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::leak (33 samples, 0.01%)</title><rect x="97.2244%" y="1493" width="0.0114%" height="15" fill="rgb(235,99,33)"/><text x="97.4744%" y="1503.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::into_raw (57 samples, 0.02%)</title><rect x="97.2164%" y="1509" width="0.0198%" height="15" fill="rgb(230,11,38)"/><text x="97.4664%" y="1519.50"></text></g><g><title>tokio::runtime::task::joinable (133 samples, 0.05%)</title><rect x="97.2042%" y="1541" width="0.0461%" height="15" fill="rgb(217,129,0)"/><text x="97.4542%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (133 samples, 0.05%)</title><rect x="97.2042%" y="1525" width="0.0461%" height="15" fill="rgb(222,198,4)"/><text x="97.4542%" y="1535.50"></text></g><g><title>tokio::runtime::task::state::State::new (30 samples, 0.01%)</title><rect x="97.2400%" y="1509" width="0.0104%" height="15" fill="rgb(246,170,27)"/><text x="97.4900%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (75 samples, 0.03%)</title><rect x="97.2504%" y="1509" width="0.0260%" height="15" fill="rgb(229,17,28)"/><text x="97.5004%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (75 samples, 0.03%)</title><rect x="97.2504%" y="1493" width="0.0260%" height="15" fill="rgb(233,198,48)"/><text x="97.5004%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::worker::CURRENT::FOO::__getit (44 samples, 0.02%)</title><rect x="97.2611%" y="1477" width="0.0153%" height="15" fill="rgb(238,103,23)"/><text x="97.5111%" y="1487.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (43 samples, 0.01%)</title><rect x="97.2615%" y="1461" width="0.0149%" height="15" fill="rgb(206,91,41)"/><text x="97.5115%" y="1471.50"></text></g><g><title>__x64_sys_futex (92 samples, 0.03%)</title><rect x="97.3198%" y="1349" width="0.0319%" height="15" fill="rgb(227,34,25)"/><text x="97.5698%" y="1359.50"></text></g><g><title>do_futex (90 samples, 0.03%)</title><rect x="97.3205%" y="1333" width="0.0312%" height="15" fill="rgb(210,110,44)"/><text x="97.5705%" y="1343.50"></text></g><g><title>futex_wake (88 samples, 0.03%)</title><rect x="97.3212%" y="1317" width="0.0305%" height="15" fill="rgb(216,189,8)"/><text x="97.5712%" y="1327.50"></text></g><g><title>wake_up_q (79 samples, 0.03%)</title><rect x="97.3243%" y="1301" width="0.0274%" height="15" fill="rgb(234,9,46)"/><text x="97.5743%" y="1311.50"></text></g><g><title>try_to_wake_up (78 samples, 0.03%)</title><rect x="97.3246%" y="1285" width="0.0271%" height="15" fill="rgb(251,200,5)"/><text x="97.5746%" y="1295.50"></text></g><g><title>__GI___pthread_mutex_unlock (105 samples, 0.04%)</title><rect x="97.3156%" y="1413" width="0.0364%" height="15" fill="rgb(238,165,37)"/><text x="97.5656%" y="1423.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (105 samples, 0.04%)</title><rect x="97.3156%" y="1397" width="0.0364%" height="15" fill="rgb(232,77,38)"/><text x="97.5656%" y="1407.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (96 samples, 0.03%)</title><rect x="97.3187%" y="1381" width="0.0333%" height="15" fill="rgb(253,179,33)"/><text x="97.5687%" y="1391.50"></text></g><g><title>do_syscall_64 (93 samples, 0.03%)</title><rect x="97.3198%" y="1365" width="0.0323%" height="15" fill="rgb(240,13,35)"/><text x="97.5698%" y="1375.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (114 samples, 0.04%)</title><rect x="97.3142%" y="1445" width="0.0396%" height="15" fill="rgb(242,150,49)"/><text x="97.5642%" y="1455.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (112 samples, 0.04%)</title><rect x="97.3149%" y="1429" width="0.0389%" height="15" fill="rgb(237,176,28)"/><text x="97.5649%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place (144 samples, 0.05%)</title><rect x="97.3104%" y="1477" width="0.0500%" height="15" fill="rgb(214,176,33)"/><text x="97.5604%" y="1487.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 0.05%)</title><rect x="97.3135%" y="1461" width="0.0468%" height="15" fill="rgb(214,25,12)"/><text x="97.5635%" y="1471.50"></text></g><g><title>tokio::loom::std::atomic_usize::AtomicUsize::unsync_load (34 samples, 0.01%)</title><rect x="97.3656%" y="1477" width="0.0118%" height="15" fill="rgb(238,190,20)"/><text x="97.6156%" y="1487.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (77 samples, 0.03%)</title><rect x="97.3774%" y="1477" width="0.0267%" height="15" fill="rgb(208,11,19)"/><text x="97.6274%" y="1487.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (67 samples, 0.02%)</title><rect x="97.3808%" y="1461" width="0.0232%" height="15" fill="rgb(239,90,4)"/><text x="97.6308%" y="1471.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (40 samples, 0.01%)</title><rect x="97.3902%" y="1445" width="0.0139%" height="15" fill="rgb(248,110,3)"/><text x="97.6402%" y="1455.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (35 samples, 0.01%)</title><rect x="97.3919%" y="1429" width="0.0121%" height="15" fill="rgb(210,41,30)"/><text x="97.6419%" y="1439.50"></text></g><g><title>tokio::runtime::queue::get_next (34 samples, 0.01%)</title><rect x="97.4041%" y="1477" width="0.0118%" height="15" fill="rgb(239,36,8)"/><text x="97.6541%" y="1487.50"></text></g><g><title>tokio::runtime::queue::Inject&lt;T&gt;::push (486 samples, 0.17%)</title><rect x="97.2764%" y="1493" width="0.1686%" height="15" fill="rgb(237,201,47)"/><text x="97.5264%" y="1503.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::into_raw (70 samples, 0.02%)</title><rect x="97.4207%" y="1477" width="0.0243%" height="15" fill="rgb(224,140,29)"/><text x="97.6707%" y="1487.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::into_raw (53 samples, 0.02%)</title><rect x="97.4266%" y="1461" width="0.0184%" height="15" fill="rgb(231,209,17)"/><text x="97.6766%" y="1471.50"></text></g><g><title>enqueue_task_fair (38 samples, 0.01%)</title><rect x="97.4950%" y="1253" width="0.0132%" height="15" fill="rgb(249,196,1)"/><text x="97.7450%" y="1263.50"></text></g><g><title>enqueue_entity (30 samples, 0.01%)</title><rect x="97.4978%" y="1237" width="0.0104%" height="15" fill="rgb(223,207,51)"/><text x="97.7478%" y="1247.50"></text></g><g><title>activate_task (63 samples, 0.02%)</title><rect x="97.4936%" y="1269" width="0.0219%" height="15" fill="rgb(210,14,40)"/><text x="97.7436%" y="1279.50"></text></g><g><title>ttwu_do_activate (74 samples, 0.03%)</title><rect x="97.4936%" y="1285" width="0.0257%" height="15" fill="rgb(250,20,52)"/><text x="97.7436%" y="1295.50"></text></g><g><title>do_futex (156 samples, 0.05%)</title><rect x="97.4679%" y="1349" width="0.0541%" height="15" fill="rgb(241,46,11)"/><text x="97.7179%" y="1359.50"></text></g><g><title>futex_wake (151 samples, 0.05%)</title><rect x="97.4697%" y="1333" width="0.0524%" height="15" fill="rgb(219,105,5)"/><text x="97.7197%" y="1343.50"></text></g><g><title>wake_up_q (138 samples, 0.05%)</title><rect x="97.4742%" y="1317" width="0.0479%" height="15" fill="rgb(252,77,35)"/><text x="97.7242%" y="1327.50"></text></g><g><title>try_to_wake_up (131 samples, 0.05%)</title><rect x="97.4766%" y="1301" width="0.0455%" height="15" fill="rgb(243,119,2)"/><text x="97.7266%" y="1311.50"></text></g><g><title>__x64_sys_futex (159 samples, 0.06%)</title><rect x="97.4676%" y="1365" width="0.0552%" height="15" fill="rgb(206,82,28)"/><text x="97.7176%" y="1375.50"></text></g><g><title>do_syscall_64 (163 samples, 0.06%)</title><rect x="97.4665%" y="1381" width="0.0566%" height="15" fill="rgb(227,120,12)"/><text x="97.7165%" y="1391.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (168 samples, 0.06%)</title><rect x="97.4651%" y="1397" width="0.0583%" height="15" fill="rgb(229,134,41)"/><text x="97.7151%" y="1407.50"></text></g><g><title>__pthread_cond_signal (190 samples, 0.07%)</title><rect x="97.4596%" y="1429" width="0.0659%" height="15" fill="rgb(239,96,32)"/><text x="97.7096%" y="1439.50"></text></g><g><title>futex_wake (176 samples, 0.06%)</title><rect x="97.4644%" y="1413" width="0.0611%" height="15" fill="rgb(225,46,27)"/><text x="97.7144%" y="1423.50"></text></g><g><title>tokio::runtime::park::Inner::unpark_condvar (206 samples, 0.07%)</title><rect x="97.4589%" y="1445" width="0.0715%" height="15" fill="rgb(215,168,2)"/><text x="97.7089%" y="1455.50"></text></g><g><title>&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (251 samples, 0.09%)</title><rect x="97.4461%" y="1477" width="0.0871%" height="15" fill="rgb(207,170,52)"/><text x="97.6961%" y="1487.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (234 samples, 0.08%)</title><rect x="97.4520%" y="1461" width="0.0812%" height="15" fill="rgb(237,198,36)"/><text x="97.7020%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.01%)</title><rect x="97.5564%" y="1461" width="0.0139%" height="15" fill="rgb(213,27,14)"/><text x="97.8064%" y="1471.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="97.5602%" y="1445" width="0.0101%" height="15" fill="rgb(218,77,5)"/><text x="97.8102%" y="1455.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (29 samples, 0.01%)</title><rect x="97.5776%" y="1365" width="0.0101%" height="15" fill="rgb(230,219,39)"/><text x="97.8276%" y="1375.50"></text></g><g><title>do_syscall_64 (29 samples, 0.01%)</title><rect x="97.5776%" y="1349" width="0.0101%" height="15" fill="rgb(245,177,7)"/><text x="97.8276%" y="1359.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.02%)</title><rect x="97.5703%" y="1461" width="0.0177%" height="15" fill="rgb(246,44,46)"/><text x="97.8203%" y="1471.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (44 samples, 0.02%)</title><rect x="97.5727%" y="1445" width="0.0153%" height="15" fill="rgb(207,173,15)"/><text x="97.8227%" y="1455.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.01%)</title><rect x="97.5758%" y="1429" width="0.0121%" height="15" fill="rgb(245,170,50)"/><text x="97.8258%" y="1439.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (35 samples, 0.01%)</title><rect x="97.5758%" y="1413" width="0.0121%" height="15" fill="rgb(233,156,21)"/><text x="97.8258%" y="1423.50"></text></g><g><title>__GI___pthread_mutex_lock (34 samples, 0.01%)</title><rect x="97.5762%" y="1397" width="0.0118%" height="15" fill="rgb(253,146,27)"/><text x="97.8262%" y="1407.50"></text></g><g><title>__lll_lock_wait (30 samples, 0.01%)</title><rect x="97.5776%" y="1381" width="0.0104%" height="15" fill="rgb(247,66,29)"/><text x="97.8276%" y="1391.50"></text></g><g><title>tokio::task::spawn::spawn (1,154 samples, 0.40%)</title><rect x="97.2042%" y="1589" width="0.4004%" height="15" fill="rgb(218,207,26)"/><text x="97.4542%" y="1599.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (1,154 samples, 0.40%)</title><rect x="97.2042%" y="1573" width="0.4004%" height="15" fill="rgb(234,93,26)"/><text x="97.4542%" y="1583.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (1,154 samples, 0.40%)</title><rect x="97.2042%" y="1557" width="0.4004%" height="15" fill="rgb(214,75,48)"/><text x="97.4542%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (1,021 samples, 0.35%)</title><rect x="97.2504%" y="1541" width="0.3542%" height="15" fill="rgb(229,119,22)"/><text x="97.5004%" y="1551.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1,021 samples, 0.35%)</title><rect x="97.2504%" y="1525" width="0.3542%" height="15" fill="rgb(226,153,19)"/><text x="97.5004%" y="1535.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (946 samples, 0.33%)</title><rect x="97.2764%" y="1509" width="0.3282%" height="15" fill="rgb(220,204,36)"/><text x="97.5264%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (460 samples, 0.16%)</title><rect x="97.4450%" y="1493" width="0.1596%" height="15" fill="rgb(253,181,43)"/><text x="97.6950%" y="1503.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (206 samples, 0.07%)</title><rect x="97.5331%" y="1477" width="0.0715%" height="15" fill="rgb(211,41,51)"/><text x="97.7831%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::notify_should_wakeup (48 samples, 0.02%)</title><rect x="97.5880%" y="1461" width="0.0167%" height="15" fill="rgb(207,215,0)"/><text x="97.8380%" y="1471.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1765" width="0.5718%" height="15" fill="rgb(212,153,10)"/><text x="97.2835%" y="1775.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1749" width="0.5718%" height="15" fill="rgb(251,171,36)"/><text x="97.2835%" y="1759.50"></text></g><g><title>tokio::coop::budget (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1733" width="0.5718%" height="15" fill="rgb(225,219,41)"/><text x="97.2835%" y="1743.50"></text></g><g><title>tokio::coop::with_budget (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1717" width="0.5718%" height="15" fill="rgb(208,200,1)"/><text x="97.2835%" y="1727.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1701" width="0.5718%" height="15" fill="rgb(206,75,47)"/><text x="97.2835%" y="1711.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1685" width="0.5718%" height="15" fill="rgb(248,3,16)"/><text x="97.2835%" y="1695.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1669" width="0.5718%" height="15" fill="rgb(242,157,36)"/><text x="97.2835%" y="1679.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1653" width="0.5718%" height="15" fill="rgb(215,175,11)"/><text x="97.2835%" y="1663.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1637" width="0.5718%" height="15" fill="rgb(252,222,22)"/><text x="97.2835%" y="1647.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (1,648 samples, 0.57%)</title><rect x="97.0335%" y="1621" width="0.5718%" height="15" fill="rgb(250,121,35)"/><text x="97.2835%" y="1631.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (1,156 samples, 0.40%)</title><rect x="97.2042%" y="1605" width="0.4011%" height="15" fill="rgb(233,120,49)"/><text x="97.4542%" y="1615.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (73 samples, 0.03%)</title><rect x="97.6053%" y="1557" width="0.0253%" height="15" fill="rgb(205,201,14)"/><text x="97.8553%" y="1567.50"></text></g><g><title>&lt;tokio::io::driver::interest::Interest as core::ops::bit::BitOr&gt;::bitor (31 samples, 0.01%)</title><rect x="97.6598%" y="1525" width="0.0108%" height="15" fill="rgb(219,58,45)"/><text x="97.9098%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (228 samples, 0.08%)</title><rect x="97.6053%" y="1589" width="0.0791%" height="15" fill="rgb(251,65,12)"/><text x="97.8553%" y="1599.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (228 samples, 0.08%)</title><rect x="97.6053%" y="1573" width="0.0791%" height="15" fill="rgb(224,47,31)"/><text x="97.8553%" y="1583.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (128 samples, 0.04%)</title><rect x="97.6400%" y="1557" width="0.0444%" height="15" fill="rgb(233,74,26)"/><text x="97.8900%" y="1567.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (86 samples, 0.03%)</title><rect x="97.6546%" y="1541" width="0.0298%" height="15" fill="rgb(231,211,31)"/><text x="97.9046%" y="1551.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (40 samples, 0.01%)</title><rect x="97.6705%" y="1525" width="0.0139%" height="15" fill="rgb(239,167,5)"/><text x="97.9205%" y="1535.50"></text></g><g><title>tokio::io::driver::Handle::current (32 samples, 0.01%)</title><rect x="97.6733%" y="1509" width="0.0111%" height="15" fill="rgb(241,85,0)"/><text x="97.9233%" y="1519.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (59 samples, 0.02%)</title><rect x="97.6875%" y="1429" width="0.0205%" height="15" fill="rgb(229,130,21)"/><text x="97.9375%" y="1439.50"></text></g><g><title>core::mem::replace (51 samples, 0.02%)</title><rect x="97.6903%" y="1413" width="0.0177%" height="15" fill="rgb(254,84,49)"/><text x="97.9403%" y="1423.50"></text></g><g><title>core::mem::swap (45 samples, 0.02%)</title><rect x="97.6924%" y="1397" width="0.0156%" height="15" fill="rgb(235,85,21)"/><text x="97.9424%" y="1407.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (40 samples, 0.01%)</title><rect x="97.6941%" y="1381" width="0.0139%" height="15" fill="rgb(246,128,52)"/><text x="97.9441%" y="1391.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (63 samples, 0.02%)</title><rect x="97.6865%" y="1493" width="0.0219%" height="15" fill="rgb(243,114,49)"/><text x="97.9365%" y="1503.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (63 samples, 0.02%)</title><rect x="97.6865%" y="1477" width="0.0219%" height="15" fill="rgb(240,224,22)"/><text x="97.9365%" y="1487.50"></text></g><g><title>core::cell::BorrowRef::new (63 samples, 0.02%)</title><rect x="97.6865%" y="1461" width="0.0219%" height="15" fill="rgb(247,201,52)"/><text x="97.9365%" y="1471.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (63 samples, 0.02%)</title><rect x="97.6865%" y="1445" width="0.0219%" height="15" fill="rgb(231,70,45)"/><text x="97.9365%" y="1455.50"></text></g><g><title>tokio::runtime::context::spawn_handle (84 samples, 0.03%)</title><rect x="97.6844%" y="1557" width="0.0291%" height="15" fill="rgb(217,215,20)"/><text x="97.9344%" y="1567.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (84 samples, 0.03%)</title><rect x="97.6844%" y="1541" width="0.0291%" height="15" fill="rgb(226,170,30)"/><text x="97.9344%" y="1551.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (84 samples, 0.03%)</title><rect x="97.6844%" y="1525" width="0.0291%" height="15" fill="rgb(220,190,43)"/><text x="97.9344%" y="1535.50"></text></g><g><title>tokio::runtime::context::spawn_handle::{{closure}} (84 samples, 0.03%)</title><rect x="97.6844%" y="1509" width="0.0291%" height="15" fill="rgb(218,20,18)"/><text x="97.9344%" y="1519.50"></text></g><g><title>tokio::runtime::task::joinable (49 samples, 0.02%)</title><rect x="97.7174%" y="1525" width="0.0170%" height="15" fill="rgb(245,37,26)"/><text x="97.9674%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (61 samples, 0.02%)</title><rect x="97.7580%" y="1493" width="0.0212%" height="15" fill="rgb(241,127,29)"/><text x="98.0080%" y="1503.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (45 samples, 0.02%)</title><rect x="97.7635%" y="1477" width="0.0156%" height="15" fill="rgb(241,33,26)"/><text x="98.0135%" y="1487.50"></text></g><g><title>tokio::task::spawn::spawn (313 samples, 0.11%)</title><rect x="97.6844%" y="1573" width="0.1086%" height="15" fill="rgb(220,106,21)"/><text x="97.9344%" y="1583.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (229 samples, 0.08%)</title><rect x="97.7136%" y="1557" width="0.0795%" height="15" fill="rgb(225,125,35)"/><text x="97.9636%" y="1567.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (229 samples, 0.08%)</title><rect x="97.7136%" y="1541" width="0.0795%" height="15" fill="rgb(248,80,22)"/><text x="97.9636%" y="1551.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (169 samples, 0.06%)</title><rect x="97.7344%" y="1525" width="0.0586%" height="15" fill="rgb(231,117,39)"/><text x="97.9844%" y="1535.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (160 samples, 0.06%)</title><rect x="97.7375%" y="1509" width="0.0555%" height="15" fill="rgb(239,183,16)"/><text x="97.9875%" y="1519.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::{{closure}} (40 samples, 0.01%)</title><rect x="97.7791%" y="1493" width="0.0139%" height="15" fill="rgb(221,61,19)"/><text x="98.0291%" y="1503.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.02%)</title><rect x="97.7947%" y="1477" width="0.0160%" height="15" fill="rgb(239,196,44)"/><text x="98.0447%" y="1487.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (37 samples, 0.01%)</title><rect x="97.7979%" y="1461" width="0.0128%" height="15" fill="rgb(206,113,19)"/><text x="98.0479%" y="1471.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (37 samples, 0.01%)</title><rect x="97.7979%" y="1445" width="0.0128%" height="15" fill="rgb(245,114,12)"/><text x="98.0479%" y="1455.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.01%)</title><rect x="97.8232%" y="1413" width="0.0118%" height="15" fill="rgb(247,89,39)"/><text x="98.0732%" y="1423.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (46 samples, 0.02%)</title><rect x="97.8194%" y="1445" width="0.0160%" height="15" fill="rgb(213,85,14)"/><text x="98.0694%" y="1455.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (46 samples, 0.02%)</title><rect x="97.8194%" y="1429" width="0.0160%" height="15" fill="rgb(249,206,33)"/><text x="98.0694%" y="1439.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (176 samples, 0.06%)</title><rect x="97.7947%" y="1493" width="0.0611%" height="15" fill="rgb(235,167,47)"/><text x="98.0447%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (130 samples, 0.05%)</title><rect x="97.8107%" y="1477" width="0.0451%" height="15" fill="rgb(217,177,16)"/><text x="98.0607%" y="1487.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (130 samples, 0.05%)</title><rect x="97.8107%" y="1461" width="0.0451%" height="15" fill="rgb(250,228,29)"/><text x="98.0607%" y="1471.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (59 samples, 0.02%)</title><rect x="97.8353%" y="1445" width="0.0205%" height="15" fill="rgb(216,195,42)"/><text x="98.0853%" y="1455.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::set (194 samples, 0.07%)</title><rect x="97.7930%" y="1573" width="0.0673%" height="15" fill="rgb(232,192,32)"/><text x="98.0430%" y="1583.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (194 samples, 0.07%)</title><rect x="97.7930%" y="1557" width="0.0673%" height="15" fill="rgb(211,8,47)"/><text x="98.0430%" y="1567.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (194 samples, 0.07%)</title><rect x="97.7930%" y="1541" width="0.0673%" height="15" fill="rgb(251,201,9)"/><text x="98.0430%" y="1551.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (194 samples, 0.07%)</title><rect x="97.7930%" y="1525" width="0.0673%" height="15" fill="rgb(206,185,47)"/><text x="98.0430%" y="1535.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (194 samples, 0.07%)</title><rect x="97.7930%" y="1509" width="0.0673%" height="15" fill="rgb(245,54,32)"/><text x="98.0430%" y="1519.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (43 samples, 0.01%)</title><rect x="97.8603%" y="1525" width="0.0149%" height="15" fill="rgb(208,1,8)"/><text x="98.1103%" y="1535.50"></text></g><g><title>alloc::alloc::exchange_malloc (43 samples, 0.01%)</title><rect x="97.8603%" y="1509" width="0.0149%" height="15" fill="rgb(228,57,24)"/><text x="98.1103%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (43 samples, 0.01%)</title><rect x="97.8603%" y="1493" width="0.0149%" height="15" fill="rgb(251,24,8)"/><text x="98.1103%" y="1503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.01%)</title><rect x="97.8603%" y="1477" width="0.0149%" height="15" fill="rgb(236,196,50)"/><text x="98.1103%" y="1487.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (806 samples, 0.28%)</title><rect x="97.6053%" y="1765" width="0.2796%" height="15" fill="rgb(246,222,29)"/><text x="97.8553%" y="1775.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (806 samples, 0.28%)</title><rect x="97.6053%" y="1749" width="0.2796%" height="15" fill="rgb(211,34,40)"/><text x="97.8553%" y="1759.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (806 samples, 0.28%)</title><rect x="97.6053%" y="1733" width="0.2796%" height="15" fill="rgb(210,66,51)"/><text x="97.8553%" y="1743.50"></text></g><g><title>tokio::coop::budget (806 samples, 0.28%)</title><rect x="97.6053%" y="1717" width="0.2796%" height="15" fill="rgb(250,56,43)"/><text x="97.8553%" y="1727.50"></text></g><g><title>tokio::coop::with_budget (806 samples, 0.28%)</title><rect x="97.6053%" y="1701" width="0.2796%" height="15" fill="rgb(240,111,50)"/><text x="97.8553%" y="1711.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (806 samples, 0.28%)</title><rect x="97.6053%" y="1685" width="0.2796%" height="15" fill="rgb(209,117,13)"/><text x="97.8553%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (806 samples, 0.28%)</title><rect x="97.6053%" y="1669" width="0.2796%" height="15" fill="rgb(232,164,45)"/><text x="97.8553%" y="1679.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (806 samples, 0.28%)</title><rect x="97.6053%" y="1653" width="0.2796%" height="15" fill="rgb(205,69,32)"/><text x="97.8553%" y="1663.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (806 samples, 0.28%)</title><rect x="97.6053%" y="1637" width="0.2796%" height="15" fill="rgb(240,147,45)"/><text x="97.8553%" y="1647.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (806 samples, 0.28%)</title><rect x="97.6053%" y="1621" width="0.2796%" height="15" fill="rgb(221,94,48)"/><text x="97.8553%" y="1631.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (806 samples, 0.28%)</title><rect x="97.6053%" y="1605" width="0.2796%" height="15" fill="rgb(249,209,17)"/><text x="97.8553%" y="1615.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (578 samples, 0.20%)</title><rect x="97.6844%" y="1589" width="0.2005%" height="15" fill="rgb(228,57,28)"/><text x="97.9344%" y="1599.50"></text></g><g><title>tunneler::streams::spsc::stream (71 samples, 0.02%)</title><rect x="97.8603%" y="1573" width="0.0246%" height="15" fill="rgb(250,133,26)"/><text x="98.1103%" y="1583.50"></text></g><g><title>tokio::sync::mpsc::unbounded::unbounded_channel (71 samples, 0.02%)</title><rect x="97.8603%" y="1557" width="0.0246%" height="15" fill="rgb(254,15,16)"/><text x="98.1103%" y="1567.50"></text></g><g><title>tokio::sync::mpsc::chan::channel (71 samples, 0.02%)</title><rect x="97.8603%" y="1541" width="0.0246%" height="15" fill="rgb(209,147,42)"/><text x="98.1103%" y="1551.50"></text></g><g><title>__memmove_avx_unaligned_erms (36 samples, 0.01%)</title><rect x="97.8877%" y="1701" width="0.0125%" height="15" fill="rgb(208,5,29)"/><text x="98.1377%" y="1711.50"></text></g><g><title>tokio::sync::mpsc::chan::channel (80 samples, 0.03%)</title><rect x="97.8850%" y="1765" width="0.0278%" height="15" fill="rgb(250,73,31)"/><text x="98.1350%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::list::channel (80 samples, 0.03%)</title><rect x="97.8850%" y="1749" width="0.0278%" height="15" fill="rgb(238,45,10)"/><text x="98.1350%" y="1759.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::new (80 samples, 0.03%)</title><rect x="97.8850%" y="1733" width="0.0278%" height="15" fill="rgb(214,104,5)"/><text x="98.1350%" y="1743.50"></text></g><g><title>tokio::sync::mpsc::block::Values&lt;T&gt;::uninitialized (80 samples, 0.03%)</title><rect x="97.8850%" y="1717" width="0.0278%" height="15" fill="rgb(242,217,19)"/><text x="98.1350%" y="1727.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (36 samples, 0.01%)</title><rect x="97.9002%" y="1701" width="0.0125%" height="15" fill="rgb(246,113,27)"/><text x="98.1502%" y="1711.50"></text></g><g><title>tokio::park::thread::CURRENT_PARKER::__getit (39 samples, 0.01%)</title><rect x="97.9429%" y="1637" width="0.0135%" height="15" fill="rgb(221,34,27)"/><text x="98.1929%" y="1647.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (31 samples, 0.01%)</title><rect x="97.9457%" y="1621" width="0.0108%" height="15" fill="rgb(246,109,6)"/><text x="98.1957%" y="1631.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (37 samples, 0.01%)</title><rect x="97.9856%" y="1493" width="0.0128%" height="15" fill="rgb(217,12,25)"/><text x="98.2356%" y="1503.50"></text></g><g><title>do_syscall_64 (33 samples, 0.01%)</title><rect x="97.9870%" y="1477" width="0.0114%" height="15" fill="rgb(250,195,5)"/><text x="98.2370%" y="1487.50"></text></g><g><title>__GI___pthread_mutex_unlock (44 samples, 0.02%)</title><rect x="97.9838%" y="1525" width="0.0153%" height="15" fill="rgb(244,140,45)"/><text x="98.2338%" y="1535.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (44 samples, 0.02%)</title><rect x="97.9838%" y="1509" width="0.0153%" height="15" fill="rgb(230,64,14)"/><text x="98.2338%" y="1519.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.02%)</title><rect x="97.9811%" y="1557" width="0.0229%" height="15" fill="rgb(206,27,27)"/><text x="98.2311%" y="1567.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (63 samples, 0.02%)</title><rect x="97.9821%" y="1541" width="0.0219%" height="15" fill="rgb(230,14,50)"/><text x="98.2321%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place (102 samples, 0.04%)</title><rect x="97.9762%" y="1589" width="0.0354%" height="15" fill="rgb(237,172,14)"/><text x="98.2262%" y="1599.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.03%)</title><rect x="97.9793%" y="1573" width="0.0323%" height="15" fill="rgb(209,25,21)"/><text x="98.2293%" y="1583.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (31 samples, 0.01%)</title><rect x="98.0147%" y="1589" width="0.0108%" height="15" fill="rgb(248,148,22)"/><text x="98.2647%" y="1599.50"></text></g><g><title>native_write_msr (41 samples, 0.01%)</title><rect x="98.1365%" y="1269" width="0.0142%" height="15" fill="rgb(234,100,22)"/><text x="98.3865%" y="1279.50"></text></g><g><title>amd_pmu_disable_all (74 samples, 0.03%)</title><rect x="98.1323%" y="1285" width="0.0257%" height="15" fill="rgb(210,20,30)"/><text x="98.3823%" y="1295.50"></text></g><g><title>perf_pmu_disable.part.0 (80 samples, 0.03%)</title><rect x="98.1306%" y="1317" width="0.0278%" height="15" fill="rgb(232,58,0)"/><text x="98.3806%" y="1327.50"></text></g><g><title>x86_pmu_disable (75 samples, 0.03%)</title><rect x="98.1323%" y="1301" width="0.0260%" height="15" fill="rgb(221,68,13)"/><text x="98.3823%" y="1311.50"></text></g><g><title>ctx_sched_out (97 samples, 0.03%)</title><rect x="98.1271%" y="1333" width="0.0337%" height="15" fill="rgb(231,194,11)"/><text x="98.3771%" y="1343.50"></text></g><g><title>__perf_event_task_sched_out (109 samples, 0.04%)</title><rect x="98.1237%" y="1365" width="0.0378%" height="15" fill="rgb(235,51,41)"/><text x="98.3737%" y="1375.50"></text></g><g><title>task_ctx_sched_out (99 samples, 0.03%)</title><rect x="98.1271%" y="1349" width="0.0343%" height="15" fill="rgb(240,50,32)"/><text x="98.3771%" y="1359.50"></text></g><g><title>update_curr (34 samples, 0.01%)</title><rect x="98.1813%" y="1317" width="0.0118%" height="15" fill="rgb(240,185,36)"/><text x="98.4313%" y="1327.50"></text></g><g><title>dequeue_entity (94 samples, 0.03%)</title><rect x="98.1715%" y="1333" width="0.0326%" height="15" fill="rgb(211,168,15)"/><text x="98.4215%" y="1343.50"></text></g><g><title>dequeue_task_fair (116 samples, 0.04%)</title><rect x="98.1677%" y="1349" width="0.0402%" height="15" fill="rgb(221,70,0)"/><text x="98.4177%" y="1359.50"></text></g><g><title>psi_task_change (69 samples, 0.02%)</title><rect x="98.2080%" y="1349" width="0.0239%" height="15" fill="rgb(205,21,33)"/><text x="98.4580%" y="1359.50"></text></g><g><title>deactivate_task (197 samples, 0.07%)</title><rect x="98.1639%" y="1365" width="0.0684%" height="15" fill="rgb(225,106,10)"/><text x="98.4139%" y="1375.50"></text></g><g><title>finish_task_switch (104 samples, 0.04%)</title><rect x="98.2326%" y="1365" width="0.0361%" height="15" fill="rgb(236,200,50)"/><text x="98.4826%" y="1375.50"></text></g><g><title>__sched_text_start (512 samples, 0.18%)</title><rect x="98.1049%" y="1381" width="0.1776%" height="15" fill="rgb(249,93,23)"/><text x="98.3549%" y="1391.50"></text></g><g><title>futex_wait_queue_me (569 samples, 0.20%)</title><rect x="98.0883%" y="1413" width="0.1974%" height="15" fill="rgb(244,115,35)"/><text x="98.3383%" y="1423.50"></text></g><g><title>schedule (540 samples, 0.19%)</title><rect x="98.0983%" y="1397" width="0.1874%" height="15" fill="rgb(231,129,47)"/><text x="98.3483%" y="1407.50"></text></g><g><title>futex_wait (637 samples, 0.22%)</title><rect x="98.0758%" y="1429" width="0.2210%" height="15" fill="rgb(225,160,50)"/><text x="98.3258%" y="1439.50"></text></g><g><title>do_futex (651 samples, 0.23%)</title><rect x="98.0716%" y="1445" width="0.2259%" height="15" fill="rgb(218,135,23)"/><text x="98.3216%" y="1455.50"></text></g><g><title>__x64_sys_futex (657 samples, 0.23%)</title><rect x="98.0699%" y="1461" width="0.2280%" height="15" fill="rgb(227,119,14)"/><text x="98.3199%" y="1471.50"></text></g><g><title>do_syscall_64 (698 samples, 0.24%)</title><rect x="98.0664%" y="1477" width="0.2422%" height="15" fill="rgb(242,138,13)"/><text x="98.3164%" y="1487.50"></text></g><g><title>switch_fpu_return (29 samples, 0.01%)</title><rect x="98.2985%" y="1461" width="0.0101%" height="15" fill="rgb(215,11,16)"/><text x="98.5485%" y="1471.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (707 samples, 0.25%)</title><rect x="98.0640%" y="1493" width="0.2453%" height="15" fill="rgb(234,170,50)"/><text x="98.3140%" y="1503.50"></text></g><g><title>__pthread_cond_wait_common (782 samples, 0.27%)</title><rect x="98.0407%" y="1525" width="0.2713%" height="15" fill="rgb(233,34,20)"/><text x="98.2907%" y="1535.50"></text></g><g><title>futex_wait_cancelable (750 samples, 0.26%)</title><rect x="98.0518%" y="1509" width="0.2602%" height="15" fill="rgb(237,100,45)"/><text x="98.3018%" y="1519.50"></text></g><g><title>__pthread_cond_wait (792 samples, 0.27%)</title><rect x="98.0376%" y="1541" width="0.2748%" height="15" fill="rgb(231,184,36)"/><text x="98.2876%" y="1551.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (804 samples, 0.28%)</title><rect x="98.0352%" y="1557" width="0.2790%" height="15" fill="rgb(252,93,2)"/><text x="98.2852%" y="1567.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (806 samples, 0.28%)</title><rect x="98.0348%" y="1573" width="0.2796%" height="15" fill="rgb(248,176,47)"/><text x="98.2848%" y="1583.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (35 samples, 0.01%)</title><rect x="98.3155%" y="1557" width="0.0121%" height="15" fill="rgb(249,125,23)"/><text x="98.5655%" y="1567.50"></text></g><g><title>std::sync::condvar::Condvar::wait (872 samples, 0.30%)</title><rect x="98.0255%" y="1589" width="0.3025%" height="15" fill="rgb(239,67,42)"/><text x="98.2755%" y="1599.50"></text></g><g><title>std::sys_common::poison::Flag::get (39 samples, 0.01%)</title><rect x="98.3145%" y="1573" width="0.0135%" height="15" fill="rgb(244,162,4)"/><text x="98.5645%" y="1583.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park::{{closure}} (1,109 samples, 0.38%)</title><rect x="97.9571%" y="1621" width="0.3848%" height="15" fill="rgb(214,150,38)"/><text x="98.2071%" y="1631.50"></text></g><g><title>tokio::park::thread::Inner::park (1,092 samples, 0.38%)</title><rect x="97.9630%" y="1605" width="0.3789%" height="15" fill="rgb(228,211,28)"/><text x="98.2130%" y="1615.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (40 samples, 0.01%)</title><rect x="98.3280%" y="1589" width="0.0139%" height="15" fill="rgb(212,98,48)"/><text x="98.5780%" y="1599.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (35 samples, 0.01%)</title><rect x="98.3298%" y="1573" width="0.0121%" height="15" fill="rgb(213,45,13)"/><text x="98.5798%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,186 samples, 0.41%)</title><rect x="97.9308%" y="1653" width="0.4115%" height="15" fill="rgb(218,35,29)"/><text x="98.1808%" y="1663.50"></text></g><g><title>tokio::park::thread::CachedParkThread::with_current::{{closure}} (1,112 samples, 0.39%)</title><rect x="97.9564%" y="1637" width="0.3858%" height="15" fill="rgb(244,13,3)"/><text x="98.2064%" y="1647.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (1,216 samples, 0.42%)</title><rect x="97.9207%" y="1685" width="0.4219%" height="15" fill="rgb(235,170,19)"/><text x="98.1707%" y="1695.50"></text></g><g><title>tokio::park::thread::CachedParkThread::with_current (1,205 samples, 0.42%)</title><rect x="97.9245%" y="1669" width="0.4181%" height="15" fill="rgb(233,193,43)"/><text x="98.1745%" y="1679.50"></text></g><g><title>tokio::coop::CURRENT::__getit (32 samples, 0.01%)</title><rect x="98.3707%" y="1621" width="0.0111%" height="15" fill="rgb(228,223,20)"/><text x="98.6207%" y="1631.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (51 samples, 0.02%)</title><rect x="98.3950%" y="1589" width="0.0177%" height="15" fill="rgb(208,85,54)"/><text x="98.6450%" y="1599.50"></text></g><g><title>core::mem::replace (44 samples, 0.02%)</title><rect x="98.3974%" y="1573" width="0.0153%" height="15" fill="rgb(254,14,45)"/><text x="98.6474%" y="1583.50"></text></g><g><title>core::mem::swap (40 samples, 0.01%)</title><rect x="98.3988%" y="1557" width="0.0139%" height="15" fill="rgb(247,99,29)"/><text x="98.6488%" y="1567.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (37 samples, 0.01%)</title><rect x="98.3998%" y="1541" width="0.0128%" height="15" fill="rgb(225,180,54)"/><text x="98.6498%" y="1551.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (60 samples, 0.02%)</title><rect x="98.3929%" y="1605" width="0.0208%" height="15" fill="rgb(239,88,43)"/><text x="98.6429%" y="1615.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (40 samples, 0.01%)</title><rect x="98.4189%" y="1557" width="0.0139%" height="15" fill="rgb(209,47,11)"/><text x="98.6689%" y="1567.50"></text></g><g><title>core::mem::replace (37 samples, 0.01%)</title><rect x="98.4200%" y="1541" width="0.0128%" height="15" fill="rgb(219,179,23)"/><text x="98.6700%" y="1551.50"></text></g><g><title>core::mem::swap (32 samples, 0.01%)</title><rect x="98.4217%" y="1525" width="0.0111%" height="15" fill="rgb(213,183,19)"/><text x="98.6717%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place (57 samples, 0.02%)</title><rect x="98.4137%" y="1605" width="0.0198%" height="15" fill="rgb(210,11,9)"/><text x="98.6637%" y="1615.50"></text></g><g><title>&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (56 samples, 0.02%)</title><rect x="98.4141%" y="1589" width="0.0194%" height="15" fill="rgb(239,194,16)"/><text x="98.6641%" y="1599.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (48 samples, 0.02%)</title><rect x="98.4168%" y="1573" width="0.0167%" height="15" fill="rgb(246,23,50)"/><text x="98.6668%" y="1583.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (36 samples, 0.01%)</title><rect x="98.4869%" y="1557" width="0.0125%" height="15" fill="rgb(245,10,41)"/><text x="98.7369%" y="1567.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (33 samples, 0.01%)</title><rect x="98.5143%" y="1541" width="0.0114%" height="15" fill="rgb(228,43,24)"/><text x="98.7643%" y="1551.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (91 samples, 0.03%)</title><rect x="98.4994%" y="1557" width="0.0316%" height="15" fill="rgb(220,151,0)"/><text x="98.7494%" y="1567.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.01%)</title><rect x="98.5653%" y="1525" width="0.0125%" height="15" fill="rgb(232,219,10)"/><text x="98.8153%" y="1535.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.01%)</title><rect x="98.5834%" y="1509" width="0.0135%" height="15" fill="rgb(227,217,48)"/><text x="98.8334%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place (177 samples, 0.06%)</title><rect x="98.5508%" y="1557" width="0.0614%" height="15" fill="rgb(210,66,35)"/><text x="98.8008%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place (155 samples, 0.05%)</title><rect x="98.5584%" y="1541" width="0.0538%" height="15" fill="rgb(254,6,7)"/><text x="98.8084%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place (99 samples, 0.03%)</title><rect x="98.5778%" y="1525" width="0.0343%" height="15" fill="rgb(235,222,42)"/><text x="98.8278%" y="1535.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (78 samples, 0.03%)</title><rect x="98.6167%" y="1509" width="0.0271%" height="15" fill="rgb(245,126,5)"/><text x="98.8667%" y="1519.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (78 samples, 0.03%)</title><rect x="98.6167%" y="1493" width="0.0271%" height="15" fill="rgb(215,73,17)"/><text x="98.8667%" y="1503.50"></text></g><g><title>rand::Rng::gen (120 samples, 0.04%)</title><rect x="98.6122%" y="1557" width="0.0416%" height="15" fill="rgb(219,198,52)"/><text x="98.8622%" y="1567.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (113 samples, 0.04%)</title><rect x="98.6146%" y="1541" width="0.0392%" height="15" fill="rgb(217,159,18)"/><text x="98.8646%" y="1551.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (107 samples, 0.04%)</title><rect x="98.6167%" y="1525" width="0.0371%" height="15" fill="rgb(212,177,18)"/><text x="98.8667%" y="1535.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_mut (29 samples, 0.01%)</title><rect x="98.6437%" y="1509" width="0.0101%" height="15" fill="rgb(241,10,11)"/><text x="98.8937%" y="1519.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept (32 samples, 0.01%)</title><rect x="98.6552%" y="1557" width="0.0111%" height="15" fill="rgb(232,114,35)"/><text x="98.9052%" y="1567.50"></text></g><g><title>&lt;tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.01%)</title><rect x="98.6843%" y="1541" width="0.0132%" height="15" fill="rgb(238,222,8)"/><text x="98.9343%" y="1551.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::clone::Clone&gt;::clone (36 samples, 0.01%)</title><rect x="98.6850%" y="1525" width="0.0125%" height="15" fill="rgb(251,153,44)"/><text x="98.9350%" y="1535.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (108 samples, 0.04%)</title><rect x="98.7183%" y="1509" width="0.0375%" height="15" fill="rgb(210,140,51)"/><text x="98.9683%" y="1519.50"></text></g><g><title>core::mem::take (91 samples, 0.03%)</title><rect x="98.7242%" y="1493" width="0.0316%" height="15" fill="rgb(222,63,0)"/><text x="98.9742%" y="1503.50"></text></g><g><title>core::mem::replace (69 samples, 0.02%)</title><rect x="98.7319%" y="1477" width="0.0239%" height="15" fill="rgb(240,18,40)"/><text x="98.9819%" y="1487.50"></text></g><g><title>core::mem::swap (51 samples, 0.02%)</title><rect x="98.7381%" y="1461" width="0.0177%" height="15" fill="rgb(237,88,16)"/><text x="98.9881%" y="1471.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (41 samples, 0.01%)</title><rect x="98.7416%" y="1445" width="0.0142%" height="15" fill="rgb(251,117,13)"/><text x="98.9916%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place (221 samples, 0.08%)</title><rect x="98.7079%" y="1541" width="0.0767%" height="15" fill="rgb(251,228,8)"/><text x="98.9579%" y="1551.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (210 samples, 0.07%)</title><rect x="98.7118%" y="1525" width="0.0729%" height="15" fill="rgb(205,107,49)"/><text x="98.9618%" y="1535.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (69 samples, 0.02%)</title><rect x="98.7607%" y="1509" width="0.0239%" height="15" fill="rgb(238,72,41)"/><text x="99.0107%" y="1519.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (30 samples, 0.01%)</title><rect x="98.8037%" y="1509" width="0.0104%" height="15" fill="rgb(248,183,52)"/><text x="99.0537%" y="1519.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::into_split (109 samples, 0.04%)</title><rect x="98.7846%" y="1541" width="0.0378%" height="15" fill="rgb(215,58,20)"/><text x="99.0346%" y="1551.50"></text></g><g><title>tokio::net::tcp::split_owned::split_owned (84 samples, 0.03%)</title><rect x="98.7933%" y="1525" width="0.0291%" height="15" fill="rgb(209,49,13)"/><text x="99.0433%" y="1535.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (85 samples, 0.03%)</title><rect x="98.8398%" y="1509" width="0.0295%" height="15" fill="rgb(208,113,17)"/><text x="99.0898%" y="1519.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::insert (103 samples, 0.04%)</title><rect x="98.8339%" y="1525" width="0.0357%" height="15" fill="rgb(208,14,22)"/><text x="99.0839%" y="1535.50"></text></g><g><title>tunneler::connections::connections::Connections&lt;T&gt;::set (137 samples, 0.05%)</title><rect x="98.8224%" y="1541" width="0.0475%" height="15" fill="rgb(222,95,2)"/><text x="99.0724%" y="1551.50"></text></g><g><title>tokio::sync::mpsc::unbounded::unbounded_channel (45 samples, 0.02%)</title><rect x="98.8818%" y="1525" width="0.0156%" height="15" fill="rgb(253,180,37)"/><text x="99.1318%" y="1535.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (680 samples, 0.24%)</title><rect x="98.6663%" y="1557" width="0.2359%" height="15" fill="rgb(250,81,33)"/><text x="98.9163%" y="1567.50"></text></g><g><title>tunneler::streams::spsc::stream (76 samples, 0.03%)</title><rect x="98.8759%" y="1541" width="0.0264%" height="15" fill="rgb(251,151,41)"/><text x="99.1259%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (64 samples, 0.02%)</title><rect x="98.9192%" y="1525" width="0.0222%" height="15" fill="rgb(210,135,17)"/><text x="99.1692%" y="1535.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (29 samples, 0.01%)</title><rect x="98.9314%" y="1509" width="0.0101%" height="15" fill="rgb(239,21,29)"/><text x="99.1814%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (90 samples, 0.03%)</title><rect x="98.9168%" y="1541" width="0.0312%" height="15" fill="rgb(231,215,16)"/><text x="99.1668%" y="1551.50"></text></g><g><title>&lt;tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 0.02%)</title><rect x="98.9716%" y="1525" width="0.0219%" height="15" fill="rgb(239,151,54)"/><text x="99.2216%" y="1535.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::clone::Clone&gt;::clone (60 samples, 0.02%)</title><rect x="98.9727%" y="1509" width="0.0208%" height="15" fill="rgb(222,122,38)"/><text x="99.2227%" y="1519.50"></text></g><g><title>&lt;tunneler::connections::connections::Connections&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 0.02%)</title><rect x="98.9935%" y="1525" width="0.0219%" height="15" fill="rgb(243,128,1)"/><text x="99.2435%" y="1535.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (49 samples, 0.02%)</title><rect x="98.9983%" y="1509" width="0.0170%" height="15" fill="rgb(225,74,21)"/><text x="99.2483%" y="1519.50"></text></g><g><title>&lt;tunneler::server::client::client::Client as core::clone::Clone&gt;::clone (177 samples, 0.06%)</title><rect x="98.9557%" y="1541" width="0.0614%" height="15" fill="rgb(216,210,10)"/><text x="99.2057%" y="1551.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.02%)</title><rect x="99.0289%" y="1509" width="0.0191%" height="15" fill="rgb(228,76,19)"/><text x="99.2789%" y="1519.50"></text></g><g><title>core::mem::drop (80 samples, 0.03%)</title><rect x="99.0205%" y="1541" width="0.0278%" height="15" fill="rgb(236,80,34)"/><text x="99.2705%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place (72 samples, 0.02%)</title><rect x="99.0233%" y="1525" width="0.0250%" height="15" fill="rgb(225,173,23)"/><text x="99.2733%" y="1535.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (33 samples, 0.01%)</title><rect x="99.0601%" y="1509" width="0.0114%" height="15" fill="rgb(253,38,1)"/><text x="99.3101%" y="1519.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (54 samples, 0.02%)</title><rect x="99.0539%" y="1525" width="0.0187%" height="15" fill="rgb(206,155,35)"/><text x="99.3039%" y="1535.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (66 samples, 0.02%)</title><rect x="99.0500%" y="1541" width="0.0229%" height="15" fill="rgb(254,27,53)"/><text x="99.3000%" y="1551.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (82 samples, 0.03%)</title><rect x="99.0972%" y="1509" width="0.0285%" height="15" fill="rgb(225,52,41)"/><text x="99.3472%" y="1519.50"></text></g><g><title>std::thread::panicking (61 samples, 0.02%)</title><rect x="99.1045%" y="1493" width="0.0212%" height="15" fill="rgb(244,53,18)"/><text x="99.3545%" y="1503.50"></text></g><g><title>std::panicking::panicking (54 samples, 0.02%)</title><rect x="99.1069%" y="1477" width="0.0187%" height="15" fill="rgb(254,206,48)"/><text x="99.3569%" y="1487.50"></text></g><g><title>std::panicking::panic_count::is_zero (46 samples, 0.02%)</title><rect x="99.1097%" y="1461" width="0.0160%" height="15" fill="rgb(236,182,23)"/><text x="99.3597%" y="1471.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (37 samples, 0.01%)</title><rect x="99.1128%" y="1445" width="0.0128%" height="15" fill="rgb(236,191,37)"/><text x="99.3628%" y="1455.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (104 samples, 0.04%)</title><rect x="99.0941%" y="1525" width="0.0361%" height="15" fill="rgb(245,53,8)"/><text x="99.3441%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,040 samples, 0.71%)</title><rect x="98.4380%" y="1589" width="0.7078%" height="15" fill="rgb(245,147,9)"/><text x="98.6880%" y="1599.50"></text></g><g><title>tunneler::server::server::Server::start::{{closure}} (2,003 samples, 0.69%)</title><rect x="98.4508%" y="1573" width="0.6950%" height="15" fill="rgb(218,24,48)"/><text x="98.7008%" y="1583.50"></text></g><g><title>tunneler::server::client::client_manager::ClientManager::get (702 samples, 0.24%)</title><rect x="98.9022%" y="1557" width="0.2436%" height="15" fill="rgb(254,23,9)"/><text x="99.1522%" y="1567.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (168 samples, 0.06%)</title><rect x="99.0875%" y="1541" width="0.0583%" height="15" fill="rgb(244,105,9)"/><text x="99.3375%" y="1551.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.02%)</title><rect x="99.1302%" y="1525" width="0.0156%" height="15" fill="rgb(212,142,22)"/><text x="99.3802%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,285 samples, 0.79%)</title><rect x="98.3568%" y="1637" width="0.7928%" height="15" fill="rgb(221,114,49)"/><text x="98.6068%" y="1647.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (2,213 samples, 0.77%)</title><rect x="98.3818%" y="1621" width="0.7678%" height="15" fill="rgb(223,210,25)"/><text x="98.6318%" y="1631.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on::{{closure}} (2,064 samples, 0.72%)</title><rect x="98.4335%" y="1605" width="0.7161%" height="15" fill="rgb(235,162,44)"/><text x="98.6835%" y="1615.50"></text></g><g><title>tokio::runtime::Runtime::block_on (3,562 samples, 1.24%)</title><rect x="97.9141%" y="1749" width="1.2359%" height="15" fill="rgb(237,65,45)"/><text x="98.1641%" y="1759.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (3,562 samples, 1.24%)</title><rect x="97.9141%" y="1733" width="1.2359%" height="15" fill="rgb(208,79,9)"/><text x="98.1641%" y="1743.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (3,562 samples, 1.24%)</title><rect x="97.9141%" y="1717" width="1.2359%" height="15" fill="rgb(215,228,8)"/><text x="98.1641%" y="1727.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (3,562 samples, 1.24%)</title><rect x="97.9141%" y="1701" width="1.2359%" height="15" fill="rgb(205,185,17)"/><text x="98.1641%" y="1711.50"></text></g><g><title>tokio::coop::budget (2,323 samples, 0.81%)</title><rect x="98.3440%" y="1685" width="0.8060%" height="15" fill="rgb(213,62,36)"/><text x="98.5940%" y="1695.50"></text></g><g><title>tokio::coop::with_budget (2,308 samples, 0.80%)</title><rect x="98.3492%" y="1669" width="0.8008%" height="15" fill="rgb(209,34,9)"/><text x="98.5992%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,307 samples, 0.80%)</title><rect x="98.3495%" y="1653" width="0.8004%" height="15" fill="rgb(246,151,27)"/><text x="98.5995%" y="1663.50"></text></g><g><title>tunneler::main (3,576 samples, 1.24%)</title><rect x="97.9127%" y="1765" width="1.2407%" height="15" fill="rgb(218,206,3)"/><text x="98.1627%" y="1775.50"></text></g><g><title>alloc::sync::data_offset (39 samples, 0.01%)</title><rect x="99.2017%" y="1493" width="0.0135%" height="15" fill="rgb(242,202,1)"/><text x="99.4517%" y="1503.50"></text></g><g><title>tokio::park::thread::Inner::from_raw (68 samples, 0.02%)</title><rect x="99.1964%" y="1525" width="0.0236%" height="15" fill="rgb(227,185,16)"/><text x="99.4464%" y="1535.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (67 samples, 0.02%)</title><rect x="99.1968%" y="1509" width="0.0232%" height="15" fill="rgb(241,1,14)"/><text x="99.4468%" y="1519.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (125 samples, 0.04%)</title><rect x="99.1815%" y="1557" width="0.0434%" height="15" fill="rgb(212,113,25)"/><text x="99.4315%" y="1567.50"></text></g><g><title>tokio::park::thread::clone (116 samples, 0.04%)</title><rect x="99.1847%" y="1541" width="0.0402%" height="15" fill="rgb(247,37,43)"/><text x="99.4347%" y="1551.50"></text></g><g><title>core::mem::drop (36 samples, 0.01%)</title><rect x="99.2384%" y="1557" width="0.0125%" height="15" fill="rgb(226,54,8)"/><text x="99.4884%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.01%)</title><rect x="99.2402%" y="1541" width="0.0108%" height="15" fill="rgb(251,205,25)"/><text x="99.4902%" y="1551.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (31 samples, 0.01%)</title><rect x="99.2627%" y="1557" width="0.0108%" height="15" fill="rgb(246,87,35)"/><text x="99.5127%" y="1567.50"></text></g><g><title>tokio::io::driver::ready::Ready::from_interest (30 samples, 0.01%)</title><rect x="99.2825%" y="1557" width="0.0104%" height="15" fill="rgb(251,145,46)"/><text x="99.5325%" y="1567.50"></text></g><g><title>tokio::io::driver::interest::Interest::is_readable (35 samples, 0.01%)</title><rect x="99.3047%" y="1525" width="0.0121%" height="15" fill="rgb(210,210,33)"/><text x="99.5547%" y="1535.50"></text></g><g><title>tokio::io::driver::ready::Ready::intersection (85 samples, 0.03%)</title><rect x="99.2971%" y="1557" width="0.0295%" height="15" fill="rgb(221,151,11)"/><text x="99.5471%" y="1567.50"></text></g><g><title>tokio::io::driver::ready::Ready::from_interest (81 samples, 0.03%)</title><rect x="99.2985%" y="1541" width="0.0281%" height="15" fill="rgb(208,160,28)"/><text x="99.5485%" y="1551.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (44 samples, 0.02%)</title><rect x="99.3404%" y="1509" width="0.0153%" height="15" fill="rgb(243,69,29)"/><text x="99.5904%" y="1519.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (67 samples, 0.02%)</title><rect x="99.3377%" y="1525" width="0.0232%" height="15" fill="rgb(224,144,4)"/><text x="99.5877%" y="1535.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (114 samples, 0.04%)</title><rect x="99.3307%" y="1557" width="0.0396%" height="15" fill="rgb(211,140,38)"/><text x="99.5807%" y="1567.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (103 samples, 0.04%)</title><rect x="99.3345%" y="1541" width="0.0357%" height="15" fill="rgb(252,189,15)"/><text x="99.5845%" y="1551.50"></text></g><g><title>&lt;tokio::io::driver::scheduled_io::Readiness as core::future::future::Future&gt;::poll (683 samples, 0.24%)</title><rect x="99.1552%" y="1573" width="0.2370%" height="15" fill="rgb(251,175,23)"/><text x="99.4052%" y="1583.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (46 samples, 0.02%)</title><rect x="99.3762%" y="1557" width="0.0160%" height="15" fill="rgb(212,184,11)"/><text x="99.6262%" y="1567.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (41 samples, 0.01%)</title><rect x="99.3984%" y="1493" width="0.0142%" height="15" fill="rgb(217,205,6)"/><text x="99.6484%" y="1503.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (59 samples, 0.02%)</title><rect x="99.3959%" y="1509" width="0.0205%" height="15" fill="rgb(235,45,45)"/><text x="99.6459%" y="1519.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.03%)</title><rect x="99.3946%" y="1541" width="0.0274%" height="15" fill="rgb(211,157,53)"/><text x="99.6446%" y="1551.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.03%)</title><rect x="99.3946%" y="1525" width="0.0274%" height="15" fill="rgb(212,13,8)"/><text x="99.6446%" y="1535.50"></text></g><g><title>&lt;tokio::io::driver::scheduled_io::Waiter as tokio::util::linked_list::Link&gt;::pointers (47 samples, 0.02%)</title><rect x="99.4404%" y="1525" width="0.0163%" height="15" fill="rgb(218,80,36)"/><text x="99.6904%" y="1535.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (881 samples, 0.31%)</title><rect x="99.1552%" y="1717" width="0.3057%" height="15" fill="rgb(211,123,43)"/><text x="99.4052%" y="1727.50"></text></g><g><title>tokio::io::driver::registration::Registration::async_io::{{closure}} (881 samples, 0.31%)</title><rect x="99.1552%" y="1701" width="0.3057%" height="15" fill="rgb(206,165,2)"/><text x="99.4052%" y="1711.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (881 samples, 0.31%)</title><rect x="99.1552%" y="1685" width="0.3057%" height="15" fill="rgb(248,63,35)"/><text x="99.4052%" y="1695.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}} (881 samples, 0.31%)</title><rect x="99.1552%" y="1669" width="0.3057%" height="15" fill="rgb(219,133,41)"/><text x="99.4052%" y="1679.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (881 samples, 0.31%)</title><rect x="99.1552%" y="1653" width="0.3057%" height="15" fill="rgb(206,175,46)"/><text x="99.4052%" y="1663.50"></text></g><g><title>tokio::io::driver::registration::Registration::readiness::{{closure}}::{{closure}} (881 samples, 0.31%)</title><rect x="99.1552%" y="1637" width="0.3057%" height="15" fill="rgb(224,41,35)"/><text x="99.4052%" y="1647.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (881 samples, 0.31%)</title><rect x="99.1552%" y="1621" width="0.3057%" height="15" fill="rgb(226,113,24)"/><text x="99.4052%" y="1631.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (881 samples, 0.31%)</title><rect x="99.1552%" y="1605" width="0.3057%" height="15" fill="rgb(219,51,41)"/><text x="99.4052%" y="1615.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::readiness::{{closure}} (881 samples, 0.31%)</title><rect x="99.1552%" y="1589" width="0.3057%" height="15" fill="rgb(220,145,47)"/><text x="99.4052%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place (198 samples, 0.07%)</title><rect x="99.3921%" y="1573" width="0.0687%" height="15" fill="rgb(239,121,47)"/><text x="99.6421%" y="1583.50"></text></g><g><title>&lt;tokio::io::driver::scheduled_io::Readiness as core::ops::drop::Drop&gt;::drop (198 samples, 0.07%)</title><rect x="99.3921%" y="1557" width="0.0687%" height="15" fill="rgb(207,60,40)"/><text x="99.6421%" y="1567.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (112 samples, 0.04%)</title><rect x="99.4220%" y="1541" width="0.0389%" height="15" fill="rgb(224,229,11)"/><text x="99.6720%" y="1551.50"></text></g><g><title>mio::io_source::SelectorId::associate (37 samples, 0.01%)</title><rect x="99.4608%" y="1573" width="0.0128%" height="15" fill="rgb(252,28,32)"/><text x="99.7108%" y="1583.50"></text></g><g><title>activate_task (59 samples, 0.02%)</title><rect x="99.5739%" y="1365" width="0.0205%" height="15" fill="rgb(207,52,49)"/><text x="99.8239%" y="1375.50"></text></g><g><title>psi_task_change (30 samples, 0.01%)</title><rect x="99.5840%" y="1349" width="0.0104%" height="15" fill="rgb(243,51,50)"/><text x="99.8340%" y="1359.50"></text></g><g><title>ttwu_do_activate (76 samples, 0.03%)</title><rect x="99.5736%" y="1381" width="0.0264%" height="15" fill="rgb(212,92,21)"/><text x="99.8236%" y="1391.50"></text></g><g><title>default_wake_function (159 samples, 0.06%)</title><rect x="99.5486%" y="1413" width="0.0552%" height="15" fill="rgb(230,183,50)"/><text x="99.7986%" y="1423.50"></text></g><g><title>try_to_wake_up (154 samples, 0.05%)</title><rect x="99.5503%" y="1397" width="0.0534%" height="15" fill="rgb(225,48,9)"/><text x="99.8003%" y="1407.50"></text></g><g><title>autoremove_wake_function (167 samples, 0.06%)</title><rect x="99.5472%" y="1429" width="0.0579%" height="15" fill="rgb(254,44,4)"/><text x="99.7972%" y="1439.50"></text></g><g><title>__wake_up (177 samples, 0.06%)</title><rect x="99.5448%" y="1477" width="0.0614%" height="15" fill="rgb(252,128,37)"/><text x="99.7948%" y="1487.50"></text></g><g><title>__wake_up_common_lock (177 samples, 0.06%)</title><rect x="99.5448%" y="1461" width="0.0614%" height="15" fill="rgb(227,178,8)"/><text x="99.7948%" y="1471.50"></text></g><g><title>__wake_up_common (174 samples, 0.06%)</title><rect x="99.5458%" y="1445" width="0.0604%" height="15" fill="rgb(205,206,32)"/><text x="99.7958%" y="1455.50"></text></g><g><title>memcg_kmem_get_cache (32 samples, 0.01%)</title><rect x="99.6471%" y="1397" width="0.0111%" height="15" fill="rgb(220,218,22)"/><text x="99.8971%" y="1407.50"></text></g><g><title>kmem_cache_alloc (63 samples, 0.02%)</title><rect x="99.6367%" y="1413" width="0.0219%" height="15" fill="rgb(236,41,28)"/><text x="99.8867%" y="1423.50"></text></g><g><title>ep_ptable_queue_proc (91 samples, 0.03%)</title><rect x="99.6277%" y="1429" width="0.0316%" height="15" fill="rgb(219,37,7)"/><text x="99.8777%" y="1439.50"></text></g><g><title>tcp_poll (104 samples, 0.04%)</title><rect x="99.6236%" y="1445" width="0.0361%" height="15" fill="rgb(206,160,15)"/><text x="99.8736%" y="1455.50"></text></g><g><title>sock_poll (140 samples, 0.05%)</title><rect x="99.6152%" y="1461" width="0.0486%" height="15" fill="rgb(208,82,21)"/><text x="99.8652%" y="1471.50"></text></g><g><title>ep_item_poll.isra.0 (153 samples, 0.05%)</title><rect x="99.6128%" y="1477" width="0.0531%" height="15" fill="rgb(226,130,25)"/><text x="99.8628%" y="1487.50"></text></g><g><title>kmem_cache_alloc (56 samples, 0.02%)</title><rect x="99.6659%" y="1477" width="0.0194%" height="15" fill="rgb(212,72,24)"/><text x="99.9159%" y="1487.50"></text></g><g><title>ep_insert (474 samples, 0.16%)</title><rect x="99.5285%" y="1493" width="0.1645%" height="15" fill="rgb(206,28,16)"/><text x="99.7785%" y="1503.50"></text></g><g><title>__x64_sys_epoll_ctl (613 samples, 0.21%)</title><rect x="99.4900%" y="1509" width="0.2127%" height="15" fill="rgb(249,41,5)"/><text x="99.7400%" y="1519.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (657 samples, 0.23%)</title><rect x="99.4803%" y="1541" width="0.2280%" height="15" fill="rgb(233,96,48)"/><text x="99.7303%" y="1551.50"></text></g><g><title>do_syscall_64 (637 samples, 0.22%)</title><rect x="99.4872%" y="1525" width="0.2210%" height="15" fill="rgb(240,198,11)"/><text x="99.7372%" y="1535.50"></text></g><g><title>__GI_epoll_ctl (668 samples, 0.23%)</title><rect x="99.4775%" y="1557" width="0.2318%" height="15" fill="rgb(209,175,35)"/><text x="99.7275%" y="1567.50"></text></g><g><title>mio::poll::Registry::register (759 samples, 0.26%)</title><rect x="99.4608%" y="1621" width="0.2633%" height="15" fill="rgb(214,40,51)"/><text x="99.7108%" y="1631.50"></text></g><g><title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (759 samples, 0.26%)</title><rect x="99.4608%" y="1605" width="0.2633%" height="15" fill="rgb(252,56,4)"/><text x="99.7108%" y="1615.50"></text></g><g><title>&lt;mio::io_source::IoSource&lt;T&gt; as mio::event::source::Source&gt;::register (759 samples, 0.26%)</title><rect x="99.4608%" y="1589" width="0.2633%" height="15" fill="rgb(219,131,5)"/><text x="99.7108%" y="1599.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::register (722 samples, 0.25%)</title><rect x="99.4737%" y="1573" width="0.2505%" height="15" fill="rgb(223,67,53)"/><text x="99.7237%" y="1583.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (34 samples, 0.01%)</title><rect x="99.7492%" y="1573" width="0.0118%" height="15" fill="rgb(227,154,8)"/><text x="99.9992%" y="1583.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (51 samples, 0.02%)</title><rect x="99.7439%" y="1589" width="0.0177%" height="15" fill="rgb(216,174,51)"/><text x="99.9939%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (55 samples, 0.02%)</title><rect x="99.7672%" y="1557" width="0.0191%" height="15" fill="rgb(239,60,34)"/><text x="100.0172%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (77 samples, 0.03%)</title><rect x="99.7658%" y="1573" width="0.0267%" height="15" fill="rgb(236,165,48)"/><text x="100.0158%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (109 samples, 0.04%)</title><rect x="99.7616%" y="1589" width="0.0378%" height="15" fill="rgb(210,37,26)"/><text x="100.0116%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place (60 samples, 0.02%)</title><rect x="99.8126%" y="1589" width="0.0208%" height="15" fill="rgb(211,3,17)"/><text x="100.0626%" y="1599.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.02%)</title><rect x="99.8147%" y="1573" width="0.0187%" height="15" fill="rgb(234,88,49)"/><text x="100.0647%" y="1583.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (29 samples, 0.01%)</title><rect x="99.8522%" y="1541" width="0.0101%" height="15" fill="rgb(233,40,17)"/><text x="100.1022%" y="1551.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (56 samples, 0.02%)</title><rect x="99.8484%" y="1557" width="0.0194%" height="15" fill="rgb(235,127,31)"/><text x="100.0984%" y="1567.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (103 samples, 0.04%)</title><rect x="99.8401%" y="1589" width="0.0357%" height="15" fill="rgb(248,167,17)"/><text x="100.0901%" y="1599.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (92 samples, 0.03%)</title><rect x="99.8439%" y="1573" width="0.0319%" height="15" fill="rgb(218,179,8)"/><text x="100.0939%" y="1583.50"></text></g><g><title>tokio::util::bit::Pack::pack_lossy (33 samples, 0.01%)</title><rect x="99.8897%" y="1541" width="0.0114%" height="15" fill="rgb(216,92,14)"/><text x="100.1397%" y="1551.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (81 samples, 0.03%)</title><rect x="99.8758%" y="1589" width="0.0281%" height="15" fill="rgb(221,198,46)"/><text x="100.1258%" y="1599.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::allocate::{{closure}} (70 samples, 0.02%)</title><rect x="99.8796%" y="1573" width="0.0243%" height="15" fill="rgb(244,7,25)"/><text x="100.1296%" y="1583.50"></text></g><g><title>&lt;tokio::io::driver::scheduled_io::ScheduledIo as tokio::util::slab::Entry&gt;::reset (67 samples, 0.02%)</title><rect x="99.8806%" y="1557" width="0.0232%" height="15" fill="rgb(233,75,6)"/><text x="100.1306%" y="1567.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (43 samples, 0.01%)</title><rect x="99.9056%" y="1573" width="0.0149%" height="15" fill="rgb(240,189,41)"/><text x="100.1556%" y="1583.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,211 samples, 0.77%)</title><rect x="99.1552%" y="1749" width="0.7671%" height="15" fill="rgb(237,157,21)"/><text x="99.4052%" y="1759.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::{{closure}} (2,211 samples, 0.77%)</title><rect x="99.1552%" y="1733" width="0.7671%" height="15" fill="rgb(210,136,49)"/><text x="99.4052%" y="1743.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1,330 samples, 0.46%)</title><rect x="99.4608%" y="1717" width="0.4615%" height="15" fill="rgb(210,68,29)"/><text x="99.7108%" y="1727.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (1,330 samples, 0.46%)</title><rect x="99.4608%" y="1701" width="0.4615%" height="15" fill="rgb(247,207,20)"/><text x="99.7108%" y="1711.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (1,330 samples, 0.46%)</title><rect x="99.4608%" y="1685" width="0.4615%" height="15" fill="rgb(224,73,48)"/><text x="99.7108%" y="1695.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest_and_handle (1,330 samples, 0.46%)</title><rect x="99.4608%" y="1669" width="0.4615%" height="15" fill="rgb(215,136,47)"/><text x="99.7108%" y="1679.50"></text></g><g><title>tokio::io::driver::registration::Registration::new_with_interest_and_handle (1,330 samples, 0.46%)</title><rect x="99.4608%" y="1653" width="0.4615%" height="15" fill="rgb(232,222,16)"/><text x="99.7108%" y="1663.50"></text></g><g><title>tokio::io::driver::Inner::add_source (1,330 samples, 0.46%)</title><rect x="99.4608%" y="1637" width="0.4615%" height="15" fill="rgb(249,202,47)"/><text x="99.7108%" y="1647.50"></text></g><g><title>tokio::util::slab::Allocator&lt;T&gt;::allocate (571 samples, 0.20%)</title><rect x="99.7242%" y="1621" width="0.1981%" height="15" fill="rgb(236,56,8)"/><text x="99.9742%" y="1631.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::allocate (571 samples, 0.20%)</title><rect x="99.7242%" y="1605" width="0.1981%" height="15" fill="rgb(222,6,3)"/><text x="99.9742%" y="1615.50"></text></g><g><title>tokio::util::slab::Slot&lt;T&gt;::gen_ref (53 samples, 0.02%)</title><rect x="99.9039%" y="1589" width="0.0184%" height="15" fill="rgb(254,222,28)"/><text x="100.1539%" y="1599.50"></text></g><g><title>_int_malloc (33 samples, 0.01%)</title><rect x="99.9230%" y="1541" width="0.0114%" height="15" fill="rgb(219,57,23)"/><text x="100.1730%" y="1551.50"></text></g><g><title>__GI___libc_malloc (39 samples, 0.01%)</title><rect x="99.9223%" y="1557" width="0.0135%" height="15" fill="rgb(251,106,48)"/><text x="100.1723%" y="1567.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.01%)</title><rect x="99.9223%" y="1573" width="0.0142%" height="15" fill="rgb(242,2,23)"/><text x="100.1723%" y="1583.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (52 samples, 0.02%)</title><rect x="99.9223%" y="1637" width="0.0180%" height="15" fill="rgb(212,109,31)"/><text x="100.1723%" y="1647.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.02%)</title><rect x="99.9223%" y="1621" width="0.0180%" height="15" fill="rgb(241,9,22)"/><text x="100.1723%" y="1631.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (52 samples, 0.02%)</title><rect x="99.9223%" y="1605" width="0.0180%" height="15" fill="rgb(209,64,27)"/><text x="100.1723%" y="1615.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.02%)</title><rect x="99.9223%" y="1589" width="0.0180%" height="15" fill="rgb(248,13,44)"/><text x="100.1723%" y="1599.50"></text></g><g><title>tokio::task::spawn::spawn (71 samples, 0.02%)</title><rect x="99.9223%" y="1733" width="0.0246%" height="15" fill="rgb(213,86,6)"/><text x="100.1723%" y="1743.50"></text></g><g><title>tokio::runtime::spawner::Spawner::spawn (71 samples, 0.02%)</title><rect x="99.9223%" y="1717" width="0.0246%" height="15" fill="rgb(247,11,18)"/><text x="100.1723%" y="1727.50"></text></g><g><title>tokio::runtime::thread_pool::Spawner::spawn (71 samples, 0.02%)</title><rect x="99.9223%" y="1701" width="0.0246%" height="15" fill="rgb(252,31,11)"/><text x="100.1723%" y="1711.50"></text></g><g><title>tokio::runtime::task::joinable (71 samples, 0.02%)</title><rect x="99.9223%" y="1685" width="0.0246%" height="15" fill="rgb(215,63,51)"/><text x="100.1723%" y="1695.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (71 samples, 0.02%)</title><rect x="99.9223%" y="1669" width="0.0246%" height="15" fill="rgb(222,180,4)"/><text x="100.1723%" y="1679.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (71 samples, 0.02%)</title><rect x="99.9223%" y="1653" width="0.0246%" height="15" fill="rgb(233,4,23)"/><text x="100.1723%" y="1663.50"></text></g><g><title>[unknown] (16,346 samples, 5.67%)</title><rect x="94.2804%" y="1781" width="5.6713%" height="15" fill="rgb(230,116,22)"/><text x="94.5304%" y="1791.50">[unknow..</text></g><g><title>tunneler::server::server::Server::start::{{closure}} (2,296 samples, 0.80%)</title><rect x="99.1552%" y="1765" width="0.7966%" height="15" fill="rgb(222,20,14)"/><text x="99.4052%" y="1775.50"></text></g><g><title>tunneler::server::client::client::Client::new_con (85 samples, 0.03%)</title><rect x="99.9223%" y="1749" width="0.0295%" height="15" fill="rgb(210,176,43)"/><text x="100.1723%" y="1759.50"></text></g><g><title>__perf_event_task_sched_in (65 samples, 0.02%)</title><rect x="99.9573%" y="1717" width="0.0226%" height="15" fill="rgb(219,67,32)"/><text x="100.2073%" y="1727.50"></text></g><g><title>schedule_tail (104 samples, 0.04%)</title><rect x="99.9518%" y="1749" width="0.0361%" height="15" fill="rgb(228,91,39)"/><text x="100.2018%" y="1759.50"></text></g><g><title>finish_task_switch (96 samples, 0.03%)</title><rect x="99.9545%" y="1733" width="0.0333%" height="15" fill="rgb(254,63,14)"/><text x="100.2045%" y="1743.50"></text></g><g><title>ret_from_fork (105 samples, 0.04%)</title><rect x="99.9518%" y="1765" width="0.0364%" height="15" fill="rgb(216,171,39)"/><text x="100.2018%" y="1775.50"></text></g><g><title>__GI___clone (114 samples, 0.04%)</title><rect x="99.9518%" y="1781" width="0.0396%" height="15" fill="rgb(248,68,25)"/><text x="100.2018%" y="1791.50"></text></g><g><title>all (288,221 samples, 100%)</title><rect x="0.0000%" y="1813" width="100.0000%" height="15" fill="rgb(239,63,16)"/><text x="0.2500%" y="1823.50"></text></g><g><title>tunneler (16,508 samples, 5.73%)</title><rect x="94.2725%" y="1797" width="5.7275%" height="15" fill="rgb(225,111,43)"/><text x="94.5225%" y="1807.50">tunneler</text></g></svg></svg>